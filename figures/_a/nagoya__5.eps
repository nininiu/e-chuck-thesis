%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R7522.tmp.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Richard
%%CreationDate: 2014/06/16, 08:58:03
%%BoundingBox: 0 0 227 241
%%HiResBoundingBox: 0 0 226.8981 240.6701
%%CropBox: 0 0 226.8981 240.6701
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1353 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-06-16T08:57:41+08:00"
   xmp:CreateDate="2014-06-16T08:57:41+08:00"
   xmp:MetadataDate="2014-06-16T08:57:41+08:00"
   xmp:CreatorTool="dvipsk 5.86 p1.5e Copyright 1996-2001 ASCII Corp.(www-ptex@ascii.co.jp)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:c459f0fb-3ff4-4657-921b-46d858917c18"
   xmpMM:InstanceID="uuid:3545523b-ab07-4f1b-ab01-aaadf5576a0b"
   pdf:Producer="Acrobat Distiller 7.0.5 (Windows)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Plasma and Fusion Research,ISSN 1880-6821</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">http://www.jspf.or.jp/PFR/ </rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>The Japan Society of Plasma Science and Nuclear Fusion Research</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
/0 {
<~!!*-'"9eu7#RLhG$k3[W&.oNg'GVB"(`=52*$$(B+<_pR,UFcb-n-Vr/1iJ-0JP==1c70M3&s#]4?Ykm
5X@_(6q'R884cEH9MJ8X:f1+h<)lt#=BSg3>[:ZC?t!MSA7]@cBPD3sCi+'.E,fo>FEMbNG^4U^I!pHn
J:W<)KS>/9Ll%"IN/`jYOHG]iPa.Q$R$jD4S=Q7DTV8*TUnsrdW2ZetXKAY/Yd(L?['d?O\@K2_]Y2%o
^qmn*`5Ta:aN;TJbg"GZd*^:jeCE.%f\,!5gtgiEi8N\UjQ5OekiqBum-X60nF?)@o_%qPq"ad`r;HWp
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 0 sub 255 div mul 0 add
dup 0 lt{pop 0 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
/1 {
<~J,k+MJH:=QJc^OUK*-aYKEQs]Ka!0aL'EBeLBiTiL^8fmM$]#qM@,5uM[PH$N!tZ(N=Cl,NXh)0Nt7;4
O:[M8OV*_<OqNq@P7s.DPSB@HPnfRLQ55dPQPZ!TQl)3XR2ME\RMqW`Ri@idS/e&hSK48lSfXJpT-'\t
THKo#Tcp,'U*?>+UEcP/Ua2b3V'Vt7VC&1;V^JC?W$nUCW@=gGW[b$KX"16OX=UHSXY$ZWXtHl[Y:m)_
YV<;cYq`MgZ8/_kZSSqoZo#.s[5GA"[PkS&[l:e*\2_".\N.42\iRF6]0!X:]KEj>]fj'B^-99F^H]KJ
^d,]N_*PoR_Eu,V_aD>Z`'hP^`C7bb`^[tfa%+1ja@OCna[sUrb"Bh!b=g%%bY67)btZI-c;)[1cVMm5
cqr*9d8A<=dSeNAdo4`Ee5XrIeQ(/MelLAQf2pSUfN?eYfid"]g034agKWFegg&Xih-JjmhHo'qhd>9u
i*bL$iF1^(iaUp,j(%-0jCI?4j^mQ8k%<c<k@`u@k\02Dl"TDHl>#VLlYGhPltl%Tm;;7XmV_I\mr.[`
n8RmdnT"*hnoF<lo5jNpoQ9`tol]s#p3-0'pNQB+piuT/q0Df3qKi#7qg85;r-\G?rI+YCrdOkGs*t(K
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 -1 sub 255 div mul -1 add
dup -1 lt{pop -1 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -240.67 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 240.67 li
226.898 240.67 li
226.898 0 li
cp
clp
.607 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
27.84 213.636 mo
28.734 213.636 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
28.734 213.939 mo
27.968 213.939 li
27.968 213.332 li
28.287 212.406 li
28.894 212.406 li
28.894 213.014 li
f
28.287 212.71 mo
29.213 212.71 li
28.575 212.71 mo
29.341 212.71 li
28.734 212.71 mo
29.5 212.71 li
28.894 212.71 mo
29.66 212.71 li
@
29.054 213.014 mo
29.054 212.406 li
29.66 212.406 li
29.819 213.332 li
29.819 213.939 li
29.213 213.939 li
f
29.819 213.939 mo
29.213 213.939 li
29.213 213.332 li
29.5 212.406 li
30.107 212.406 li
30.107 213.014 li
f
29.5 212.71 mo
30.267 212.71 li
29.66 212.71 mo
30.426 212.71 li
@
30.426 213.014 mo
29.819 213.014 li
29.819 212.406 li
29.947 211.321 li
30.586 211.321 li
30.586 212.088 li
f
29.947 212.088 mo
29.947 211.321 li
30.586 211.321 li
30.873 213.332 li
30.873 213.939 li
30.267 213.939 li
f
30.267 213.636 mo
31.033 213.636 li
@
31.033 213.939 mo
30.426 213.939 li
30.426 213.332 li
30.586 212.406 li
31.192 212.406 li
31.192 213.014 li
f
30.586 212.71 mo
31.352 212.71 li
30.714 212.71 mo
31.48 212.71 li
30.873 212.71 mo
31.959 212.71 li
@
31.192 213.014 mo
31.192 212.406 li
31.959 212.406 li
32.086 213.332 li
32.086 213.939 li
31.352 213.939 li
f
32.086 213.939 mo
31.352 213.939 li
31.352 213.332 li
31.48 212.406 li
32.246 212.406 li
32.246 213.014 li
f
31.48 212.71 mo
32.406 212.71 li
@
32.406 213.014 mo
31.799 213.014 li
31.799 212.406 li
32.086 211.321 li
32.725 211.321 li
32.725 212.088 li
f
32.086 212.088 mo
32.086 211.321 li
32.725 211.321 li
32.853 212.406 li
32.853 213.014 li
32.246 213.014 li
f
32.246 212.71 mo
33.012 212.71 li
32.406 212.71 mo
33.172 212.71 li
32.565 212.71 mo
33.331 212.71 li
@
33.331 213.014 mo
32.725 213.014 li
32.725 212.406 li
33.012 211.321 li
33.619 211.321 li
33.619 212.088 li
f
33.012 212.088 mo
33.012 211.321 li
33.619 211.321 li
33.778 212.406 li
33.778 213.014 li
33.172 213.014 li
f
33.172 212.71 mo
33.938 212.71 li
33.331 212.71 mo
34.097 212.71 li
33.459 212.71 mo
34.385 212.71 li
@
33.778 213.014 mo
33.778 212.406 li
34.385 212.406 li
34.544 213.332 li
34.544 213.939 li
33.938 213.939 li
f
34.544 213.939 mo
33.938 213.939 li
33.938 213.332 li
34.097 212.406 li
34.704 212.406 li
34.704 213.014 li
f
34.097 212.71 mo
34.831 212.71 li
34.225 212.71 mo
34.992 212.71 li
34.385 212.71 mo
35.47 212.71 li
34.704 212.71 mo
35.598 212.71 li
34.831 212.71 mo
35.757 212.71 li
34.992 212.71 mo
35.917 212.71 li
@
35.31 213.014 mo
35.31 212.406 li
35.917 212.406 li
36.205 213.332 li
36.205 213.939 li
35.598 213.939 li
f
36.205 213.939 mo
35.598 213.939 li
35.598 213.332 li
35.757 212.406 li
36.364 212.406 li
36.364 213.014 li
f
35.757 212.71 mo
36.524 212.71 li
35.917 212.71 mo
36.684 212.71 li
36.077 212.71 mo
36.843 212.71 li
36.205 212.71 mo
37.13 212.71 li
36.524 212.71 mo
37.29 212.71 li
36.684 212.71 mo
37.45 212.71 li
36.843 212.71 mo
37.609 212.71 li
@
37.609 213.014 mo
36.971 213.014 li
36.971 212.406 li
37.29 211.321 li
37.897 211.321 li
37.897 212.088 li
f
37.29 212.088 mo
37.29 211.321 li
37.897 211.321 li
38.056 212.406 li
38.056 213.014 li
37.45 213.014 li
f
37.45 212.71 mo
38.216 212.71 li
@
37.609 213.014 mo
37.609 212.406 li
38.216 212.406 li
38.344 213.332 li
38.344 213.939 li
37.737 213.939 li
f
37.737 213.636 mo
38.503 213.636 li
@
38.503 213.939 mo
37.897 213.939 li
37.897 213.332 li
38.216 212.406 li
38.982 212.406 li
38.982 213.014 li
f
38.216 212.71 mo
39.109 212.71 li
38.344 212.71 mo
39.27 212.71 li
@
38.503 213.014 mo
38.503 212.406 li
39.27 212.406 li
39.429 213.332 li
39.429 213.939 li
38.822 213.939 li
f
38.822 213.636 mo
39.716 213.636 li
@
39.716 213.939 mo
39.109 213.939 li
39.109 213.332 li
39.27 212.406 li
39.876 212.406 li
39.876 213.014 li
f
39.27 213.014 mo
39.27 212.406 li
39.876 212.406 li
40.035 213.332 li
40.035 213.939 li
39.429 213.939 li
f
40.035 213.939 mo
39.429 213.939 li
39.429 213.332 li
39.588 212.406 li
40.195 212.406 li
40.195 213.014 li
f
39.588 212.71 mo
40.355 212.71 li
39.716 212.71 mo
40.642 212.71 li
@
40.035 213.014 mo
40.035 212.406 li
40.642 212.406 li
40.802 213.332 li
40.802 213.939 li
40.195 213.939 li
f
40.802 213.939 mo
40.195 213.939 li
40.195 213.332 li
40.355 212.406 li
40.961 212.406 li
40.961 213.014 li
f
40.355 212.71 mo
41.089 212.71 li
40.482 212.71 mo
41.408 212.71 li
40.802 212.71 mo
41.567 212.71 li
40.961 212.71 mo
41.727 212.71 li
@
41.089 213.014 mo
41.089 212.406 li
41.727 212.406 li
41.855 213.332 li
41.855 213.939 li
41.249 213.939 li
f
41.855 213.939 mo
41.249 213.939 li
41.249 213.332 li
41.567 212.406 li
42.334 212.406 li
42.334 213.014 li
f
41.567 212.71 mo
42.494 212.71 li
41.727 212.71 mo
42.622 212.71 li
@
41.855 213.014 mo
41.855 212.406 li
42.622 212.406 li
42.781 213.332 li
42.781 213.939 li
42.015 213.939 li
f
42.781 213.939 mo
42.015 213.939 li
42.015 213.332 li
42.334 212.406 li
42.94 212.406 li
42.94 213.014 li
f
42.334 212.71 mo
43.228 212.71 li
42.622 212.71 mo
43.387 212.71 li
42.781 212.71 mo
43.547 212.71 li
42.94 212.71 mo
43.707 212.71 li
43.1 212.71 mo
43.994 212.71 li
@
43.387 213.014 mo
43.387 212.406 li
43.994 212.406 li
44.154 213.332 li
44.154 213.939 li
43.547 213.939 li
f
44.154 213.939 mo
43.547 213.939 li
43.547 213.332 li
43.707 212.406 li
44.313 212.406 li
44.313 213.014 li
f
43.707 212.71 mo
44.473 212.71 li
43.866 212.71 mo
44.601 212.71 li
43.994 212.71 mo
44.919 212.71 li
44.313 212.71 mo
45.08 212.71 li
44.473 212.71 mo
45.239 212.71 li
44.601 212.71 mo
45.367 212.71 li
44.76 212.71 mo
45.846 212.71 li
@
45.08 213.014 mo
45.08 212.406 li
45.846 212.406 li
45.973 213.332 li
45.973 213.939 li
45.239 213.939 li
f
45.973 213.939 mo
45.239 213.939 li
45.239 213.332 li
45.367 212.406 li
46.133 212.406 li
46.133 213.014 li
f
45.367 212.71 mo
46.292 212.71 li
45.686 212.71 mo
46.452 212.71 li
45.846 212.71 mo
46.74 212.71 li
46.133 212.71 mo
46.899 212.71 li
46.292 212.71 mo
47.059 212.71 li
@
46.452 213.014 mo
46.452 212.406 li
47.059 212.406 li
47.218 213.332 li
47.218 213.939 li
46.612 213.939 li
f
46.612 213.636 mo
47.505 213.636 li
46.899 213.636 mo
47.665 213.636 li
@
47.665 213.939 mo
47.059 213.939 li
47.059 213.332 li
47.218 212.406 li
47.825 212.406 li
47.825 213.014 li
f
47.218 212.71 mo
47.985 212.71 li
47.346 212.71 mo
48.112 212.71 li
47.505 212.71 mo
48.432 212.71 li
47.825 212.71 mo
48.591 212.71 li
@
47.985 213.014 mo
47.985 212.406 li
48.591 212.406 li
48.75 213.332 li
48.75 213.939 li
48.112 213.939 li
f
48.75 213.939 mo
48.112 213.939 li
48.112 213.332 li
48.272 212.406 li
48.878 212.406 li
48.878 213.014 li
f
48.272 213.014 mo
48.272 212.406 li
48.878 212.406 li
49.357 213.332 li
49.357 213.939 li
48.591 213.939 li
f
49.357 213.939 mo
48.591 213.939 li
48.591 213.332 li
48.75 212.406 li
49.485 212.406 li
49.485 213.014 li
f
48.75 212.71 mo
49.644 212.71 li
@
48.878 213.014 mo
48.878 212.406 li
49.644 212.406 li
49.804 213.332 li
49.804 213.939 li
49.197 213.939 li
f
49.197 213.636 mo
49.964 213.636 li
@
49.964 213.939 mo
49.357 213.939 li
49.357 213.332 li
49.644 212.406 li
50.251 212.406 li
50.251 213.014 li
f
49.644 213.014 mo
49.644 212.406 li
50.251 212.406 li
50.411 213.332 li
50.411 213.939 li
49.804 213.939 li
f
50.411 213.939 mo
49.804 213.939 li
49.804 213.332 li
49.964 212.406 li
50.57 212.406 li
50.57 213.014 li
f
49.964 212.71 mo
50.73 212.71 li
50.123 212.71 mo
51.018 212.71 li
50.411 212.71 mo
51.177 212.71 li
50.57 212.71 mo
51.336 212.71 li
50.73 212.71 mo
51.496 212.71 li
50.857 212.71 mo
51.624 212.71 li
51.018 212.71 mo
51.943 212.71 li
51.336 212.71 mo
52.103 212.71 li
51.496 212.71 mo
52.231 212.71 li
51.624 212.71 mo
52.39 212.71 li
51.783 212.71 mo
52.869 212.71 li
@
52.103 213.014 mo
52.103 212.406 li
52.869 212.406 li
52.997 213.332 li
52.997 213.939 li
52.231 213.939 li
f
52.997 213.939 mo
52.231 213.939 li
52.231 213.332 li
52.39 212.406 li
53.156 212.406 li
53.156 213.014 li
f
52.39 213.014 mo
52.39 212.406 li
53.156 212.406 li
53.315 213.332 li
53.315 213.939 li
52.71 213.939 li
f
53.315 213.939 mo
52.71 213.939 li
52.71 213.332 li
52.997 212.406 li
53.603 212.406 li
53.603 213.014 li
f
52.997 212.71 mo
53.763 212.71 li
@
53.156 213.014 mo
53.156 212.406 li
53.763 212.406 li
53.922 213.332 li
53.922 213.939 li
53.315 213.939 li
f
53.922 213.939 mo
53.315 213.939 li
53.315 213.332 li
53.475 212.406 li
54.082 212.406 li
54.082 213.014 li
f
53.475 212.71 mo
54.242 212.71 li
@
53.603 213.014 mo
53.603 212.406 li
54.242 212.406 li
54.529 213.332 li
54.529 213.939 li
53.922 213.939 li
f
54.529 213.939 mo
53.922 213.939 li
53.922 213.332 li
54.082 212.406 li
54.689 212.406 li
54.689 213.014 li
f
54.082 212.71 mo
54.848 212.71 li
54.242 212.71 mo
55.008 212.71 li
54.37 212.71 mo
55.295 212.71 li
@
54.689 213.014 mo
54.689 212.406 li
55.295 212.406 li
55.455 213.332 li
55.455 213.939 li
54.848 213.939 li
f
55.455 213.939 mo
54.848 213.939 li
54.848 213.332 li
55.008 212.406 li
55.614 212.406 li
55.614 213.014 li
f
55.008 213.014 mo
55.008 212.406 li
55.614 212.406 li
55.742 213.332 li
55.742 213.939 li
55.135 213.939 li
f
55.742 213.939 mo
55.135 213.939 li
55.135 213.332 li
55.295 212.406 li
55.902 212.406 li
55.902 213.014 li
f
55.295 212.71 mo
56.38 212.71 li
55.614 212.71 mo
56.508 212.71 li
55.742 212.71 mo
56.668 212.71 li
55.902 212.71 mo
56.828 212.71 li
56.221 212.71 mo
57.115 212.71 li
56.508 212.71 mo
57.274 212.71 li
56.668 212.71 mo
57.434 212.71 li
56.828 212.71 mo
57.594 212.71 li
56.987 212.71 mo
57.753 212.71 li
57.115 212.71 mo
58.04 212.71 li
57.434 212.71 mo
58.2 212.71 li
57.594 212.71 mo
58.36 212.71 li
57.753 212.71 mo
58.487 212.71 li
@
57.881 213.014 mo
57.881 212.406 li
58.487 212.406 li
58.807 213.332 li
58.807 213.939 li
58.2 213.939 li
f
58.807 213.939 mo
58.2 213.939 li
58.2 213.332 li
58.36 212.406 li
58.966 212.406 li
58.966 213.014 li
f
58.36 213.014 mo
58.36 212.406 li
58.966 212.406 li
59.126 213.332 li
59.126 213.939 li
58.487 213.939 li
f
58.487 213.636 mo
59.253 213.636 li
58.648 213.636 mo
59.413 213.636 li
@
59.413 213.939 mo
58.807 213.939 li
58.807 213.332 li
59.126 212.406 li
59.892 212.406 li
59.892 213.014 li
f
59.126 212.71 mo
60.02 212.71 li
59.253 212.71 mo
60.18 212.71 li
59.413 212.71 mo
60.339 212.71 li
@
59.733 213.014 mo
59.733 212.406 li
60.339 212.406 li
60.627 213.332 li
60.627 213.939 li
60.02 213.939 li
f
60.627 213.939 mo
60.02 213.939 li
60.02 213.332 li
60.18 212.406 li
60.786 212.406 li
60.786 213.014 li
f
60.18 212.71 mo
60.945 212.71 li
60.339 212.71 mo
61.105 212.71 li
@
60.498 213.014 mo
60.498 212.406 li
61.105 212.406 li
61.265 213.332 li
61.265 213.939 li
60.627 213.939 li
f
60.627 213.636 mo
61.552 213.636 li
@
61.552 213.939 mo
60.945 213.939 li
60.945 213.332 li
61.105 212.406 li
61.712 212.406 li
61.712 213.014 li
f
61.105 212.71 mo
61.871 212.71 li
61.265 212.71 mo
61.999 212.71 li
61.393 212.71 mo
62.318 212.71 li
61.712 212.71 mo
62.477 212.71 li
61.871 212.71 mo
62.638 212.71 li
61.999 212.71 mo
62.765 212.71 li
@
62.159 213.014 mo
62.159 212.406 li
62.765 212.406 li
62.925 213.332 li
62.925 213.939 li
62.318 213.939 li
f
62.318 213.636 mo
63.372 213.636 li
@
63.372 213.939 mo
62.638 213.939 li
62.638 213.332 li
62.765 212.406 li
63.531 212.406 li
63.531 213.014 li
f
62.765 212.71 mo
63.691 212.71 li
62.925 212.71 mo
63.851 212.71 li
63.244 212.71 mo
64.138 212.71 li
@
64.138 213.014 mo
63.531 213.014 li
63.531 212.406 li
63.691 211.321 li
64.298 211.321 li
64.298 212.088 li
f
63.691 212.088 mo
63.691 211.321 li
64.298 211.321 li
64.457 212.406 li
64.457 213.014 li
63.851 213.014 li
f
63.851 212.71 mo
64.617 212.71 li
64.011 212.71 mo
64.745 212.71 li
64.138 212.71 mo
65.064 212.71 li
@
64.457 213.014 mo
64.457 212.406 li
65.064 212.406 li
65.223 213.332 li
65.223 213.939 li
64.617 213.939 li
f
65.223 213.939 mo
64.617 213.939 li
64.617 213.332 li
64.745 212.406 li
65.383 212.406 li
65.383 213.014 li
f
64.745 212.71 mo
65.511 212.71 li
64.904 212.71 mo
65.83 212.71 li
65.223 212.71 mo
65.99 212.71 li
65.383 212.71 mo
66.149 212.71 li
65.511 212.71 mo
66.277 212.71 li
@
65.67 213.014 mo
65.67 212.406 li
66.277 212.406 li
66.755 213.332 li
66.755 213.939 li
65.99 213.939 li
f
66.755 213.939 mo
65.99 213.939 li
65.99 213.332 li
66.149 212.406 li
66.883 212.406 li
66.883 213.014 li
f
66.149 212.71 mo
67.043 212.71 li
66.277 212.71 mo
67.203 212.71 li
66.437 212.71 mo
67.362 212.71 li
@
66.755 213.014 mo
66.755 212.406 li
67.362 212.406 li
67.65 213.332 li
67.65 213.939 li
67.043 213.939 li
f
67.65 213.939 mo
67.043 213.939 li
67.043 213.332 li
67.203 212.406 li
67.809 212.406 li
67.809 213.014 li
f
67.203 212.71 mo
67.969 212.71 li
67.362 212.71 mo
68.128 212.71 li
@
67.522 213.014 mo
67.522 212.406 li
68.128 212.406 li
68.416 213.332 li
68.416 213.939 li
67.809 213.939 li
f
67.809 213.636 mo
68.576 213.636 li
@
68.576 213.939 mo
67.969 213.939 li
67.969 213.332 li
68.128 212.406 li
68.735 212.406 li
68.735 213.014 li
f
68.128 213.014 mo
68.128 212.406 li
68.735 212.406 li
68.895 213.332 li
68.895 213.939 li
68.256 213.939 li
f
68.256 213.636 mo
69.023 213.636 li
68.416 213.636 mo
69.342 213.636 li
@
69.342 213.939 mo
68.735 213.939 li
68.735 213.332 li
68.895 212.406 li
69.501 212.406 li
69.501 213.014 li
f
68.895 212.71 mo
69.629 212.71 li
@
69.023 213.014 mo
69.023 212.406 li
69.629 212.406 li
69.789 213.332 li
69.789 213.939 li
69.182 213.939 li
f
69.789 213.939 mo
69.182 213.939 li
69.182 213.332 li
69.501 212.406 li
70.268 212.406 li
70.268 213.014 li
f
69.501 213.014 mo
69.501 212.406 li
70.268 212.406 li
70.396 213.332 li
70.396 213.939 li
69.629 213.939 li
f
70.396 213.939 mo
69.629 213.939 li
69.629 213.332 li
69.789 212.406 li
70.555 212.406 li
70.555 213.014 li
f
69.789 212.71 mo
70.714 212.71 li
69.948 212.71 mo
70.874 212.71 li
70.268 212.71 mo
71.161 212.71 li
@
70.555 213.014 mo
70.555 212.406 li
71.161 212.406 li
71.321 213.332 li
71.321 213.939 li
70.714 213.939 li
f
71.321 213.939 mo
70.714 213.939 li
70.714 213.332 li
70.874 212.406 li
71.481 212.406 li
71.481 213.014 li
f
70.874 212.71 mo
71.64 212.71 li
71.033 212.71 mo
71.928 212.71 li
71.321 212.71 mo
72.087 212.71 li
71.481 212.71 mo
72.247 212.71 li
71.64 212.71 mo
72.406 212.71 li
71.768 212.71 mo
72.534 212.71 li
71.928 212.71 mo
72.853 212.71 li
72.247 212.71 mo
73.013 212.71 li
72.406 212.71 mo
73.14 212.71 li
72.534 212.71 mo
73.3 212.71 li
72.693 212.71 mo
73.779 212.71 li
73.013 212.71 mo
73.907 212.71 li
73.14 212.71 mo
74.066 212.71 li
73.3 212.71 mo
74.226 212.71 li
@
73.46 213.014 mo
73.46 212.406 li
74.226 212.406 li
74.386 213.332 li
74.386 213.939 li
73.779 213.939 li
f
74.386 213.939 mo
73.779 213.939 li
73.779 213.332 li
74.066 212.406 li
74.673 212.406 li
74.673 213.014 li
f
74.066 212.71 mo
74.832 212.71 li
74.226 212.71 mo
74.992 212.71 li
74.386 212.71 mo
75.152 212.71 li
@
74.513 213.014 mo
74.513 212.406 li
75.152 212.406 li
75.439 213.332 li
75.439 213.939 li
74.832 213.939 li
f
75.439 213.939 mo
74.832 213.939 li
74.832 213.332 li
74.992 212.406 li
75.599 212.406 li
75.599 213.014 li
f
74.992 213.014 mo
74.992 212.406 li
75.599 212.406 li
75.759 213.332 li
75.759 213.939 li
75.152 213.939 li
f
75.152 213.636 mo
75.886 213.636 li
@
75.886 213.939 mo
75.279 213.939 li
75.279 213.332 li
75.439 212.406 li
76.045 212.406 li
76.045 213.014 li
f
75.439 213.014 mo
75.439 212.406 li
76.045 212.406 li
76.365 213.332 li
76.365 213.939 li
75.759 213.939 li
f
75.759 213.636 mo
76.524 213.636 li
75.886 213.636 mo
76.652 213.636 li
@
76.652 213.939 mo
76.045 213.939 li
76.045 213.332 li
76.206 211.321 li
76.812 211.321 li
76.812 212.088 li
f
76.206 212.088 mo
76.206 211.321 li
76.812 211.321 li
77.291 212.406 li
77.291 213.014 li
76.524 213.014 li
f
76.524 212.71 mo
77.418 212.71 li
76.652 212.71 mo
77.578 212.71 li
76.812 212.71 mo
77.738 212.71 li
76.971 212.71 mo
78.025 212.71 li
77.418 212.71 mo
78.185 212.71 li
77.578 212.71 mo
78.344 212.71 li
77.738 212.71 mo
78.503 212.71 li
77.898 212.71 mo
78.664 212.71 li
@
78.025 213.014 mo
78.025 212.406 li
78.664 212.406 li
78.951 213.332 li
78.951 213.939 li
78.344 213.939 li
f
78.951 213.939 mo
78.344 213.939 li
78.344 213.332 li
78.503 212.406 li
79.11 212.406 li
79.11 213.014 li
f
78.503 212.71 mo
79.27 212.71 li
78.664 212.71 mo
79.398 212.71 li
78.791 212.71 mo
79.717 212.71 li
79.11 212.71 mo
79.877 212.71 li
@
79.27 213.014 mo
79.27 212.406 li
79.876 212.406 li
80.036 213.332 li
80.036 213.939 li
79.398 213.939 li
f
80.036 213.939 mo
79.398 213.939 li
79.398 213.332 li
79.557 212.406 li
80.164 212.406 li
80.164 213.014 li
f
79.557 212.71 mo
80.323 212.71 li
79.717 212.71 mo
80.77 212.71 li
80.036 212.71 mo
80.93 212.71 li
80.164 212.71 mo
81.09 212.71 li
@
80.323 213.014 mo
80.323 212.406 li
81.09 212.406 li
81.249 213.332 li
81.249 213.939 li
80.483 213.939 li
f
81.249 213.939 mo
80.483 213.939 li
80.483 213.332 li
80.93 212.406 li
81.537 212.406 li
81.537 213.014 li
f
80.93 212.71 mo
81.696 212.71 li
81.09 212.71 mo
81.856 212.71 li
81.249 212.71 mo
82.016 212.71 li
81.409 212.71 mo
82.175 212.71 li
81.537 212.71 mo
82.462 212.71 li
@
81.856 213.014 mo
81.856 212.406 li
82.462 212.406 li
82.622 213.332 li
82.622 213.939 li
82.016 213.939 li
f
82.016 213.636 mo
82.781 213.636 li
@
82.781 213.939 mo
82.175 213.939 li
82.175 213.332 li
82.303 212.406 li
82.909 212.406 li
82.909 213.014 li
f
82.303 213.014 mo
82.303 212.406 li
82.909 212.406 li
83.228 213.332 li
83.228 213.939 li
82.622 213.939 li
f
82.622 213.636 mo
83.388 213.636 li
@
83.388 213.939 mo
82.781 213.939 li
82.781 213.332 li
82.909 210.428 li
83.548 210.428 li
83.548 211.034 li
f
82.909 211.034 mo
82.909 210.428 li
83.548 210.428 li
83.676 212.406 li
83.676 213.014 li
83.069 213.014 li
f
83.069 212.71 mo
83.835 212.71 li
@
83.228 213.014 mo
83.228 212.406 li
83.835 212.406 li
84.282 213.332 li
84.282 213.939 li
83.548 213.939 li
f
84.282 213.939 mo
83.548 213.939 li
83.548 213.332 li
83.676 212.406 li
84.441 212.406 li
84.441 213.014 li
f
83.676 212.71 mo
84.601 212.71 li
83.835 212.71 mo
84.761 212.71 li
84.154 212.71 mo
85.048 212.71 li
84.441 212.71 mo
85.208 212.71 li
84.601 212.71 mo
85.367 212.71 li
84.761 212.71 mo
85.527 212.71 li
84.92 212.71 mo
85.655 212.71 li
@
85.048 213.014 mo
85.048 212.406 li
85.655 212.406 li
85.974 213.332 li
85.974 213.939 li
85.367 213.939 li
f
85.974 213.939 mo
85.367 213.939 li
85.367 213.332 li
85.527 212.406 li
86.134 212.406 li
86.134 213.014 li
f
85.527 213.014 mo
85.527 212.406 li
86.134 212.406 li
86.294 213.332 li
86.294 213.939 li
85.655 213.939 li
f
85.655 213.636 mo
86.421 213.636 li
@
86.421 213.939 mo
85.815 213.939 li
85.815 213.332 li
86.134 212.406 li
86.74 212.406 li
86.74 213.014 li
f
86.134 213.014 mo
86.134 212.406 li
86.74 212.406 li
86.9 213.332 li
86.9 213.939 li
86.294 213.939 li
f
86.294 213.636 mo
87.027 213.636 li
@
87.027 213.939 mo
86.421 213.939 li
86.421 213.332 li
86.581 212.406 li
87.187 212.406 li
87.187 213.014 li
f
86.581 213.014 mo
86.581 212.406 li
87.187 212.406 li
87.347 213.332 li
87.347 213.939 li
86.74 213.939 li
f
87.347 213.939 mo
86.74 213.939 li
86.74 213.332 li
87.027 212.406 li
87.794 212.406 li
87.794 213.014 li
f
87.027 212.71 mo
87.954 212.71 li
87.187 212.71 mo
88.113 212.71 li
87.347 212.71 mo
88.273 212.71 li
87.666 212.71 mo
88.56 212.71 li
87.954 212.71 mo
88.719 212.71 li
88.113 212.71 mo
88.879 212.71 li
@
88.273 213.014 mo
88.273 212.406 li
88.879 212.406 li
89.039 213.332 li
89.039 213.939 li
88.432 213.939 li
f
89.039 213.939 mo
88.432 213.939 li
88.432 213.332 li
88.56 212.406 li
89.166 212.406 li
89.166 213.014 li
f
88.56 212.71 mo
89.486 212.71 li
88.879 212.71 mo
89.646 212.71 li
89.039 212.71 mo
89.805 212.71 li
89.166 212.71 mo
89.933 212.71 li
@
89.326 213.014 mo
89.326 212.406 li
89.933 212.406 li
90.252 213.332 li
90.252 213.939 li
89.646 213.939 li
f
90.252 213.939 mo
89.646 213.939 li
89.646 213.332 li
89.805 212.406 li
90.411 212.406 li
90.411 213.014 li
f
89.805 212.71 mo
90.539 212.71 li
@
89.933 213.014 mo
89.933 212.406 li
90.539 212.406 li
90.698 213.332 li
90.698 213.939 li
90.092 213.939 li
f
90.698 213.939 mo
90.092 213.939 li
90.092 213.332 li
90.411 212.406 li
91.178 212.406 li
91.178 213.014 li
f
90.411 212.71 mo
91.305 212.71 li
@
90.539 213.014 mo
90.539 212.406 li
91.305 212.406 li
91.465 213.332 li
91.465 213.939 li
90.698 213.939 li
f
91.465 213.939 mo
90.698 213.939 li
90.698 213.332 li
90.858 212.406 li
91.624 212.406 li
91.624 213.014 li
f
90.858 213.014 mo
90.858 212.406 li
91.624 212.406 li
91.784 213.332 li
91.784 213.939 li
91.178 213.939 li
f
91.784 213.939 mo
91.178 213.939 li
91.178 213.332 li
91.465 212.406 li
92.071 212.406 li
92.071 213.014 li
f
91.465 212.71 mo
92.231 212.71 li
91.624 212.71 mo
92.391 212.71 li
@
91.784 213.014 mo
91.784 212.406 li
92.391 212.406 li
92.55 213.332 li
92.55 213.939 li
91.912 213.939 li
f
91.912 213.636 mo
92.838 213.636 li
@
92.838 213.939 mo
92.231 213.939 li
92.231 213.332 li
92.391 211.321 li
92.997 211.321 li
92.997 212.088 li
f
92.391 212.088 mo
92.391 211.321 li
92.997 211.321 li
93.157 212.406 li
93.157 213.014 li
92.55 213.014 li
f
92.55 212.71 mo
93.285 212.71 li
92.678 212.71 mo
93.444 212.71 li
92.838 212.71 mo
93.764 212.71 li
@
93.157 213.014 mo
93.157 212.406 li
93.764 212.406 li
93.923 213.332 li
93.923 213.939 li
93.285 213.939 li
f
93.923 213.939 mo
93.285 213.939 li
93.285 213.332 li
93.444 211.321 li
94.051 211.321 li
94.051 212.088 li
f
93.444 212.088 mo
93.444 211.321 li
94.051 211.321 li
94.21 212.406 li
94.21 213.014 li
93.603 213.014 li
f
93.603 212.71 mo
94.689 212.71 li
@
93.923 213.014 mo
93.923 212.406 li
94.689 212.406 li
94.817 213.332 li
94.817 213.939 li
94.051 213.939 li
f
94.817 213.939 mo
94.051 213.939 li
94.051 213.332 li
94.21 212.406 li
94.977 212.406 li
94.977 213.014 li
f
94.21 212.71 mo
95.136 212.71 li
94.37 212.71 mo
95.296 212.71 li
94.689 212.71 mo
95.583 212.71 li
@
94.977 213.014 mo
94.977 212.406 li
95.583 212.406 li
95.743 213.332 li
95.743 213.939 li
95.136 213.939 li
f
95.743 213.939 mo
95.136 213.939 li
95.136 213.332 li
95.296 212.406 li
95.902 212.406 li
95.902 213.014 li
f
95.296 212.71 mo
96.062 212.71 li
95.424 212.71 mo
96.349 212.71 li
95.743 212.71 mo
96.509 212.71 li
95.902 212.71 mo
96.668 212.71 li
@
96.062 213.014 mo
96.062 212.406 li
96.668 212.406 li
96.796 213.332 li
96.796 213.939 li
96.189 213.939 li
f
96.189 213.636 mo
96.956 213.636 li
@
96.956 213.939 mo
96.349 213.939 li
96.349 213.332 li
96.668 212.406 li
97.275 212.406 li
97.275 213.014 li
f
96.668 212.71 mo
97.435 212.71 li
96.796 212.71 mo
97.562 212.71 li
96.956 212.71 mo
97.722 212.71 li
97.116 212.71 mo
98.169 212.71 li
@
97.435 213.014 mo
97.435 212.406 li
98.169 212.406 li
98.329 213.332 li
98.329 213.939 li
97.562 213.939 li
f
98.329 213.939 mo
97.562 213.939 li
97.562 213.332 li
97.722 212.406 li
98.488 212.406 li
98.488 213.014 li
f
97.722 213.014 mo
97.722 212.406 li
98.488 212.406 li
98.648 213.332 li
98.648 213.939 li
97.881 213.939 li
f
97.881 213.636 mo
98.807 213.636 li
@
98.807 213.939 mo
98.169 213.939 li
98.169 213.332 li
98.488 212.406 li
99.095 212.406 li
99.095 213.014 li
f
98.488 213.014 mo
98.488 212.406 li
99.095 212.406 li
99.254 213.332 li
99.254 213.939 li
98.648 213.939 li
f
98.648 213.636 mo
99.414 213.636 li
@
99.414 213.939 mo
98.807 213.939 li
98.807 213.332 li
98.935 212.406 li
99.574 212.406 li
99.574 213.014 li
f
98.935 212.71 mo
99.861 212.71 li
99.254 212.71 mo
100.021 212.71 li
99.414 212.71 mo
100.18 212.71 li
99.574 212.71 mo
100.308 212.71 li
99.702 212.71 mo
100.467 212.71 li
99.861 212.71 mo
100.787 212.71 li
@
100.18 213.014 mo
100.18 212.406 li
100.787 212.406 li
100.946 213.332 li
100.946 213.939 li
100.308 213.939 li
f
100.946 213.939 mo
100.308 213.939 li
100.308 213.332 li
100.467 212.406 li
101.074 212.406 li
101.074 213.014 li
f
100.467 212.71 mo
101.234 212.71 li
100.627 212.71 mo
101.681 212.71 li
100.946 212.71 mo
101.84 212.71 li
101.074 212.71 mo
102 212.71 li
101.234 212.71 mo
102.159 212.71 li
101.394 212.71 mo
102.446 212.71 li
@
102.446 213.014 mo
101.84 213.014 li
101.84 212.406 li
102 211.321 li
102.606 211.321 li
102.606 212.088 li
f
102 212.088 mo
102 211.321 li
102.606 211.321 li
102.766 212.406 li
102.766 213.014 li
102.159 213.014 li
f
102.159 212.71 mo
102.926 212.71 li
102.319 212.71 mo
103.053 212.71 li
102.446 212.71 mo
103.373 212.71 li
102.766 212.71 mo
103.532 212.71 li
102.926 212.71 mo
103.692 212.71 li
103.053 212.71 mo
103.819 212.71 li
103.213 212.71 mo
104.139 212.71 li
103.532 212.71 mo
104.298 212.71 li
103.692 212.71 mo
104.426 212.71 li
103.819 212.71 mo
104.586 212.71 li
103.979 212.71 mo
104.745 212.71 li
104.139 212.71 mo
105.192 212.71 li
@
105.192 213.014 mo
104.426 213.014 li
104.426 212.406 li
104.586 211.321 li
105.352 211.321 li
105.352 212.088 li
f
104.586 212.088 mo
104.586 211.321 li
105.352 211.321 li
105.512 213.332 li
105.512 213.939 li
104.745 213.939 li
f
105.512 213.939 mo
104.745 213.939 li
104.745 213.332 li
104.905 212.406 li
105.671 212.406 li
105.671 213.014 li
f
104.905 212.71 mo
105.959 212.71 li
105.352 212.71 mo
106.118 212.71 li
105.512 212.71 mo
106.277 212.71 li
105.671 212.71 mo
106.437 212.71 li
105.831 212.71 mo
106.565 212.71 li
105.959 212.71 mo
106.884 212.71 li
@
106.884 213.014 mo
106.277 213.014 li
106.277 212.406 li
106.437 210.428 li
107.044 210.428 li
107.044 211.034 li
f
106.437 211.034 mo
106.437 210.428 li
107.044 210.428 li
107.204 212.406 li
107.204 213.014 li
106.565 213.014 li
f
106.565 212.71 mo
107.331 212.71 li
@
106.725 213.014 mo
106.725 212.406 li
107.331 212.406 li
107.65 213.332 li
107.65 213.939 li
107.044 213.939 li
f
107.65 213.939 mo
107.044 213.939 li
107.044 213.332 li
107.204 212.406 li
107.81 212.406 li
107.81 213.014 li
f
107.204 212.71 mo
107.937 212.71 li
107.331 212.71 mo
108.097 212.71 li
107.491 212.71 mo
108.257 212.71 li
@
108.257 213.014 mo
107.65 213.014 li
107.65 212.406 li
107.937 211.321 li
108.704 211.321 li
108.704 212.088 li
f
107.937 212.088 mo
107.937 211.321 li
108.704 211.321 li
108.864 212.406 li
108.864 213.014 li
108.097 213.014 li
f
108.097 212.71 mo
109.023 212.71 li
108.257 212.71 mo
109.183 212.71 li
108.416 212.71 mo
109.47 212.71 li
108.864 212.71 mo
109.629 212.71 li
109.023 212.71 mo
109.79 212.71 li
109.183 212.71 mo
109.949 212.71 li
109.311 212.71 mo
110.077 212.71 li
109.47 212.71 mo
110.396 212.71 li
109.79 212.71 mo
110.555 212.71 li
@
110.555 213.014 mo
109.949 213.014 li
109.949 212.406 li
110.077 211.321 li
110.715 211.321 li
110.715 212.088 li
f
110.077 212.088 mo
110.077 211.321 li
110.715 211.321 li
110.843 212.406 li
110.843 213.014 li
110.236 213.014 li
f
110.236 212.71 mo
111.162 212.71 li
110.555 212.71 mo
111.322 212.71 li
110.715 212.71 mo
111.449 212.71 li
@
110.843 213.014 mo
110.843 212.406 li
111.449 212.406 li
111.609 213.332 li
111.609 213.939 li
111.002 213.939 li
f
111.609 213.939 mo
111.002 213.939 li
111.002 213.332 li
111.162 212.406 li
111.769 212.406 li
111.769 213.014 li
f
111.162 212.71 mo
112.215 212.71 li
111.449 212.71 mo
112.375 212.71 li
111.609 212.71 mo
112.535 212.71 li
111.769 212.71 mo
112.694 212.71 li
@
111.928 213.014 mo
111.928 212.406 li
112.694 212.406 li
112.982 213.332 li
112.982 213.939 li
112.375 213.939 li
f
112.982 213.939 mo
112.375 213.939 li
112.375 213.332 li
112.535 212.406 li
113.142 212.406 li
113.142 213.014 li
f
112.535 212.71 mo
113.301 212.71 li
@
112.694 213.014 mo
112.694 212.406 li
113.301 212.406 li
113.46 213.332 li
113.46 213.939 li
112.822 213.939 li
f
113.46 213.939 mo
112.822 213.939 li
112.822 213.332 li
112.982 212.406 li
113.588 212.406 li
113.588 213.014 li
f
112.982 212.71 mo
113.907 212.71 li
113.301 212.71 mo
114.067 212.71 li
113.46 212.71 mo
114.194 212.71 li
113.588 212.71 mo
114.354 212.71 li
113.748 212.71 mo
114.674 212.71 li
114.067 212.71 mo
114.833 212.71 li
114.194 212.71 mo
114.961 212.71 li
114.354 212.71 mo
115.121 212.71 li
114.514 212.71 mo
115.44 212.71 li
@
114.833 213.014 mo
114.833 212.406 li
115.44 212.406 li
115.727 213.332 li
115.727 213.939 li
114.961 213.939 li
f
114.961 213.636 mo
115.887 213.636 li
@
115.887 213.939 mo
115.121 213.939 li
115.121 213.332 li
115.28 212.406 li
116.046 212.406 li
116.046 213.014 li
f
115.28 212.71 mo
116.206 212.71 li
115.44 212.71 mo
116.493 212.71 li
115.887 212.71 mo
116.653 212.71 li
116.046 212.71 mo
116.813 212.71 li
116.206 212.71 mo
116.972 212.71 li
116.334 212.71 mo
117.26 212.71 li
@
116.653 213.014 mo
116.653 212.406 li
117.26 212.406 li
117.419 213.332 li
117.419 213.939 li
116.813 213.939 li
f
117.419 213.939 mo
116.813 213.939 li
116.813 213.332 li
116.972 212.406 li
117.579 212.406 li
117.579 213.014 li
f
116.972 212.71 mo
117.706 212.71 li
117.1 212.71 mo
117.866 212.71 li
117.26 212.71 mo
118.185 212.71 li
117.579 212.71 mo
118.345 212.71 li
117.706 212.71 mo
118.473 212.71 li
117.866 212.71 mo
118.632 212.71 li
118.025 212.71 mo
118.952 212.71 li
118.345 212.71 mo
119.239 212.71 li
118.473 212.71 mo
119.398 212.71 li
118.632 212.71 mo
119.558 212.71 li
118.792 212.71 mo
119.717 212.71 li
118.952 212.71 mo
120.005 212.71 li
119.398 212.71 mo
120.165 212.71 li
@
119.558 213.014 mo
119.558 212.406 li
120.165 212.406 li
120.324 213.332 li
120.324 213.939 li
119.717 213.939 li
f
120.324 213.939 mo
119.717 213.939 li
119.717 213.332 li
119.845 212.406 li
120.452 212.406 li
120.452 213.014 li
f
119.845 212.71 mo
120.771 212.71 li
120.165 212.71 mo
120.931 212.71 li
120.324 212.71 mo
121.09 212.71 li
120.452 212.71 mo
121.218 212.71 li
120.612 212.71 mo
121.377 212.71 li
120.771 212.71 mo
121.697 212.71 li
@
121.697 213.014 mo
121.09 213.014 li
121.09 212.406 li
121.218 211.321 li
121.824 211.321 li
121.824 212.088 li
f
121.218 212.088 mo
121.218 211.321 li
121.824 211.321 li
121.984 212.406 li
121.984 213.014 li
121.377 213.014 li
f
121.377 212.71 mo
122.144 212.71 li
121.537 212.71 mo
122.591 212.71 li
@
121.824 213.014 mo
121.824 212.406 li
122.591 212.406 li
122.75 213.332 li
122.75 213.939 li
121.984 213.939 li
f
122.75 213.939 mo
121.984 213.939 li
121.984 213.332 li
122.144 212.406 li
122.91 212.406 li
122.91 213.014 li
f
122.144 212.71 mo
123.07 212.71 li
@
123.07 213.014 mo
122.303 213.014 li
122.303 212.406 li
122.591 211.321 li
123.23 211.321 li
123.23 212.088 li
f
122.591 212.088 mo
122.591 211.321 li
123.23 211.321 li
123.517 212.406 li
123.517 213.014 li
122.91 213.014 li
f
122.91 212.71 mo
123.676 212.71 li
@
123.07 213.014 mo
123.07 212.406 li
123.676 212.406 li
123.835 213.332 li
123.835 213.939 li
123.23 213.939 li
f
123.23 213.636 mo
123.963 213.636 li
@
123.963 213.939 mo
123.357 213.939 li
123.357 213.332 li
123.676 212.406 li
124.283 212.406 li
124.283 213.014 li
f
123.676 212.71 mo
124.442 212.71 li
@
124.442 213.014 mo
123.835 213.014 li
123.835 212.406 li
123.963 211.321 li
124.602 211.321 li
124.602 212.088 li
f
123.963 212.088 mo
123.963 211.321 li
124.602 211.321 li
124.73 212.406 li
124.73 213.014 li
124.123 213.014 li
f
124.123 212.71 mo
124.89 212.71 li
@
124.283 213.014 mo
124.283 212.406 li
124.89 212.406 li
125.209 213.332 li
125.209 213.939 li
124.602 213.939 li
f
125.209 213.939 mo
124.602 213.939 li
124.602 213.332 li
124.73 212.406 li
125.336 212.406 li
125.336 213.014 li
f
124.73 212.71 mo
125.496 212.71 li
124.89 212.71 mo
125.655 212.71 li
125.049 212.71 mo
126.102 212.71 li
125.336 212.71 mo
126.262 212.71 li
125.496 212.71 mo
126.422 212.71 li
125.655 212.71 mo
126.581 212.71 li
125.815 212.71 mo
126.869 212.71 li
@
126.262 213.014 mo
126.262 212.406 li
126.869 212.406 li
127.028 213.332 li
127.028 213.939 li
126.422 213.939 li
f
127.028 213.939 mo
126.422 213.939 li
126.422 213.332 li
126.581 211.321 li
127.187 211.321 li
127.187 212.088 li
f
126.581 212.088 mo
126.581 211.321 li
127.187 211.321 li
127.348 212.406 li
127.348 213.014 li
126.709 213.014 li
f
126.709 213.014 mo
126.709 212.406 li
127.348 212.406 li
127.475 213.332 li
127.475 213.939 li
126.869 213.939 li
f
127.475 213.939 mo
126.869 213.939 li
126.869 213.332 li
127.187 212.406 li
127.794 212.406 li
127.794 213.014 li
f
127.187 212.71 mo
127.954 212.71 li
@
127.348 213.014 mo
127.348 212.406 li
127.954 212.406 li
128.113 213.332 li
128.113 213.939 li
127.475 213.939 li
f
128.113 213.939 mo
127.475 213.939 li
127.475 213.332 li
127.635 212.406 li
128.241 212.406 li
128.241 213.014 li
f
127.635 212.71 mo
128.561 212.71 li
@
128.561 213.014 mo
127.954 213.014 li
127.954 212.406 li
128.113 211.321 li
128.72 211.321 li
128.72 212.088 li
f
.766 lw
128.113 211.704 mo
128.848 211.704 li
@
128.241 212.088 mo
128.241 211.321 li
128.848 211.321 li
129.007 212.406 li
129.007 213.014 li
128.401 213.014 li
f
.607 lw
128.401 212.71 mo
129.167 212.71 li
128.561 212.71 mo
129.614 212.71 li
128.848 212.71 mo
129.773 212.71 li
129.007 212.71 mo
129.933 212.71 li
129.167 212.71 mo
130.093 212.71 li
129.327 212.71 mo
130.38 212.71 li
129.773 212.71 mo
130.54 212.71 li
129.933 212.71 mo
130.7 212.71 li
@
130.7 213.014 mo
130.093 213.014 li
130.093 212.406 li
130.221 211.321 li
130.859 211.321 li
130.859 212.088 li
f
130.221 212.088 mo
130.221 211.321 li
130.859 211.321 li
130.987 212.406 li
130.987 213.014 li
130.38 213.014 li
f
130.38 213.014 mo
130.38 212.406 li
130.987 212.406 li
131.306 213.332 li
131.306 213.939 li
130.7 213.939 li
f
131.306 213.939 mo
130.7 213.939 li
130.7 213.332 li
130.859 212.406 li
131.465 212.406 li
131.465 213.014 li
f
130.859 212.71 mo
131.593 212.71 li
@
130.987 213.014 mo
130.987 212.406 li
131.593 212.406 li
131.753 213.332 li
131.753 213.939 li
131.146 213.939 li
f
131.753 213.939 mo
131.146 213.939 li
131.146 213.332 li
131.465 212.406 li
132.072 212.406 li
132.072 213.014 li
f
131.465 212.71 mo
132.232 212.71 li
@
132.232 213.014 mo
131.593 213.014 li
131.593 212.406 li
131.753 211.321 li
132.36 211.321 li
132.36 212.088 li
f
131.753 212.088 mo
131.753 211.321 li
132.36 211.321 li
132.519 212.406 li
132.519 213.014 li
131.912 213.014 li
f
131.912 212.71 mo
132.679 212.71 li
132.072 212.71 mo
133.125 212.71 li
@
133.125 213.014 mo
132.36 213.014 li
132.36 212.406 li
132.519 211.321 li
133.285 211.321 li
133.285 212.088 li
f
132.519 212.088 mo
132.519 211.321 li
133.285 211.321 li
133.445 212.406 li
133.445 213.014 li
132.679 213.014 li
f
133.445 213.014 mo
132.679 213.014 li
132.679 212.406 li
132.838 211.321 li
133.605 211.321 li
133.605 212.088 li
f
132.838 212.088 mo
132.838 211.321 li
133.605 211.321 li
133.892 212.406 li
133.892 213.014 li
133.285 213.014 li
f
133.892 213.014 mo
133.285 213.014 li
133.285 212.406 li
133.445 211.321 li
134.051 211.321 li
134.051 212.088 li
f
133.445 212.088 mo
133.445 211.321 li
134.051 211.321 li
134.211 212.406 li
134.211 213.014 li
133.605 213.014 li
f
133.605 212.71 mo
134.371 212.71 li
133.732 212.71 mo
134.498 212.71 li
133.892 212.71 mo
134.818 212.71 li
@
134.211 213.014 mo
134.211 212.406 li
134.818 212.406 li
134.977 213.332 li
134.977 213.939 li
134.371 213.939 li
f
134.977 213.939 mo
134.371 213.939 li
134.371 213.332 li
134.498 212.406 li
135.105 212.406 li
135.105 213.014 li
f
134.498 212.71 mo
135.265 212.71 li
134.658 212.71 mo
135.584 212.71 li
@
135.584 213.014 mo
134.977 213.014 li
134.977 212.406 li
135.105 211.321 li
135.743 211.321 li
135.743 212.088 li
f
135.105 212.088 mo
135.105 211.321 li
135.743 211.321 li
135.871 213.332 li
135.871 213.939 li
135.265 213.939 li
f
135.871 213.939 mo
135.265 213.939 li
135.265 213.332 li
135.424 212.406 li
136.031 212.406 li
136.031 213.014 li
f
135.424 212.71 mo
136.19 212.71 li
135.584 212.71 mo
136.638 212.71 li
135.871 212.71 mo
136.797 212.71 li
136.031 212.71 mo
136.956 212.71 li
@
136.956 213.014 mo
136.19 213.014 li
136.19 212.406 li
136.35 211.321 li
137.116 211.321 li
137.116 212.088 li
f
136.35 212.088 mo
136.35 211.321 li
137.116 211.321 li
137.403 212.406 li
137.403 213.014 li
136.797 213.014 li
f
136.797 212.71 mo
137.563 212.71 li
@
137.563 213.014 mo
136.956 213.014 li
136.956 212.406 li
137.116 211.321 li
137.723 211.321 li
137.723 212.088 li
f
137.116 212.088 mo
137.116 211.321 li
137.723 211.321 li
137.85 212.406 li
137.85 213.014 li
137.244 213.014 li
f
137.85 213.014 mo
137.244 213.014 li
137.244 212.406 li
137.403 211.321 li
138.01 211.321 li
138.01 212.088 li
f
.766 lw
137.403 211.704 mo
138.329 211.704 li
137.723 211.704 mo
138.489 211.704 li
137.85 211.704 mo
138.617 211.704 li
138.01 211.704 mo
138.776 211.704 li
@
138.17 212.088 mo
138.17 211.321 li
138.776 211.321 li
139.095 212.406 li
139.095 213.014 li
138.489 213.014 li
f
.607 lw
138.489 212.71 mo
139.255 212.71 li
138.617 212.71 mo
139.382 212.71 li
138.776 212.71 mo
139.543 212.71 li
138.935 212.71 mo
139.861 212.71 li
139.255 212.71 mo
140.149 212.71 li
@
140.149 213.014 mo
139.382 213.014 li
139.382 212.406 li
139.543 211.321 li
140.309 211.321 li
140.309 212.088 li
f
139.543 212.088 mo
139.543 211.321 li
140.309 211.321 li
140.468 212.406 li
140.468 213.014 li
139.702 213.014 li
f
139.702 212.71 mo
140.628 212.71 li
@
140.628 213.014 mo
139.861 213.014 li
139.861 212.406 li
140.309 211.321 li
140.916 211.321 li
140.916 212.088 li
f
.766 lw
140.309 211.704 mo
141.075 211.704 li
@
140.468 212.088 mo
140.468 211.321 li
141.075 211.321 li
141.234 212.406 li
141.234 213.014 li
140.628 213.014 li
f
141.234 213.014 mo
140.628 213.014 li
140.628 212.406 li
140.755 211.321 li
141.362 211.321 li
141.362 212.088 li
f
140.755 212.088 mo
140.755 211.321 li
141.362 211.321 li
141.681 212.406 li
141.681 213.014 li
141.075 213.014 li
f
141.681 213.014 mo
141.075 213.014 li
141.075 212.406 li
141.234 211.321 li
141.841 211.321 li
141.841 212.088 li
f
141.234 212.088 mo
141.234 211.321 li
141.841 211.321 li
142.001 212.406 li
142.001 213.014 li
141.362 213.014 li
f
.607 lw
141.362 212.71 mo
142.128 212.71 li
141.522 212.71 mo
142.288 212.71 li
141.681 212.71 mo
142.607 212.71 li
142.001 212.71 mo
142.735 212.71 li
@
142.735 213.014 mo
142.128 213.014 li
142.128 212.406 li
142.288 211.321 li
142.895 211.321 li
142.895 212.088 li
f
142.288 212.088 mo
142.288 211.321 li
142.895 211.321 li
143.054 212.406 li
143.054 213.014 li
142.448 213.014 li
f
142.448 212.71 mo
143.373 212.71 li
142.735 212.71 mo
143.66 212.71 li
142.895 212.71 mo
143.82 212.71 li
143.054 212.71 mo
143.98 212.71 li
143.213 212.71 mo
144.108 212.71 li
@
144.108 213.014 mo
143.373 213.014 li
143.373 212.406 li
143.82 211.321 li
144.427 211.321 li
144.427 212.088 li
f
.766 lw
143.82 211.704 mo
144.586 211.704 li
@
143.98 212.088 mo
143.98 211.321 li
144.586 211.321 li
144.746 212.406 li
144.746 213.014 li
144.108 213.014 li
f
144.746 213.014 mo
144.108 213.014 li
144.108 212.406 li
144.267 211.321 li
144.874 211.321 li
144.874 212.088 li
f
144.267 212.088 mo
144.267 211.321 li
144.874 211.321 li
145.193 212.406 li
145.193 213.014 li
144.586 213.014 li
f
145.193 213.014 mo
144.586 213.014 li
144.586 212.406 li
144.746 210.428 li
145.352 210.428 li
145.352 211.034 li
f
145.352 211.034 mo
144.746 211.034 li
144.746 210.428 li
144.874 209.502 li
145.512 209.502 li
145.512 210.108 li
f
145.512 210.108 mo
144.874 210.108 li
144.874 209.502 li
145.033 208.575 li
145.64 208.575 li
145.64 209.183 li
f
145.64 209.183 mo
145.033 209.183 li
145.033 208.575 li
145.193 207.522 li
145.799 207.522 li
145.799 208.288 li
f
145.799 208.288 mo
145.193 208.288 li
145.193 207.522 li
145.512 205.671 li
146.119 205.671 li
146.119 206.277 li
f
146.119 206.277 mo
145.512 206.277 li
145.512 205.671 li
145.64 203.692 li
146.246 203.692 li
146.246 204.298 li
f
146.246 204.298 mo
145.64 204.298 li
145.64 203.692 li
145.799 202.638 li
146.406 202.638 li
146.406 203.244 li
f
146.406 203.244 mo
145.799 203.244 li
145.799 202.638 li
145.959 201.712 li
146.565 201.712 li
146.565 202.318 li
f
146.565 202.318 mo
145.959 202.318 li
145.959 201.712 li
146.246 198.808 li
146.885 198.808 li
146.885 199.413 li
f
146.885 199.413 mo
146.246 199.413 li
146.246 198.808 li
146.406 197.881 li
147.172 197.881 li
147.172 198.487 li
f
147.172 198.487 mo
146.406 198.487 li
146.406 197.881 li
146.565 195.902 li
147.331 195.902 li
147.331 196.509 li
f
147.331 196.509 mo
146.565 196.509 li
146.565 195.902 li
146.726 194.082 li
147.491 194.082 li
147.491 194.689 li
f
147.491 194.689 mo
146.726 194.689 li
146.726 194.082 li
146.885 192.997 li
147.619 192.997 li
147.619 193.763 li
f
147.619 193.763 mo
146.885 193.763 li
146.885 192.997 li
147.331 192.103 li
147.938 192.103 li
147.938 192.71 li
f
147.938 192.71 mo
147.331 192.71 li
147.331 192.103 li
147.491 191.178 li
148.098 191.178 li
148.098 191.784 li
f
148.098 191.784 mo
147.491 191.784 li
147.491 191.178 li
147.619 189.038 li
148.258 189.038 li
148.258 189.645 li
f
.607 lw
147.619 189.342 mo
148.386 189.342 li
@
148.386 189.645 mo
147.779 189.645 li
147.779 189.038 li
148.098 186.133 li
148.705 186.133 li
148.705 186.899 li
f
.766 lw
148.098 186.517 mo
148.864 186.517 li
@
148.864 186.899 mo
148.258 186.899 li
148.258 186.133 li
148.386 185.207 li
148.992 185.207 li
148.992 185.814 li
f
148.992 185.814 mo
148.386 185.814 li
148.386 185.207 li
148.545 184.314 li
149.151 184.314 li
149.151 184.92 li
f
.607 lw
148.545 184.617 mo
149.311 184.617 li
@
149.311 184.92 mo
148.705 184.92 li
148.705 184.314 li
148.992 182.302 li
149.63 182.302 li
149.63 183.068 li
f
.766 lw
148.992 182.686 mo
149.758 182.686 li
149.151 182.686 mo
149.918 182.686 li
@
149.918 183.068 mo
149.311 183.068 li
149.311 182.302 li
149.47 181.408 li
150.077 181.408 li
150.077 182.015 li
f
.607 lw
149.47 181.712 mo
150.365 181.712 li
@
150.365 182.015 mo
149.758 182.015 li
149.758 181.408 li
149.918 180.482 li
150.684 180.482 li
150.684 181.09 li
f
150.684 181.09 mo
149.918 181.09 li
149.918 180.482 li
150.077 179.557 li
150.843 179.557 li
150.843 180.163 li
f
150.077 179.86 mo
151.003 179.86 li
150.237 179.86 mo
151.291 179.86 li
@
151.291 180.163 mo
150.684 180.163 li
150.684 179.557 li
150.843 178.344 li
151.45 178.344 li
151.45 178.95 li
f
150.843 178.95 mo
150.843 178.344 li
151.45 178.344 li
151.609 179.557 li
151.609 180.163 li
151.003 180.163 li
f
151.003 179.86 mo
151.769 179.86 li
@
151.769 180.163 mo
151.13 180.163 li
151.13 179.557 li
151.291 177.418 li
151.897 177.418 li
151.897 178.025 li
f
151.291 177.722 mo
152.216 177.722 li
151.609 177.722 mo
152.376 177.722 li
@
152.376 178.025 mo
151.769 178.025 li
151.769 177.418 li
151.897 176.525 li
152.503 176.525 li
152.503 177.131 li
f
151.897 176.827 mo
152.663 176.827 li
152.057 176.827 mo
152.982 176.827 li
@
152.982 177.131 mo
152.376 177.131 li
152.376 176.525 li
152.503 175.439 li
153.142 175.439 li
153.142 176.205 li
f
.766 lw
152.503 175.822 mo
153.27 175.822 li
152.663 175.822 mo
153.429 175.822 li
152.823 175.822 mo
153.589 175.822 li
152.982 175.822 mo
153.876 175.822 li
153.27 175.822 mo
154.196 175.822 li
153.429 175.822 mo
154.355 175.822 li
153.589 175.822 mo
154.515 175.822 li
153.748 175.822 mo
154.802 175.822 li
154.196 175.822 mo
154.961 175.822 li
@
154.961 176.205 mo
154.355 176.205 li
154.355 175.439 li
154.515 174.513 li
155.121 174.513 li
155.121 175.151 li
f
.638 lw
154.515 174.832 mo
155.249 174.832 li
154.643 174.832 mo
155.408 174.832 li
154.802 174.832 mo
155.728 174.832 li
155.121 174.832 mo
155.887 174.832 li
155.249 174.832 mo
156.015 174.832 li
155.408 174.832 mo
156.175 174.832 li
155.568 174.832 mo
156.494 174.832 li
155.887 174.832 mo
156.653 174.832 li
@
156.015 175.151 mo
156.015 174.513 li
156.653 174.513 li
156.781 175.439 li
156.781 176.205 li
156.175 176.205 li
f
156.781 176.205 mo
156.175 176.205 li
156.175 175.439 li
156.335 174.513 li
156.94 174.513 li
156.94 175.151 li
f
156.335 174.832 mo
157.101 174.832 li
@
157.101 175.151 mo
156.494 175.151 li
156.494 174.513 li
156.781 173.619 li
157.388 173.619 li
157.388 174.226 li
f
156.781 174.226 mo
156.781 173.619 li
157.388 173.619 li
157.707 174.513 li
157.707 175.151 li
156.94 175.151 li
f
157.707 175.151 mo
156.94 175.151 li
156.94 174.513 li
157.101 173.619 li
157.867 173.619 li
157.867 174.226 li
f
157.101 174.226 mo
157.101 173.619 li
157.867 173.619 li
158.026 174.513 li
158.026 175.151 li
157.26 175.151 li
f
158.026 175.151 mo
157.26 175.151 li
157.26 174.513 li
157.707 173.619 li
158.314 173.619 li
158.314 174.226 li
f
157.707 174.226 mo
157.707 173.619 li
158.314 173.619 li
158.474 174.513 li
158.474 175.151 li
157.867 175.151 li
f
157.867 174.832 mo
158.633 174.832 li
158.026 174.832 mo
158.761 174.832 li
@
158.761 175.151 mo
158.154 175.151 li
158.154 174.513 li
158.314 173.619 li
158.92 173.619 li
158.92 174.226 li
f
.607 lw
158.314 173.922 mo
159.239 173.922 li
@
158.633 174.226 mo
158.633 173.619 li
159.239 173.619 li
159.399 175.439 li
159.399 176.205 li
158.761 176.205 li
f
159.399 176.205 mo
158.761 176.205 li
158.761 175.439 li
158.92 173.619 li
159.527 173.619 li
159.527 174.226 li
f
158.92 174.226 mo
158.92 173.619 li
159.527 173.619 li
159.686 174.513 li
159.686 175.151 li
159.08 175.151 li
f
159.686 175.151 mo
159.08 175.151 li
159.08 174.513 li
159.399 173.619 li
160.006 173.619 li
160.006 174.226 li
f
159.399 173.922 mo
160.133 173.922 li
159.527 173.922 mo
160.293 173.922 li
@
159.686 174.226 mo
159.686 173.619 li
160.293 173.619 li
160.453 174.513 li
160.453 175.151 li
159.846 175.151 li
f
160.453 175.151 mo
159.846 175.151 li
159.846 174.513 li
160.006 172.693 li
160.612 172.693 li
160.612 173.3 li
f
160.006 173.3 mo
160.006 172.693 li
160.612 172.693 li
161.059 173.619 li
161.059 174.226 li
160.293 174.226 li
f
160.293 174.226 mo
160.293 173.619 li
161.059 173.619 li
161.218 174.513 li
161.218 175.151 li
160.453 175.151 li
f
.638 lw
160.453 174.832 mo
161.378 174.832 li
@
161.378 175.151 mo
160.612 175.151 li
160.612 174.513 li
160.771 173.619 li
161.506 173.619 li
161.506 174.226 li
f
160.771 174.226 mo
160.771 173.619 li
161.506 173.619 li
161.825 174.513 li
161.825 175.151 li
161.218 175.151 li
f
161.825 175.151 mo
161.218 175.151 li
161.218 174.513 li
161.378 173.619 li
161.985 173.619 li
161.985 174.226 li
f
.607 lw
161.378 173.922 mo
162.145 173.922 li
161.506 173.922 mo
162.273 173.922 li
161.666 173.922 mo
162.432 173.922 li
@
162.432 174.226 mo
161.825 174.226 li
161.825 173.619 li
162.145 172.693 li
162.752 172.693 li
162.752 173.3 li
f
162.145 172.997 mo
162.911 172.997 li
@
162.273 173.3 mo
162.273 172.693 li
162.911 172.693 li
163.038 173.619 li
163.038 174.226 li
162.432 174.226 li
f
162.432 173.922 mo
163.198 173.922 li
162.591 173.922 mo
163.517 173.922 li
162.911 173.922 mo
163.645 173.922 li
@
163.645 174.226 mo
163.038 174.226 li
163.038 173.619 li
163.198 172.693 li
163.805 172.693 li
163.805 173.3 li
f
163.198 173.3 mo
163.198 172.693 li
163.805 172.693 li
163.964 173.619 li
163.964 174.226 li
163.357 174.226 li
f
163.964 174.226 mo
163.357 174.226 li
163.357 173.619 li
163.645 172.693 li
164.284 172.693 li
164.284 173.3 li
f
163.645 172.997 mo
164.571 172.997 li
163.805 172.997 mo
164.731 172.997 li
@
163.964 173.3 mo
163.964 172.693 li
164.731 172.693 li
164.89 173.619 li
164.89 174.226 li
164.124 174.226 li
f
164.89 174.226 mo
164.124 174.226 li
164.124 173.619 li
164.284 172.693 li
165.018 172.693 li
165.018 173.3 li
f
164.284 173.3 mo
164.284 172.693 li
165.018 172.693 li
165.337 173.619 li
165.337 174.226 li
164.731 174.226 li
f
165.337 174.226 mo
164.731 174.226 li
164.731 173.619 li
164.89 172.693 li
165.496 172.693 li
165.496 173.3 li
f
164.89 172.997 mo
165.656 172.997 li
165.018 172.997 mo
165.784 172.997 li
165.177 172.997 mo
166.102 172.997 li
165.496 172.997 mo
166.263 172.997 li
165.656 172.997 mo
166.39 172.997 li
165.784 172.997 mo
166.55 172.997 li
@
166.55 173.3 mo
165.943 173.3 li
165.943 172.693 li
166.102 171.608 li
166.71 171.608 li
166.71 172.374 li
f
.766 lw
166.102 171.991 mo
167.029 171.991 li
166.39 171.991 mo
167.156 171.991 li
166.55 171.991 mo
167.316 171.991 li
166.71 171.991 mo
167.476 171.991 li
@
166.869 172.374 mo
166.869 171.608 li
167.476 171.608 li
167.795 172.693 li
167.795 173.3 li
167.156 173.3 li
f
167.795 173.3 mo
167.156 173.3 li
167.156 172.693 li
167.316 171.608 li
168.082 171.608 li
168.082 172.374 li
f
167.316 172.374 mo
167.316 171.608 li
168.082 171.608 li
168.242 172.693 li
168.242 173.3 li
167.476 173.3 li
f
168.242 173.3 mo
167.476 173.3 li
167.476 172.693 li
167.635 171.608 li
168.401 171.608 li
168.401 172.374 li
f
167.635 171.991 mo
168.529 171.991 li
@
167.795 172.374 mo
167.795 171.608 li
168.529 171.608 li
168.848 172.693 li
168.848 173.3 li
168.242 173.3 li
f
.607 lw
168.242 172.997 mo
169.008 172.997 li
168.401 172.997 mo
169.168 172.997 li
@
169.168 173.3 mo
168.529 173.3 li
168.529 172.693 li
168.689 171.608 li
169.295 171.608 li
169.295 172.374 li
f
.766 lw
168.689 171.991 mo
169.615 171.991 li
169.008 171.991 mo
169.774 171.991 li
169.168 171.991 mo
169.902 171.991 li
169.295 171.991 mo
170.062 171.991 li
169.455 171.991 mo
170.221 171.991 li
169.615 171.991 mo
170.541 171.991 li
169.902 171.991 mo
170.668 171.991 li
170.062 171.991 mo
170.828 171.991 li
170.221 171.991 mo
170.987 171.991 li
170.38 171.991 mo
171.275 171.991 li
170.668 171.991 mo
171.594 171.991 li
@
171.594 172.374 mo
170.828 172.374 li
170.828 171.608 li
170.987 170.714 li
171.753 170.714 li
171.753 171.32 li
f
.607 lw
170.987 171.018 mo
171.913 171.018 li
@
171.147 171.32 mo
171.147 170.714 li
171.913 170.714 li
172.041 171.608 li
172.041 172.374 li
171.275 172.374 li
f
.766 lw
171.275 171.991 mo
172.36 171.991 li
171.753 171.991 mo
172.52 171.991 li
@
172.52 172.374 mo
171.913 172.374 li
171.913 171.608 li
172.041 170.714 li
172.648 170.714 li
172.648 171.32 li
f
172.041 171.32 mo
172.041 170.714 li
172.648 170.714 li
172.807 171.608 li
172.807 172.374 li
172.201 172.374 li
f
172.201 172.374 mo
172.201 171.608 li
172.807 171.608 li
173.126 172.693 li
173.126 173.3 li
172.52 173.3 li
f
173.126 173.3 mo
172.52 173.3 li
172.52 172.693 li
172.648 171.608 li
173.286 171.608 li
173.286 172.374 li
f
172.648 171.991 mo
173.414 171.991 li
172.807 171.991 mo
173.573 171.991 li
@
173.573 172.374 mo
172.966 172.374 li
172.966 171.608 li
173.126 170.714 li
173.733 170.714 li
173.733 171.32 li
f
173.126 171.32 mo
173.126 170.714 li
173.733 170.714 li
174.052 171.608 li
174.052 172.374 li
173.414 172.374 li
f
173.414 171.991 mo
174.18 171.991 li
173.573 171.991 mo
174.339 171.991 li
@
174.339 172.374 mo
173.733 172.374 li
173.733 171.608 li
173.893 170.714 li
174.499 170.714 li
174.499 171.32 li
f
.607 lw
173.893 171.018 mo
174.786 171.018 li
174.18 171.018 mo
175.105 171.018 li
174.339 171.018 mo
175.265 171.018 li
@
174.499 171.32 mo
174.499 170.714 li
175.265 170.714 li
175.425 171.608 li
175.425 172.374 li
174.658 172.374 li
f
175.425 172.374 mo
174.658 172.374 li
174.658 171.608 li
175.105 170.714 li
175.712 170.714 li
175.712 171.32 li
f
175.712 171.32 mo
175.105 171.32 li
175.105 170.714 li
175.265 169.788 li
175.872 169.788 li
175.872 170.395 li
f
175.265 170.395 mo
175.265 169.788 li
175.872 169.788 li
176.031 170.714 li
176.031 171.32 li
175.425 171.32 li
f
175.425 171.018 mo
176.159 171.018 li
@
175.553 171.32 mo
175.553 170.714 li
176.159 170.714 li
176.318 171.608 li
176.318 172.374 li
175.712 172.374 li
f
176.318 172.374 mo
175.712 172.374 li
175.712 171.608 li
176.031 170.714 li
176.638 170.714 li
176.638 171.32 li
f
176.031 171.32 mo
176.031 170.714 li
176.638 170.714 li
176.797 171.608 li
176.797 172.374 li
176.159 172.374 li
f
.766 lw
176.159 171.991 mo
176.925 171.991 li
176.318 171.991 mo
177.085 171.991 li
176.478 171.991 mo
177.404 171.991 li
@
177.404 172.374 mo
176.797 172.374 li
176.797 171.608 li
176.925 170.714 li
177.532 170.714 li
177.532 171.32 li
f
176.925 171.32 mo
176.925 170.714 li
177.532 170.714 li
177.691 172.693 li
177.691 173.3 li
177.085 173.3 li
f
177.691 173.3 mo
177.085 173.3 li
177.085 172.693 li
177.244 171.608 li
177.851 171.608 li
177.851 172.374 li
f
177.851 172.374 mo
177.244 172.374 li
177.244 171.608 li
177.404 169.788 li
178.011 169.788 li
178.011 170.395 li
f
177.404 170.395 mo
177.404 169.788 li
178.011 169.788 li
178.298 170.714 li
178.298 171.32 li
177.691 171.32 li
f
177.691 171.32 mo
177.691 170.714 li
178.298 170.714 li
178.617 171.608 li
178.617 172.374 li
177.851 172.374 li
f
178.617 172.374 mo
177.851 172.374 li
177.851 171.608 li
178.011 170.714 li
178.777 170.714 li
178.777 171.32 li
f
.607 lw
178.011 171.018 mo
178.904 171.018 li
@
178.17 171.32 mo
178.17 170.714 li
178.904 170.714 li
179.224 171.608 li
179.224 172.374 li
178.617 172.374 li
f
179.224 172.374 mo
178.617 172.374 li
178.617 171.608 li
178.777 170.714 li
179.383 170.714 li
179.383 171.32 li
f
178.777 171.018 mo
179.543 171.018 li
@
179.543 171.32 mo
178.904 171.32 li
178.904 170.714 li
179.064 169.788 li
179.67 169.788 li
179.67 170.395 li
f
179.064 170.395 mo
179.064 169.788 li
179.67 169.788 li
179.831 170.714 li
179.831 171.32 li
179.224 171.32 li
f
179.224 171.018 mo
180.149 171.018 li
179.543 171.018 mo
180.309 171.018 li
179.67 171.018 mo
180.436 171.018 li
@
179.831 171.32 mo
179.831 170.714 li
180.436 170.714 li
180.596 171.608 li
180.596 172.374 li
179.99 172.374 li
f
.766 lw
179.99 171.991 mo
180.916 171.991 li
180.309 171.991 mo
181.043 171.991 li
180.436 171.991 mo
181.203 171.991 li
@
181.203 172.374 mo
180.596 172.374 li
180.596 171.608 li
180.756 170.714 li
181.363 170.714 li
181.363 171.32 li
f
.607 lw
180.756 171.018 mo
181.522 171.018 li
180.916 171.018 mo
181.81 171.018 li
181.203 171.018 mo
182.128 171.018 li
@
181.363 171.32 mo
181.363 170.714 li
182.128 170.714 li
182.289 171.608 li
182.289 172.374 li
181.522 172.374 li
f
.766 lw
181.522 171.991 mo
182.416 171.991 li
@
182.416 172.374 mo
181.682 172.374 li
181.682 171.608 li
182.128 170.714 li
182.735 170.714 li
182.735 171.32 li
f
182.735 171.32 mo
182.128 171.32 li
182.128 170.714 li
182.289 169.788 li
182.895 169.788 li
182.895 170.395 li
f
182.289 170.395 mo
182.289 169.788 li
182.895 169.788 li
183.055 170.714 li
183.055 171.32 li
182.416 171.32 li
f
.607 lw
182.416 171.018 mo
183.182 171.018 li
182.576 171.018 mo
183.342 171.018 li
182.735 171.018 mo
183.661 171.018 li
@
183.661 171.32 mo
183.055 171.32 li
183.055 170.714 li
183.182 169.788 li
183.789 169.788 li
183.789 170.395 li
f
183.182 170.395 mo
183.182 169.788 li
183.789 169.788 li
183.948 170.714 li
183.948 171.32 li
183.342 171.32 li
f
183.342 171.018 mo
184.108 171.018 li
183.502 171.018 mo
184.427 171.018 li
183.789 171.018 mo
184.555 171.018 li
183.948 171.018 mo
184.714 171.018 li
184.108 171.018 mo
184.874 171.018 li
184.268 171.018 mo
185.034 171.018 li
184.427 171.018 mo
185.321 171.018 li
184.714 171.018 mo
185.641 171.018 li
184.874 171.018 mo
185.8 171.018 li
@
185.8 171.32 mo
185.034 171.32 li
185.034 170.714 li
185.194 169.788 li
185.928 169.788 li
185.928 170.395 li
f
185.194 170.395 mo
185.194 169.788 li
185.928 169.788 li
186.247 170.714 li
186.247 171.32 li
185.641 171.32 li
f
185.641 171.018 mo
186.406 171.018 li
185.8 171.018 mo
186.566 171.018 li
185.928 171.018 mo
186.694 171.018 li
186.087 171.018 mo
186.853 171.018 li
186.247 171.018 mo
187.173 171.018 li
186.566 171.018 mo
187.301 171.018 li
186.694 171.018 mo
187.46 171.018 li
@
187.46 171.32 mo
186.853 171.32 li
186.853 170.714 li
187.013 169.788 li
187.62 169.788 li
187.62 170.395 li
f
187.013 170.395 mo
187.013 169.788 li
187.62 169.788 li
187.939 170.714 li
187.939 171.32 li
187.301 171.32 li
f
187.301 171.018 mo
188.066 171.018 li
187.46 171.018 mo
188.226 171.018 li
@
188.226 171.32 mo
187.62 171.32 li
187.62 170.714 li
187.779 169.788 li
188.386 169.788 li
188.386 170.395 li
f
187.779 170.395 mo
187.779 169.788 li
188.386 169.788 li
188.673 170.714 li
188.673 171.32 li
188.066 171.32 li
f
188.066 171.018 mo
188.833 171.018 li
188.226 171.018 mo
189.152 171.018 li
@
189.152 171.32 mo
188.386 171.32 li
188.386 170.714 li
188.545 169.788 li
189.312 169.788 li
189.312 170.395 li
f
188.545 170.395 mo
188.545 169.788 li
189.312 169.788 li
189.44 170.714 li
189.44 171.32 li
188.673 171.32 li
f
188.673 171.018 mo
189.759 171.018 li
@
189.759 171.32 mo
189.152 171.32 li
189.152 170.714 li
189.312 169.788 li
189.919 169.788 li
189.919 170.395 li
f
189.312 170.395 mo
189.312 169.788 li
189.919 169.788 li
190.045 171.608 li
190.045 172.374 li
189.44 172.374 li
f
.766 lw
189.44 171.991 mo
190.206 171.991 li
@
190.206 172.374 mo
189.599 172.374 li
189.599 171.608 li
189.919 170.714 li
190.525 170.714 li
190.525 171.32 li
f
.607 lw
189.919 171.018 mo
190.684 171.018 li
190.045 171.018 mo
190.812 171.018 li
@
190.812 171.32 mo
190.206 171.32 li
190.206 170.714 li
190.365 169.788 li
190.972 169.788 li
190.972 170.395 li
f
190.365 170.395 mo
190.365 169.788 li
190.972 169.788 li
191.131 170.714 li
191.131 171.32 li
190.525 171.32 li
f
191.131 171.32 mo
190.525 171.32 li
190.525 170.714 li
190.812 169.788 li
191.451 169.788 li
191.451 170.395 li
f
190.812 170.091 mo
191.579 170.091 li
@
190.972 170.395 mo
190.972 169.788 li
191.579 169.788 li
191.738 170.714 li
191.738 171.32 li
191.131 171.32 li
f
191.738 171.32 mo
191.131 171.32 li
191.131 170.714 li
191.291 169.788 li
191.898 169.788 li
191.898 170.395 li
f
191.291 170.395 mo
191.291 169.788 li
191.898 169.788 li
192.185 170.714 li
192.185 171.32 li
191.579 171.32 li
f
192.185 171.32 mo
191.579 171.32 li
191.579 170.714 li
191.738 169.788 li
192.344 169.788 li
192.344 170.395 li
f
191.738 170.091 mo
192.664 170.091 li
@
191.898 170.395 mo
191.898 169.788 li
192.664 169.788 li
192.823 170.714 li
192.823 171.32 li
192.057 171.32 li
f
192.823 171.32 mo
192.057 171.32 li
192.057 170.714 li
192.185 169.788 li
192.951 169.788 li
192.951 170.395 li
f
192.185 170.395 mo
192.185 169.788 li
192.951 169.788 li
193.27 170.714 li
193.27 171.32 li
192.664 171.32 li
f
192.664 171.018 mo
193.43 171.018 li
192.823 171.018 mo
193.558 171.018 li
192.951 171.018 mo
193.717 171.018 li
@
193.717 171.32 mo
193.111 171.32 li
193.111 170.714 li
193.43 169.788 li
194.036 169.788 li
194.036 170.395 li
f
193.43 170.091 mo
194.196 170.091 li
@
193.558 170.395 mo
193.558 169.788 li
194.196 169.788 li
194.323 170.714 li
194.323 171.32 li
193.717 171.32 li
f
194.323 171.32 mo
193.717 171.32 li
193.717 170.714 li
193.877 169.788 li
194.483 169.788 li
194.483 170.395 li
f
193.877 170.395 mo
193.877 169.788 li
194.483 169.788 li
194.643 171.608 li
194.643 172.374 li
194.036 172.374 li
f
194.643 172.374 mo
194.036 172.374 li
194.036 171.608 li
194.323 169.788 li
194.93 169.788 li
194.93 170.395 li
f
194.323 170.395 mo
194.323 169.788 li
194.93 169.788 li
195.09 170.714 li
195.09 171.32 li
194.483 171.32 li
f
195.09 171.32 mo
194.483 171.32 li
194.483 170.714 li
194.643 169.788 li
195.25 169.788 li
195.25 170.395 li
f
194.643 170.395 mo
194.643 169.788 li
195.25 169.788 li
195.409 170.714 li
195.409 171.32 li
194.803 171.32 li
f
195.409 171.32 mo
194.803 171.32 li
194.803 170.714 li
195.09 169.788 li
195.696 169.788 li
195.696 170.395 li
f
195.09 170.395 mo
195.09 169.788 li
195.696 169.788 li
195.856 170.714 li
195.856 171.32 li
195.25 171.32 li
f
195.25 171.018 mo
196.175 171.018 li
195.409 171.018 mo
196.335 171.018 li
195.569 171.018 mo
196.463 171.018 li
195.696 171.018 mo
196.782 171.018 li
196.175 171.018 mo
196.942 171.018 li
@
196.942 171.32 mo
196.335 171.32 li
196.335 170.714 li
196.463 169.788 li
197.069 169.788 li
197.069 170.395 li
f
196.463 170.395 mo
196.463 169.788 li
197.069 169.788 li
197.229 170.714 li
197.229 171.32 li
196.622 171.32 li
f
196.622 171.018 mo
197.548 171.018 li
196.942 171.018 mo
197.708 171.018 li
@
197.708 171.32 mo
197.069 171.32 li
197.069 170.714 li
197.229 169.788 li
197.835 169.788 li
197.835 170.395 li
f
197.229 170.395 mo
197.229 169.788 li
197.835 169.788 li
197.995 170.714 li
197.995 171.32 li
197.389 171.32 li
f
197.995 171.32 mo
197.389 171.32 li
197.389 170.714 li
197.548 169.788 li
198.154 169.788 li
198.154 170.395 li
f
197.548 170.395 mo
197.548 169.788 li
198.154 169.788 li
198.442 170.714 li
198.442 171.32 li
197.835 171.32 li
f
198.442 171.32 mo
197.835 171.32 li
197.835 170.714 li
197.995 169.788 li
198.601 169.788 li
198.601 170.395 li
f
197.995 170.395 mo
197.995 169.788 li
198.601 169.788 li
198.761 170.714 li
198.761 171.32 li
198.154 171.32 li
f
198.154 171.018 mo
198.921 171.018 li
198.314 171.018 mo
199.208 171.018 li
@
199.208 171.32 mo
198.601 171.32 li
198.601 170.714 li
198.761 169.788 li
199.527 169.788 li
199.527 170.395 li
f
198.761 170.091 mo
199.687 170.091 li
@
198.921 170.395 mo
198.921 169.788 li
199.687 169.788 li
199.814 170.714 li
199.814 171.32 li
199.081 171.32 li
f
199.814 171.32 mo
199.081 171.32 li
199.081 170.714 li
199.527 169.788 li
200.134 169.788 li
200.134 170.395 li
f
199.527 170.091 mo
200.293 170.091 li
@
199.687 170.395 mo
199.687 169.788 li
200.293 169.788 li
200.453 170.714 li
200.453 171.32 li
199.814 171.32 li
f
200.453 171.32 mo
199.814 171.32 li
199.814 170.714 li
199.974 169.788 li
200.581 169.788 li
200.581 170.395 li
f
199.974 170.395 mo
199.974 169.788 li
200.581 169.788 li
200.74 170.714 li
200.74 171.32 li
200.134 171.32 li
f
200.134 171.018 mo
201.06 171.018 li
200.453 171.018 mo
201.187 171.018 li
200.581 171.018 mo
201.347 171.018 li
200.74 171.018 mo
201.506 171.018 li
@
201.506 171.32 mo
200.9 171.32 li
200.9 170.714 li
201.187 169.788 li
201.826 169.788 li
201.826 170.395 li
f
201.187 170.395 mo
201.187 169.788 li
201.826 169.788 li
201.954 170.714 li
201.954 171.32 li
201.347 171.32 li
f
201.954 171.32 mo
201.347 171.32 li
201.347 170.714 li
201.506 169.788 li
202.113 169.788 li
202.113 170.395 li
f
201.506 170.395 mo
201.506 169.788 li
202.113 169.788 li
202.273 170.714 li
202.273 171.32 li
201.666 171.32 li
f
201.666 171.018 mo
202.432 171.018 li
@
202.432 171.32 mo
201.826 171.32 li
201.826 170.714 li
202.113 169.788 li
202.72 169.788 li
202.72 170.395 li
f
202.113 170.395 mo
202.113 169.788 li
202.72 169.788 li
203.039 170.714 li
203.039 171.32 li
202.273 171.32 li
f
203.039 171.32 mo
202.273 171.32 li
202.273 170.714 li
202.432 169.788 li
203.199 169.788 li
203.199 170.395 li
f
202.432 170.395 mo
202.432 169.788 li
203.199 169.788 li
203.327 170.714 li
203.327 171.32 li
202.592 171.32 li
f
202.592 171.018 mo
203.645 171.018 li
@
203.645 171.32 mo
203.039 171.32 li
203.039 170.714 li
203.199 169.788 li
203.805 169.788 li
203.805 170.395 li
f
203.199 170.395 mo
203.199 169.788 li
203.805 169.788 li
203.964 170.714 li
203.964 171.32 li
203.327 171.32 li
f
203.327 171.018 mo
204.092 171.018 li
@
204.092 171.32 mo
203.486 171.32 li
203.486 170.714 li
203.645 169.788 li
204.252 169.788 li
204.252 170.395 li
f
203.645 170.091 mo
204.571 170.091 li
203.964 170.091 mo
204.698 170.091 li
204.092 170.091 mo
204.858 170.091 li
204.252 170.091 mo
205.018 170.091 li
204.411 170.091 mo
205.337 170.091 li
204.699 170.091 mo
205.465 170.091 li
@
204.858 170.395 mo
204.858 169.788 li
205.465 169.788 li
205.624 170.714 li
205.624 171.32 li
205.018 171.32 li
f
205.018 171.018 mo
205.784 171.018 li
@
205.784 171.32 mo
205.177 171.32 li
205.177 170.714 li
205.337 169.788 li
205.944 169.788 li
205.944 170.395 li
f
205.337 170.091 mo
206.231 170.091 li
@
205.624 170.395 mo
205.624 169.788 li
206.231 169.788 li
206.551 170.714 li
206.551 171.32 li
205.784 171.32 li
f
206.551 171.32 mo
205.784 171.32 li
205.784 170.714 li
205.944 169.788 li
206.71 169.788 li
206.71 170.395 li
f
205.944 170.395 mo
205.944 169.788 li
206.71 169.788 li
206.837 170.714 li
206.837 171.32 li
206.071 171.32 li
f
206.071 171.018 mo
207.156 171.018 li
206.551 171.018 mo
207.317 171.018 li
206.71 171.018 mo
207.444 171.018 li
206.837 171.018 mo
207.603 171.018 li
@
207.603 171.32 mo
206.998 171.32 li
206.998 170.714 li
207.156 169.788 li
207.763 169.788 li
207.763 170.395 li
f
207.156 170.395 mo
207.156 169.788 li
207.763 169.788 li
208.083 170.714 li
208.083 171.32 li
207.444 171.32 li
f
207.444 171.018 mo
208.211 171.018 li
@
208.211 171.32 mo
207.603 171.32 li
207.603 170.714 li
207.763 169.788 li
208.37 169.788 li
208.37 170.395 li
f
207.763 170.395 mo
207.763 169.788 li
208.37 169.788 li
208.529 170.714 li
208.529 171.32 li
207.923 171.32 li
f
207.923 171.018 mo
208.849 171.018 li
@
208.849 171.32 mo
208.211 171.32 li
208.211 170.714 li
208.37 169.788 li
208.977 169.788 li
208.977 170.395 li
f
208.37 170.395 mo
208.37 169.788 li
208.977 169.788 li
209.137 170.714 li
209.137 171.32 li
208.529 171.32 li
f
209.137 171.32 mo
208.529 171.32 li
208.529 170.714 li
208.689 169.788 li
209.295 169.788 li
209.295 170.395 li
f
208.689 170.091 mo
209.456 170.091 li
208.849 170.091 mo
209.743 170.091 li
@
209.137 170.395 mo
209.137 169.788 li
209.743 169.788 li
210.062 170.714 li
210.062 171.32 li
209.295 171.32 li
f
210.062 171.32 mo
209.295 171.32 li
209.295 170.714 li
209.456 169.788 li
210.222 169.788 li
210.222 170.395 li
f
209.456 170.091 mo
210.349 170.091 li
209.583 170.091 mo
210.668 170.091 li
@
210.062 170.395 mo
210.062 169.788 li
210.669 169.788 li
210.828 170.714 li
210.828 171.32 li
210.222 171.32 li
f
210.828 171.32 mo
210.222 171.32 li
210.222 170.714 li
210.349 169.788 li
210.956 169.788 li
210.956 170.395 li
f
210.349 170.091 mo
211.115 170.091 li
210.509 170.091 mo
211.275 170.091 li
210.669 170.091 mo
211.594 170.091 li
210.956 170.091 mo
211.722 170.091 li
211.116 170.091 mo
211.882 170.091 li
211.275 170.091 mo
212.042 170.091 li
@
211.435 170.395 mo
211.435 169.788 li
212.041 169.788 li
212.329 170.714 li
212.329 171.32 li
211.722 171.32 li
f
211.722 171.018 mo
212.488 171.018 li
211.882 171.018 mo
212.648 171.018 li
@
212.648 171.32 mo
212.041 171.32 li
212.041 170.714 li
212.201 169.788 li
212.807 169.788 li
212.807 170.395 li
f
212.201 170.395 mo
212.201 169.788 li
212.807 169.788 li
213.095 170.714 li
213.095 171.32 li
212.488 171.32 li
f
213.095 171.32 mo
212.488 171.32 li
212.488 170.714 li
212.648 169.788 li
213.254 169.788 li
213.254 170.395 li
f
212.648 170.395 mo
212.648 169.788 li
213.254 169.788 li
213.573 170.714 li
213.573 171.32 li
212.807 171.32 li
f
212.807 171.018 mo
213.733 171.018 li
@
213.733 171.32 mo
212.967 171.32 li
212.967 170.714 li
213.095 169.788 li
213.861 169.788 li
213.861 170.395 li
f
213.095 170.395 mo
213.095 169.788 li
213.861 169.788 li
214.18 170.714 li
214.18 171.32 li
213.573 171.32 li
f
213.573 171.018 mo
214.339 171.018 li
@
214.339 171.32 mo
213.733 171.32 li
213.733 170.714 li
213.861 169.788 li
214.468 169.788 li
214.468 170.395 li
f
213.861 170.091 mo
214.627 170.091 li
214.02 170.091 mo
214.946 170.091 li
@
214.339 170.395 mo
214.339 169.788 li
214.946 169.788 li
215.106 170.714 li
215.106 171.32 li
214.468 171.32 li
f
214.468 171.018 mo
215.234 171.018 li
@
215.234 171.32 mo
214.627 171.32 li
214.627 170.714 li
214.786 169.788 li
215.394 169.788 li
215.394 170.395 li
f
214.786 170.091 mo
215.553 170.091 li
214.946 170.091 mo
215.84 170.091 li
215.234 170.091 mo
216 170.091 li
@
216 170.395 mo
215.394 170.395 li
215.394 169.788 li
215.553 168.862 li
216.16 168.862 li
216.16 169.501 li
f
215.553 169.501 mo
215.553 168.862 li
216.16 168.862 li
216.319 169.788 li
216.319 170.395 li
215.712 170.395 li
f
215.712 170.091 mo
216.606 170.091 li
216 170.091 mo
216.767 170.091 li
@
216.16 170.395 mo
216.16 169.788 li
216.767 169.788 li
217.085 170.714 li
217.085 171.32 li
216.319 171.32 li
f
217.085 171.32 mo
216.319 171.32 li
216.319 170.714 li
216.478 169.788 li
217.213 169.788 li
217.213 170.395 li
f
216.478 170.395 mo
216.478 169.788 li
217.213 169.788 li
217.372 170.714 li
217.372 171.32 li
216.606 171.32 li
f
217.372 171.32 mo
216.606 171.32 li
216.606 170.714 li
217.085 169.788 li
217.692 169.788 li
217.692 170.395 li
f
217.085 170.395 mo
217.085 169.788 li
217.692 169.788 li
217.852 170.714 li
217.852 171.32 li
217.213 171.32 li
f
217.852 171.32 mo
217.213 171.32 li
217.213 170.714 li
217.372 169.788 li
217.978 169.788 li
217.978 170.395 li
f
217.372 170.395 mo
217.372 169.788 li
217.978 169.788 li
218.139 170.714 li
218.139 171.32 li
217.532 171.32 li
f
218.139 171.32 mo
217.532 171.32 li
217.532 170.714 li
217.852 169.788 li
218.458 169.788 li
218.458 170.395 li
f
217.852 170.395 mo
217.852 169.788 li
218.458 169.788 li
218.586 170.714 li
218.586 171.32 li
217.978 171.32 li
f
218.586 171.32 mo
217.978 171.32 li
217.978 170.714 li
218.139 169.788 li
218.745 169.788 li
218.745 170.395 li
f
218.139 170.091 mo
218.904 170.091 li
218.299 170.091 mo
219.064 170.091 li
218.458 170.091 mo
219.352 170.091 li
218.745 170.091 mo
219.511 170.091 li
@
219.512 170.395 mo
218.904 170.395 li
218.904 169.788 li
219.064 168.862 li
219.671 168.862 li
219.671 169.501 li
f
219.064 169.501 mo
219.064 168.862 li
219.671 168.862 li
219.831 170.714 li
219.831 171.32 li
219.225 171.32 li
f
219.831 171.32 mo
219.225 171.32 li
219.225 170.714 li
219.512 169.788 li
220.118 169.788 li
220.118 170.395 li
f
219.512 170.091 mo
220.278 170.091 li
219.671 170.091 mo
220.597 170.091 li
219.831 170.091 mo
220.724 170.091 li
219.99 170.091 mo
220.885 170.091 li
220.118 170.091 mo
221.204 170.091 li
220.597 170.091 mo
221.363 170.091 li
220.724 170.091 mo
221.491 170.091 li
220.885 170.091 mo
221.65 170.091 li
@
221.044 170.395 mo
221.044 169.788 li
221.65 169.788 li
221.969 170.714 li
221.969 171.32 li
221.363 171.32 li
f
221.363 171.018 mo
222.097 171.018 li
221.491 171.018 mo
222.257 171.018 li
@
222.256 171.32 mo
221.65 171.32 li
221.65 170.714 li
221.81 169.788 li
222.417 169.788 li
222.417 170.395 li
f
221.81 170.091 mo
222.577 170.091 li
221.969 170.091 mo
222.863 170.091 li
@
222.256 170.395 mo
222.256 169.788 li
222.863 169.788 li
223.023 170.714 li
223.023 171.32 li
222.417 171.32 li
f
223.023 171.32 mo
222.417 171.32 li
222.417 170.714 li
222.577 169.788 li
223.183 169.788 li
223.183 170.395 li
f
222.577 170.395 mo
222.577 169.788 li
223.183 169.788 li
223.342 170.714 li
223.342 171.32 li
222.735 171.32 li
f
223.342 171.32 mo
222.735 171.32 li
222.735 170.714 li
223.023 169.788 li
223.629 169.788 li
223.629 170.395 li
f
.153 lw
1 lc
1 lj
223.471 126.403 mo
223.63 126.403 li
28.287 126.403 mo
223.471 126.403 li
28.287 223.389 mo
223.629 223.389 li
223.47 223.389 mo
223.471 126.403 li
223.471 126.275 li
28.287 223.389 mo
28.287 126.275 li
213.861 126.403 mo
213.861 128.542 li
203.964 126.403 mo
203.964 128.542 li
194.196 126.403 mo
194.196 128.542 li
184.427 126.403 mo
184.427 128.542 li
165.018 126.403 mo
165.018 128.542 li
155.121 126.403 mo
155.121 128.542 li
145.352 126.403 mo
145.352 128.542 li
135.584 126.403 mo
135.584 128.542 li
116.206 126.403 mo
116.206 128.542 li
106.277 126.403 mo
106.277 128.542 li
96.509 126.403 mo
96.509 128.542 li
86.74 126.403 mo
86.74 128.542 li
67.362 126.403 mo
67.362 128.542 li
57.434 126.403 mo
57.434 128.542 li
47.665 126.403 mo
47.665 128.542 li
37.897 126.403 mo
37.897 128.542 li
223.471 126.403 mo
223.471 130.395 li
174.659 126.403 mo
174.659 130.395 li
125.815 126.403 mo
125.815 130.395 li
76.971 126.403 mo
76.971 130.395 li
28.287 126.403 mo
28.287 130.395 li
213.861 223.389 mo
213.861 221.25 li
203.964 223.389 mo
203.964 221.25 li
194.196 223.389 mo
194.196 221.25 li
184.427 223.389 mo
184.427 221.25 li
165.018 223.389 mo
165.018 221.25 li
155.121 223.389 mo
155.121 221.25 li
145.352 223.389 mo
145.352 221.25 li
135.584 223.389 mo
135.584 221.25 li
116.206 223.389 mo
116.206 221.25 li
106.277 223.389 mo
106.277 221.25 li
96.509 223.389 mo
96.509 221.25 li
86.74 223.389 mo
86.74 221.25 li
67.362 223.389 mo
67.362 221.25 li
57.434 223.389 mo
57.434 221.25 li
47.665 223.389 mo
47.665 221.25 li
37.897 223.389 mo
37.897 221.25 li
223.47 223.389 mo
223.47 219.43 li
174.658 223.389 mo
174.658 219.43 li
125.815 223.389 mo
125.815 219.43 li
76.971 223.389 mo
76.971 219.43 li
28.287 223.389 mo
28.287 219.43 li
223.471 136.332 mo
219.512 136.332 li
223.471 150.857 mo
219.512 150.857 li
223.47 165.351 mo
219.512 165.351 li
223.47 179.876 mo
219.512 179.876 li
223.47 194.37 mo
219.512 194.37 li
223.47 208.896 mo
219.512 208.896 li
223.47 223.389 mo
219.512 223.389 li
28.287 132.533 mo
30.267 132.533 li
28.287 138.471 mo
30.267 138.471 li
28.287 144.601 mo
30.267 144.601 li
28.287 156.667 mo
30.267 156.667 li
28.287 162.765 mo
30.267 162.765 li
28.287 168.862 mo
30.267 168.862 li
28.287 180.93 mo
30.267 180.93 li
28.287 187.06 mo
30.267 187.06 li
28.287 192.997 mo
30.267 192.997 li
28.287 205.224 mo
30.267 205.224 li
28.287 211.193 mo
30.267 211.193 li
28.287 217.291 mo
30.267 217.291 li
28.287 126.403 mo
32.246 126.403 li
28.287 150.698 mo
32.246 150.698 li
28.287 174.832 mo
32.246 174.832 li
28.287 199.126 mo
32.246 199.126 li
28.287 223.389 mo
32.246 223.389 li
@
19.998 222.368 mo
19.998 221.824 20.054 221.387 20.166 221.054 cv
20.277 220.723 20.443 220.467 20.663 220.288 cv
20.884 220.108 21.161 220.02 21.495 220.02 cv
21.741 220.02 21.957 220.069 22.144 220.169 cv
22.33 220.268 22.483 220.411 22.604 220.598 cv
22.725 220.785 22.819 221.013 22.888 221.28 cv
22.957 221.55 22.991 221.911 22.991 222.368 cv
22.991 222.907 22.935 223.343 22.825 223.674 cv
22.715 224.007 22.549 224.262 22.329 224.442 cv
22.109 224.623 21.831 224.712 21.495 224.712 cv
21.052 224.712 20.705 224.554 20.452 224.238 cv
20.149 223.854 19.998 223.231 19.998 222.368 cv
cp
20.576 222.365 mo
20.576 223.122 20.664 223.624 20.841 223.873 cv
21.018 224.122 21.235 224.246 21.495 224.246 cv
21.754 224.246 21.972 224.122 22.148 223.871 cv
22.325 223.622 22.413 223.12 22.413 222.365 cv
22.413 221.609 22.325 221.107 22.149 220.857 cv
21.973 220.609 21.752 220.484 21.488 220.484 cv
21.229 220.484 21.022 220.595 20.866 220.814 cv
20.673 221.094 20.576 221.611 20.576 222.365 cv
f
22.961 199.799 mo
22.961 200.339 li
19.927 200.339 li
19.923 200.203 19.945 200.073 19.993 199.947 cv
20.07 199.741 20.193 199.538 20.363 199.338 cv
20.534 199.138 20.78 198.906 21.101 198.644 cv
21.6 198.232 21.937 197.906 22.112 197.667 cv
22.288 197.428 22.375 197.201 22.375 196.987 cv
22.375 196.764 22.295 196.575 22.136 196.421 cv
21.976 196.268 21.768 196.19 21.511 196.19 cv
21.24 196.19 21.023 196.272 20.86 196.435 cv
20.698 196.597 20.615 196.822 20.613 197.109 cv
20.035 197.051 li
20.075 196.62 20.224 196.29 20.482 196.064 cv
20.741 195.838 21.088 195.725 21.524 195.725 cv
21.964 195.725 22.312 195.847 22.569 196.092 cv
22.825 196.337 22.953 196.64 22.953 197.001 cv
22.953 197.185 22.916 197.366 22.841 197.544 cv
22.766 197.722 22.642 197.908 22.467 198.105 cv
22.294 198.301 22.004 198.57 21.6 198.914 cv
21.262 199.198 21.045 199.392 20.949 199.492 cv
20.853 199.594 20.773 199.696 20.711 199.799 cv
22.961 199.799 li
f
21.801 176.204 mo
21.801 175.106 li
19.815 175.106 li
19.815 174.592 li
21.905 171.611 li
22.367 171.611 li
22.367 174.592 li
22.986 174.592 li
22.986 175.106 li
22.367 175.106 li
22.367 176.204 li
21.801 176.204 li
cp
21.801 174.592 mo
21.801 172.52 li
20.368 174.592 li
21.801 174.592 li
f
22.923 148.439 mo
22.362 148.484 li
22.312 148.263 22.241 148.103 22.149 148.002 cv
21.997 147.842 21.809 147.761 21.585 147.761 cv
21.406 147.761 21.248 147.811 21.111 147.912 cv
20.935 148.041 20.795 148.23 20.693 148.479 cv
20.59 148.727 20.538 149.081 20.533 149.54 cv
20.669 149.333 20.835 149.18 21.032 149.08 cv
21.228 148.98 21.434 148.929 21.649 148.929 cv
22.026 148.929 22.346 149.067 22.61 149.345 cv
22.874 149.621 23.007 149.98 23.007 150.418 cv
23.007 150.707 22.944 150.975 22.82 151.223 cv
22.696 151.47 22.525 151.66 22.308 151.791 cv
22.09 151.923 21.844 151.988 21.568 151.988 cv
21.098 151.988 20.714 151.817 20.418 151.47 cv
20.12 151.124 19.972 150.555 19.972 149.76 cv
19.972 148.872 20.136 148.226 20.464 147.822 cv
20.75 147.471 21.136 147.296 21.62 147.296 cv
21.981 147.296 22.278 147.397 22.508 147.6 cv
22.739 147.802 22.877 148.082 22.923 148.439 cv
cp
20.621 150.42 mo
20.621 150.614 20.662 150.801 20.744 150.979 cv
20.827 151.156 20.942 151.291 21.09 151.384 cv
21.237 151.478 21.393 151.522 21.558 151.522 cv
21.797 151.522 22.002 151.428 22.173 151.235 cv
22.344 151.043 22.429 150.782 22.429 150.452 cv
22.429 150.135 22.345 149.885 22.176 149.702 cv
22.007 149.52 21.794 149.428 21.536 149.428 cv
21.281 149.428 21.064 149.52 20.887 149.702 cv
20.709 149.885 20.621 150.124 20.621 150.42 cv
f
20.867 125.154 mo
20.633 125.068 20.459 124.946 20.346 124.788 cv
20.233 124.63 20.176 124.439 20.176 124.218 cv
20.176 123.884 20.296 123.603 20.537 123.376 cv
20.776 123.147 21.096 123.034 21.495 123.034 cv
21.895 123.034 22.218 123.151 22.462 123.384 cv
22.707 123.616 22.829 123.899 22.829 124.233 cv
22.829 124.446 22.773 124.632 22.661 124.79 cv
22.55 124.946 22.38 125.068 22.153 125.154 cv
22.435 125.246 22.648 125.395 22.795 125.6 cv
22.942 125.805 23.016 126.049 23.016 126.333 cv
23.016 126.727 22.877 127.058 22.599 127.325 cv
22.322 127.593 21.957 127.727 21.504 127.727 cv
21.052 127.727 20.687 127.592 20.41 127.323 cv
20.132 127.055 19.994 126.72 19.994 126.318 cv
19.994 126.019 20.069 125.769 20.221 125.567 cv
20.372 125.364 20.587 125.228 20.867 125.154 cv
cp
20.754 124.2 mo
20.754 124.417 20.824 124.595 20.963 124.731 cv
21.102 124.87 21.284 124.939 21.509 124.939 cv
21.727 124.939 21.906 124.87 22.043 124.733 cv
22.182 124.597 22.25 124.429 22.25 124.231 cv
22.25 124.025 22.18 123.851 22.037 123.71 cv
21.894 123.569 21.716 123.499 21.502 123.499 cv
21.286 123.499 21.107 123.567 20.966 123.706 cv
20.825 123.843 20.754 124.009 20.754 124.2 cv
cp
20.571 126.32 mo
20.571 126.481 20.609 126.637 20.685 126.788 cv
20.76 126.939 20.873 127.055 21.023 127.138 cv
21.174 127.22 21.336 127.261 21.509 127.261 cv
21.779 127.261 22.002 127.174 22.176 127.001 cv
22.351 126.827 22.437 126.606 22.437 126.339 cv
22.437 126.067 22.348 125.843 22.169 125.665 cv
21.989 125.487 21.763 125.398 21.49 125.398 cv
21.225 125.398 21.005 125.486 20.831 125.662 cv
20.658 125.838 20.571 126.057 20.571 126.32 cv
f
25.741 229.031 mo
27.479 229.031 li
27.479 228.466 li
25.741 228.466 li
cp
f
27.79 229.21 mo
28.38 229.16 li
28.424 229.446 28.526 229.663 28.685 229.808 cv
28.844 229.952 29.037 230.024 29.264 230.024 cv
29.537 230.024 29.767 229.923 29.954 229.718 cv
30.141 229.513 30.234 229.243 30.234 228.905 cv
30.234 228.584 30.144 228.331 29.965 228.146 cv
29.785 227.96 29.548 227.867 29.254 227.867 cv
29.071 227.867 28.907 227.907 28.761 227.991 cv
28.616 228.073 28.501 228.18 28.418 228.312 cv
27.89 228.241 li
28.334 225.885 li
30.617 225.885 li
30.617 226.425 li
28.783 226.425 li
28.538 227.657 li
28.814 227.464 29.103 227.368 29.405 227.368 cv
29.806 227.368 30.144 227.507 30.42 227.785 cv
30.695 228.063 30.833 228.419 30.833 228.856 cv
30.833 229.272 30.712 229.63 30.47 229.932 cv
30.175 230.304 29.774 230.49 29.265 230.49 cv
28.847 230.49 28.506 230.373 28.243 230.139 cv
27.979 229.906 27.828 229.596 27.79 229.21 cv
f
75.86 228.145 mo
75.86 227.601 75.916 227.163 76.027 226.832 cv
76.139 226.499 76.305 226.245 76.525 226.065 cv
76.745 225.887 77.023 225.797 77.356 225.797 cv
77.603 225.797 77.819 225.847 78.005 225.945 cv
78.192 226.046 78.345 226.188 78.466 226.375 cv
78.586 226.562 78.681 226.79 78.75 227.059 cv
78.818 227.327 78.853 227.689 78.853 228.145 cv
78.853 228.684 78.797 229.119 78.687 229.452 cv
78.576 229.783 78.411 230.04 78.191 230.22 cv
77.971 230.399 77.692 230.49 77.356 230.49 cv
76.914 230.49 76.566 230.332 76.314 230.015 cv
76.011 229.632 75.86 229.008 75.86 228.145 cv
cp
76.437 228.144 mo
76.437 228.899 76.526 229.402 76.703 229.65 cv
76.879 229.9 77.097 230.024 77.356 230.024 cv
77.616 230.024 77.834 229.898 78.01 229.649 cv
78.187 229.398 78.275 228.897 78.275 228.144 cv
78.275 227.387 78.187 226.884 78.01 226.636 cv
77.835 226.387 77.614 226.263 77.35 226.263 cv
77.091 226.263 76.883 226.372 76.728 226.592 cv
76.534 226.871 76.437 227.389 76.437 228.144 cv
f
124.379 229.21 mo
124.969 229.16 li
125.013 229.446 125.115 229.663 125.274 229.808 cv
125.433 229.952 125.625 230.024 125.852 230.024 cv
126.126 230.024 126.356 229.923 126.543 229.718 cv
126.73 229.513 126.823 229.243 126.823 228.905 cv
126.823 228.584 126.733 228.331 126.554 228.146 cv
126.374 227.96 126.138 227.867 125.843 227.867 cv
125.66 227.867 125.496 227.907 125.35 227.991 cv
125.205 228.073 125.09 228.18 125.007 228.312 cv
124.479 228.241 li
124.924 225.885 li
127.206 225.885 li
127.206 226.425 li
125.372 226.425 li
125.127 227.657 li
125.403 227.464 125.692 227.368 125.995 227.368 cv
126.395 227.368 126.733 227.507 127.009 227.785 cv
127.284 228.063 127.422 228.419 127.422 228.856 cv
127.422 229.272 127.301 229.63 127.059 229.932 cv
126.765 230.304 126.363 230.49 125.854 230.49 cv
125.436 230.49 125.096 230.373 124.831 230.139 cv
124.567 229.906 124.416 229.596 124.379 229.21 cv
f
173.971 230.411 mo
173.406 230.411 li
173.406 226.815 li
173.27 226.945 173.092 227.074 172.872 227.204 cv
172.652 227.334 172.454 227.431 172.279 227.496 cv
172.279 226.95 li
172.595 226.802 172.87 226.622 173.106 226.411 cv
173.342 226.2 173.508 225.995 173.606 225.797 cv
173.971 225.797 li
173.971 230.411 li
f
175.363 228.145 mo
175.363 227.601 175.418 227.163 175.53 226.832 cv
175.642 226.499 175.808 226.245 176.028 226.065 cv
176.248 225.887 176.525 225.797 176.859 225.797 cv
177.106 225.797 177.322 225.847 177.508 225.945 cv
177.695 226.046 177.848 226.188 177.969 226.375 cv
178.089 226.562 178.184 226.79 178.252 227.059 cv
178.321 227.327 178.356 227.689 178.356 228.145 cv
178.356 228.684 178.301 229.119 178.19 229.452 cv
178.079 229.783 177.914 230.04 177.694 230.22 cv
177.474 230.399 177.195 230.49 176.859 230.49 cv
176.417 230.49 176.069 230.332 175.817 230.015 cv
175.514 229.632 175.363 229.008 175.363 228.145 cv
cp
175.941 228.144 mo
175.941 228.899 176.029 229.402 176.206 229.65 cv
176.382 229.9 176.6 230.024 176.859 230.024 cv
177.119 230.024 177.336 229.898 177.513 229.649 cv
177.689 229.398 177.778 228.897 177.778 228.144 cv
177.778 227.387 177.689 226.884 177.514 226.636 cv
177.337 226.387 177.117 226.263 176.853 226.263 cv
176.594 226.263 176.387 226.372 176.231 226.592 cv
176.037 226.871 175.941 227.389 175.941 228.144 cv
f
222.369 230.411 mo
221.804 230.411 li
221.804 226.815 li
221.668 226.945 221.491 227.074 221.27 227.204 cv
221.05 227.334 220.852 227.431 220.677 227.496 cv
220.677 226.95 li
220.993 226.802 221.268 226.622 221.504 226.411 cv
221.74 226.2 221.907 225.995 222.005 225.797 cv
222.369 225.797 li
222.369 230.411 li
f
223.729 229.21 mo
224.319 229.16 li
224.363 229.446 224.465 229.663 224.624 229.808 cv
224.783 229.952 224.976 230.024 225.203 230.024 cv
225.476 230.024 225.706 229.923 225.893 229.718 cv
226.08 229.513 226.173 229.243 226.173 228.905 cv
226.173 228.584 226.083 228.331 225.904 228.146 cv
225.724 227.96 225.487 227.867 225.192 227.867 cv
225.01 227.867 224.846 227.907 224.7 227.991 cv
224.555 228.073 224.44 228.18 224.356 228.312 cv
223.829 228.241 li
224.273 225.885 li
226.556 225.885 li
226.556 226.425 li
224.722 226.425 li
224.477 227.657 li
224.752 227.464 225.042 227.368 225.344 227.368 cv
225.745 227.368 226.082 227.507 226.358 227.785 cv
226.634 228.063 226.771 228.419 226.771 228.856 cv
226.771 229.272 226.65 229.63 226.409 229.932 cv
226.114 230.304 225.713 230.49 225.204 230.49 cv
224.786 230.49 224.445 230.373 224.182 230.139 cv
223.917 229.906 223.766 229.596 223.729 229.21 cv
f
11.048 223.272 mo
4.70499 223.272 li
4.70499 218.99 li
5.45299 218.99 li
5.45299 222.433 li
7.41499 222.433 li
7.41499 219.456 li
8.16399 219.456 li
8.16399 222.433 li
11.048 222.433 li
11.048 223.272 li
f
4.70499 218.09 mo
11.048 218.09 li
11.048 217.309 li
4.70499 217.309 li
cp
f
8.74999 216.229 mo
7.89899 216.229 7.26999 215.992 6.86099 215.52 cv
6.52099 215.125 6.35099 214.645 6.35099 214.077 cv
6.35099 213.446 6.55799 212.931 6.97099 212.53 cv
7.38399 212.13 7.95599 211.93 8.68499 211.93 cv
9.27499 211.93 9.73999 212.019 10.079 212.195 cv
10.417 212.373 10.68 212.631 10.867 212.97 cv
11.054 213.308 11.148 213.677 11.148 214.077 cv
11.148 214.72 10.942 215.238 10.53 215.634 cv
10.118 216.03 9.52499 216.229 8.74999 216.229 cv
cp
8.74799 215.43 mo
9.33499 215.43 9.77599 215.302 10.069 215.046 cv
10.361 214.789 10.508 214.466 10.508 214.077 cv
10.508 213.692 10.361 213.369 10.066 213.112 cv
9.77199 212.856 9.32399 212.729 8.72099 212.729 cv
8.15299 212.729 7.72299 212.857 7.42999 213.115 cv
7.13799 213.373 6.99099 213.693 6.99099 214.077 cv
6.99099 214.466 7.13699 214.789 7.42799 215.046 cv
7.71899 215.302 8.15899 215.43 8.74799 215.43 cv
f
11.048 210.056 mo
6.45099 211.457 li
6.45099 210.653 li
9.10799 209.92 li
10.092 209.653 li
10.042 209.642 9.72699 209.562 9.14499 209.411 cv
6.45099 208.679 li
6.45099 207.887 li
9.12099 207.193 li
9.99699 206.968 li
9.10899 206.704 li
6.45099 205.911 li
6.45099 205.155 li
11.048 206.599 li
11.048 207.4 li
8.29899 208.129 li
7.51099 208.314 li
11.048 209.253 li
11.048 210.056 li
f
11.048 201.93 mo
4.70499 201.93 li
4.70499 199.121 li
4.70499 198.557 4.76199 198.128 4.87599 197.835 cv
4.98999 197.541 5.19099 197.306 5.47899 197.131 cv
5.76899 196.955 6.08699 196.867 6.43599 196.867 cv
6.88699 196.867 7.26599 197.013 7.57499 197.304 cv
7.88399 197.594 8.07999 198.043 8.16399 198.65 cv
8.27099 198.429 8.37499 198.261 8.47899 198.146 cv
8.70399 197.9 8.98499 197.669 9.32299 197.451 cv
11.048 196.355 li
11.048 197.402 li
9.72899 198.24 li
9.34899 198.485 9.05699 198.687 8.85499 198.845 cv
8.65399 199.003 8.51199 199.145 8.43099 199.271 cv
8.34999 199.396 8.29199 199.522 8.26099 199.652 cv
8.23999 199.748 8.22999 199.902 8.22999 200.118 cv
8.22999 201.09 li
11.048 201.09 li
11.048 201.93 li
cp
7.50699 201.09 mo
7.50699 199.289 li
7.50699 198.907 7.46699 198.607 7.38699 198.392 cv
7.30799 198.176 7.18099 198.012 7.00599 197.9 cv
6.83099 197.788 6.64099 197.731 6.43499 197.731 cv
6.13499 197.731 5.88799 197.84 5.69399 198.058 cv
5.49999 198.275 5.40299 198.617 5.40299 199.087 cv
5.40299 201.09 li
7.50699 201.09 li
f
10.475 192.631 mo
10.721 192.918 10.894 193.196 10.996 193.463 cv
11.097 193.731 11.148 194.018 11.148 194.324 cv
11.148 194.83 11.025 195.219 10.778 195.49 cv
10.532 195.763 10.217 195.897 9.83299 195.897 cv
9.60899 195.897 9.40399 195.847 9.21799 195.744 cv
9.03199 195.642 8.88199 195.507 8.76999 195.341 cv
8.65799 195.175 8.57299 194.987 8.51499 194.779 cv
8.47499 194.626 8.43599 194.395 8.39799 194.085 cv
8.32299 193.455 8.23399 192.991 8.12999 192.693 cv
8.02299 192.69 7.95599 192.689 7.92599 192.689 cv
7.60899 192.689 7.38499 192.763 7.25499 192.91 cv
7.07999 193.109 6.99099 193.406 6.99099 193.8 cv
6.99099 194.166 7.05599 194.438 7.18399 194.612 cv
7.31199 194.787 7.53899 194.916 7.86399 195 cv
7.76399 195.765 li
7.43899 195.696 7.17599 195.581 6.97599 195.423 cv
6.77499 195.264 6.62099 195.034 6.51299 194.733 cv
6.40499 194.434 6.35099 194.085 6.35099 193.689 cv
6.35099 193.296 6.39699 192.977 6.48899 192.731 cv
6.58199 192.485 6.69699 192.305 6.83699 192.189 cv
6.97699 192.073 7.15299 191.993 7.36599 191.946 cv
7.49799 191.921 7.73699 191.907 8.08399 191.907 cv
9.12199 191.907 li
9.84599 191.907 10.304 191.892 10.496 191.859 cv
10.687 191.826 10.872 191.763 11.048 191.666 cv
11.048 192.481 li
10.885 192.559 10.694 192.608 10.475 192.631 cv
cp
8.73699 192.697 mo
8.85299 192.981 8.95099 193.405 9.03199 193.971 cv
9.07799 194.291 9.12999 194.518 9.18799 194.651 cv
9.24599 194.783 9.33099 194.887 9.44099 194.959 cv
9.55299 195.03 9.67599 195.067 9.81299 195.067 cv
10.021 195.067 10.194 194.988 10.333 194.83 cv
10.471 194.672 10.541 194.442 10.541 194.138 cv
10.541 193.837 10.476 193.569 10.344 193.335 cv
10.213 193.101 10.033 192.929 9.80399 192.819 cv
9.62699 192.735 9.36799 192.693 9.02299 192.693 cv
8.73699 192.697 li
f
10.35 188.886 mo
11.038 188.786 li
11.084 189.006 11.106 189.202 11.106 189.375 cv
11.106 189.658 11.062 189.877 10.972 190.033 cv
10.883 190.189 10.766 190.299 10.62 190.362 cv
10.474 190.426 10.168 190.457 9.69999 190.457 cv
7.05799 190.457 li
7.05799 191.031 li
6.45099 191.031 li
6.45099 190.457 li
5.31399 190.457 li
4.84699 189.676 li
6.45099 189.676 li
6.45099 188.886 li
7.05799 188.886 li
7.05799 189.676 li
9.74699 189.676 li
9.96899 189.676 10.112 189.662 10.175 189.634 cv
10.239 189.606 10.29 189.562 10.327 189.499 cv
10.364 189.437 10.383 189.348 10.383 189.231 cv
10.383 189.144 10.372 189.028 10.35 188.886 cv
f
9.56799 184.987 mo
9.66799 184.182 li
10.137 184.309 10.501 184.543 10.76 184.886 cv
11.019 185.23 11.148 185.667 11.148 186.2 cv
11.148 186.871 10.941 187.404 10.527 187.797 cv
10.114 188.19 9.53499 188.388 8.78899 188.388 cv
8.01599 188.388 7.41699 188.189 6.99099 187.791 cv
6.56399 187.394 6.35099 186.877 6.35099 186.243 cv
6.35099 185.63 6.55999 185.128 6.97699 184.739 cv
7.39499 184.35 7.98099 184.155 8.73699 184.155 cv
8.78399 184.155 8.85299 184.157 8.94499 184.16 cv
8.94499 187.589 li
9.44999 187.56 9.83699 187.418 10.105 187.16 cv
10.373 186.903 10.508 186.583 10.508 186.2 cv
10.508 185.914 10.433 185.67 10.284 185.468 cv
10.134 185.266 9.89599 185.106 9.56799 184.987 cv
cp
8.30499 187.548 mo
8.30499 184.979 li
7.91999 185.014 7.63099 185.111 7.43899 185.273 cv
7.14099 185.522 6.99099 185.844 6.99099 186.239 cv
6.99099 186.598 7.11099 186.898 7.34899 187.143 cv
7.58699 187.387 7.90599 187.522 8.30499 187.548 cv
f
5.17999 171.729 mo
6.57999 172.166 li
6.57999 172.324 li
6.20399 172.228 5.93799 172.239 5.78299 172.359 cv
5.62799 172.48 5.54999 172.755 5.54999 173.186 cv
5.54999 175.064 li
10.207 176.657 li
10.455 176.742 10.631 176.75 10.735 176.681 cv
10.839 176.611 10.891 176.454 10.891 176.209 cv
10.891 175.977 li
11.048 176.03 li
11.048 178.641 li
10.891 178.587 li
10.891 178.436 li
10.891 178.183 10.839 177.983 10.734 177.839 cv
10.629 177.695 10.456 177.582 10.215 177.5 cv
6.01399 176.063 li
5.77199 175.981 5.59999 175.975 5.49499 176.045 cv
5.38999 176.116 5.33799 176.279 5.33799 176.536 cv
5.33799 176.688 li
5.17999 176.634 li
5.17999 171.729 li
f
12.91 166.511 mo
12.369 166.939 11.735 167.301 11.009 167.597 cv
10.283 167.893 9.53099 168.04 8.75299 168.04 cv
8.06799 168.04 7.41099 167.93 6.78299 167.708 cv
6.05399 167.45 5.32899 167.051 4.60499 166.511 cv
4.60499 165.954 li
5.20399 166.302 5.63199 166.531 5.88899 166.644 cv
6.28599 166.818 6.70098 166.956 7.13299 167.057 cv
7.67199 167.181 8.21299 167.242 8.75799 167.242 cv
10.144 167.242 11.528 166.813 12.91 165.954 cv
12.91 166.511 li
f
10.475 161.925 mo
10.721 162.212 10.894 162.49 10.996 162.757 cv
11.097 163.025 11.148 163.312 11.148 163.618 cv
11.148 164.124 11.025 164.513 10.778 164.784 cv
10.532 165.057 10.217 165.192 9.83299 165.192 cv
9.60899 165.192 9.40399 165.141 9.21799 165.038 cv
9.03199 164.936 8.88199 164.801 8.76999 164.635 cv
8.65799 164.469 8.57299 164.281 8.51499 164.073 cv
8.47499 163.92 8.43599 163.689 8.39799 163.379 cv
8.32299 162.749 8.23399 162.285 8.12999 161.987 cv
8.02299 161.984 7.95599 161.983 7.92599 161.983 cv
7.60899 161.983 7.38499 162.057 7.25499 162.204 cv
7.07999 162.403 6.99099 162.7 6.99099 163.094 cv
6.99099 163.46 7.05599 163.731 7.18399 163.906 cv
7.31199 164.081 7.53899 164.21 7.86399 164.294 cv
7.76399 165.059 li
7.43899 164.99 7.17599 164.876 6.97599 164.717 cv
6.77499 164.558 6.62099 164.328 6.51299 164.027 cv
6.40499 163.728 6.35099 163.379 6.35099 162.983 cv
6.35099 162.59 6.39699 162.271 6.48899 162.025 cv
6.58199 161.779 6.69699 161.599 6.83699 161.483 cv
6.97699 161.368 7.15299 161.287 7.36599 161.24 cv
7.49799 161.215 7.73699 161.201 8.08399 161.201 cv
9.12199 161.201 li
9.84599 161.201 10.304 161.186 10.496 161.153 cv
10.687 161.12 10.872 161.057 11.048 160.96 cv
11.048 161.775 li
10.885 161.853 10.694 161.902 10.475 161.925 cv
cp
8.73699 161.991 mo
8.85299 162.275 8.95099 162.699 9.03199 163.265 cv
9.07799 163.585 9.12999 163.812 9.18799 163.945 cv
9.24599 164.077 9.33099 164.181 9.44099 164.253 cv
9.55299 164.325 9.67599 164.36 9.81299 164.36 cv
10.021 164.36 10.194 164.282 10.333 164.124 cv
10.471 163.966 10.541 163.735 10.541 163.432 cv
10.541 163.131 10.476 162.863 10.344 162.629 cv
10.213 162.395 10.033 162.223 9.80399 162.113 cv
9.62699 162.029 9.36799 161.987 9.02299 161.987 cv
8.73699 161.991 li
f
11.048 160.043 mo
6.45099 160.043 li
6.45099 159.337 li
7.15299 159.337 li
6.82699 159.158 6.61099 158.992 6.50699 158.841 cv
6.40299 158.689 6.35099 158.522 6.35099 158.342 cv
6.35099 158.079 6.43399 157.813 6.59999 157.541 cv
7.32199 157.812 li
7.21199 158.002 7.15699 158.192 7.15699 158.383 cv
7.15699 158.554 7.20799 158.706 7.31099 158.842 cv
7.41299 158.978 7.55599 159.074 7.73699 159.132 cv
8.01399 159.219 8.31599 159.262 8.64499 159.262 cv
11.048 159.262 li
11.048 160.043 li
f
11.048 156.123 mo
11.048 156.847 li
4.70499 156.847 li
4.70499 156.064 li
6.96899 156.064 li
6.55699 155.736 6.35099 155.317 6.35099 154.808 cv
6.35099 154.525 6.40799 154.259 6.52099 154.007 cv
6.63599 153.755 6.79499 153.547 7.00099 153.385 cv
7.20799 153.222 7.45599 153.094 7.74699 153.002 cv
8.03799 152.91 8.34999 152.864 8.67999 152.864 cv
9.46699 152.864 10.075 153.059 10.504 153.447 cv
10.933 153.837 11.148 154.304 11.148 154.848 cv
11.148 155.39 10.921 155.814 10.469 156.123 cv
11.048 156.123 li
cp
8.71499 156.131 mo
9.26499 156.131 9.66299 156.057 9.90699 155.907 cv
10.308 155.662 10.508 155.331 10.508 154.914 cv
10.508 154.574 10.36 154.281 10.065 154.033 cv
9.76999 153.786 9.32999 153.662 8.74499 153.662 cv
8.14599 153.662 7.70399 153.781 7.41899 154.019 cv
7.13299 154.256 6.99099 154.543 6.99099 154.88 cv
6.99099 155.219 7.13899 155.513 7.43399 155.76 cv
7.72899 156.008 8.15599 156.131 8.71499 156.131 cv
f
10.159 151.58 mo
11.049 151.58 li
11.049 150.69 li
10.159 150.69 li
cp
f
11.048 143.9 mo
10.366 143.9 li
10.888 144.257 11.148 144.742 11.148 145.356 cv
11.148 145.627 11.096 145.88 10.992 146.115 cv
10.889 146.35 10.758 146.525 10.601 146.639 cv
10.443 146.752 10.251 146.832 10.023 146.878 cv
9.87099 146.91 9.62799 146.926 9.29599 146.926 cv
6.45099 146.926 li
6.45099 146.145 li
8.99599 146.145 li
9.40299 146.145 9.67599 146.129 9.81799 146.097 cv
10.023 146.048 10.183 145.944 10.299 145.786 cv
10.416 145.628 10.475 145.433 10.475 145.199 cv
10.475 144.966 10.415 144.747 10.295 144.544 cv
10.176 144.339 10.013 144.194 9.80699 144.11 cv
9.60099 144.025 9.30199 143.982 8.90999 143.982 cv
6.45099 143.982 li
6.45099 143.201 li
11.048 143.201 li
11.048 143.9 li
f
11.048 142.018 mo
6.45099 142.018 li
6.45099 141.312 li
7.10399 141.312 li
6.60199 140.975 6.35099 140.488 6.35099 139.853 cv
6.35099 139.576 6.40099 139.322 6.49999 139.09 cv
6.59999 138.858 6.72999 138.686 6.89199 138.57 cv
7.05399 138.455 7.24499 138.375 7.46699 138.328 cv
7.61099 138.3 7.86399 138.285 8.22399 138.285 cv
11.048 138.285 li
11.048 139.067 li
8.25299 139.067 li
7.93599 139.067 7.69899 139.097 7.54099 139.157 cv
7.38399 139.218 7.25899 139.325 7.16499 139.479 cv
7.07099 139.633 7.02399 139.813 7.02399 140.021 cv
7.02399 140.351 7.12999 140.637 7.33999 140.876 cv
7.55099 141.116 7.94999 141.236 8.53899 141.236 cv
11.048 141.236 li
11.048 142.018 li
f
11.048 136.809 mo
6.44999 136.809 li
6.44999 136.028 li
11.048 136.028 li
cp
5.59499 136.809 mo
4.70499 136.809 li
4.70499 136.028 li
5.59499 136.028 li
cp
f
10.35 133.26 mo
11.038 133.16 li
11.084 133.38 11.106 133.576 11.106 133.749 cv
11.106 134.032 11.062 134.252 10.972 134.407 cv
10.883 134.564 10.766 134.673 10.62 134.736 cv
10.474 134.8 10.168 134.831 9.69999 134.831 cv
7.05799 134.831 li
7.05799 135.405 li
6.45099 135.405 li
6.45099 134.831 li
5.31399 134.831 li
4.84699 134.05 li
6.45099 134.05 li
6.45099 133.26 li
7.05799 133.26 li
7.05799 134.05 li
9.74699 134.05 li
9.96899 134.05 10.112 134.036 10.175 134.009 cv
10.239 133.981 10.29 133.936 10.327 133.873 cv
10.364 133.811 10.383 133.722 10.383 133.606 cv
10.383 133.518 10.372 133.402 10.35 133.26 cv
f
9.67599 132.688 mo
9.55199 131.914 li
9.85999 131.871 10.097 131.75 10.262 131.553 cv
10.426 131.356 10.508 131.079 10.508 130.725 cv
10.508 130.367 10.435 130.103 10.29 129.929 cv
10.144 129.756 9.97399 129.669 9.77799 129.669 cv
9.60199 129.669 9.46399 129.747 9.36299 129.902 cv
9.29399 130.011 9.20599 130.277 9.09999 130.7 cv
8.95599 131.271 8.83099 131.665 8.72599 131.885 cv
8.62099 132.105 8.47499 132.271 8.28999 132.384 cv
8.10399 132.497 7.89799 132.554 7.67299 132.554 cv
7.46899 132.554 7.27899 132.507 7.10499 132.414 cv
6.93099 132.32 6.78699 132.192 6.67099 132.031 cv
6.58199 131.91 6.50599 131.745 6.44399 131.537 cv
6.38199 131.328 6.35099 131.104 6.35099 130.865 cv
6.35099 130.505 6.40299 130.189 6.50699 129.916 cv
6.61099 129.645 6.75099 129.443 6.92799 129.314 cv
7.10499 129.184 7.34199 129.095 7.63999 129.046 cv
7.73899 129.811 li
7.50399 129.846 7.32099 129.945 7.18899 130.111 cv
7.05699 130.276 6.99099 130.511 6.99099 130.813 cv
6.99099 131.169 7.04999 131.425 7.16799 131.577 cv
7.28599 131.73 7.42399 131.806 7.58299 131.806 cv
7.68399 131.806 7.77499 131.774 7.85399 131.711 cv
7.93799 131.647 8.00699 131.548 8.06199 131.413 cv
8.09099 131.335 8.15699 131.106 8.26099 130.727 cv
8.40799 130.177 8.52799 129.792 8.62199 129.573 cv
8.71499 129.355 8.85099 129.183 9.02999 129.059 cv
9.20899 128.934 9.43099 128.871 9.69599 128.871 cv
9.95499 128.871 10.199 128.947 10.428 129.099 cv
10.657 129.25 10.834 129.468 10.96 129.754 cv
11.085 130.039 11.148 130.362 11.148 130.723 cv
11.148 131.32 11.024 131.775 10.777 132.088 cv
10.53 132.4 10.163 132.601 9.67599 132.688 cv
f
12.91 127.418 mo
12.91 127.975 li
11.528 127.116 10.144 126.687 8.75799 126.687 cv
8.21599 126.687 7.67899 126.748 7.14599 126.872 cv
6.71399 126.97 6.29899 127.106 5.90099 127.28 cv
5.64199 127.393 5.20999 127.625 4.60499 127.975 cv
4.60499 127.418 li
5.32899 126.878 6.05399 126.479 6.78299 126.22 cv
7.41099 125.999 8.06799 125.889 8.75299 125.889 cv
9.53099 125.889 10.283 126.037 11.009 126.334 cv
11.735 126.632 12.369 126.993 12.91 127.418 cv
f
111.605 238.808 mo
111.605 233.213 li
109.518 233.213 li
109.518 232.465 li
114.531 232.465 li
114.531 233.213 li
112.444 233.213 li
112.444 238.808 li
111.605 238.808 li
f
116.048 233.355 mo
115.267 233.355 li
115.267 232.465 li
116.048 232.465 li
cp
115.267 233.355 mo
cp
116.048 238.808 mo
115.267 238.808 li
115.267 234.21 li
116.048 234.21 li
cp
f
117.396 238.808 mo
117.396 234.21 li
118.094 234.21 li
118.094 234.857 li
118.239 234.633 118.43 234.452 118.669 234.316 cv
118.908 234.179 119.181 234.11 119.486 234.11 cv
119.826 234.11 120.105 234.182 120.322 234.322 cv
120.54 234.464 120.693 234.66 120.783 234.914 cv
121.148 234.379 121.622 234.11 122.206 234.11 cv
122.664 234.11 123.016 234.237 123.262 234.489 cv
123.508 234.741 123.631 235.13 123.631 235.655 cv
123.631 238.808 li
122.85 238.808 li
122.85 235.913 li
122.85 235.602 122.825 235.377 122.773 235.24 cv
122.723 235.105 122.631 234.993 122.498 234.91 cv
122.366 234.825 122.21 234.784 122.031 234.784 cv
121.707 234.784 121.438 234.892 121.225 235.106 cv
121.011 235.321 120.904 235.665 120.904 236.138 cv
120.904 238.808 li
120.123 238.808 li
120.123 235.822 li
120.123 235.476 120.059 235.218 119.933 235.044 cv
119.807 234.871 119.6 234.784 119.312 234.784 cv
119.093 234.784 118.891 234.842 118.706 234.957 cv
118.52 235.073 118.386 235.241 118.303 235.464 cv
118.219 235.686 118.177 236.006 118.177 236.424 cv
118.177 238.808 li
117.396 238.808 li
f
128.004 237.328 mo
128.81 237.428 li
128.683 237.897 128.448 238.261 128.105 238.52 cv
127.762 238.778 127.324 238.907 126.791 238.907 cv
126.12 238.907 125.588 238.7 125.194 238.287 cv
124.801 237.874 124.604 237.295 124.604 236.549 cv
124.604 235.776 124.803 235.177 125.201 234.751 cv
125.598 234.323 126.114 234.11 126.748 234.11 cv
127.362 234.11 127.863 234.319 128.252 234.736 cv
128.641 235.154 128.836 235.741 128.836 236.498 cv
128.836 236.543 128.834 236.613 128.832 236.704 cv
125.402 236.704 li
125.431 237.209 125.574 237.597 125.831 237.865 cv
126.087 238.133 126.408 238.268 126.792 238.268 cv
127.078 238.268 127.321 238.192 127.524 238.044 cv
127.726 237.895 127.885 237.655 128.004 237.328 cv
cp
125.444 236.064 mo
128.013 236.064 li
127.978 235.68 127.88 235.391 127.718 235.198 cv
127.47 234.9 127.148 234.751 126.752 234.751 cv
126.394 234.751 126.093 234.87 125.849 235.108 cv
125.605 235.348 125.47 235.665 125.444 236.064 cv
f
136.624 238.169 mo
136.495 238.809 li
136.307 238.858 136.125 238.883 135.95 238.883 cv
135.639 238.883 135.392 238.806 135.207 238.653 cv
135.069 238.537 135.001 238.38 135.001 238.181 cv
135.001 238.079 135.038 237.847 135.113 237.482 cv
135.67 234.809 li
135.055 234.809 li
135.18 234.21 li
135.795 234.21 li
136.032 233.086 li
136.925 232.548 li
136.576 234.21 li
137.349 234.21 li
137.216 234.809 li
136.452 234.809 li
135.919 237.352 li
135.853 237.675 135.82 237.868 135.82 237.932 cv
135.82 238.024 135.847 238.095 135.9 238.144 cv
135.953 238.193 136.041 238.218 136.162 238.218 cv
136.335 238.218 136.489 238.201 136.624 238.169 cv
f
144.064 240.67 mo
143.636 240.128 143.274 239.494 142.978 238.769 cv
142.683 238.043 142.534 237.291 142.534 236.513 cv
142.534 235.827 142.645 235.171 142.866 234.542 cv
143.124 233.814 143.524 233.088 144.064 232.364 cv
144.621 232.364 li
144.273 232.964 144.044 233.392 143.932 233.649 cv
143.756 234.046 143.618 234.46 143.518 234.893 cv
143.395 235.432 143.332 235.973 143.332 236.518 cv
143.332 237.903 143.762 239.287 144.621 240.67 cv
144.064 240.67 li
f
145.155 237.436 mo
145.928 237.312 li
145.972 237.62 146.092 237.856 146.29 238.021 cv
146.487 238.186 146.763 238.268 147.118 238.268 cv
147.475 238.268 147.74 238.194 147.914 238.049 cv
148.086 237.904 148.173 237.733 148.173 237.537 cv
148.173 237.361 148.095 237.224 147.939 237.123 cv
147.831 237.054 147.565 236.966 147.142 236.859 cv
146.572 236.715 146.177 236.591 145.957 236.485 cv
145.738 236.381 145.571 236.235 145.458 236.049 cv
145.345 235.863 145.288 235.658 145.288 235.433 cv
145.288 235.229 145.335 235.039 145.429 234.864 cv
145.522 234.69 145.65 234.546 145.811 234.43 cv
145.932 234.341 146.097 234.266 146.306 234.203 cv
146.515 234.142 146.738 234.11 146.977 234.11 cv
147.337 234.11 147.654 234.162 147.926 234.267 cv
148.198 234.37 148.399 234.511 148.529 234.688 cv
148.658 234.865 148.748 235.103 148.796 235.399 cv
148.032 235.499 li
147.997 235.264 147.897 235.081 147.731 234.948 cv
147.566 234.816 147.331 234.751 147.03 234.751 cv
146.673 234.751 146.418 234.81 146.266 234.928 cv
146.113 235.046 146.037 235.184 146.037 235.343 cv
146.037 235.443 146.068 235.534 146.131 235.615 cv
146.195 235.698 146.294 235.767 146.429 235.821 cv
146.507 235.851 146.736 235.917 147.116 236.021 cv
147.666 236.168 148.05 236.288 148.269 236.381 cv
148.488 236.476 148.659 236.611 148.784 236.79 cv
148.909 236.969 148.971 237.191 148.971 237.455 cv
148.971 237.715 148.895 237.959 148.744 238.188 cv
148.592 238.417 148.374 238.594 148.088 238.72 cv
147.803 238.845 147.48 238.907 147.119 238.907 cv
146.523 238.907 146.067 238.784 145.754 238.536 cv
145.441 238.289 145.242 237.922 145.155 237.436 cv
f
150.424 240.67 mo
149.867 240.67 li
150.726 239.287 151.156 237.903 151.156 236.518 cv
151.156 235.976 151.094 235.439 150.971 234.905 cv
150.873 234.474 150.736 234.059 150.562 233.661 cv
150.449 233.401 150.218 232.97 149.867 232.364 cv
150.424 232.364 li
150.964 233.088 151.364 233.814 151.623 234.542 cv
151.843 235.171 151.954 235.827 151.954 236.513 cv
151.954 237.291 151.806 238.043 151.508 238.769 cv
151.21 239.494 150.85 240.128 150.424 240.67 cv
f
27.84 28.749 mo
27.84 28.11 li
28.575 28.11 li
28.734 31.3351 li
28.734 31.9421 li
27.968 31.9421 li
f
28.734 31.942 mo
27.968 31.942 li
27.968 31.335 li
28.287 29.0361 li
28.894 29.0361 li
28.894 29.6431 li
f
28.287 29.643 mo
28.287 29.036 li
28.894 29.036 li
29.213 30.122 li
29.213 30.889 li
28.575 30.889 li
f
.766 lw
0 lc
28.575 30.505 mo
29.341 30.505 li
28.734 30.505 mo
29.5 30.505 li
28.894 30.505 mo
29.66 30.505 li
29.054 30.505 mo
29.819 30.505 li
@
29.213 30.889 mo
29.213 30.1221 li
29.819 30.1221 li
30.107 31.3351 li
30.107 31.9421 li
29.5 31.9421 li
f
30.107 31.942 mo
29.5 31.942 li
29.5 31.335 li
29.66 29.0361 li
30.267 29.0361 li
30.267 29.6431 li
f
.607 lw
29.66 29.34 mo
30.426 29.34 li
29.819 29.34 mo
30.586 29.34 li
@
29.947 29.643 mo
29.947 29.036 li
30.586 29.036 li
30.873 30.122 li
30.873 30.889 li
30.267 30.889 li
f
.766 lw
30.267 30.505 mo
31.033 30.505 li
@
31.033 30.889 mo
30.426 30.889 li
30.426 30.1221 li
30.586 29.0361 li
31.192 29.0361 li
31.192 29.6431 li
f
.607 lw
30.586 29.34 mo
31.352 29.34 li
30.714 29.34 mo
31.48 29.34 li
@
30.873 29.643 mo
30.873 29.036 li
31.48 29.036 li
31.959 30.122 li
31.959 30.889 li
31.192 30.889 li
f
.766 lw
31.192 30.505 mo
32.086 30.505 li
@
32.086 30.889 mo
31.352 30.889 li
31.352 30.1221 li
31.48 29.0361 li
32.246 29.0361 li
32.246 29.6431 li
f
31.48 29.643 mo
31.48 29.036 li
32.246 29.036 li
32.406 31.335 li
32.406 31.942 li
31.799 31.942 li
f
32.406 31.942 mo
31.799 31.942 li
31.799 31.335 li
32.086 26.8981 li
32.725 26.8981 li
32.725 27.6641 li
f
32.086 27.664 mo
32.086 26.898 li
32.725 26.898 li
32.853 30.122 li
32.853 30.889 li
32.246 30.889 li
f
32.246 30.505 mo
33.012 30.505 li
@
33.012 30.889 mo
32.406 30.889 li
32.406 30.1221 li
32.565 29.0361 li
33.172 29.0361 li
33.172 29.6431 li
f
33.172 29.643 mo
32.565 29.643 li
32.565 29.036 li
32.725 26.898 li
33.331 26.898 li
33.331 27.6641 li
f
32.725 27.664 mo
32.725 26.898 li
33.331 26.898 li
33.619 29.036 li
33.619 29.643 li
33.012 29.643 li
f
.607 lw
33.012 29.34 mo
33.778 29.34 li
@
33.778 29.643 mo
33.172 29.643 li
33.172 29.036 li
33.331 28.11 li
33.938 28.11 li
33.938 28.749 li
f
33.331 28.749 mo
33.331 28.11 li
33.938 28.11 li
34.097 31.3351 li
34.097 31.9421 li
33.459 31.9421 li
f
34.097 31.942 mo
33.459 31.942 li
33.459 31.335 li
33.778 30.1221 li
34.385 30.1221 li
34.385 30.889 li
f
33.778 30.889 mo
33.778 30.1221 li
34.385 30.1221 li
34.544 31.3351 li
34.544 31.9421 li
33.938 31.9421 li
f
34.544 31.942 mo
33.938 31.942 li
33.938 31.335 li
34.097 29.0361 li
34.704 29.0361 li
34.704 29.6431 li
f
34.097 29.34 mo
34.831 29.34 li
@
34.831 29.643 mo
34.225 29.643 li
34.225 29.036 li
34.385 24.759 li
34.992 24.759 li
34.992 25.3651 li
f
34.385 25.3651 mo
34.385 24.7591 li
34.992 24.7591 li
35.47 30.1221 li
35.47 30.8891 li
34.704 30.8891 li
f
35.47 30.889 mo
34.704 30.889 li
34.704 30.1221 li
34.831 29.0361 li
35.598 29.0361 li
35.598 29.6431 li
f
34.831 29.643 mo
34.831 29.036 li
35.598 29.036 li
35.757 30.122 li
35.757 30.889 li
34.992 30.889 li
f
35.757 30.889 mo
34.992 30.889 li
34.992 30.1221 li
35.31 29.0361 li
35.917 29.0361 li
35.917 29.6431 li
f
35.31 29.643 mo
35.31 29.036 li
35.917 29.036 li
36.205 30.122 li
36.205 30.889 li
35.598 30.889 li
f
36.205 30.889 mo
35.598 30.889 li
35.598 30.1221 li
35.757 20.321 li
36.364 20.321 li
36.364 20.9601 li
f
35.757 20.96 mo
35.757 20.321 li
36.364 20.321 li
36.524 30.1221 li
36.524 30.889 li
35.917 30.889 li
f
.766 lw
35.917 30.505 mo
36.684 30.505 li
36.077 30.505 mo
36.843 30.505 li
@
36.843 30.889 mo
36.205 30.889 li
36.205 30.1221 li
36.524 29.0361 li
37.13 29.0361 li
37.13 29.6431 li
f
.607 lw
36.524 29.34 mo
37.29 29.34 li
@
36.684 29.643 mo
36.684 29.036 li
37.29 29.036 li
37.45 30.122 li
37.45 30.889 li
36.843 30.889 li
f
.766 lw
36.843 30.505 mo
37.609 30.505 li
36.971 30.505 mo
37.897 30.505 li
37.29 30.505 mo
38.056 30.505 li
@
38.056 30.889 mo
37.45 30.889 li
37.45 30.1221 li
37.609 29.0361 li
38.216 29.0361 li
38.216 29.6431 li
f
.607 lw
37.609 29.34 mo
38.344 29.34 li
37.737 29.34 mo
38.503 29.34 li
@
37.897 29.643 mo
37.897 29.036 li
38.503 29.036 li
38.982 30.122 li
38.982 30.889 li
38.216 30.889 li
f
38.982 30.889 mo
38.216 30.889 li
38.216 30.1221 li
38.344 29.0361 li
39.109 29.0361 li
39.109 29.6431 li
f
38.344 29.643 mo
38.344 29.036 li
39.109 29.036 li
39.27 30.122 li
39.27 30.889 li
38.503 30.889 li
f
39.27 30.889 mo
38.503 30.889 li
38.503 30.1221 li
38.822 28.11 li
39.429 28.11 li
39.429 28.7491 li
f
38.822 28.749 mo
38.822 28.11 li
39.429 28.11 li
39.716 30.1221 li
39.716 30.889 li
39.109 30.889 li
f
39.716 30.889 mo
39.109 30.889 li
39.109 30.1221 li
39.27 29.0361 li
39.876 29.0361 li
39.876 29.6431 li
f
39.876 29.643 mo
39.27 29.643 li
39.27 29.036 li
39.429 28.11 li
40.035 28.11 li
40.035 28.749 li
f
39.429 28.749 mo
39.429 28.11 li
40.035 28.11 li
40.195 29.0361 li
40.195 29.6431 li
39.588 29.6431 li
f
39.588 29.34 mo
40.355 29.34 li
@
39.716 29.643 mo
39.716 29.036 li
40.355 29.036 li
40.642 30.122 li
40.642 30.889 li
40.035 30.889 li
f
40.642 30.889 mo
40.035 30.889 li
40.035 30.1221 li
40.195 29.0361 li
40.802 29.0361 li
40.802 29.6431 li
f
40.195 29.34 mo
40.961 29.34 li
40.355 29.34 mo
41.089 29.34 li
@
40.482 29.643 mo
40.482 29.036 li
41.089 29.036 li
41.408 30.122 li
41.408 30.889 li
40.802 30.889 li
f
.766 lw
40.802 30.505 mo
41.567 30.505 li
40.961 30.505 mo
41.727 30.505 li
41.089 30.505 mo
41.855 30.505 li
41.249 30.505 mo
42.334 30.505 li
41.567 30.505 mo
42.494 30.505 li
41.727 30.505 mo
42.622 30.505 li
@
42.622 30.889 mo
41.855 30.889 li
41.855 30.1221 li
42.015 28.11 li
42.781 28.11 li
42.781 28.7491 li
f
42.015 28.749 mo
42.015 28.11 li
42.781 28.11 li
42.94 30.1221 li
42.94 30.889 li
42.334 30.889 li
f
42.334 30.889 mo
42.334 30.1221 li
42.94 30.1221 li
43.228 31.3351 li
43.228 31.9421 li
42.622 31.9421 li
f
.607 lw
42.622 31.639 mo
43.387 31.639 li
42.781 31.639 mo
43.547 31.639 li
42.94 31.639 mo
43.707 31.639 li
@
43.707 31.942 mo
43.1 31.942 li
43.1 31.335 li
43.387 30.1221 li
43.994 30.1221 li
43.994 30.889 li
f
43.387 30.889 mo
43.387 30.1221 li
43.994 30.1221 li
44.154 31.3351 li
44.154 31.9421 li
43.547 31.9421 li
f
43.547 31.942 mo
43.547 31.335 li
44.154 31.335 li
44.313 32.389 li
44.313 33.027 li
43.707 33.027 li
f
44.313 33.027 mo
43.707 33.027 li
43.707 32.3891 li
43.866 31.3351 li
44.473 31.3351 li
44.473 31.9421 li
f
43.866 31.639 mo
44.601 31.639 li
43.994 31.639 mo
44.919 31.639 li
44.313 31.639 mo
45.08 31.639 li
44.473 31.639 mo
45.239 31.639 li
@
44.601 31.942 mo
44.601 31.335 li
45.239 31.335 li
45.367 32.389 li
45.367 33.027 li
44.76 33.027 li
f
.638 lw
44.76 32.708 mo
45.846 32.708 li
45.08 32.708 mo
45.973 32.708 li
45.239 32.708 mo
46.133 32.708 li
45.367 32.708 mo
46.292 32.708 li
45.686 32.708 mo
46.452 32.708 li
@
45.846 33.027 mo
45.846 32.3891 li
46.452 32.3891 li
46.74 33.4741 li
46.74 34.0811 li
46.133 34.0811 li
f
46.74 34.081 mo
46.133 34.081 li
46.133 33.474 li
46.292 32.389 li
46.899 32.389 li
46.899 33.027 li
f
46.292 32.708 mo
47.059 32.708 li
@
46.452 33.027 mo
46.452 32.3891 li
47.059 32.3891 li
47.218 33.4741 li
47.218 34.0811 li
46.612 34.0811 li
f
.607 lw
46.612 33.777 mo
47.505 33.777 li
@
47.505 34.081 mo
46.899 34.081 li
46.899 33.474 li
47.059 32.389 li
47.665 32.389 li
47.665 33.027 li
f
47.059 33.027 mo
47.059 32.3891 li
47.665 32.3891 li
47.825 33.4741 li
47.825 34.0811 li
47.218 34.0811 li
f
47.218 34.081 mo
47.218 33.474 li
47.825 33.474 li
47.985 34.688 li
47.985 35.294 li
47.346 35.294 li
f
47.985 35.294 mo
47.346 35.294 li
47.346 34.688 li
47.505 32.389 li
48.112 32.389 li
48.112 33.027 li
f
47.505 33.027 mo
47.505 32.3891 li
48.112 32.3891 li
48.432 33.4741 li
48.432 34.0811 li
47.825 34.0811 li
f
48.432 34.081 mo
47.825 34.081 li
47.825 33.474 li
47.985 30.122 li
48.591 30.122 li
48.591 30.889 li
f
47.985 30.889 mo
47.985 30.1221 li
48.591 30.1221 li
48.75 34.688 li
48.75 35.2941 li
48.112 35.2941 li
f
48.112 34.9901 mo
48.878 34.9901 li
48.272 34.9901 mo
49.357 34.9901 li
@
48.591 35.294 mo
48.591 34.688 li
49.357 34.688 li
49.485 35.772 li
49.485 36.379 li
48.75 36.379 li
f
48.75 36.076 mo
49.644 36.076 li
@
49.644 36.379 mo
48.878 36.379 li
48.878 35.772 li
49.197 32.389 li
49.804 32.389 li
49.804 33.027 li
f
49.197 33.027 mo
49.197 32.3891 li
49.804 32.3891 li
49.964 34.688 li
49.964 35.2941 li
49.357 35.2941 li
f
49.357 35.294 mo
49.357 34.688 li
49.964 34.688 li
50.251 35.772 li
50.251 36.379 li
49.644 36.379 li
f
49.644 36.076 mo
50.411 36.076 li
@
49.804 36.379 mo
49.804 35.772 li
50.411 35.772 li
50.57 36.826 li
50.57 37.433 li
49.964 37.433 li
f
50.57 37.433 mo
49.964 37.433 li
49.964 36.826 li
50.123 34.688 li
50.73 34.688 li
50.73 35.2941 li
f
50.123 35.294 mo
50.123 34.688 li
50.73 34.688 li
51.018 35.772 li
51.018 36.379 li
50.411 36.379 li
f
50.411 36.076 mo
51.177 36.076 li
@
51.177 36.379 mo
50.57 36.379 li
50.57 35.772 li
50.73 33.4741 li
51.336 33.4741 li
51.336 34.0811 li
f
50.73 34.081 mo
50.73 33.474 li
51.336 33.474 li
51.496 35.772 li
51.496 36.379 li
50.857 36.379 li
f
50.857 36.076 mo
51.624 36.076 li
@
51.018 36.379 mo
51.018 35.772 li
51.624 35.772 li
51.943 36.826 li
51.943 37.433 li
51.336 37.433 li
f
51.336 37.129 mo
52.103 37.129 li
51.496 37.129 mo
52.231 37.129 li
@
52.231 37.433 mo
51.624 37.433 li
51.624 36.826 li
51.783 35.7721 li
52.39 35.7721 li
52.39 36.3791 li
f
51.783 36.076 mo
52.869 36.076 li
52.103 36.076 mo
52.997 36.076 li
@
52.231 36.379 mo
52.231 35.772 li
52.997 35.772 li
53.156 36.826 li
53.156 37.433 li
52.39 37.433 li
f
53.156 37.433 mo
52.39 37.433 li
52.39 36.826 li
52.71 34.688 li
53.315 34.688 li
53.315 35.2941 li
f
52.71 35.294 mo
52.71 34.688 li
53.315 34.688 li
53.603 37.911 li
53.603 38.678 li
52.997 38.678 li
f
.766 lw
52.997 38.295 mo
53.763 38.295 li
@
53.156 38.678 mo
53.156 37.9111 li
53.763 37.9111 li
53.922 39.1251 li
53.922 39.7311 li
53.315 39.7311 li
f
53.922 39.731 mo
53.315 39.731 li
53.315 39.1251 li
53.475 37.9111 li
54.082 37.9111 li
54.082 38.678 li
f
53.475 38.295 mo
54.242 38.295 li
53.603 38.295 mo
54.529 38.295 li
@
53.922 38.678 mo
53.922 37.9111 li
54.529 37.9111 li
54.689 39.1251 li
54.689 39.7311 li
54.082 39.7311 li
f
54.689 39.731 mo
54.082 39.731 li
54.082 39.1251 li
54.242 37.9111 li
54.848 37.9111 li
54.848 38.678 li
f
54.242 38.295 mo
55.008 38.295 li
54.37 38.295 mo
55.295 38.295 li
@
55.295 38.678 mo
54.689 38.678 li
54.689 37.9111 li
54.848 36.826 li
55.455 36.826 li
55.455 37.433 li
f
54.848 37.433 mo
54.848 36.826 li
55.455 36.826 li
55.614 37.9111 li
55.614 38.6781 li
55.008 38.6781 li
f
55.008 38.678 mo
55.008 37.9111 li
55.614 37.9111 li
55.742 43.5621 li
55.742 44.1691 li
55.135 44.1691 li
f
55.742 44.169 mo
55.135 44.169 li
55.135 43.562 li
55.295 39.1251 li
55.902 39.1251 li
55.902 39.731 li
f
55.902 39.731 mo
55.295 39.731 li
55.295 39.1251 li
55.614 37.9111 li
56.38 37.9111 li
56.38 38.678 li
f
55.614 38.295 mo
56.508 38.295 li
55.742 38.295 mo
56.668 38.295 li
55.902 38.295 mo
56.828 38.295 li
@
56.221 38.678 mo
56.221 37.9111 li
56.828 37.9111 li
57.115 39.1251 li
57.115 39.7311 li
56.508 39.7311 li
f
.607 lw
56.508 39.428 mo
57.274 39.428 li
56.668 39.428 mo
57.434 39.428 li
56.828 39.428 mo
57.594 39.428 li
@
56.987 39.731 mo
56.987 39.1251 li
57.594 39.1251 li
57.753 40.1791 li
57.753 40.7841 li
57.115 40.7841 li
f
57.753 40.784 mo
57.115 40.784 li
57.115 40.179 li
57.434 39.125 li
58.04 39.125 li
58.04 39.731 li
f
57.434 39.428 mo
58.2 39.428 li
@
57.594 39.731 mo
57.594 39.1251 li
58.2 39.1251 li
58.36 42.4771 li
58.36 43.0831 li
57.753 43.0831 li
f
57.753 42.78 mo
58.487 42.78 li
@
58.487 43.083 mo
57.881 43.083 li
57.881 42.4771 li
58.2 40.179 li
58.807 40.179 li
58.807 40.7841 li
f
58.2 40.784 mo
58.2 40.179 li
58.807 40.179 li
58.966 41.264 li
58.966 42.0291 li
58.36 42.0291 li
f
.766 lw
58.36 41.647 mo
59.126 41.647 li
58.487 41.647 mo
59.253 41.647 li
@
59.253 42.029 mo
58.648 42.029 li
58.648 41.264 li
58.807 40.179 li
59.413 40.179 li
59.413 40.784 li
f
.607 lw
58.807 40.481 mo
59.892 40.481 li
59.126 40.481 mo
60.02 40.481 li
59.253 40.481 mo
60.18 40.481 li
@
59.413 40.784 mo
59.413 40.179 li
60.18 40.179 li
60.339 41.264 li
60.339 42.0291 li
59.733 42.0291 li
f
.766 lw
59.733 41.647 mo
60.627 41.647 li
60.02 41.647 mo
60.786 41.647 li
60.18 41.647 mo
60.945 41.647 li
@
60.339 42.029 mo
60.339 41.264 li
60.945 41.264 li
61.105 44.6151 li
61.105 45.382 li
60.498 45.382 li
f
61.105 45.382 mo
60.498 45.382 li
60.498 44.6151 li
60.627 42.4771 li
61.265 42.4771 li
61.265 43.0831 li
f
61.265 43.083 mo
60.627 43.083 li
60.627 42.4771 li
60.945 32.389 li
61.552 32.389 li
61.552 33.027 li
f
60.945 33.027 mo
60.945 32.3891 li
61.552 32.3891 li
61.712 42.4771 li
61.712 43.0831 li
61.105 43.0831 li
f
.607 lw
61.105 42.78 mo
61.871 42.78 li
@
61.871 43.083 mo
61.265 43.083 li
61.265 42.4771 li
61.393 41.264 li
61.999 41.264 li
61.999 42.0291 li
f
61.393 42.029 mo
61.393 41.264 li
61.999 41.264 li
62.318 42.4771 li
62.318 43.083 li
61.712 43.083 li
f
61.712 43.083 mo
61.712 42.4771 li
62.318 42.4771 li
62.477 43.562 li
62.477 44.1691 li
61.871 44.1691 li
f
62.477 44.169 mo
61.871 44.169 li
61.871 43.562 li
61.999 42.4771 li
62.638 42.4771 li
62.638 43.083 li
f
61.999 42.78 mo
62.765 42.78 li
62.159 42.78 mo
62.925 42.78 li
@
62.318 43.083 mo
62.318 42.4771 li
62.925 42.4771 li
63.372 46.9141 li
63.372 47.5211 li
62.638 47.5211 li
f
63.372 47.521 mo
62.638 47.521 li
62.638 46.914 li
62.765 42.4771 li
63.531 42.4771 li
63.531 43.083 li
f
62.765 42.78 mo
63.691 42.78 li
@
62.925 43.083 mo
62.925 42.4771 li
63.691 42.4771 li
63.851 43.562 li
63.851 44.1691 li
63.244 44.1691 li
f
63.851 44.169 mo
63.244 44.169 li
63.244 43.562 li
63.531 42.4771 li
64.138 42.4771 li
64.138 43.083 li
f
63.531 42.78 mo
64.298 42.78 li
@
63.691 43.083 mo
63.691 42.4771 li
64.298 42.4771 li
64.457 44.6151 li
64.457 45.382 li
63.851 45.382 li
f
64.457 45.382 mo
63.851 45.382 li
63.851 44.6151 li
64.011 43.5621 li
64.617 43.5621 li
64.617 44.1691 li
f
64.011 43.8651 mo
64.745 43.8651 li
64.138 43.8651 mo
65.064 43.8651 li
64.457 43.8651 mo
65.223 43.8651 li
@
64.617 44.169 mo
64.617 43.562 li
65.223 43.562 li
65.383 44.6151 li
65.383 45.382 li
64.745 45.382 li
f
.766 lw
64.745 44.999 mo
65.511 44.999 li
64.904 44.999 mo
65.83 44.999 li
@
65.83 45.382 mo
65.223 45.382 li
65.223 44.6151 li
65.383 43.5621 li
65.99 43.5621 li
65.99 44.1691 li
f
65.383 44.169 mo
65.383 43.562 li
65.99 43.562 li
66.149 44.6151 li
66.149 45.382 li
65.511 45.382 li
f
65.511 44.999 mo
66.277 44.999 li
65.67 44.999 mo
66.755 44.999 li
@
66.755 45.382 mo
65.99 45.382 li
65.99 44.6151 li
66.149 43.5621 li
66.883 43.5621 li
66.883 44.1691 li
f
66.149 44.169 mo
66.149 43.562 li
66.883 43.562 li
67.043 44.6151 li
67.043 45.382 li
66.277 45.382 li
f
66.277 44.999 mo
67.203 44.999 li
@
66.437 45.382 mo
66.437 44.6151 li
67.203 44.6151 li
67.362 45.829 li
67.362 46.467 li
66.755 46.467 li
f
67.362 46.467 mo
66.755 46.467 li
66.755 45.8291 li
67.043 44.6151 li
67.65 44.6151 li
67.65 45.3821 li
f
67.043 45.382 mo
67.043 44.6151 li
67.65 44.6151 li
67.809 45.829 li
67.809 46.467 li
67.203 46.467 li
f
67.809 46.467 mo
67.203 46.467 li
67.203 45.8291 li
67.362 44.6151 li
67.969 44.6151 li
67.969 45.3821 li
f
67.362 44.999 mo
68.128 44.999 li
67.522 44.999 mo
68.416 44.999 li
@
67.809 45.382 mo
67.809 44.6151 li
68.416 44.6151 li
68.576 45.829 li
68.576 46.467 li
67.969 46.467 li
f
67.969 46.467 mo
67.969 45.8291 li
68.576 45.8291 li
68.735 46.9141 li
68.735 47.5211 li
68.128 47.5211 li
f
68.735 47.521 mo
68.128 47.521 li
68.128 46.914 li
68.256 45.829 li
68.895 45.829 li
68.895 46.467 li
f
.638 lw
68.256 46.147 mo
69.023 46.147 li
68.416 46.147 mo
69.342 46.147 li
@
68.735 46.467 mo
68.735 45.8291 li
69.342 45.8291 li
69.501 46.9141 li
69.501 47.5211 li
68.895 47.5211 li
f
69.501 47.521 mo
68.895 47.521 li
68.895 46.914 li
69.023 45.829 li
69.629 45.829 li
69.629 46.467 li
f
69.023 46.147 mo
69.789 46.147 li
@
69.182 46.467 mo
69.182 45.8291 li
69.789 45.8291 li
70.268 46.9141 li
70.268 47.5211 li
69.501 47.5211 li
f
70.268 47.521 mo
69.501 47.521 li
69.501 46.914 li
69.629 45.829 li
70.396 45.829 li
70.396 46.467 li
f
69.629 46.467 mo
69.629 45.8291 li
70.396 45.8291 li
70.555 46.9141 li
70.555 47.5211 li
69.789 47.5211 li
f
.607 lw
69.789 47.217 mo
70.714 47.217 li
69.948 47.217 mo
70.874 47.217 li
70.268 47.217 mo
71.161 47.217 li
70.555 47.217 mo
71.321 47.217 li
@
70.714 47.521 mo
70.714 46.914 li
71.321 46.914 li
71.481 47.968 li
71.481 48.574 li
70.874 48.574 li
f
71.481 48.574 mo
70.874 48.574 li
70.874 47.9681 li
71.033 42.4771 li
71.64 42.4771 li
71.64 43.0831 li
f
71.033 43.083 mo
71.033 42.4771 li
71.64 42.4771 li
71.928 47.968 li
71.928 48.574 li
71.321 48.574 li
f
71.321 48.271 mo
72.087 48.271 li
71.481 48.271 mo
72.247 48.271 li
@
71.64 48.574 mo
71.64 47.9681 li
72.247 47.9681 li
72.406 49.2131 li
72.406 49.8191 li
71.768 49.8191 li
f
72.406 49.819 mo
71.768 49.819 li
71.768 49.2131 li
71.928 47.9681 li
72.534 47.9681 li
72.534 48.574 li
f
71.928 48.271 mo
72.853 48.271 li
72.247 48.271 mo
73.013 48.271 li
@
73.013 48.574 mo
72.406 48.574 li
72.406 47.9681 li
72.534 46.9141 li
73.14 46.9141 li
73.14 47.5211 li
f
72.534 47.521 mo
72.534 46.914 li
73.14 46.914 li
73.3 49.213 li
73.3 49.819 li
72.693 49.819 li
f
73.3 49.819 mo
72.693 49.819 li
72.693 49.2131 li
73.013 47.9681 li
73.779 47.9681 li
73.779 48.574 li
f
73.013 48.271 mo
73.907 48.271 li
@
73.14 48.574 mo
73.14 47.9681 li
73.907 47.9681 li
74.066 49.2131 li
74.066 49.8191 li
73.3 49.8191 li
f
74.066 49.819 mo
73.3 49.819 li
73.3 49.2131 li
73.46 47.9681 li
74.226 47.9681 li
74.226 48.574 li
f
74.226 48.574 mo
73.46 48.574 li
73.46 47.9681 li
73.779 46.9141 li
74.386 46.9141 li
74.386 47.5211 li
f
73.779 47.521 mo
73.779 46.914 li
74.386 46.914 li
74.673 49.213 li
74.673 49.819 li
74.066 49.819 li
f
74.066 49.5161 mo
74.832 49.5161 li
@
74.226 49.819 mo
74.226 49.2131 li
74.832 49.2131 li
74.992 50.1061 li
74.992 50.7131 li
74.386 50.7131 li
f
74.992 50.713 mo
74.386 50.713 li
74.386 50.106 li
74.513 49.213 li
75.152 49.213 li
75.152 49.819 li
f
74.513 49.819 mo
74.513 49.2131 li
75.152 49.2131 li
75.439 52.2451 li
75.439 53.0121 li
74.832 53.0121 li
f
75.439 53.012 mo
74.832 53.012 li
74.832 52.2451 li
74.992 50.1061 li
75.599 50.1061 li
75.599 50.7131 li
f
74.992 50.409 mo
75.759 50.409 li
75.152 50.409 mo
75.886 50.409 li
75.279 50.409 mo
76.045 50.409 li
75.439 50.409 mo
76.365 50.409 li
75.759 50.409 mo
76.524 50.409 li
75.886 50.409 mo
76.652 50.409 li
@
76.045 50.713 mo
76.045 50.106 li
76.652 50.106 li
76.812 51.192 li
76.812 51.7991 li
76.206 51.7991 li
f
76.812 51.799 mo
76.206 51.799 li
76.206 51.192 li
76.524 50.106 li
77.291 50.106 li
77.291 50.713 li
f
76.524 50.713 mo
76.524 50.106 li
77.291 50.106 li
77.418 52.2451 li
77.418 53.012 li
76.652 53.012 li
f
77.418 53.012 mo
76.652 53.012 li
76.652 52.2451 li
76.812 51.1921 li
77.578 51.1921 li
77.578 51.7991 li
f
76.812 51.799 mo
76.812 51.192 li
77.578 51.192 li
77.738 56.842 li
77.738 57.449 li
76.971 57.449 li
f
77.738 57.449 mo
76.971 57.449 li
76.971 56.842 li
77.418 51.1921 li
78.025 51.1921 li
78.025 51.7991 li
f
77.418 51.495 mo
78.185 51.495 li
@
78.185 51.799 mo
77.578 51.799 li
77.578 51.192 li
77.738 50.106 li
78.344 50.106 li
78.344 50.713 li
f
77.738 50.713 mo
77.738 50.106 li
78.344 50.106 li
78.503 52.2451 li
78.503 53.012 li
77.898 53.012 li
f
.766 lw
77.898 52.6281 mo
78.664 52.6281 li
78.025 52.6281 mo
78.951 52.6281 li
@
78.951 53.012 mo
78.344 53.012 li
78.344 52.2451 li
78.503 50.1061 li
79.11 50.1061 li
79.11 50.7131 li
f
78.503 50.713 mo
78.503 50.106 li
79.11 50.106 li
79.27 52.2451 li
79.27 53.012 li
78.664 53.012 li
f
78.664 52.6281 mo
79.398 52.6281 li
78.791 52.6281 mo
79.717 52.6281 li
@
79.11 53.012 mo
79.11 52.2451 li
79.717 52.2451 li
79.876 56.842 li
79.876 57.449 li
79.27 57.449 li
f
79.876 57.449 mo
79.27 57.449 li
79.27 56.842 li
79.398 52.2451 li
80.036 52.2451 li
80.036 53.0121 li
f
79.398 52.6281 mo
80.164 52.6281 li
@
80.164 53.012 mo
79.557 53.012 li
79.557 52.2451 li
79.717 49.2131 li
80.323 49.2131 li
80.323 49.819 li
f
79.717 49.819 mo
79.717 49.2131 li
80.323 49.2131 li
80.77 53.4901 li
80.77 54.097 li
80.036 54.097 li
f
80.77 54.097 mo
80.036 54.097 li
80.036 53.4901 li
80.164 51.1921 li
80.93 51.1921 li
80.93 51.7991 li
f
80.164 51.799 mo
80.164 51.192 li
80.93 51.192 li
81.09 52.2451 li
81.09 53.012 li
80.323 53.012 li
f
80.323 52.6281 mo
81.249 52.6281 li
@
81.249 53.012 mo
80.483 53.012 li
80.483 52.2451 li
80.93 51.1921 li
81.537 51.1921 li
81.537 51.7991 li
f
80.93 51.799 mo
80.93 51.192 li
81.537 51.192 li
81.696 53.4901 li
81.696 54.097 li
81.09 54.097 li
f
.607 lw
81.09 53.794 mo
81.856 53.794 li
@
81.249 54.097 mo
81.249 53.4901 li
81.856 53.4901 li
82.016 54.5441 li
82.016 55.1501 li
81.409 55.1501 li
f
81.409 55.15 mo
81.409 54.5441 li
82.016 54.5441 li
82.175 55.6301 li
82.175 56.363 li
81.537 56.363 li
f
82.175 56.363 mo
81.537 56.363 li
81.537 55.6301 li
81.856 53.4901 li
82.462 53.4901 li
82.462 54.097 li
f
82.462 54.097 mo
81.856 54.097 li
81.856 53.4901 li
82.016 52.2451 li
82.622 52.2451 li
82.622 53.0121 li
f
82.016 53.012 mo
82.016 52.2451 li
82.622 52.2451 li
82.781 54.5441 li
82.781 55.15 li
82.175 55.15 li
f
82.781 55.15 mo
82.175 55.15 li
82.175 54.5441 li
82.303 53.4901 li
82.909 53.4901 li
82.909 54.097 li
f
82.303 54.097 mo
82.303 53.4901 li
82.909 53.4901 li
83.228 54.5441 li
83.228 55.1501 li
82.622 55.1501 li
f
82.622 54.847 mo
83.388 54.847 li
82.781 54.847 mo
83.548 54.847 li
82.909 54.847 mo
83.676 54.847 li
83.069 54.847 mo
83.835 54.847 li
83.228 54.847 mo
84.282 54.847 li
83.548 54.847 mo
84.441 54.847 li
83.676 54.847 mo
84.601 54.847 li
83.835 54.847 mo
84.761 54.847 li
84.154 54.847 mo
85.048 54.847 li
84.441 54.847 mo
85.208 54.847 li
@
84.601 55.15 mo
84.601 54.5441 li
85.208 54.5441 li
85.367 55.6301 li
85.367 56.363 li
84.761 56.363 li
f
84.761 56.363 mo
84.761 55.6301 li
85.367 55.6301 li
85.527 56.842 li
85.527 57.4491 li
84.92 57.4491 li
f
85.527 57.449 mo
84.92 57.449 li
84.92 56.842 li
85.048 55.6301 li
85.655 55.6301 li
85.655 56.363 li
f
85.048 56.363 mo
85.048 55.6301 li
85.655 55.6301 li
85.974 57.8961 li
85.974 58.5021 li
85.367 58.5021 li
f
85.974 58.502 mo
85.367 58.502 li
85.367 57.8961 li
85.527 55.6301 li
86.134 55.6301 li
86.134 56.363 li
f
85.527 56.363 mo
85.527 55.6301 li
86.134 55.6301 li
86.294 62.3331 li
86.294 62.9391 li
85.655 62.9391 li
f
86.294 62.939 mo
85.655 62.939 li
85.655 62.3331 li
85.815 55.6301 li
86.421 55.6301 li
86.421 56.363 li
f
.734 lw
85.815 55.996 mo
86.74 55.996 li
86.134 55.996 mo
86.9 55.996 li
@
86.294 56.363 mo
86.294 55.6301 li
86.9 55.6301 li
87.027 56.842 li
87.027 57.4491 li
86.421 57.4491 li
f
.607 lw
86.421 57.146 mo
87.187 57.146 li
@
86.581 57.449 mo
86.581 56.842 li
87.187 56.842 li
87.347 57.8961 li
87.347 58.5021 li
86.74 58.5021 li
f
87.347 58.502 mo
86.74 58.502 li
86.74 57.8961 li
87.027 56.842 li
87.794 56.842 li
87.794 57.449 li
f
87.027 57.449 mo
87.027 56.842 li
87.794 56.842 li
87.954 61.2791 li
87.954 61.8871 li
87.187 61.8871 li
f
87.954 61.887 mo
87.187 61.887 li
87.187 61.2791 li
87.347 58.9811 li
88.113 58.9811 li
88.113 59.5881 li
f
88.113 59.588 mo
87.347 59.588 li
87.347 58.981 li
87.666 56.842 li
88.273 56.842 li
88.273 57.449 li
f
87.666 57.449 mo
87.666 56.842 li
88.273 56.842 li
88.56 57.8961 li
88.56 58.5021 li
87.954 58.5021 li
f
87.954 58.199 mo
88.719 58.199 li
@
88.719 58.502 mo
88.113 58.502 li
88.113 57.8961 li
88.273 56.842 li
88.879 56.842 li
88.879 57.449 li
f
88.273 57.449 mo
88.273 56.842 li
88.879 56.842 li
89.039 57.8961 li
89.039 58.5021 li
88.432 58.5021 li
f
88.432 58.199 mo
89.166 58.199 li
@
88.56 58.502 mo
88.56 57.8961 li
89.166 57.8961 li
89.486 58.981 li
89.486 59.5881 li
88.879 59.5881 li
f
89.486 59.588 mo
88.879 59.588 li
88.879 58.981 li
89.039 57.8961 li
89.646 57.8961 li
89.646 58.502 li
f
89.646 58.502 mo
89.039 58.502 li
89.039 57.8961 li
89.166 55.6301 li
89.805 55.6301 li
89.805 56.363 li
f
89.166 56.363 mo
89.166 55.6301 li
89.805 55.6301 li
89.933 58.9811 li
89.933 59.5881 li
89.326 59.5881 li
f
89.326 59.284 mo
90.252 59.284 li
@
89.646 59.588 mo
89.646 58.981 li
90.252 58.981 li
90.411 60.194 li
90.411 60.801 li
89.805 60.801 li
f
90.411 60.801 mo
89.805 60.801 li
89.805 60.194 li
89.933 58.9811 li
90.539 58.9811 li
90.539 59.5881 li
f
89.933 59.284 mo
90.698 59.284 li
90.092 59.284 mo
91.178 59.284 li
90.411 59.284 mo
91.305 59.284 li
@
90.539 59.588 mo
90.539 58.981 li
91.305 58.981 li
91.465 63.5471 li
91.465 64.153 li
90.698 64.153 li
f
91.465 64.153 mo
90.698 64.153 li
90.698 63.5471 li
90.858 57.8961 li
91.624 57.8961 li
91.624 58.5021 li
f
90.858 58.502 mo
90.858 57.8961 li
91.624 57.8961 li
91.784 58.981 li
91.784 59.5881 li
91.178 59.5881 li
f
91.178 59.284 mo
92.071 59.284 li
91.465 59.284 mo
92.231 59.284 li
@
92.231 59.588 mo
91.624 59.588 li
91.624 58.981 li
91.784 54.5441 li
92.391 54.5441 li
92.391 55.15 li
f
91.784 55.15 mo
91.784 54.5441 li
92.391 54.5441 li
92.55 60.194 li
92.55 60.801 li
91.912 60.801 li
f
91.912 60.498 mo
92.838 60.498 li
@
92.838 60.801 mo
92.231 60.801 li
92.231 60.194 li
92.391 58.9811 li
92.997 58.9811 li
92.997 59.5881 li
f
92.997 59.588 mo
92.391 59.588 li
92.391 58.981 li
92.55 53.4901 li
93.157 53.4901 li
93.157 54.097 li
f
92.55 54.097 mo
92.55 53.4901 li
93.157 53.4901 li
93.285 60.1941 li
93.285 60.8011 li
92.678 60.8011 li
f
92.678 60.801 mo
92.678 60.194 li
93.285 60.194 li
93.444 61.2791 li
93.444 61.8871 li
92.838 61.8871 li
f
93.444 61.887 mo
92.838 61.887 li
92.838 61.2791 li
93.157 58.9811 li
93.764 58.9811 li
93.764 59.5881 li
f
93.157 59.588 mo
93.157 58.981 li
93.764 58.981 li
93.923 60.194 li
93.923 60.801 li
93.285 60.801 li
f
93.285 60.801 mo
93.285 60.194 li
93.923 60.194 li
94.051 66.7711 li
94.051 67.537 li
93.444 67.537 li
f
94.051 67.537 mo
93.444 67.537 li
93.444 66.7711 li
93.603 60.1941 li
94.21 60.1941 li
94.21 60.8011 li
f
93.603 60.498 mo
94.689 60.498 li
@
93.923 60.801 mo
93.923 60.194 li
94.689 60.194 li
94.817 62.3331 li
94.817 62.939 li
94.051 62.939 li
f
94.817 62.939 mo
94.051 62.939 li
94.051 62.3331 li
94.21 61.2791 li
94.977 61.2791 li
94.977 61.8871 li
f
94.21 61.583 mo
95.136 61.583 li
@
95.136 61.887 mo
94.37 61.887 li
94.37 61.2791 li
94.689 60.194 li
95.296 60.194 li
95.296 60.801 li
f
94.689 60.801 mo
94.689 60.194 li
95.296 60.194 li
95.583 62.3331 li
95.583 62.939 li
94.977 62.939 li
f
94.977 62.637 mo
95.743 62.637 li
@
95.136 62.939 mo
95.136 62.3331 li
95.743 62.3331 li
95.902 63.5471 li
95.902 64.1531 li
95.296 64.1531 li
f
95.902 64.153 mo
95.296 64.153 li
95.296 63.5471 li
95.424 62.3331 li
96.062 62.3331 li
96.062 62.939 li
f
95.424 62.637 mo
96.349 62.637 li
@
96.349 62.939 mo
95.743 62.939 li
95.743 62.3331 li
95.902 61.2791 li
96.509 61.2791 li
96.509 61.8871 li
f
95.902 61.583 mo
96.668 61.583 li
96.062 61.583 mo
96.796 61.583 li
@
96.189 61.887 mo
96.189 61.2791 li
96.796 61.2791 li
96.956 62.3331 li
96.956 62.939 li
96.349 62.939 li
f
96.956 62.939 mo
96.349 62.939 li
96.349 62.3331 li
96.668 61.2791 li
97.275 61.2791 li
97.275 61.8871 li
f
96.668 61.887 mo
96.668 61.2791 li
97.275 61.2791 li
97.435 63.5471 li
97.435 64.1531 li
96.796 64.1531 li
f
97.435 64.153 mo
96.796 64.153 li
96.796 63.5471 li
96.956 62.3331 li
97.562 62.3331 li
97.562 62.939 li
f
96.956 62.939 mo
96.956 62.3331 li
97.562 62.3331 li
97.722 63.5471 li
97.722 64.1531 li
97.116 64.1531 li
f
97.722 64.153 mo
97.116 64.153 li
97.116 63.5471 li
97.435 61.2791 li
98.169 61.2791 li
98.169 61.887 li
f
97.435 61.887 mo
97.435 61.2791 li
98.169 61.2791 li
98.329 62.3331 li
98.329 62.939 li
97.562 62.939 li
f
97.562 62.637 mo
98.488 62.637 li
@
97.722 62.939 mo
97.722 62.3331 li
98.488 62.3331 li
98.648 63.5471 li
98.648 64.1531 li
97.881 64.1531 li
f
97.881 63.85 mo
98.807 63.85 li
98.169 63.85 mo
99.095 63.85 li
@
98.488 64.153 mo
98.488 63.5471 li
99.095 63.5471 li
99.254 64.632 li
99.254 65.238 li
98.648 65.238 li
f
99.254 65.238 mo
98.648 65.238 li
98.648 64.6321 li
98.807 63.5471 li
99.414 63.5471 li
99.414 64.1531 li
f
98.807 63.85 mo
99.574 63.85 li
98.935 63.85 mo
99.861 63.85 li
99.254 63.85 mo
100.021 63.85 li
@
99.414 64.153 mo
99.414 63.5471 li
100.021 63.5471 li
100.18 64.632 li
100.18 65.238 li
99.574 65.238 li
f
99.574 64.935 mo
100.308 64.935 li
@
100.308 65.238 mo
99.702 65.238 li
99.702 64.6321 li
99.861 63.5471 li
100.467 63.5471 li
100.467 64.1531 li
f
99.861 63.85 mo
100.787 63.85 li
@
100.18 64.153 mo
100.18 63.5471 li
100.787 63.5471 li
100.946 64.632 li
100.946 65.238 li
100.308 65.238 li
f
100.308 64.935 mo
101.074 64.935 li
100.467 64.935 mo
101.234 64.935 li
100.627 64.935 mo
101.681 64.935 li
100.946 64.935 mo
101.84 64.935 li
101.074 64.935 mo
102 64.935 li
101.234 64.935 mo
102.159 64.935 li
@
101.394 65.238 mo
101.394 64.6321 li
102.159 64.6321 li
102.446 65.6861 li
102.446 66.2921 li
101.84 66.2921 li
f
101.84 65.988 mo
102.606 65.988 li
102 65.988 mo
102.766 65.988 li
@
102.766 66.292 mo
102.159 66.292 li
102.159 65.686 li
102.319 62.333 li
102.926 62.333 li
102.926 62.939 li
f
102.319 62.939 mo
102.319 62.3331 li
102.926 62.3331 li
103.053 66.7711 li
103.053 67.537 li
102.446 67.537 li
f
103.053 67.537 mo
102.446 67.537 li
102.446 66.7711 li
102.766 65.6861 li
103.373 65.6861 li
103.373 66.2921 li
f
103.373 66.292 mo
102.766 66.292 li
102.766 65.686 li
102.926 64.632 li
103.532 64.632 li
103.532 65.238 li
f
102.926 64.935 mo
103.692 64.935 li
@
103.053 65.238 mo
103.053 64.6321 li
103.692 64.6321 li
103.819 66.7711 li
103.819 67.537 li
103.213 67.537 li
f
103.819 67.537 mo
103.213 67.537 li
103.213 66.7711 li
103.532 65.6861 li
104.139 65.6861 li
104.139 66.2921 li
f
103.532 65.988 mo
104.298 65.988 li
103.692 65.988 mo
104.426 65.988 li
@
104.426 66.292 mo
103.819 66.292 li
103.819 65.686 li
103.979 64.632 li
104.586 64.632 li
104.586 65.238 li
f
103.979 65.238 mo
103.979 64.6321 li
104.586 64.6321 li
104.745 66.7711 li
104.745 67.537 li
104.139 67.537 li
f
.766 lw
104.139 67.153 mo
105.192 67.153 li
104.426 67.153 mo
105.352 67.153 li
@
105.352 67.537 mo
104.586 67.537 li
104.586 66.7711 li
104.745 63.5471 li
105.512 63.5471 li
105.512 64.1531 li
f
104.745 64.153 mo
104.745 63.5471 li
105.512 63.5471 li
105.671 66.7711 li
105.671 67.537 li
104.905 67.537 li
f
104.905 67.153 mo
105.959 67.153 li
105.352 67.153 mo
106.118 67.153 li
@
105.512 67.537 mo
105.512 66.7711 li
106.118 66.7711 li
106.277 67.9851 li
106.277 68.5901 li
105.671 68.5901 li
f
106.277 68.59 mo
105.671 68.59 li
105.671 67.985 li
105.831 66.7711 li
106.437 66.7711 li
106.437 67.537 li
f
105.831 67.537 mo
105.831 66.7711 li
106.437 66.7711 li
106.565 67.9851 li
106.565 68.5901 li
105.959 68.5901 li
f
.607 lw
105.959 68.287 mo
106.884 68.287 li
106.277 68.287 mo
107.044 68.287 li
106.437 68.287 mo
107.204 68.287 li
106.565 68.287 mo
107.331 68.287 li
106.725 68.287 mo
107.65 68.287 li
107.044 68.287 mo
107.81 68.287 li
107.204 68.287 mo
107.937 68.287 li
@
107.331 68.59 mo
107.331 67.985 li
107.937 67.985 li
108.097 69.069 li
108.097 69.6761 li
107.491 69.6761 li
f
107.491 69.373 mo
108.257 69.373 li
107.65 69.373 mo
108.704 69.373 li
107.937 69.373 mo
108.864 69.373 li
108.097 69.373 mo
109.023 69.373 li
108.257 69.373 mo
109.183 69.373 li
108.416 69.373 mo
109.47 69.373 li
@
109.47 69.676 mo
108.864 69.676 li
108.864 69.069 li
109.023 67.985 li
109.629 67.985 li
109.629 68.59 li
f
109.023 68.59 mo
109.023 67.985 li
109.629 67.985 li
109.79 74.561 li
109.79 75.1671 li
109.183 75.1671 li
f
109.79 75.167 mo
109.183 75.167 li
109.183 74.561 li
109.311 70.123 li
109.949 70.123 li
109.949 70.889 li
f
109.949 70.889 mo
109.311 70.889 li
109.311 70.123 li
109.47 69.0691 li
110.077 69.0691 li
110.077 69.6761 li
f
109.47 69.676 mo
109.47 69.069 li
110.077 69.069 li
110.396 73.3151 li
110.396 73.9531 li
109.79 73.9531 li
f
110.396 73.953 mo
109.79 73.953 li
109.79 73.3151 li
109.949 70.123 li
110.555 70.123 li
110.555 70.889 li
f
.766 lw
109.949 70.506 mo
110.715 70.506 li
@
110.077 70.889 mo
110.077 70.123 li
110.715 70.123 li
110.843 71.3361 li
110.843 71.9431 li
110.236 71.9431 li
f
110.843 71.943 mo
110.236 71.943 li
110.236 71.336 li
110.555 69.069 li
111.162 69.069 li
111.162 69.676 li
f
.607 lw
110.555 69.373 mo
111.322 69.373 li
@
110.715 69.676 mo
110.715 69.069 li
111.322 69.069 li
111.449 70.123 li
111.449 70.889 li
110.843 70.889 li
f
.766 lw
110.843 70.506 mo
111.609 70.506 li
@
111.002 70.889 mo
111.002 70.123 li
111.609 70.123 li
111.769 71.3361 li
111.769 71.9431 li
111.162 71.9431 li
f
111.769 71.943 mo
111.162 71.943 li
111.162 71.336 li
111.449 70.123 li
112.215 70.123 li
112.215 70.889 li
f
111.449 70.889 mo
111.449 70.123 li
112.215 70.123 li
112.375 71.3361 li
112.375 71.9431 li
111.609 71.9431 li
f
112.375 71.943 mo
111.609 71.943 li
111.609 71.336 li
111.769 70.123 li
112.535 70.123 li
112.535 70.889 li
f
111.769 70.889 mo
111.769 70.123 li
112.535 70.123 li
112.694 74.5611 li
112.694 75.1671 li
111.928 75.1671 li
f
112.694 75.167 mo
111.928 75.167 li
111.928 74.561 li
112.375 72.262 li
112.982 72.262 li
112.982 72.868 li
f
.607 lw
112.375 72.565 mo
113.142 72.565 li
@
113.142 72.868 mo
112.535 72.868 li
112.535 72.2621 li
112.694 71.3361 li
113.301 71.3361 li
113.301 71.9431 li
f
113.301 71.943 mo
112.694 71.943 li
112.694 71.336 li
112.822 70.123 li
113.46 70.123 li
113.46 70.889 li
f
112.822 70.889 mo
112.822 70.123 li
113.46 70.123 li
113.588 71.3361 li
113.588 71.9431 li
112.982 71.9431 li
f
112.982 71.64 mo
113.907 71.64 li
@
113.301 71.943 mo
113.301 71.336 li
113.907 71.336 li
114.067 72.262 li
114.067 72.868 li
113.46 72.868 li
f
114.067 72.868 mo
113.46 72.868 li
113.46 72.2621 li
113.588 71.3361 li
114.194 71.3361 li
114.194 71.9431 li
f
113.588 71.943 mo
113.588 71.336 li
114.194 71.336 li
114.354 72.262 li
114.354 72.868 li
113.748 72.868 li
f
113.748 72.565 mo
114.674 72.565 li
114.067 72.565 mo
114.833 72.565 li
114.194 72.565 mo
114.961 72.565 li
114.354 72.565 mo
115.121 72.565 li
114.514 72.565 mo
115.44 72.565 li
114.833 72.565 mo
115.727 72.565 li
114.961 72.565 mo
115.887 72.565 li
@
115.887 72.868 mo
115.121 72.868 li
115.121 72.2621 li
115.28 71.3361 li
116.046 71.3361 li
116.046 71.9431 li
f
115.28 71.943 mo
115.28 71.336 li
116.046 71.336 li
116.206 72.262 li
116.206 72.868 li
115.44 72.868 li
f
115.44 72.565 mo
116.493 72.565 li
115.887 72.565 mo
116.653 72.565 li
116.046 72.565 mo
116.813 72.565 li
116.206 72.565 mo
116.972 72.565 li
116.334 72.565 mo
117.26 72.565 li
@
117.26 72.868 mo
116.653 72.868 li
116.653 72.2621 li
116.813 71.3361 li
117.419 71.3361 li
117.419 71.9431 li
f
116.813 71.943 mo
116.813 71.336 li
117.419 71.336 li
117.579 74.561 li
117.579 75.1671 li
116.972 75.1671 li
f
117.579 75.167 mo
116.972 75.167 li
116.972 74.561 li
117.1 72.262 li
117.706 72.262 li
117.706 72.868 li
f
117.1 72.868 mo
117.1 72.2621 li
117.706 72.2621 li
117.866 74.5611 li
117.866 75.1671 li
117.26 75.1671 li
f
117.866 75.167 mo
117.26 75.167 li
117.26 74.561 li
117.579 73.315 li
118.185 73.315 li
118.185 73.953 li
f
.638 lw
117.579 73.635 mo
118.345 73.635 li
117.706 73.635 mo
118.473 73.635 li
117.866 73.635 mo
118.632 73.635 li
@
118.025 73.953 mo
118.025 73.3151 li
118.632 73.3151 li
118.952 74.561 li
118.952 75.1671 li
118.345 75.1671 li
f
.607 lw
118.345 74.863 mo
119.239 74.863 li
118.473 74.863 mo
119.398 74.863 li
@
119.398 75.167 mo
118.632 75.167 li
118.632 74.561 li
118.792 73.315 li
119.558 73.315 li
119.558 73.953 li
f
118.792 73.953 mo
118.792 73.3151 li
119.558 73.3151 li
119.717 74.561 li
119.717 75.1671 li
118.952 75.1671 li
f
118.952 75.167 mo
118.952 74.561 li
119.717 74.561 li
120.005 75.613 li
120.005 76.22 li
119.398 76.22 li
f
119.398 75.917 mo
120.165 75.917 li
@
119.558 76.22 mo
119.558 75.613 li
120.165 75.613 li
120.324 77.912 li
120.324 78.519 li
119.717 78.519 li
f
120.324 78.519 mo
119.717 78.519 li
119.717 77.912 li
119.845 76.6991 li
120.452 76.6991 li
120.452 77.3061 li
f
120.452 77.306 mo
119.845 77.306 li
119.845 76.699 li
120.165 75.613 li
120.771 75.613 li
120.771 76.22 li
f
120.771 76.22 mo
120.165 76.22 li
120.165 75.613 li
120.324 74.561 li
120.931 74.561 li
120.931 75.1671 li
f
120.324 75.167 mo
120.324 74.561 li
120.931 74.561 li
121.09 75.613 li
121.09 76.22 li
120.452 76.22 li
f
120.452 76.22 mo
120.452 75.613 li
121.09 75.613 li
121.218 78.9661 li
121.218 79.605 li
120.612 79.605 li
f
121.218 79.605 mo
120.612 79.605 li
120.612 78.9661 li
120.771 74.5611 li
121.377 74.5611 li
121.377 75.1671 li
f
120.771 75.167 mo
120.771 74.561 li
121.377 74.561 li
121.697 76.699 li
121.697 77.306 li
121.09 77.306 li
f
121.697 77.306 mo
121.09 77.306 li
121.09 76.699 li
121.218 72.2621 li
121.824 72.2621 li
121.824 72.868 li
f
121.218 72.868 mo
121.218 72.2621 li
121.824 72.2621 li
121.984 76.6991 li
121.984 77.3061 li
121.377 77.3061 li
f
121.377 77.0031 mo
122.144 77.0031 li
@
122.144 77.306 mo
121.537 77.306 li
121.537 76.699 li
121.824 75.613 li
122.591 75.613 li
122.591 76.22 li
f
121.824 76.22 mo
121.824 75.613 li
122.591 75.613 li
122.75 77.912 li
122.75 78.519 li
121.984 78.519 li
f
122.75 78.519 mo
121.984 78.519 li
121.984 77.912 li
122.144 76.6991 li
122.91 76.6991 li
122.91 77.3061 li
f
122.144 77.0031 mo
123.07 77.0031 li
@
122.303 77.306 mo
122.303 76.699 li
123.07 76.699 li
123.23 78.9661 li
123.23 79.605 li
122.591 79.605 li
f
123.23 79.605 mo
122.591 79.605 li
122.591 78.9661 li
122.91 76.6991 li
123.517 76.6991 li
123.517 77.3061 li
f
122.91 77.0031 mo
123.676 77.0031 li
123.07 77.0031 mo
123.835 77.0031 li
@
123.23 77.306 mo
123.23 76.699 li
123.835 76.699 li
123.963 77.912 li
123.963 78.519 li
123.357 78.519 li
f
123.357 78.519 mo
123.357 77.912 li
123.963 77.912 li
124.283 80.0511 li
124.283 80.6581 li
123.676 80.6581 li
f
124.283 80.658 mo
123.676 80.658 li
123.676 80.051 li
123.835 76.699 li
124.442 76.699 li
124.442 77.306 li
f
123.835 77.306 mo
123.835 76.699 li
124.442 76.699 li
124.602 78.9661 li
124.602 79.605 li
123.963 79.605 li
f
124.602 79.605 mo
123.963 79.605 li
123.963 78.9661 li
124.123 77.912 li
124.73 77.912 li
124.73 78.519 li
f
124.123 78.215 mo
124.89 78.215 li
124.283 78.215 mo
125.209 78.215 li
124.602 78.215 mo
125.336 78.215 li
@
124.73 78.519 mo
124.73 77.912 li
125.336 77.912 li
125.496 78.9661 li
125.496 79.6051 li
124.89 79.6051 li
f
125.496 79.605 mo
124.89 79.605 li
124.89 78.9661 li
125.049 77.912 li
125.655 77.912 li
125.655 78.519 li
f
125.049 78.215 mo
126.102 78.215 li
@
125.336 78.519 mo
125.336 77.912 li
126.102 77.912 li
126.262 78.9661 li
126.262 79.6051 li
125.496 79.6051 li
f
.638 lw
125.496 79.285 mo
126.422 79.285 li
125.655 79.285 mo
126.581 79.285 li
125.815 79.285 mo
126.869 79.285 li
@
126.869 79.605 mo
126.262 79.605 li
126.262 78.9661 li
126.422 77.912 li
127.028 77.912 li
127.028 78.519 li
f
127.028 78.519 mo
126.422 78.519 li
126.422 77.912 li
126.581 75.6131 li
127.187 75.6131 li
127.187 76.2201 li
f
126.581 76.22 mo
126.581 75.613 li
127.187 75.613 li
127.348 78.9661 li
127.348 79.605 li
126.709 79.605 li
f
127.348 79.605 mo
126.709 79.605 li
126.709 78.9661 li
126.869 77.912 li
127.475 77.912 li
127.475 78.519 li
f
126.869 78.519 mo
126.869 77.912 li
127.475 77.912 li
127.794 80.0511 li
127.794 80.6581 li
127.187 80.6581 li
f
127.794 80.658 mo
127.187 80.658 li
127.187 80.051 li
127.348 78.9661 li
127.954 78.9661 li
127.954 79.605 li
f
127.348 79.605 mo
127.348 78.9661 li
127.954 78.9661 li
128.113 81.105 li
128.113 81.8711 li
127.475 81.8711 li
f
128.113 81.871 mo
127.475 81.871 li
127.475 81.105 li
127.635 80.0511 li
128.241 80.0511 li
128.241 80.6581 li
f
127.635 80.658 mo
127.635 80.051 li
128.241 80.051 li
128.561 81.105 li
128.561 81.871 li
127.954 81.871 li
f
128.561 81.871 mo
127.954 81.871 li
127.954 81.105 li
128.113 80.0511 li
128.72 80.0511 li
128.72 80.6581 li
f
128.113 80.658 mo
128.113 80.051 li
128.72 80.051 li
128.848 81.105 li
128.848 81.871 li
128.241 81.871 li
f
128.848 81.871 mo
128.241 81.871 li
128.241 81.105 li
128.401 80.0511 li
129.007 80.0511 li
129.007 80.6581 li
f
129.007 80.658 mo
128.401 80.658 li
128.401 80.051 li
128.561 78.9661 li
129.167 78.9661 li
129.167 79.605 li
f
128.561 79.605 mo
128.561 78.9661 li
129.167 78.9661 li
129.614 80.0511 li
129.614 80.6581 li
128.848 80.6581 li
f
.607 lw
128.848 80.355 mo
129.773 80.355 li
129.007 80.355 mo
129.933 80.355 li
@
129.167 80.658 mo
129.167 80.051 li
129.933 80.051 li
130.093 81.105 li
130.093 81.871 li
129.327 81.871 li
f
.766 lw
129.327 81.487 mo
130.38 81.487 li
@
130.38 81.871 mo
129.773 81.871 li
129.773 81.105 li
129.933 80.0511 li
130.54 80.0511 li
130.54 80.6581 li
f
129.933 80.658 mo
129.933 80.051 li
130.54 80.051 li
130.7 81.105 li
130.7 81.871 li
130.093 81.871 li
f
130.093 81.487 mo
130.859 81.487 li
@
130.859 81.871 mo
130.221 81.871 li
130.221 81.105 li
130.38 80.0511 li
130.987 80.0511 li
130.987 80.6581 li
f
130.38 80.658 mo
130.38 80.051 li
130.987 80.051 li
131.306 81.105 li
131.306 81.871 li
130.7 81.871 li
f
130.7 81.871 mo
130.7 81.105 li
131.306 81.105 li
131.465 83.4031 li
131.465 84.0101 li
130.859 84.0101 li
f
131.465 84.01 mo
130.859 84.01 li
130.859 83.403 li
130.987 81.105 li
131.593 81.105 li
131.593 81.871 li
f
130.987 81.871 mo
130.987 81.105 li
131.593 81.105 li
131.753 82.35 li
131.753 82.9561 li
131.146 82.9561 li
f
131.753 82.956 mo
131.146 82.956 li
131.146 82.35 li
131.465 81.105 li
132.072 81.105 li
132.072 81.871 li
f
131.465 81.871 mo
131.465 81.105 li
132.072 81.105 li
132.232 82.35 li
132.232 82.9561 li
131.593 82.9561 li
f
132.232 82.956 mo
131.593 82.956 li
131.593 82.35 li
131.753 81.105 li
132.36 81.105 li
132.36 81.871 li
f
131.753 81.871 mo
131.753 81.105 li
132.36 81.105 li
132.519 82.35 li
132.519 82.9561 li
131.912 82.9561 li
f
.607 lw
131.912 82.653 mo
132.679 82.653 li
132.072 82.653 mo
133.125 82.653 li
132.36 82.653 mo
133.285 82.653 li
132.519 82.653 mo
133.445 82.653 li
132.679 82.653 mo
133.605 82.653 li
132.838 82.653 mo
133.892 82.653 li
@
133.285 82.956 mo
133.285 82.35 li
133.892 82.35 li
134.051 84.488 li
134.051 85.255 li
133.445 85.255 li
f
134.051 85.255 mo
133.445 85.255 li
133.445 84.488 li
133.605 83.403 li
134.211 83.403 li
134.211 84.01 li
f
133.605 83.706 mo
134.371 83.706 li
@
134.371 84.01 mo
133.732 84.01 li
133.732 83.403 li
133.892 82.35 li
134.498 82.35 li
134.498 82.9561 li
f
133.892 82.956 mo
133.892 82.35 li
134.498 82.35 li
134.818 83.403 li
134.818 84.01 li
134.211 84.01 li
f
134.818 84.01 mo
134.211 84.01 li
134.211 83.403 li
134.371 82.35 li
134.977 82.35 li
134.977 82.9561 li
f
134.371 82.956 mo
134.371 82.35 li
134.977 82.35 li
135.105 83.403 li
135.105 84.01 li
134.498 84.01 li
f
135.105 84.01 mo
134.498 84.01 li
134.498 83.403 li
134.658 82.35 li
135.265 82.35 li
135.265 82.9561 li
f
134.658 82.956 mo
134.658 82.35 li
135.265 82.35 li
135.584 83.403 li
135.584 84.01 li
134.977 84.01 li
f
134.977 83.706 mo
135.743 83.706 li
@
135.105 84.01 mo
135.105 83.403 li
135.743 83.403 li
135.871 84.488 li
135.871 85.2551 li
135.265 85.2551 li
f
135.871 85.255 mo
135.265 85.255 li
135.265 84.488 li
135.424 83.403 li
136.031 83.403 li
136.031 84.01 li
f
135.424 84.01 mo
135.424 83.403 li
136.031 83.403 li
136.19 84.488 li
136.19 85.2551 li
135.584 85.2551 li
f
136.19 85.255 mo
135.584 85.255 li
135.584 84.488 li
135.871 83.403 li
136.638 83.403 li
136.638 84.01 li
f
135.871 84.01 mo
135.871 83.403 li
136.638 83.403 li
136.797 85.701 li
136.797 86.308 li
136.031 86.308 li
f
136.797 86.308 mo
136.031 86.308 li
136.031 85.701 li
136.19 84.4881 li
136.956 84.4881 li
136.956 85.2551 li
f
.766 lw
136.19 84.872 mo
137.116 84.872 li
@
137.116 85.255 mo
136.35 85.255 li
136.35 84.488 li
136.797 82.35 li
137.403 82.35 li
137.403 82.9561 li
f
137.403 82.956 mo
136.797 82.956 li
136.797 82.35 li
136.956 81.105 li
137.563 81.105 li
137.563 81.871 li
f
136.956 81.871 mo
136.956 81.105 li
137.563 81.105 li
137.723 84.488 li
137.723 85.2551 li
137.116 85.2551 li
f
137.116 85.255 mo
137.116 84.488 li
137.723 84.488 li
137.85 85.701 li
137.85 86.308 li
137.244 86.308 li
f
.607 lw
137.244 86.005 mo
138.01 86.005 li
@
137.403 86.308 mo
137.403 85.701 li
138.01 85.701 li
138.329 90.1391 li
138.329 90.7461 li
137.723 90.7461 li
f
138.329 90.746 mo
137.723 90.746 li
137.723 90.139 li
137.85 85.701 li
138.489 85.701 li
138.489 86.308 li
f
137.85 86.005 mo
138.617 86.005 li
@
138.617 86.308 mo
138.01 86.308 li
138.01 85.701 li
138.17 83.4031 li
138.776 83.4031 li
138.776 84.0101 li
f
138.17 84.01 mo
138.17 83.403 li
138.776 83.403 li
139.095 86.7551 li
139.095 87.394 li
138.489 87.394 li
f
.638 lw
138.489 87.074 mo
139.255 87.074 li
@
139.255 87.394 mo
138.617 87.394 li
138.617 86.7551 li
138.776 85.701 li
139.382 85.701 li
139.382 86.308 li
f
138.776 86.308 mo
138.776 85.701 li
139.382 85.701 li
139.543 86.7551 li
139.543 87.3941 li
138.935 87.3941 li
f
138.935 87.074 mo
139.861 87.074 li
@
139.255 87.394 mo
139.255 86.7551 li
139.861 86.7551 li
140.149 90.1391 li
140.149 90.7461 li
139.382 90.7461 li
f
140.149 90.746 mo
139.382 90.746 li
139.382 90.139 li
139.543 85.701 li
140.309 85.701 li
140.309 86.308 li
f
140.309 86.308 mo
139.543 86.308 li
139.543 85.701 li
139.702 82.3501 li
140.468 82.3501 li
140.468 82.9561 li
f
139.702 82.956 mo
139.702 82.35 li
140.468 82.35 li
140.628 86.755 li
140.628 87.394 li
139.861 87.394 li
f
140.628 87.394 mo
139.861 87.394 li
139.861 86.7551 li
140.309 84.4881 li
140.916 84.4881 li
140.916 85.2551 li
f
140.309 85.255 mo
140.309 84.488 li
140.916 84.488 li
141.075 85.701 li
141.075 86.308 li
140.468 86.308 li
f
140.468 86.308 mo
140.468 85.701 li
141.075 85.701 li
141.234 92.4051 li
141.234 93.0441 li
140.628 93.0441 li
f
141.234 93.044 mo
140.628 93.044 li
140.628 92.405 li
140.755 86.7551 li
141.362 86.7551 li
141.362 87.394 li
f
141.362 87.394 mo
140.755 87.394 li
140.755 86.7551 li
141.075 85.701 li
141.681 85.701 li
141.681 86.308 li
f
141.075 86.308 mo
141.075 85.701 li
141.681 85.701 li
141.841 86.7551 li
141.841 87.3941 li
141.234 87.3941 li
f
141.234 87.074 mo
142.001 87.074 li
@
141.362 87.394 mo
141.362 86.7551 li
142.001 86.7551 li
142.128 87.8411 li
142.128 88.4471 li
141.522 88.4471 li
f
142.128 88.447 mo
141.522 88.447 li
141.522 87.8411 li
141.681 85.701 li
142.288 85.701 li
142.288 86.308 li
f
141.681 86.308 mo
141.681 85.701 li
142.288 85.701 li
142.607 87.8411 li
142.607 88.4471 li
142.001 88.4471 li
f
142.001 88.447 mo
142.001 87.8411 li
142.607 87.8411 li
142.735 89.0541 li
142.735 89.66 li
142.128 89.66 li
f
142.735 89.66 mo
142.128 89.66 li
142.128 89.0541 li
142.288 86.7551 li
142.895 86.7551 li
142.895 87.394 li
f
142.895 87.394 mo
142.288 87.394 li
142.288 86.7551 li
142.448 85.701 li
143.054 85.701 li
143.054 86.308 li
f
142.448 86.308 mo
142.448 85.701 li
143.054 85.701 li
143.373 91.1931 li
143.373 91.7991 li
142.735 91.7991 li
f
143.373 91.799 mo
142.735 91.799 li
142.735 91.1931 li
142.895 84.488 li
143.66 84.488 li
143.66 85.2551 li
f
143.66 85.255 mo
142.895 85.255 li
142.895 84.488 li
143.054 82.35 li
143.82 82.35 li
143.82 82.9561 li
f
143.82 82.956 mo
143.054 82.956 li
143.054 82.35 li
143.213 78.966 li
143.98 78.966 li
143.98 79.605 li
f
143.98 79.605 mo
143.213 79.605 li
143.213 78.9661 li
143.373 74.5611 li
144.108 74.5611 li
144.108 75.1671 li
f
144.108 75.167 mo
143.373 75.167 li
143.373 74.561 li
143.82 73.315 li
144.427 73.315 li
144.427 73.953 li
f
143.82 73.953 mo
143.82 73.3151 li
144.427 73.3151 li
144.586 75.613 li
144.586 76.22 li
143.98 76.22 li
f
144.586 76.22 mo
143.98 76.22 li
143.98 75.613 li
144.108 72.2621 li
144.746 72.2621 li
144.746 72.868 li
f
144.108 72.868 mo
144.108 72.2621 li
144.746 72.2621 li
144.874 77.912 li
144.874 78.519 li
144.267 78.519 li
f
144.874 78.519 mo
144.267 78.519 li
144.267 77.912 li
144.586 74.5611 li
145.193 74.5611 li
145.193 75.1671 li
f
144.586 75.167 mo
144.586 74.561 li
145.193 74.561 li
145.352 76.699 li
145.352 77.306 li
144.746 77.306 li
f
145.352 77.306 mo
144.746 77.306 li
144.746 76.699 li
144.874 75.613 li
145.512 75.613 li
145.512 76.22 li
f
144.874 76.22 mo
144.874 75.613 li
145.512 75.613 li
145.64 81.105 li
145.64 81.871 li
145.033 81.871 li
f
145.033 81.871 mo
145.033 81.105 li
145.64 81.105 li
145.799 83.4031 li
145.799 84.0101 li
145.193 84.0101 li
f
145.193 84.01 mo
145.193 83.403 li
145.799 83.403 li
146.119 84.488 li
146.119 85.2551 li
145.512 85.2551 li
f
.766 lw
145.512 84.872 mo
146.246 84.872 li
@
145.64 85.255 mo
145.64 84.488 li
146.246 84.488 li
146.406 86.755 li
146.406 87.394 li
145.799 87.394 li
f
.638 lw
145.799 87.074 mo
146.565 87.074 li
@
145.959 87.394 mo
145.959 86.7551 li
146.565 86.7551 li
146.885 89.0541 li
146.885 89.6601 li
146.246 89.6601 li
f
146.246 89.66 mo
146.246 89.0541 li
146.885 89.0541 li
147.172 91.1931 li
147.172 91.7991 li
146.406 91.7991 li
f
147.172 91.799 mo
146.406 91.799 li
146.406 91.1931 li
146.565 83.403 li
147.331 83.403 li
147.331 84.0101 li
f
146.565 84.01 mo
146.565 83.403 li
147.331 83.403 li
147.491 90.139 li
147.491 90.746 li
146.726 90.746 li
f
.607 lw
146.726 90.443 mo
147.619 90.443 li
@
146.885 90.746 mo
146.885 90.139 li
147.619 90.139 li
147.938 91.1931 li
147.938 91.7991 li
147.331 91.7991 li
f
147.938 91.799 mo
147.331 91.799 li
147.331 91.1931 li
147.491 90.139 li
148.098 90.139 li
148.098 90.746 li
f
147.491 90.746 mo
147.491 90.139 li
148.098 90.139 li
148.258 91.1931 li
148.258 91.7991 li
147.619 91.7991 li
f
147.619 91.496 mo
148.386 91.496 li
@
147.779 91.799 mo
147.779 91.1931 li
148.386 91.1931 li
148.705 92.405 li
148.705 93.0441 li
148.098 93.0441 li
f
148.705 93.044 mo
148.098 93.044 li
148.098 92.405 li
148.258 91.1931 li
148.864 91.1931 li
148.864 91.799 li
f
148.864 91.799 mo
148.258 91.799 li
148.258 91.1931 li
148.386 90.139 li
148.992 90.139 li
148.992 90.746 li
f
148.386 90.443 mo
149.151 90.443 li
@
149.151 90.746 mo
148.545 90.746 li
148.545 90.139 li
148.705 89.0541 li
149.311 89.0541 li
149.311 89.66 li
f
148.705 89.66 mo
148.705 89.0541 li
149.311 89.0541 li
149.63 91.1931 li
149.63 91.7991 li
148.992 91.7991 li
f
148.992 91.799 mo
148.992 91.1931 li
149.63 91.1931 li
149.758 92.405 li
149.758 93.0441 li
149.151 93.0441 li
f
.638 lw
149.151 92.725 mo
149.918 92.725 li
@
149.311 93.044 mo
149.311 92.405 li
149.918 92.405 li
150.077 96.684 li
150.077 97.322 li
149.47 97.322 li
f
150.077 97.322 mo
149.47 97.322 li
149.47 96.6841 li
149.758 92.405 li
150.365 92.405 li
150.365 93.0441 li
f
149.758 92.725 mo
150.684 92.725 li
149.918 92.725 mo
150.843 92.725 li
@
150.077 93.044 mo
150.077 92.405 li
150.843 92.405 li
151.003 94.4171 li
151.003 95.023 li
150.237 95.023 li
f
151.003 95.023 mo
150.237 95.023 li
150.237 94.4171 li
150.684 92.405 li
151.291 92.405 li
151.291 93.0441 li
f
.607 lw
150.987 92.405 mo
150.987 100.515 li
151.306 92.405 mo
151.306 100.515 li
@
151.003 93.044 mo
151.003 92.405 li
151.609 92.405 li
151.769 95.471 li
151.769 96.236 li
151.13 96.236 li
f
151.769 96.236 mo
151.13 96.236 li
151.13 95.4711 li
151.291 93.3311 li
151.897 93.3311 li
151.897 93.939 li
f
151.897 93.939 mo
151.291 93.939 li
151.291 93.3311 li
151.609 92.405 li
152.216 92.405 li
152.216 93.0441 li
f
151.609 93.044 mo
151.609 92.405 li
152.216 92.405 li
152.376 95.471 li
152.376 96.236 li
151.769 96.236 li
f
152.376 96.236 mo
151.769 96.236 li
151.769 95.4711 li
151.897 92.405 li
152.503 92.405 li
152.503 93.0441 li
f
.638 lw
151.897 92.725 mo
152.663 92.725 li
@
152.057 93.044 mo
152.057 92.405 li
152.663 92.405 li
152.982 93.3311 li
152.982 93.939 li
152.376 93.939 li
f
.607 lw
152.376 93.635 mo
153.142 93.635 li
@
152.503 93.939 mo
152.503 93.3311 li
153.142 93.3311 li
153.27 94.4171 li
153.27 95.0231 li
152.663 95.0231 li
f
153.27 95.023 mo
152.663 95.023 li
152.663 94.4171 li
152.823 91.1931 li
153.429 91.1931 li
153.429 91.799 li
f
152.823 91.799 mo
152.823 91.1931 li
153.429 91.1931 li
153.589 93.3311 li
153.589 93.939 li
152.982 93.939 li
f
152.982 93.635 mo
153.876 93.635 li
153.27 93.635 mo
154.196 93.635 li
@
153.429 93.939 mo
153.429 93.3311 li
154.196 93.3311 li
154.355 94.4171 li
154.355 95.0231 li
153.589 95.0231 li
f
154.355 95.023 mo
153.589 95.023 li
153.589 94.4171 li
153.748 93.3311 li
154.515 93.3311 li
154.515 93.939 li
f
153.748 93.939 mo
153.748 93.3311 li
154.515 93.3311 li
154.802 95.4711 li
154.802 96.2361 li
154.196 96.2361 li
f
154.802 96.236 mo
154.196 96.236 li
154.196 95.4711 li
154.355 94.4171 li
154.961 94.4171 li
154.961 95.0231 li
f
154.961 95.023 mo
154.355 95.023 li
154.355 94.4171 li
154.515 89.054 li
155.121 89.054 li
155.121 89.66 li
f
154.515 89.66 mo
154.515 89.0541 li
155.121 89.0541 li
155.249 94.4171 li
155.249 95.0231 li
154.643 95.0231 li
f
155.249 95.023 mo
154.643 95.023 li
154.643 94.4171 li
154.802 89.054 li
155.408 89.054 li
155.408 89.66 li
f
154.802 89.66 mo
154.802 89.0541 li
155.408 89.0541 li
155.728 94.4171 li
155.728 95.0231 li
155.121 95.0231 li
f
155.121 94.721 mo
155.887 94.721 li
155.249 94.721 mo
156.015 94.721 li
@
155.408 95.023 mo
155.408 94.4171 li
156.015 94.4171 li
156.175 95.4711 li
156.175 96.236 li
155.568 96.236 li
f
156.175 96.236 mo
155.568 96.236 li
155.568 95.4711 li
155.887 86.7551 li
156.494 86.7551 li
156.494 87.394 li
f
155.887 87.394 mo
155.887 86.7551 li
156.494 86.7551 li
156.653 94.4171 li
156.653 95.0231 li
156.015 95.0231 li
f
156.015 95.023 mo
156.015 94.4171 li
156.653 94.4171 li
156.781 95.4711 li
156.781 96.236 li
156.175 96.236 li
f
.766 lw
156.175 95.854 mo
156.94 95.854 li
156.335 95.854 mo
157.101 95.854 li
@
157.101 96.236 mo
156.494 96.236 li
156.494 95.4711 li
156.781 94.4171 li
157.388 94.4171 li
157.388 95.0231 li
f
156.781 95.023 mo
156.781 94.4171 li
157.388 94.4171 li
157.707 95.4711 li
157.707 96.236 li
156.94 96.236 li
f
156.94 96.236 mo
156.94 95.4711 li
157.707 95.4711 li
157.867 96.6841 li
157.867 97.3221 li
157.101 97.3221 li
f
157.867 97.322 mo
157.101 97.322 li
157.101 96.6841 li
157.26 95.4711 li
158.026 95.4711 li
158.026 96.236 li
f
158.026 96.236 mo
157.26 96.236 li
157.26 95.4711 li
157.707 94.4171 li
158.314 94.4171 li
158.314 95.0231 li
f
157.707 95.023 mo
157.707 94.4171 li
158.314 94.4171 li
158.474 95.4711 li
158.474 96.236 li
157.867 96.236 li
f
158.474 96.236 mo
157.867 96.236 li
157.867 95.4711 li
158.026 93.3311 li
158.633 93.3311 li
158.633 93.939 li
f
158.026 93.939 mo
158.026 93.3311 li
158.633 93.3311 li
158.761 95.4711 li
158.761 96.2361 li
158.154 96.2361 li
f
158.154 96.236 mo
158.154 95.4711 li
158.761 95.4711 li
158.92 97.769 li
158.92 98.376 li
158.314 98.376 li
f
158.92 98.376 mo
158.314 98.376 li
158.314 97.769 li
158.633 95.4711 li
159.239 95.4711 li
159.239 96.2361 li
f
158.633 96.236 mo
158.633 95.4711 li
159.239 95.4711 li
159.399 98.8221 li
159.399 99.4611 li
158.761 99.4611 li
f
159.399 99.461 mo
158.761 99.461 li
158.761 98.822 li
158.92 97.769 li
159.527 97.769 li
159.527 98.376 li
f
159.527 98.376 mo
158.92 98.376 li
158.92 97.769 li
159.08 96.6841 li
159.686 96.6841 li
159.686 97.3221 li
f
159.08 97.322 mo
159.08 96.6841 li
159.686 96.6841 li
160.006 97.769 li
160.006 98.376 li
159.399 98.376 li
f
.607 lw
159.399 98.072 mo
160.133 98.072 li
@
160.133 98.376 mo
159.527 98.376 li
159.527 97.769 li
159.686 96.6841 li
160.293 96.6841 li
160.293 97.3221 li
f
160.293 97.322 mo
159.686 97.322 li
159.686 96.6841 li
159.846 95.4711 li
160.453 95.4711 li
160.453 96.236 li
f
159.846 96.236 mo
159.846 95.4711 li
160.453 95.4711 li
160.612 97.769 li
160.612 98.376 li
160.006 98.376 li
f
160.006 98.072 mo
161.059 98.072 li
@
161.059 98.376 mo
160.293 98.376 li
160.293 97.769 li
160.453 96.6841 li
161.218 96.6841 li
161.218 97.3221 li
f
161.218 97.322 mo
160.453 97.322 li
160.453 96.6841 li
160.612 95.4711 li
161.378 95.4711 li
161.378 96.236 li
f
160.612 96.236 mo
160.612 95.4711 li
161.378 95.4711 li
161.506 96.6841 li
161.506 97.3221 li
160.771 97.3221 li
f
.638 lw
160.771 97.0031 mo
161.825 97.0031 li
@
161.218 97.322 mo
161.218 96.6841 li
161.825 96.6841 li
161.985 98.822 li
161.985 99.4611 li
161.378 99.4611 li
f
161.985 99.461 mo
161.378 99.461 li
161.378 98.822 li
161.506 97.769 li
162.145 97.769 li
162.145 98.376 li
f
162.145 98.376 mo
161.506 98.376 li
161.506 97.769 li
161.666 96.6841 li
162.273 96.6841 li
162.273 97.3221 li
f
161.666 97.322 mo
161.666 96.6841 li
162.273 96.6841 li
162.432 97.769 li
162.432 98.376 li
161.825 98.376 li
f
.607 lw
161.825 98.072 mo
162.752 98.072 li
@
162.752 98.376 mo
162.145 98.376 li
162.145 97.769 li
162.273 96.6841 li
162.911 96.6841 li
162.911 97.3221 li
f
162.273 97.322 mo
162.273 96.6841 li
162.911 96.6841 li
163.038 97.769 li
163.038 98.376 li
162.432 98.376 li
f
162.432 98.072 mo
163.198 98.072 li
@
163.198 98.376 mo
162.591 98.376 li
162.591 97.769 li
162.911 96.6841 li
163.517 96.6841 li
163.517 97.3221 li
f
.638 lw
162.911 97.0031 mo
163.645 97.0031 li
@
163.038 97.322 mo
163.038 96.6841 li
163.645 96.6841 li
163.805 97.769 li
163.805 98.376 li
163.198 98.376 li
f
.607 lw
163.198 98.072 mo
163.964 98.072 li
@
163.964 98.376 mo
163.357 98.376 li
163.357 97.769 li
163.645 96.6841 li
164.284 96.6841 li
164.284 97.3221 li
f
164.284 97.322 mo
163.645 97.322 li
163.645 96.6841 li
163.805 95.4711 li
164.571 95.4711 li
164.571 96.236 li
f
163.805 96.236 mo
163.805 95.4711 li
164.571 95.4711 li
164.731 98.8221 li
164.731 99.4611 li
163.964 99.4611 li
f
164.731 99.461 mo
163.964 99.461 li
163.964 98.822 li
164.124 95.471 li
164.89 95.471 li
164.89 96.236 li
f
164.124 96.236 mo
164.124 95.4711 li
164.89 95.4711 li
165.018 97.769 li
165.018 98.376 li
164.284 98.376 li
f
164.284 98.376 mo
164.284 97.769 li
165.018 97.769 li
165.337 98.8221 li
165.337 99.4611 li
164.731 99.4611 li
f
.638 lw
164.731 99.142 mo
165.496 99.142 li
@
165.496 99.461 mo
164.89 99.461 li
164.89 98.822 li
165.018 94.4171 li
165.656 94.4171 li
165.656 95.023 li
f
165.018 95.023 mo
165.018 94.4171 li
165.656 94.4171 li
165.784 98.822 li
165.784 99.4611 li
165.177 99.4611 li
f
165.784 99.461 mo
165.177 99.461 li
165.177 98.822 li
165.496 94.4171 li
166.103 94.4171 li
166.103 95.023 li
f
165.496 95.023 mo
165.496 94.4171 li
166.103 94.4171 li
166.263 97.769 li
166.263 98.376 li
165.656 98.376 li
f
.607 lw
165.656 98.072 mo
166.39 98.072 li
@
165.784 98.376 mo
165.784 97.769 li
166.39 97.769 li
166.55 98.8221 li
166.55 99.4611 li
165.943 99.4611 li
f
166.55 99.461 mo
165.943 99.461 li
165.943 98.822 li
166.103 97.769 li
166.71 97.769 li
166.71 98.376 li
f
166.71 98.376 mo
166.103 98.376 li
166.103 97.769 li
166.39 94.4171 li
167.029 94.4171 li
167.029 95.0231 li
f
166.39 95.023 mo
166.39 94.4171 li
167.029 94.4171 li
167.156 98.822 li
167.156 99.4611 li
166.55 99.4611 li
f
167.156 99.461 mo
166.55 99.461 li
166.55 98.822 li
166.71 97.769 li
167.316 97.769 li
167.316 98.376 li
f
166.71 98.072 mo
167.476 98.072 li
@
166.869 98.376 mo
166.869 97.769 li
167.476 97.769 li
167.635 99.9081 li
167.635 100.515 li
167.029 100.515 li
f
.766 lw
167.699 98.822 mo
167.699 100.515 li
@
168.082 99.461 mo
167.316 99.461 li
167.316 98.822 li
167.476 89.054 li
168.242 89.054 li
168.242 89.66 li
f
.607 lw
167.476 89.357 mo
168.402 89.357 li
@
167.635 89.66 mo
167.635 89.0541 li
168.402 89.0541 li
168.529 98.8221 li
168.529 99.4611 li
167.795 99.4611 li
f
168.529 99.461 mo
167.795 99.461 li
167.795 98.822 li
168.242 95.471 li
168.849 95.471 li
168.849 96.236 li
f
168.242 96.236 mo
168.242 95.4711 li
168.849 95.4711 li
169.008 98.8221 li
169.008 99.4611 li
168.402 99.4611 li
f
169.008 99.461 mo
168.402 99.461 li
168.402 98.822 li
168.529 97.769 li
169.168 97.769 li
169.168 98.376 li
f
168.529 98.072 mo
169.295 98.072 li
@
168.689 98.376 mo
168.689 97.769 li
169.295 97.769 li
169.615 98.8221 li
169.615 99.4611 li
169.008 99.4611 li
f
.638 lw
169.008 99.142 mo
169.774 99.142 li
169.168 99.142 mo
169.902 99.142 li
@
169.902 99.461 mo
169.295 99.461 li
169.295 98.822 li
169.455 97.769 li
170.062 97.769 li
170.062 98.376 li
f
169.455 98.376 mo
169.455 97.769 li
170.062 97.769 li
170.222 98.8221 li
170.222 99.4611 li
169.615 99.4611 li
f
170.222 99.461 mo
169.615 99.461 li
169.615 98.822 li
169.902 95.471 li
170.541 95.471 li
170.541 96.236 li
f
169.902 96.236 mo
169.902 95.4711 li
170.541 95.4711 li
170.668 98.8221 li
170.668 99.4611 li
170.062 99.4611 li
f
170.062 99.142 mo
170.828 99.142 li
@
170.828 99.461 mo
170.222 99.461 li
170.222 98.822 li
170.38 97.769 li
170.987 97.769 li
170.987 98.376 li
f
170.987 98.376 mo
170.38 98.376 li
170.38 97.769 li
170.668 95.4711 li
171.275 95.4711 li
171.275 96.2361 li
f
170.668 96.236 mo
170.668 95.4711 li
171.275 95.4711 li
171.594 96.6841 li
171.594 97.3221 li
170.828 97.3221 li
f
171.594 97.322 mo
170.828 97.322 li
170.828 96.6841 li
170.987 94.4171 li
171.753 94.4171 li
171.753 95.0231 li
f
170.987 95.023 mo
170.987 94.4171 li
171.753 94.4171 li
171.913 98.822 li
171.913 99.4611 li
171.147 99.4611 li
f
171.147 99.142 mo
172.041 99.142 li
@
172.041 99.461 mo
171.275 99.461 li
171.275 98.822 li
171.753 97.769 li
172.36 97.769 li
172.36 98.376 li
f
.607 lw
171.753 98.072 mo
172.52 98.072 li
@
171.913 98.376 mo
171.913 97.769 li
172.52 97.769 li
172.648 98.8221 li
172.648 99.4611 li
172.041 99.4611 li
f
.638 lw
172.041 99.142 mo
172.807 99.142 li
@
172.807 99.461 mo
172.201 99.461 li
172.201 98.822 li
172.52 97.769 li
173.126 97.769 li
173.126 98.376 li
f
.607 lw
172.52 98.072 mo
173.286 98.072 li
172.648 98.072 mo
173.414 98.072 li
@
172.807 98.376 mo
172.807 97.769 li
173.414 97.769 li
173.573 98.8221 li
173.573 99.4611 li
172.967 99.4611 li
f
.638 lw
172.967 99.142 mo
173.733 99.142 li
173.126 99.142 mo
174.052 99.142 li
173.414 99.142 mo
174.18 99.142 li
@
174.18 99.461 mo
173.573 99.461 li
173.573 98.822 li
173.733 94.4171 li
174.339 94.4171 li
174.339 95.023 li
f
173.733 95.023 mo
173.733 94.4171 li
174.339 94.4171 li
174.499 98.822 li
174.499 99.4611 li
173.893 99.4611 li
f
173.893 99.142 mo
174.787 99.142 li
174.18 99.142 mo
175.105 99.142 li
174.339 99.142 mo
175.265 99.142 li
174.499 99.142 mo
175.425 99.142 li
174.659 99.142 mo
175.712 99.142 li
175.105 99.142 mo
175.872 99.142 li
@
175.872 99.461 mo
175.265 99.461 li
175.265 98.822 li
175.425 96.684 li
176.032 96.684 li
176.032 97.322 li
f
175.425 97.322 mo
175.425 96.6841 li
176.032 96.6841 li
176.16 98.822 li
176.16 99.4611 li
175.553 99.4611 li
f
.607 lw
175.856 98.822 mo
175.856 100.515 li
@
176.478 100.515 mo
175.872 100.515 li
175.872 99.908 li
176.032 98.822 li
176.638 98.822 li
176.638 99.4611 li
f
.638 lw
176.032 99.142 mo
176.797 99.142 li
@
176.478 98.822 mo
176.478 100.515 li
@
.607 lw
176.782 97.769 mo
176.782 100.515 li
@
176.478 98.072 mo
177.404 98.072 li
@
176.797 98.376 mo
176.797 97.769 li
177.404 97.769 li
177.532 98.8221 li
177.532 99.4611 li
176.925 99.4611 li
f
177.229 98.822 mo
177.229 100.515 li
177.548 98.822 mo
177.548 100.515 li
@
177.851 99.461 mo
177.244 99.461 li
177.244 98.822 li
177.404 96.684 li
178.011 96.684 li
178.011 97.322 li
f
178.011 97.322 mo
177.404 97.322 li
177.404 96.6841 li
177.691 94.4171 li
178.298 94.4171 li
178.298 95.0231 li
f
177.691 95.023 mo
177.691 94.4171 li
178.298 94.4171 li
178.617 97.769 li
178.617 98.376 li
177.851 98.376 li
f
177.851 98.376 mo
177.851 97.769 li
178.617 97.769 li
178.777 98.8221 li
178.777 99.4611 li
178.011 99.4611 li
f
.766 lw
178.394 98.822 mo
178.394 100.515 li
@
179.064 100.515 mo
178.298 100.515 li
178.298 99.908 li
178.617 97.769 li
179.224 97.769 li
179.224 98.376 li
f
178.617 98.376 mo
178.617 97.769 li
179.224 97.769 li
179.383 98.8221 li
179.383 99.4611 li
178.777 99.4611 li
f
.638 lw
178.777 99.142 mo
179.543 99.142 li
@
179.543 99.461 mo
178.904 99.461 li
178.904 98.822 li
179.064 96.684 li
179.671 96.684 li
179.671 97.322 li
f
179.064 97.322 mo
179.064 96.6841 li
179.671 96.6841 li
179.831 98.822 li
179.831 99.4611 li
179.224 99.4611 li
f
179.224 99.142 mo
180.15 99.142 li
@
.607 lw
179.847 98.822 mo
179.847 100.515 li
180.133 98.822 mo
180.133 100.515 li
@
.638 lw
179.831 99.142 mo
180.597 99.142 li
179.99 99.142 mo
180.916 99.142 li
180.309 99.142 mo
181.043 99.142 li
@
181.043 99.461 mo
180.436 99.461 li
180.436 98.822 li
180.597 97.769 li
181.203 97.769 li
181.203 98.376 li
f
.607 lw
180.597 98.072 mo
181.363 98.072 li
@
180.756 98.376 mo
180.756 97.769 li
181.363 97.769 li
181.522 98.8221 li
181.522 99.4611 li
180.916 99.4611 li
f
181.522 99.461 mo
180.916 99.461 li
180.916 98.822 li
181.203 97.769 li
181.81 97.769 li
181.81 98.376 li
f
181.203 98.376 mo
181.203 97.769 li
181.81 97.769 li
182.128 98.8221 li
182.128 99.4611 li
181.363 99.4611 li
f
.638 lw
181.363 99.142 mo
182.289 99.142 li
181.522 99.142 mo
182.416 99.142 li
@
181.682 99.461 mo
181.682 98.822 li
182.416 98.822 li
182.576 99.908 li
182.576 100.515 li
181.81 100.515 li
f
.607 lw
182.592 97.769 mo
182.592 100.515 li
@
182.895 98.376 mo
182.289 98.376 li
182.289 97.769 li
182.416 95.4711 li
183.055 95.4711 li
183.055 96.2361 li
f
.638 lw
182.735 95.471 mo
182.735 100.515 li
@
183.502 100.515 mo
182.895 100.515 li
182.895 99.908 li
183.055 98.822 li
183.661 98.822 li
183.661 99.4611 li
f
183.055 99.142 mo
183.789 99.142 li
183.182 99.142 mo
183.948 99.142 li
@
.607 lw
183.645 98.822 mo
183.645 100.515 li
@
.638 lw
184.108 98.822 mo
184.108 100.515 li
@
183.789 99.142 mo
184.555 99.142 li
@
.607 lw
184.252 98.822 mo
184.252 100.515 li
184.571 98.822 mo
184.571 100.515 li
@
.638 lw
184.268 99.142 mo
185.034 99.142 li
184.427 99.142 mo
185.321 99.142 li
@
185.321 99.461 mo
184.714 99.461 li
184.714 98.822 li
184.874 94.4171 li
185.641 94.4171 li
185.641 95.023 li
f
184.874 95.023 mo
184.874 94.4171 li
185.641 94.4171 li
185.8 98.822 li
185.8 99.4611 li
185.034 99.4611 li
f
.766 lw
185.417 98.822 mo
185.417 100.515 li
@
186.087 100.515 mo
185.321 100.515 li
185.321 99.908 li
185.641 97.769 li
186.247 97.769 li
186.247 98.376 li
f
185.641 98.376 mo
185.641 97.769 li
186.247 97.769 li
186.407 98.8221 li
186.407 99.4611 li
185.8 99.4611 li
f
.638 lw
185.8 99.142 mo
186.566 99.142 li
@
186.566 99.461 mo
185.928 99.461 li
185.928 98.822 li
186.087 97.769 li
186.694 97.769 li
186.694 98.376 li
f
186.087 98.376 mo
186.087 97.769 li
186.694 97.769 li
186.853 98.8221 li
186.853 99.4611 li
186.247 99.4611 li
f
186.247 99.142 mo
187.173 99.142 li
186.566 99.142 mo
187.301 99.142 li
@
1.245 lw
187.316 98.822 mo
187.316 100.515 li
@
.638 lw
187.301 99.142 mo
188.066 99.142 li
187.46 99.142 mo
188.227 99.142 li
@
188.227 99.461 mo
187.62 99.461 li
187.62 98.822 li
187.78 95.471 li
188.386 95.471 li
188.386 96.236 li
f
187.78 96.236 mo
187.78 95.4711 li
188.386 95.4711 li
188.673 98.8221 li
188.673 99.4611 li
188.066 99.4611 li
f
188.066 99.142 mo
188.833 99.142 li
188.227 99.142 mo
189.152 99.142 li
188.386 99.142 mo
189.312 99.142 li
@
.766 lw
188.929 98.822 mo
188.929 100.515 li
@
.607 lw
189.456 98.822 mo
189.456 100.515 li
@
189.759 99.461 mo
189.152 99.461 li
189.152 98.822 li
189.312 97.769 li
189.919 97.769 li
189.919 98.376 li
f
189.312 98.376 mo
189.312 97.769 li
189.919 97.769 li
190.046 98.8221 li
190.046 99.4611 li
189.44 99.4611 li
f
189.743 98.822 mo
189.743 100.515 li
@
190.365 100.515 mo
189.759 100.515 li
189.759 99.908 li
189.919 97.769 li
190.525 97.769 li
190.525 98.376 li
f
190.222 97.769 mo
190.222 100.515 li
190.509 97.769 mo
190.509 100.515 li
190.509 97.769 mo
190.509 100.515 li
190.828 94.4171 mo
190.828 100.515 li
@
190.525 95.023 mo
190.525 94.4171 li
191.131 94.4171 li
191.451 98.822 li
191.451 99.4611 li
190.812 99.4611 li
f
191.451 99.461 mo
190.812 99.461 li
190.812 98.822 li
190.972 97.769 li
191.579 97.769 li
191.579 98.376 li
f
190.972 98.072 mo
191.738 98.072 li
191.131 98.072 mo
191.898 98.072 li
@
191.291 98.376 mo
191.291 97.769 li
191.898 97.769 li
192.185 98.8221 li
192.185 99.4611 li
191.579 99.4611 li
f
.638 lw
191.579 99.142 mo
192.345 99.142 li
191.738 99.142 mo
192.664 99.142 li
191.898 99.142 mo
192.823 99.142 li
@
.766 lw
192.44 98.822 mo
192.44 100.515 li
@
193.111 100.515 mo
192.345 100.515 li
192.345 99.908 li
192.664 94.4171 li
193.27 94.4171 li
193.27 95.0231 li
f
192.664 95.023 mo
192.664 94.4171 li
193.27 94.4171 li
193.43 98.822 li
193.43 99.4611 li
192.823 99.4611 li
f
193.43 99.461 mo
192.823 99.461 li
192.823 98.822 li
192.951 97.769 li
193.558 97.769 li
193.558 98.376 li
f
.607 lw
192.951 98.072 mo
193.718 98.072 li
@
193.718 98.376 mo
193.111 98.376 li
193.111 97.769 li
193.43 94.4171 li
194.037 94.4171 li
194.037 95.0231 li
f
193.43 95.023 mo
193.43 94.4171 li
194.037 94.4171 li
194.196 96.684 li
194.196 97.322 li
193.558 97.322 li
f
193.558 97.322 mo
193.558 96.6841 li
194.196 96.6841 li
194.323 98.822 li
194.323 99.4611 li
193.718 99.4611 li
f
194.323 99.461 mo
193.718 99.461 li
193.718 98.822 li
193.877 95.471 li
194.483 95.471 li
194.483 96.236 li
f
194.18 95.471 mo
194.18 100.515 li
194.627 98.822 mo
194.627 100.515 li
@
.638 lw
194.323 99.142 mo
195.09 99.142 li
194.483 99.142 mo
195.25 99.142 li
@
195.25 99.461 mo
194.643 99.461 li
194.643 98.822 li
194.803 97.769 li
195.409 97.769 li
195.409 98.376 li
f
194.803 98.376 mo
194.803 97.769 li
195.409 97.769 li
195.569 99.9081 li
195.569 100.515 li
194.93 100.515 li
f
.607 lw
195.553 98.822 mo
195.553 100.515 li
@
.638 lw
195.25 99.142 mo
196.175 99.142 li
@
196.175 99.461 mo
195.409 99.461 li
195.409 98.822 li
195.569 97.769 li
196.335 97.769 li
196.335 98.376 li
f
195.569 98.376 mo
195.569 97.769 li
196.335 97.769 li
196.463 98.8221 li
196.463 99.4611 li
195.696 99.4611 li
f
195.696 99.142 mo
196.782 99.142 li
196.175 99.142 mo
196.942 99.142 li
@
196.942 99.461 mo
196.335 99.461 li
196.335 98.822 li
196.463 89.054 li
197.069 89.054 li
197.069 89.66 li
f
196.463 89.66 mo
196.463 89.0541 li
197.069 89.0541 li
197.229 98.8221 li
197.229 99.4611 li
196.622 99.4611 li
f
196.622 99.142 mo
197.548 99.142 li
196.942 99.142 mo
197.708 99.142 li
197.069 99.142 mo
197.835 99.142 li
@
.607 lw
197.532 98.822 mo
197.532 100.515 li
197.852 98.822 mo
197.852 100.515 li
197.852 98.822 mo
197.852 100.515 li
198.298 96.6841 mo
198.298 100.515 li
@
197.995 97.322 mo
197.995 96.6841 li
198.602 96.6841 li
198.761 98.822 li
198.761 99.4611 li
198.155 99.4611 li
f
198.761 99.461 mo
198.155 99.461 li
198.155 98.822 li
198.314 97.769 li
198.921 97.769 li
198.921 98.376 li
f
198.314 98.376 mo
198.314 97.769 li
198.921 97.769 li
199.208 98.8221 li
199.208 99.4611 li
198.602 99.4611 li
f
.638 lw
198.602 99.142 mo
199.528 99.142 li
@
.766 lw
199.144 98.822 mo
199.144 100.515 li
@
.734 lw
199.448 97.769 mo
199.448 100.515 li
@
199.814 98.376 mo
199.081 98.376 li
199.081 97.769 li
199.528 96.6841 li
200.134 96.6841 li
200.134 97.3221 li
f
199.528 97.322 mo
199.528 96.6841 li
200.134 96.6841 li
200.293 98.822 li
200.293 99.4611 li
199.687 99.4611 li
f
.638 lw
199.687 99.142 mo
200.453 99.142 li
199.814 99.142 mo
200.581 99.142 li
@
200.581 99.461 mo
199.975 99.461 li
199.975 98.822 li
200.134 97.769 li
200.74 97.769 li
200.74 98.376 li
f
200.134 98.376 mo
200.134 97.769 li
200.74 97.769 li
201.06 98.8221 li
201.06 99.4611 li
200.453 99.4611 li
f
200.453 99.142 mo
201.187 99.142 li
200.581 99.142 mo
201.347 99.142 li
@
.607 lw
201.044 98.822 mo
201.044 100.515 li
201.81 98.822 mo
201.81 100.515 li
@
202.113 99.461 mo
201.506 99.461 li
201.506 98.822 li
201.666 97.769 li
202.273 97.769 li
202.273 98.376 li
f
201.666 98.376 mo
201.666 97.769 li
202.273 97.769 li
202.432 98.8221 li
202.432 99.4611 li
201.826 99.4611 li
f
.638 lw
201.826 99.142 mo
202.72 99.142 li
202.113 99.142 mo
203.039 99.142 li
202.273 99.142 mo
203.199 99.142 li
202.432 99.142 mo
203.327 99.142 li
202.592 99.142 mo
203.645 99.142 li
203.039 99.142 mo
203.805 99.142 li
@
203.805 99.461 mo
203.199 99.461 li
203.199 98.822 li
203.327 97.769 li
203.964 97.769 li
203.964 98.376 li
f
203.327 98.376 mo
203.327 97.769 li
203.964 97.769 li
204.092 98.8221 li
204.092 99.4611 li
203.486 99.4611 li
f
203.486 99.142 mo
204.252 99.142 li
203.645 99.142 mo
204.571 99.142 li
@
204.571 99.461 mo
203.964 99.461 li
203.964 98.822 li
204.092 97.769 li
204.699 97.769 li
204.699 98.376 li
f
204.092 98.376 mo
204.092 97.769 li
204.699 97.769 li
204.858 98.8221 li
204.858 99.4611 li
204.252 99.4611 li
f
.607 lw
204.555 98.822 mo
204.555 100.515 li
@
.638 lw
205.018 97.769 mo
205.018 100.515 li
@
205.337 98.376 mo
204.699 98.376 li
204.699 97.769 li
204.858 92.4051 li
205.465 92.4051 li
205.465 93.0441 li
f
204.858 93.044 mo
204.858 92.405 li
205.465 92.405 li
205.624 98.822 li
205.624 99.4611 li
205.018 99.4611 li
f
205.018 99.142 mo
205.785 99.142 li
@
205.785 99.461 mo
205.177 99.461 li
205.177 98.822 li
205.337 97.769 li
205.944 97.769 li
205.944 98.376 li
f
205.337 98.376 mo
205.337 97.769 li
205.944 97.769 li
206.231 98.8221 li
206.231 99.4611 li
205.624 99.4611 li
f
.607 lw
205.928 98.822 mo
205.928 100.515 li
@
.766 lw
206.327 98.822 mo
206.327 100.515 li
@
.638 lw
205.944 99.142 mo
206.838 99.142 li
206.071 99.142 mo
207.156 99.142 li
206.551 99.142 mo
207.317 99.142 li
206.71 99.142 mo
207.444 99.142 li
206.837 99.142 mo
207.603 99.142 li
@
.607 lw
207.301 98.822 mo
207.301 100.515 li
@
207.923 100.515 mo
207.317 100.515 li
207.317 99.908 li
207.444 98.822 li
208.084 98.822 li
208.084 99.4611 li
f
.638 lw
207.444 99.142 mo
208.211 99.142 li
207.603 99.142 mo
208.37 99.142 li
207.763 99.142 mo
208.529 99.142 li
@
208.529 99.461 mo
207.923 99.461 li
207.923 98.822 li
208.211 97.769 li
208.849 97.769 li
208.849 98.376 li
f
208.211 98.376 mo
208.211 97.769 li
208.849 97.769 li
208.977 98.8221 li
208.977 99.4611 li
208.37 99.4611 li
f
208.37 99.142 mo
209.136 99.142 li
208.529 99.142 mo
209.295 99.142 li
@
209.295 99.461 mo
208.689 99.461 li
208.689 98.822 li
208.849 96.684 li
209.456 96.684 li
209.456 97.322 li
f
208.849 97.322 mo
208.849 96.6841 li
209.456 96.6841 li
209.743 98.822 li
209.743 99.4611 li
209.137 99.4611 li
f
209.137 99.142 mo
210.062 99.142 li
209.295 99.142 mo
210.222 99.142 li
@
.766 lw
209.838 98.822 mo
209.838 100.515 li
@
.607 lw
210.525 96.684 mo
210.525 100.515 li
@
210.222 97.322 mo
210.222 96.6841 li
210.828 96.6841 li
210.956 97.769 li
210.956 98.376 li
210.349 98.376 li
f
210.652 97.769 mo
210.652 100.515 li
210.972 98.8221 mo
210.972 100.515 li
@
.638 lw
210.669 99.142 mo
211.595 99.142 li
@
211.594 99.461 mo
210.956 99.461 li
210.956 98.822 li
211.116 96.684 li
211.722 96.684 li
211.722 97.322 li
f
.607 lw
211.419 96.684 mo
211.419 100.515 li
@
212.201 100.515 mo
211.594 100.515 li
211.594 99.908 li
211.722 98.822 li
212.329 98.822 li
212.329 99.4611 li
f
.638 lw
211.722 99.142 mo
212.488 99.142 li
@
212.488 99.461 mo
211.882 99.461 li
211.882 98.822 li
212.041 95.471 li
212.648 95.471 li
212.648 96.236 li
f
.607 lw
212.344 95.471 mo
212.344 100.515 li
212.791 98.822 mo
212.791 100.515 li
@
.638 lw
212.488 99.142 mo
213.254 99.142 li
212.648 99.142 mo
213.574 99.142 li
212.808 99.142 mo
213.733 99.142 li
212.968 99.142 mo
213.861 99.142 li
@
213.095 99.461 mo
213.095 98.822 li
213.861 98.822 li
214.02 99.908 li
214.02 100.515 li
213.254 100.515 li
f
.607 lw
214.037 98.822 mo
214.037 100.515 li
@
.638 lw
213.733 99.142 mo
214.468 99.142 li
@
214.468 99.461 mo
213.861 99.461 li
213.861 98.822 li
214.02 97.769 li
214.627 97.769 li
214.627 98.376 li
f
214.02 98.376 mo
214.02 97.769 li
214.627 97.769 li
214.946 98.8221 li
214.946 99.4611 li
214.339 99.4611 li
f
214.339 99.142 mo
215.106 99.142 li
@
214.787 98.822 mo
214.787 100.515 li
@
.607 lw
215.249 98.822 mo
215.249 100.515 li
@
.638 lw
214.946 99.142 mo
215.84 99.142 li
215.234 99.142 mo
216 99.142 li
@
216 99.461 mo
215.394 99.461 li
215.394 98.822 li
215.553 97.769 li
216.16 97.769 li
216.16 98.376 li
f
215.553 98.376 mo
215.553 97.769 li
216.16 97.769 li
216.319 98.8221 li
216.319 99.4611 li
215.712 99.4611 li
f
.607 lw
216.016 98.822 mo
216.016 100.515 li
@
.766 lw
216.703 96.684 mo
216.703 100.515 li
@
217.086 97.322 mo
216.319 97.322 li
216.319 96.6841 li
216.478 94.4171 li
217.213 94.4171 li
217.213 95.0231 li
f
216.478 95.023 mo
216.478 94.4171 li
217.213 94.4171 li
217.373 95.4711 li
217.373 96.236 li
216.606 96.236 li
f
216.606 96.236 mo
216.606 95.4711 li
217.373 95.4711 li
217.692 98.8221 li
217.692 99.4611 li
217.086 99.4611 li
f
.638 lw
217.086 99.142 mo
217.852 99.142 li
@
217.532 98.822 mo
217.532 100.515 li
@
.607 lw
217.835 97.769 mo
217.835 100.515 li
@
217.532 98.376 mo
217.532 97.769 li
218.139 97.769 li
218.299 99.9081 li
218.299 100.515 li
217.692 100.515 li
f
218.282 96.684 mo
218.282 100.515 li
@
217.978 97.322 mo
217.978 96.6841 li
218.586 96.6841 li
218.745 98.822 li
218.745 99.4611 li
218.139 99.4611 li
f
218.442 98.822 mo
218.442 100.515 li
@
219.225 100.515 mo
218.586 100.515 li
218.586 99.908 li
218.745 98.822 li
219.352 98.822 li
219.352 99.4611 li
f
.638 lw
218.745 99.142 mo
219.511 99.142 li
@
.607 lw
219.208 98.822 mo
219.208 100.515 li
219.974 98.822 mo
219.974 100.515 li
@
.638 lw
219.671 99.142 mo
220.597 99.142 li
@
.766 lw
220.214 98.822 mo
220.214 100.515 li
@
221.044 100.515 mo
220.278 100.515 li
220.278 99.908 li
220.597 98.822 li
221.203 98.822 li
221.203 99.4611 li
f
.638 lw
220.597 99.142 mo
221.363 99.142 li
220.724 99.142 mo
221.491 99.142 li
220.885 99.142 mo
221.651 99.142 li
221.044 99.142 mo
221.97 99.142 li
@
.607 lw
221.666 98.822 mo
221.666 100.515 li
221.954 98.822 mo
221.954 100.515 li
@
.638 lw
221.651 99.142 mo
222.417 99.142 li
221.81 99.142 mo
222.577 99.142 li
221.969 99.142 mo
222.863 99.142 li
@
.607 lw
222.56 98.822 mo
222.56 100.515 li
222.88 95.4711 mo
222.88 100.515 li
@
222.577 96.236 mo
222.577 95.4711 li
223.183 95.4711 li
223.343 98.8221 li
223.343 99.4611 li
222.735 99.4611 li
f
222.735 99.461 mo
222.735 98.822 li
223.343 98.822 li
223.471 99.908 li
223.471 100.515 li
222.863 100.515 li
f
.153 lw
1 lc
223.471 3.37 mo
223.63 3.37 li
28.287 3.37 mo
223.471 3.37 li
28.287 100.355 mo
223.63 100.355 li
223.471 100.355 mo
223.471 3.242 li
28.287 100.355 mo
28.287 3.242 li
213.861 3.37 mo
213.861 5.50903 li
203.964 3.37 mo
203.964 5.50903 li
194.196 3.37 mo
194.196 5.50903 li
184.427 3.37 mo
184.427 5.50903 li
165.018 3.37 mo
165.018 5.50903 li
155.121 3.37 mo
155.121 5.50903 li
145.352 3.37 mo
145.352 5.50903 li
135.584 3.37 mo
135.584 5.50903 li
116.206 3.37 mo
116.206 5.50903 li
106.277 3.37 mo
106.277 5.50903 li
96.509 3.37 mo
96.509 5.50903 li
86.74 3.37 mo
86.74 5.50903 li
67.362 3.37 mo
67.362 5.50903 li
57.434 3.37 mo
57.434 5.50903 li
47.665 3.37 mo
47.665 5.50903 li
37.897 3.37 mo
37.897 5.50903 li
223.471 3.37 mo
223.471 7.36005 li
174.659 3.37 mo
174.659 7.36005 li
125.815 3.37 mo
125.815 7.36005 li
76.971 3.37 mo
76.971 7.36005 li
28.287 3.37 mo
28.287 7.36005 li
213.861 100.355 mo
213.861 98.216 li
203.964 100.355 mo
203.964 98.216 li
194.196 100.355 mo
194.196 98.216 li
184.427 100.355 mo
184.427 98.216 li
165.018 100.355 mo
165.018 98.216 li
155.121 100.355 mo
155.121 98.216 li
145.352 100.355 mo
145.352 98.216 li
135.584 100.355 mo
135.584 98.216 li
116.206 100.355 mo
116.206 98.216 li
106.277 100.355 mo
106.277 98.216 li
96.509 100.355 mo
96.509 98.216 li
86.74 100.355 mo
86.74 98.216 li
67.362 100.355 mo
67.362 98.216 li
57.434 100.355 mo
57.434 98.216 li
47.665 100.355 mo
47.665 98.216 li
37.897 100.355 mo
37.897 98.216 li
223.471 100.355 mo
223.471 96.396 li
174.659 100.355 mo
174.659 96.396 li
125.815 100.355 mo
125.815 96.396 li
76.971 100.355 mo
76.971 96.396 li
28.287 100.355 mo
28.287 96.396 li
223.471 17.448 mo
219.512 17.448 li
223.471 33.921 mo
219.512 33.921 li
223.471 50.585 mo
219.512 50.585 li
223.471 67.218 mo
219.512 67.218 li
223.471 83.723 mo
219.512 83.723 li
223.471 100.355 mo
219.512 100.355 li
28.287 3.37 mo
32.246 3.37 li
28.287 17.288 mo
32.246 17.288 li
28.287 31.176 mo
32.246 31.176 li
28.287 44.935 mo
32.246 44.935 li
28.287 58.822 mo
32.246 58.822 li
28.287 72.581 mo
32.246 72.581 li
28.287 86.468 mo
32.246 86.468 li
28.287 100.355 mo
32.246 100.355 li
@
21.083 99.334 mo
21.083 98.7901 21.139 98.3531 21.25 98.0211 cv
21.362 97.6891 21.528 97.4331 21.748 97.2541 cv
21.968 97.0751 22.246 96.985 22.58 96.985 cv
22.826 96.985 23.043 97.0351 23.228 97.1351 cv
23.415 97.2341 23.568 97.3771 23.689 97.5641 cv
23.81 97.7511 23.904 97.9801 23.973 98.248 cv
24.041 98.5161 24.076 98.8781 24.076 99.334 cv
24.076 99.873 24.021 100.309 23.91 100.641 cv
23.799 100.973 23.634 101.229 23.414 101.408 cv
23.194 101.589 22.916 101.679 22.58 101.679 cv
22.137 101.679 21.789 101.521 21.537 101.204 cv
21.234 100.82 21.083 100.196 21.083 99.334 cv
cp
21.661 99.3321 mo
21.661 100.088 21.749 100.591 21.926 100.84 cv
22.103 101.088 22.32 101.213 22.58 101.213 cv
22.839 101.213 23.057 101.088 23.233 100.838 cv
23.41 100.588 23.498 100.086 23.498 99.3321 cv
23.498 98.5751 23.41 98.0731 23.234 97.8241 cv
23.058 97.5751 22.837 97.451 22.573 97.451 cv
22.314 97.451 22.107 97.5611 21.951 97.7801 cv
21.758 98.0611 21.661 98.5781 21.661 99.3321 cv
f
15.879 85.255 mo
15.879 84.712 15.935 84.274 16.047 83.9431 cv
16.159 83.61 16.325 83.355 16.545 83.176 cv
16.765 82.996 17.042 82.907 17.376 82.907 cv
17.622 82.907 17.839 82.957 18.025 83.057 cv
18.211 83.155 18.365 83.299 18.486 83.485 cv
18.605 83.673 18.7 83.9 18.769 84.169 cv
18.838 84.438 18.872 84.8 18.872 85.255 cv
18.872 85.795 18.817 86.231 18.706 86.563 cv
18.596 86.895 18.431 87.15 18.21 87.33 cv
17.99 87.511 17.712 87.601 17.376 87.601 cv
16.934 87.601 16.586 87.4431 16.334 87.126 cv
16.031 86.7421 15.879 86.118 15.879 85.255 cv
cp
16.457 85.254 mo
16.457 86.01 16.545 86.512 16.722 86.761 cv
16.899 87.01 17.117 87.135 17.376 87.135 cv
17.635 87.135 17.853 87.01 18.029 86.76 cv
18.206 86.51 18.294 86.0081 18.294 85.254 cv
18.294 84.497 18.207 83.9951 18.03 83.746 cv
17.854 83.497 17.633 83.373 17.37 83.373 cv
17.111 83.373 16.903 83.483 16.748 83.702 cv
16.554 83.9821 16.457 84.499 16.457 85.254 cv
f
19.712 87.522 mo
20.352 87.522 li
20.352 86.881 li
19.712 86.881 li
cp
f
23.218 87.522 mo
22.653 87.522 li
22.653 83.9261 li
22.518 84.0561 22.339 84.1851 22.12 84.3141 cv
21.899 84.4441 21.702 84.5411 21.526 84.6061 cv
21.526 84.061 li
21.842 83.9131 22.117 83.7321 22.353 83.522 cv
22.589 83.311 22.756 83.1061 22.855 82.907 cv
23.218 82.907 li
23.218 87.522 li
f
15.879 71.814 mo
15.879 71.272 15.935 70.834 16.047 70.5021 cv
16.158 70.17 16.324 69.9141 16.544 69.735 cv
16.765 69.5571 17.041 69.467 17.376 69.467 cv
17.622 69.467 17.838 69.517 18.025 69.616 cv
18.211 69.715 18.365 69.858 18.485 70.045 cv
18.605 70.2321 18.7 70.4601 18.769 70.7291 cv
18.838 70.9971 18.872 71.36 18.872 71.814 cv
18.872 72.355 18.817 72.79 18.706 73.1221 cv
18.596 73.454 18.431 73.7101 18.21 73.8901 cv
17.99 74.0701 17.711 74.16 17.376 74.16 cv
16.933 74.16 16.586 74.0021 16.334 73.686 cv
16.031 73.3021 15.879 72.678 15.879 71.814 cv
cp
16.457 71.814 mo
16.457 72.569 16.545 73.0721 16.722 73.3201 cv
16.899 73.569 17.117 73.694 17.376 73.694 cv
17.635 73.694 17.853 73.569 18.029 73.319 cv
18.206 73.069 18.294 72.5671 18.294 71.814 cv
18.294 71.0571 18.206 70.5551 18.03 70.306 cv
17.854 70.0571 17.633 69.933 17.37 69.933 cv
17.11 69.933 16.903 70.0421 16.748 70.2621 cv
16.554 70.5421 16.457 71.0591 16.457 71.814 cv
f
19.711 74.081 mo
20.351 74.081 li
20.351 73.44 li
19.711 73.44 li
cp
f
24.058 73.54 mo
24.058 74.0811 li
21.023 74.0811 li
21.019 73.9451 21.041 73.8141 21.089 73.6891 cv
21.166 73.4831 21.29 73.2801 21.46 73.0801 cv
21.63 72.8801 21.875 72.6481 22.198 72.386 cv
22.696 71.9741 23.033 71.6481 23.209 71.4091 cv
23.384 71.17 23.472 70.9431 23.472 70.7291 cv
23.472 70.506 23.392 70.3171 23.232 70.1631 cv
23.073 70.0101 22.864 69.933 22.607 69.933 cv
22.336 69.933 22.119 70.0141 21.957 70.1761 cv
21.794 70.3391 21.711 70.5641 21.709 70.8511 cv
21.131 70.7931 li
21.171 70.3611 21.32 70.032 21.579 69.8061 cv
21.837 69.5801 22.184 69.467 22.62 69.467 cv
23.06 69.467 23.408 69.5891 23.665 69.834 cv
23.921 70.0781 24.049 70.381 24.049 70.743 cv
24.049 70.9271 24.012 71.1081 23.937 71.2851 cv
23.862 71.4631 23.738 71.6501 23.564 71.847 cv
23.39 72.0431 23.101 72.313 22.696 72.6551 cv
22.359 72.9401 22.142 73.1331 22.045 73.235 cv
21.949 73.3361 21.87 73.4391 21.808 73.54 cv
24.058 73.54 li
f
15.88 57.928 mo
15.88 57.3851 15.935 56.9471 16.047 56.6151 cv
16.159 56.2831 16.325 56.0271 16.545 55.8491 cv
16.765 55.67 17.042 55.5801 17.377 55.5801 cv
17.623 55.5801 17.839 55.6301 18.025 55.73 cv
18.212 55.8281 18.365 55.972 18.486 56.1581 cv
18.606 56.3461 18.701 56.5731 18.769 56.842 cv
18.838 57.11 18.873 57.4731 18.873 57.928 cv
18.873 58.4681 18.817 58.9031 18.707 59.235 cv
18.596 59.5681 18.431 59.8231 18.21 60.0031 cv
17.99 60.1841 17.712 60.2731 17.377 60.2731 cv
16.934 60.2731 16.586 60.1151 16.334 59.7991 cv
16.031 59.4151 15.88 58.7911 15.88 57.928 cv
cp
16.458 57.9271 mo
16.458 58.683 16.546 59.1861 16.723 59.4341 cv
16.899 59.683 17.117 59.808 17.377 59.808 cv
17.636 59.808 17.854 59.683 18.03 59.433 cv
18.207 59.183 18.295 58.6811 18.295 57.9271 cv
18.295 57.17 18.207 56.6681 18.03 56.4191 cv
17.855 56.17 17.634 56.0461 17.37 56.0461 cv
17.111 56.0461 16.903 56.1551 16.748 56.3751 cv
16.555 56.6551 16.458 57.1721 16.458 57.9271 cv
f
19.712 60.194 mo
20.352 60.194 li
20.352 59.553 li
19.712 59.553 li
cp
f
21.099 58.981 mo
21.664 58.905 li
21.728 59.225 21.838 59.4551 21.993 59.5961 cv
22.148 59.7371 22.337 59.808 22.562 59.808 cv
22.827 59.808 23.051 59.7161 23.232 59.532 cv
23.415 59.3491 23.505 59.121 23.505 58.85 cv
23.505 58.5911 23.421 58.3781 23.252 58.21 cv
23.083 58.0411 22.869 57.957 22.608 57.957 cv
22.502 57.957 22.37 57.9791 22.211 58.0211 cv
22.273 57.525 li
22.311 57.5291 22.342 57.5311 22.364 57.5311 cv
22.605 57.5311 22.821 57.4691 23.013 57.3441 cv
23.206 57.2191 23.302 57.025 23.302 56.764 cv
23.302 56.5571 23.231 56.386 23.092 56.249 cv
22.953 56.113 22.772 56.046 22.551 56.046 cv
22.332 56.046 22.15 56.1141 22.004 56.251 cv
21.858 56.389 21.764 56.595 21.722 56.869 cv
21.157 56.769 li
21.226 56.392 21.382 56.1 21.626 55.892 cv
21.87 55.684 22.174 55.5801 22.537 55.5801 cv
22.788 55.5801 23.018 55.634 23.228 55.7421 cv
23.439 55.85 23.601 55.996 23.712 56.183 cv
23.824 56.368 23.879 56.566 23.879 56.775 cv
23.879 56.975 23.826 57.155 23.72 57.3181 cv
23.613 57.481 23.456 57.61 23.247 57.707 cv
23.519 57.77 23.729 57.899 23.879 58.097 cv
24.029 58.2941 24.104 58.5411 24.104 58.837 cv
24.104 59.2371 23.958 59.577 23.666 59.856 cv
23.373 60.134 23.004 60.2731 22.557 60.2731 cv
22.155 60.2731 21.82 60.1531 21.554 59.913 cv
21.289 59.673 21.136 59.3621 21.099 58.981 cv
f
15.88 43.882 mo
15.88 43.3381 15.935 42.9 16.047 42.5681 cv
16.159 42.236 16.325 41.9811 16.545 41.8021 cv
16.765 41.623 17.042 41.533 17.377 41.533 cv
17.623 41.533 17.839 41.5831 18.025 41.683 cv
18.212 41.782 18.365 41.925 18.486 42.111 cv
18.606 42.2991 18.701 42.527 18.769 42.796 cv
18.838 43.064 18.873 43.426 18.873 43.882 cv
18.873 44.421 18.817 44.8561 18.707 45.189 cv
18.596 45.5211 18.431 45.7761 18.21 45.9561 cv
17.99 46.137 17.712 46.2271 17.377 46.2271 cv
16.934 46.2271 16.586 46.0681 16.334 45.7521 cv
16.031 45.368 15.88 44.7441 15.88 43.882 cv
cp
16.458 43.8801 mo
16.458 44.636 16.546 45.139 16.723 45.3881 cv
16.899 45.636 17.117 45.761 17.377 45.761 cv
17.636 45.761 17.854 45.636 18.03 45.386 cv
18.207 45.136 18.295 44.634 18.295 43.8801 cv
18.295 43.123 18.207 42.621 18.03 42.3721 cv
17.855 42.123 17.634 41.999 17.37 41.999 cv
17.111 41.999 16.903 42.108 16.748 42.3281 cv
16.555 42.608 16.458 43.1251 16.458 43.8801 cv
f
19.712 46.147 mo
20.352 46.147 li
20.352 45.506 li
19.712 45.506 li
cp
f
22.898 46.147 mo
22.898 45.05 li
20.912 45.05 li
20.912 44.5341 li
23.002 41.5541 li
23.464 41.5541 li
23.464 44.5341 li
24.083 44.5341 li
24.083 45.05 li
23.464 45.05 li
23.464 46.147 li
22.898 46.147 li
cp
22.898 44.5341 mo
22.898 42.4631 li
21.465 44.5341 li
22.898 44.5341 li
f
15.879 30.442 mo
15.879 29.897 15.935 29.46 16.047 29.1281 cv
16.159 28.796 16.325 28.54 16.545 28.361 cv
16.765 28.183 17.042 28.093 17.376 28.093 cv
17.622 28.093 17.839 28.1431 18.025 28.2421 cv
18.211 28.342 18.365 28.4841 18.486 28.671 cv
18.605 28.858 18.7 29.087 18.769 29.356 cv
18.838 29.623 18.872 29.985 18.872 30.442 cv
18.872 30.981 18.817 31.4161 18.706 31.748 cv
18.596 32.08 18.431 32.3361 18.21 32.5161 cv
17.99 32.696 17.712 32.7861 17.376 32.7861 cv
16.934 32.7861 16.586 32.6281 16.334 32.3121 cv
16.031 31.928 15.879 31.3041 15.879 30.442 cv
cp
16.457 30.439 mo
16.457 31.1951 16.545 31.6981 16.722 31.947 cv
16.899 32.1951 17.117 32.3201 17.376 32.3201 cv
17.635 32.3201 17.853 32.1951 18.029 31.9451 cv
18.206 31.6951 18.294 31.1931 18.294 30.439 cv
18.294 29.683 18.207 29.181 18.03 28.9321 cv
17.854 28.683 17.633 28.559 17.37 28.559 cv
17.111 28.559 16.903 28.668 16.748 28.8881 cv
16.554 29.168 16.457 29.686 16.457 30.439 cv
f
19.712 32.707 mo
20.352 32.707 li
20.352 32.066 li
19.712 32.066 li
cp
f
21.094 31.506 mo
21.684 31.4561 li
21.728 31.7431 21.83 31.959 21.989 32.1041 cv
22.148 32.248 22.341 32.3201 22.567 32.3201 cv
22.841 32.3201 23.072 32.2181 23.258 32.0141 cv
23.445 31.8101 23.538 31.5391 23.538 31.201 cv
23.538 30.8801 23.449 30.6271 23.269 30.4421 cv
23.089 30.256 22.853 30.1631 22.558 30.1631 cv
22.375 30.1631 22.211 30.2041 22.065 30.287 cv
21.92 30.3691 21.805 30.4771 21.722 30.6081 cv
21.194 30.537 li
21.639 28.1811 li
23.92 28.1811 li
23.92 28.7211 li
22.087 28.7211 li
21.842 29.9531 li
22.118 29.761 22.407 29.6641 22.709 29.6641 cv
23.11 29.6641 23.448 29.8031 23.724 30.0801 cv
24 30.3581 24.137 30.7161 24.137 31.1511 cv
24.137 31.5681 24.016 31.9261 23.774 32.2291 cv
23.48 32.6011 23.078 32.7861 22.569 32.7861 cv
22.151 32.7861 21.81 32.6691 21.546 32.4361 cv
21.283 32.201 21.132 31.8921 21.094 31.506 cv
f
15.879 16.395 mo
15.879 15.8511 15.935 15.413 16.047 15.0811 cv
16.159 14.749 16.325 14.4941 16.545 14.314 cv
16.765 14.136 17.042 14.046 17.376 14.046 cv
17.622 14.046 17.839 14.0961 18.025 14.1951 cv
18.211 14.295 18.365 14.438 18.486 14.6251 cv
18.605 14.8121 18.7 15.04 18.769 15.309 cv
18.838 15.576 18.872 15.939 18.872 16.395 cv
18.872 16.934 18.817 17.3691 18.706 17.701 cv
18.596 18.033 18.431 18.2891 18.21 18.4691 cv
17.99 18.65 17.712 18.7391 17.376 18.7391 cv
16.934 18.7391 16.586 18.5811 16.334 18.2651 cv
16.031 17.881 15.879 17.2581 15.879 16.395 cv
cp
16.457 16.3931 mo
16.457 17.1481 16.545 17.6511 16.722 17.9 cv
16.899 18.149 17.117 18.2731 17.376 18.2731 cv
17.635 18.2731 17.853 18.1481 18.029 17.8981 cv
18.206 17.6481 18.294 17.147 18.294 16.3931 cv
18.294 15.637 18.207 15.134 18.03 14.8851 cv
17.854 14.636 17.633 14.512 17.37 14.512 cv
17.111 14.512 16.903 14.621 16.748 14.8411 cv
16.554 15.121 16.457 15.639 16.457 16.3931 cv
f
19.712 18.66 mo
20.352 18.66 li
20.352 18.02 li
19.712 18.02 li
cp
f
24.021 15.189 mo
23.459 15.235 li
23.409 15.014 23.339 14.8541 23.246 14.7531 cv
23.094 14.5931 22.906 14.5121 22.683 14.5121 cv
22.503 14.5121 22.345 14.563 22.208 14.662 cv
22.031 14.7921 21.893 14.9811 21.79 15.2291 cv
21.688 15.478 21.634 15.8311 21.63 16.29 cv
21.767 16.084 21.933 15.931 22.129 15.8301 cv
22.326 15.7311 22.531 15.6801 22.746 15.6801 cv
23.123 15.6801 23.442 15.8181 23.707 16.095 cv
23.972 16.3721 24.104 16.7311 24.104 17.1691 cv
24.104 17.457 24.041 17.7261 23.918 17.9731 cv
23.793 18.2211 23.623 18.41 23.405 18.5421 cv
23.187 18.673 22.94 18.7391 22.665 18.7391 cv
22.194 18.7391 21.811 18.566 21.514 18.22 cv
21.218 17.8751 21.069 17.3051 21.069 16.5101 cv
21.069 15.6221 21.233 14.9771 21.561 14.5731 cv
21.848 14.222 22.233 14.0461 22.717 14.0461 cv
23.079 14.0461 23.375 14.147 23.606 14.3511 cv
23.836 14.553 23.975 14.832 24.021 15.189 cv
cp
21.718 17.1721 mo
21.718 17.3651 21.759 17.5521 21.842 17.7291 cv
21.924 17.9061 22.039 18.0411 22.187 18.1351 cv
22.334 18.228 22.491 18.2731 22.655 18.2731 cv
22.894 18.2731 23.1 18.178 23.27 17.985 cv
23.44 17.7941 23.526 17.5331 23.526 17.2031 cv
23.526 16.886 23.441 16.636 23.273 16.452 cv
23.105 16.2711 22.891 16.1791 22.633 16.1791 cv
22.378 16.1791 22.162 16.2711 21.984 16.452 cv
21.807 16.636 21.718 16.8751 21.718 17.1721 cv
f
15.879 2.34802 mo
15.879 1.80408 15.935 1.36603 16.047 1.03406 cv
16.159 .702026 16.325 .447083 16.545 .269043 cv
16.765 .0890503 17.042 6.10352e-5 17.376 6.10352e-5 cv
17.622 6.10352e-5 17.839 .0500488 18.025 .148071 cv
18.211 .248047 18.365 .391052 18.486 .578064 cv
18.605 .765076 18.7 .993042 18.769 1.26202 cv
18.838 1.52905 18.872 1.89203 18.872 2.34802 cv
18.872 2.88702 18.817 3.32208 18.706 3.65405 cv
18.596 3.98602 18.431 4.24207 18.21 4.42206 cv
17.99 4.60303 17.712 4.69208 17.376 4.69208 cv
16.934 4.69208 16.586 4.53406 16.334 4.21808 cv
16.031 3.83405 15.879 3.21106 15.879 2.34802 cv
cp
16.457 2.34607 mo
16.457 3.10205 16.545 3.60504 16.722 3.85406 cv
16.899 4.10303 17.117 4.22705 17.376 4.22705 cv
17.635 4.22705 17.853 4.10205 18.029 3.85205 cv
18.206 3.60205 18.294 3.10004 18.294 2.34607 cv
18.294 1.59003 18.207 1.08704 18.03 .838074 cv
17.854 .58905 17.633 .465027 17.37 .465027 cv
17.111 .465027 16.903 .575073 16.748 .794067 cv
16.554 1.07404 16.457 1.59204 16.457 2.34607 cv
f
19.712 4.61304 mo
20.352 4.61304 li
20.352 3.97302 li
19.712 3.97302 li
cp
f
21.131 .619019 mo
21.131 .078064 li
24.104 .078064 li
24.104 .516052 li
23.811 .827026 23.521 1.24103 23.232 1.75806 cv
22.945 2.27307 22.723 2.80505 22.566 3.35004 cv
22.453 3.73407 22.381 4.15607 22.349 4.61304 cv
21.772 4.61304 li
21.778 4.25208 21.85 3.81403 21.985 3.30304 cv
22.121 2.79108 22.316 2.29706 22.57 1.82104 cv
22.824 1.34607 23.094 .945068 23.38 .619019 cv
21.131 .619019 li
f
25.741 105.997 mo
27.479 105.997 li
27.479 105.432 li
25.741 105.432 li
cp
f
27.79 106.176 mo
28.38 106.126 li
28.424 106.413 28.525 106.629 28.684 106.773 cv
28.843 106.918 29.037 106.99 29.263 106.99 cv
29.537 106.99 29.767 106.889 29.954 106.684 cv
30.14 106.48 30.234 106.209 30.234 105.871 cv
30.234 105.55 30.144 105.297 29.964 105.111 cv
29.785 104.926 29.548 104.833 29.254 104.833 cv
29.071 104.833 28.907 104.874 28.761 104.957 cv
28.616 105.039 28.501 105.147 28.417 105.278 cv
27.889 105.207 li
28.334 102.851 li
30.616 102.851 li
30.616 103.391 li
28.783 103.391 li
28.538 104.623 li
28.813 104.431 29.102 104.334 29.405 104.334 cv
29.806 104.334 30.144 104.473 30.419 104.751 cv
30.695 105.028 30.832 105.386 30.832 105.821 cv
30.832 106.237 30.712 106.596 30.47 106.898 cv
30.175 107.27 29.773 107.456 29.264 107.456 cv
28.847 107.456 28.506 107.339 28.242 107.106 cv
27.978 106.872 27.828 106.562 27.79 106.176 cv
f
75.86 105.111 mo
75.86 104.567 75.916 104.13 76.027 103.798 cv
76.139 103.466 76.305 103.211 76.525 103.031 cv
76.745 102.853 77.023 102.763 77.356 102.763 cv
77.603 102.763 77.819 102.813 78.005 102.912 cv
78.192 103.012 78.345 103.154 78.466 103.342 cv
78.586 103.528 78.681 103.757 78.75 104.024 cv
78.818 104.293 78.853 104.655 78.853 105.111 cv
78.853 105.65 78.797 106.086 78.687 106.418 cv
78.576 106.75 78.411 107.006 78.191 107.186 cv
77.971 107.366 77.692 107.456 77.356 107.456 cv
76.914 107.456 76.566 107.298 76.314 106.981 cv
76.011 106.598 75.86 105.975 75.86 105.111 cv
cp
76.437 105.109 mo
76.437 105.865 76.526 106.368 76.703 106.617 cv
76.879 106.866 77.097 106.99 77.356 106.99 cv
77.616 106.99 77.834 106.865 78.01 106.615 cv
78.187 106.365 78.275 105.863 78.275 105.109 cv
78.275 104.353 78.187 103.851 78.01 103.602 cv
77.835 103.353 77.614 103.229 77.35 103.229 cv
77.091 103.229 76.883 103.338 76.728 103.558 cv
76.534 103.838 76.437 104.356 76.437 105.109 cv
f
124.379 106.176 mo
124.969 106.126 li
125.013 106.413 125.115 106.629 125.274 106.773 cv
125.433 106.918 125.625 106.99 125.852 106.99 cv
126.126 106.99 126.356 106.889 126.543 106.684 cv
126.73 106.48 126.823 106.209 126.823 105.871 cv
126.823 105.55 126.733 105.297 126.554 105.111 cv
126.374 104.926 126.138 104.833 125.843 104.833 cv
125.66 104.833 125.496 104.874 125.35 104.957 cv
125.205 105.039 125.09 105.147 125.007 105.278 cv
124.479 105.207 li
124.924 102.851 li
127.206 102.851 li
127.206 103.391 li
125.372 103.391 li
125.127 104.623 li
125.403 104.431 125.692 104.334 125.995 104.334 cv
126.395 104.334 126.733 104.473 127.009 104.751 cv
127.284 105.028 127.422 105.386 127.422 105.821 cv
127.422 106.237 127.301 106.596 127.059 106.898 cv
126.765 107.27 126.363 107.456 125.854 107.456 cv
125.436 107.456 125.096 107.339 124.831 107.106 cv
124.567 106.872 124.416 106.562 124.379 106.176 cv
f
173.971 107.377 mo
173.406 107.377 li
173.406 103.782 li
173.27 103.911 173.092 104.041 172.872 104.171 cv
172.652 104.3 172.454 104.397 172.279 104.462 cv
172.279 103.917 li
172.595 103.768 172.87 103.589 173.106 103.377 cv
173.342 103.166 173.508 102.962 173.606 102.763 cv
173.971 102.763 li
173.971 107.377 li
f
175.363 105.111 mo
175.363 104.567 175.418 104.13 175.53 103.798 cv
175.642 103.466 175.808 103.211 176.028 103.031 cv
176.248 102.853 176.525 102.763 176.859 102.763 cv
177.106 102.763 177.322 102.813 177.508 102.912 cv
177.695 103.012 177.848 103.154 177.969 103.342 cv
178.089 103.528 178.184 103.757 178.252 104.024 cv
178.321 104.293 178.356 104.655 178.356 105.111 cv
178.356 105.65 178.301 106.086 178.19 106.418 cv
178.079 106.75 177.914 107.006 177.694 107.186 cv
177.474 107.366 177.195 107.456 176.859 107.456 cv
176.417 107.456 176.069 107.298 175.817 106.981 cv
175.514 106.598 175.363 105.975 175.363 105.111 cv
cp
175.941 105.109 mo
175.941 105.865 176.029 106.368 176.206 106.617 cv
176.382 106.866 176.6 106.99 176.859 106.99 cv
177.119 106.99 177.336 106.865 177.513 106.615 cv
177.689 106.365 177.778 105.863 177.778 105.109 cv
177.778 104.353 177.689 103.851 177.514 103.602 cv
177.337 103.353 177.117 103.229 176.853 103.229 cv
176.594 103.229 176.387 103.338 176.231 103.558 cv
176.037 103.838 175.941 104.356 175.941 105.109 cv
f
222.369 107.377 mo
221.804 107.377 li
221.804 103.782 li
221.668 103.911 221.491 104.041 221.27 104.171 cv
221.05 104.3 220.852 104.397 220.677 104.462 cv
220.677 103.917 li
220.993 103.768 221.268 103.589 221.504 103.377 cv
221.74 103.166 221.907 102.962 222.005 102.763 cv
222.369 102.763 li
222.369 107.377 li
f
223.729 106.176 mo
224.319 106.126 li
224.363 106.413 224.465 106.629 224.624 106.773 cv
224.783 106.918 224.976 106.99 225.203 106.99 cv
225.476 106.99 225.706 106.889 225.893 106.684 cv
226.08 106.48 226.173 106.209 226.173 105.871 cv
226.173 105.55 226.083 105.297 225.904 105.111 cv
225.724 104.926 225.487 104.833 225.192 104.833 cv
225.01 104.833 224.846 104.874 224.7 104.957 cv
224.555 105.039 224.44 105.147 224.356 105.278 cv
223.829 105.207 li
224.273 102.851 li
226.556 102.851 li
226.556 103.391 li
224.722 103.391 li
224.477 104.623 li
224.752 104.431 225.042 104.334 225.344 104.334 cv
225.745 104.334 226.082 104.473 226.358 104.751 cv
226.634 105.028 226.771 105.386 226.771 105.821 cv
226.771 106.237 226.65 106.596 226.409 106.898 cv
226.114 107.27 225.713 107.456 225.204 107.456 cv
224.786 107.456 224.445 107.339 224.182 107.106 cv
223.917 106.872 223.766 106.562 223.729 106.176 cv
f
4.22899 94.703 mo
4.44099 93.864 li
5.12999 94.0391 5.65499 94.356 6.01699 94.813 cv
6.37799 95.27 6.55999 95.828 6.55999 96.488 cv
6.55999 97.171 6.41999 97.728 6.14199 98.1541 cv
5.86399 98.583 5.45999 98.908 4.93299 99.132 cv
4.40499 99.356 3.83799 99.467 3.23199 99.467 cv
2.57099 99.467 1.99499 99.341 1.50399 99.0891 cv
1.01199 98.837 .638992 98.478 .382992 98.0131 cv
.127991 97.5471 -7.62939e-6 97.0341 -7.62939e-6 96.475 cv
-7.62939e-6 95.841 .161991 95.308 .48399 94.876 cv
.806992 94.4431 1.26099 94.142 1.84599 93.972 cv
2.04099 94.795 li
1.57899 94.9431 1.24199 95.155 1.03099 95.436 cv
.819992 95.715 .714993 96.0681 .714993 96.491 cv
.714993 96.979 .831989 97.386 1.06599 97.713 cv
1.29999 98.041 1.61399 98.2711 2.00799 98.403 cv
2.40299 98.536 2.80899 98.603 3.22799 98.603 cv
3.76799 98.603 4.23899 98.525 4.64199 98.367 cv
5.04499 98.21 5.34599 97.966 5.54499 97.634 cv
5.74499 97.303 5.84399 96.944 5.84399 96.558 cv
5.84399 96.088 5.70899 95.6901 5.43699 95.3651 cv
5.16599 95.0391 4.76299 94.819 4.22899 94.703 cv
f
6.45099 92.911 mo
.10799 92.911 li
.10799 92.1301 li
2.38899 92.1301 li
1.96599 91.7681 1.75399 91.312 1.75399 90.7601 cv
1.75399 90.421 1.82099 90.127 1.95499 89.877 cv
2.08899 89.627 2.27499 89.4481 2.51099 89.34 cv
2.74799 89.2321 3.08999 89.178 3.54099 89.178 cv
6.45099 89.178 li
6.45099 89.96 li
3.54199 89.96 li
3.15299 89.96 2.87099 90.043 2.69299 90.2111 cv
2.51699 90.379 2.42799 90.616 2.42799 90.9221 cv
2.42799 91.1511 2.48699 91.3671 2.60699 91.569 cv
2.72699 91.7711 2.88899 91.915 3.09299 92.001 cv
3.29799 92.087 3.57999 92.1301 3.93999 92.1301 cv
6.45099 92.1301 li
6.45099 92.911 li
f
6.45099 84.701 mo
5.76999 84.701 li
6.29099 85.0591 6.55099 85.5441 6.55099 86.1571 cv
6.55099 86.4291 6.49899 86.6821 6.39599 86.9161 cv
6.29199 87.1511 6.16099 87.3251 6.00399 87.4391 cv
5.84699 87.5531 5.65399 87.6331 5.42699 87.6791 cv
5.27399 87.7111 5.03099 87.7271 4.69999 87.7271 cv
1.85399 87.7271 li
1.85399 86.9451 li
4.39899 86.9451 li
4.80599 86.9451 5.07999 86.9301 5.22099 86.8971 cv
5.42499 86.8491 5.58599 86.7451 5.70299 86.5881 cv
5.81899 86.4291 5.87699 86.2331 5.87699 86.0001 cv
5.87699 85.7681 5.81799 85.5491 5.69799 85.3451 cv
5.57899 85.1411 5.41599 84.9961 5.20999 84.9111 cv
5.00399 84.826 4.70499 84.7841 4.31299 84.7841 cv
1.85399 84.7841 li
1.85399 84.0031 li
6.45099 84.0031 li
6.45099 84.701 li
f
4.76399 79.818 mo
4.86299 79.054 li
5.39099 79.137 5.80399 79.35 6.10299 79.694 cv
6.40199 80.037 6.55099 80.459 6.55099 80.96 cv
6.55099 81.587 6.34599 82.091 5.93599 82.473 cv
5.52499 82.854 4.93599 83.044 4.16999 83.044 cv
3.67499 83.044 3.24099 82.962 2.86899 82.798 cv
2.49799 82.634 2.21899 82.385 2.03299 82.05 cv
1.84699 81.715 1.75399 81.351 1.75399 80.957 cv
1.75399 80.459 1.87999 80.053 2.13299 79.736 cv
2.38499 79.42 2.74399 79.217 3.20899 79.1281 cv
3.32499 79.885 li
3.01599 79.956 2.78399 80.084 2.62799 80.2661 cv
2.47199 80.448 2.39499 80.669 2.39499 80.927 cv
2.39499 81.318 2.53499 81.635 2.81599 81.88 cv
3.09599 82.124 3.54099 82.246 4.14799 82.246 cv
4.76499 82.246 5.21199 82.1281 5.49199 81.892 cv
5.77099 81.656 5.91099 81.349 5.91099 80.969 cv
5.91099 80.665 5.81699 80.41 5.62999 80.206 cv
5.44199 80.002 5.15299 79.873 4.76399 79.818 cv
f
6.45099 78.402 mo
.10799 78.402 li
.10799 77.6211 li
3.71599 77.6211 li
1.85399 75.7751 li
1.85399 74.7671 li
3.56399 76.527 li
6.45099 74.592 li
6.45099 75.553 li
4.09899 77.079 li
4.62599 77.6211 li
6.45099 77.6211 li
6.45099 78.402 li
f
6.45099 69.596 mo
.10799 72.054 li
.10799 71.144 li
4.71799 69.494 li
5.08699 69.361 5.43399 69.2501 5.75699 69.161 cv
5.41099 69.063 5.06399 68.9481 4.71799 68.8181 cv
.10799 67.1041 li
.10799 66.2451 li
6.45099 68.726 li
6.45099 69.596 li
f
4.15299 65.706 mo
3.30299 65.706 2.67299 65.47 2.26399 64.997 cv
1.92399 64.603 1.75399 64.122 1.75399 63.5551 cv
1.75399 62.924 1.96099 62.408 2.37399 62.009 cv
2.78799 61.608 3.35899 61.408 4.08799 61.408 cv
4.67799 61.408 5.14299 61.496 5.48099 61.674 cv
5.81999 61.851 6.08299 62.108 6.26999 62.447 cv
6.45799 62.785 6.55099 63.155 6.55099 63.5551 cv
6.55099 64.197 6.34499 64.716 5.93299 65.112 cv
5.52099 65.508 4.92699 65.706 4.15299 65.706 cv
cp
4.14999 64.908 mo
4.73899 64.908 5.17899 64.7791 5.47199 64.523 cv
5.76499 64.267 5.91099 63.944 5.91099 63.5551 cv
5.91099 63.169 5.76399 62.848 5.46999 62.591 cv
5.17599 62.334 4.72699 62.206 4.12499 62.206 cv
3.55699 62.206 3.12599 62.335 2.83399 62.593 cv
2.54099 62.851 2.39499 63.172 2.39499 63.5551 cv
2.39499 63.944 2.53999 64.267 2.83099 64.523 cv
3.12199 64.7791 3.56199 64.908 4.14999 64.908 cv
f
.10799 60.541 mo
6.45099 60.541 li
6.45099 59.759 li
.10799 59.759 li
cp
f
5.75299 56.684 mo
6.43999 56.584 li
6.48699 56.8041 6.50899 57.0001 6.50899 57.173 cv
6.50899 57.4561 6.46499 57.675 6.37499 57.8311 cv
6.28599 57.9871 6.16799 58.097 6.02199 58.16 cv
5.87699 58.2241 5.57099 58.2551 5.10399 58.2551 cv
2.46099 58.2551 li
2.46099 58.829 li
1.85399 58.829 li
1.85399 58.2551 li
.716988 58.2551 li
.249989 57.4741 li
1.85399 57.4741 li
1.85399 56.684 li
2.46099 56.684 li
2.46099 57.4741 li
5.14999 57.4741 li
5.37199 57.4741 5.51499 57.46 5.57899 57.4321 cv
5.64199 57.4041 5.69199 57.3591 5.72999 57.2971 cv
5.76799 57.235 5.78599 57.1461 5.78599 57.0281 cv
5.78599 56.941 5.77499 56.826 5.75299 56.684 cv
f
5.87699 52.926 mo
6.12399 53.2131 6.29799 53.491 6.39899 53.7581 cv
6.49999 54.0251 6.55099 54.313 6.55099 54.6191 cv
6.55099 55.1241 6.42799 55.514 6.18199 55.785 cv
5.93499 56.0571 5.61999 56.1921 5.23699 56.1921 cv
5.01199 56.1921 4.80699 56.142 4.62099 56.0391 cv
4.43499 55.9371 4.28599 55.8021 4.17299 55.636 cv
4.06099 55.47 3.97599 55.282 3.91799 55.074 cv
3.87799 54.9211 3.83899 54.689 3.80099 54.3801 cv
3.72699 53.7501 3.63699 53.285 3.53299 52.988 cv
3.42699 52.985 3.35899 52.983 3.32999 52.983 cv
3.01199 52.983 2.78899 53.058 2.65899 53.204 cv
2.48199 53.4041 2.39499 53.701 2.39499 54.0941 cv
2.39499 54.4611 2.45799 54.7321 2.58599 54.9061 cv
2.71499 55.082 2.94099 55.2111 3.26699 55.295 cv
3.16699 56.0601 li
2.84199 55.9901 2.57899 55.876 2.37899 55.7181 cv
2.17899 55.5591 2.02399 55.329 1.91599 55.0281 cv
1.80799 54.728 1.75399 54.3801 1.75399 53.9841 cv
1.75399 53.5911 1.79999 53.272 1.89299 53.0251 cv
1.98399 52.78 2.10099 52.6 2.23999 52.483 cv
2.37999 52.368 2.55599 52.287 2.76899 52.241 cv
2.90099 52.215 3.14099 52.202 3.48699 52.202 cv
4.52499 52.202 li
5.24899 52.202 5.70699 52.1871 5.89899 52.1541 cv
6.09099 52.121 6.27499 52.058 6.45099 51.9611 cv
6.45099 52.7751 li
6.28799 52.8541 6.09599 52.9031 5.87699 52.926 cv
cp
4.13999 52.9921 mo
4.25599 53.2751 4.35399 53.7001 4.43499 54.2661 cv
4.48099 54.5861 4.53399 54.813 4.59099 54.9451 cv
4.64899 55.0781 4.73299 55.181 4.84499 55.2531 cv
4.95699 55.3251 5.07999 55.3611 5.21599 55.3611 cv
5.42399 55.3611 5.59799 55.2831 5.73599 55.1251 cv
5.87499 54.967 5.94399 54.7361 5.94399 54.433 cv
5.94399 54.1321 5.87899 53.8641 5.74699 53.6301 cv
5.61599 53.3961 5.43599 53.2241 5.20799 53.1141 cv
5.03099 53.03 4.77099 52.988 4.42599 52.988 cv
4.13999 52.9921 li
f
6.83299 51.035 mo
6.93399 50.2781 li
7.17099 50.2471 7.34499 50.1591 7.45299 50.0161 cv
7.59999 49.8221 7.67299 49.558 7.67299 49.2241 cv
7.67299 48.863 7.60099 48.5851 7.45699 48.389 cv
7.31299 48.1921 7.11099 48.0601 6.85199 47.9911 cv
6.69299 47.9501 6.35999 47.9321 5.85299 47.9351 cv
6.25199 48.2751 6.45099 48.699 6.45099 49.2071 cv
6.45099 49.8391 6.22399 50.3281 5.76799 50.6741 cv
5.31299 51.0211 4.76599 51.1931 4.12899 51.1931 cv
3.69099 51.1931 3.28599 51.113 2.91599 50.9551 cv
2.54499 50.7971 2.25899 50.566 2.05699 50.2651 cv
1.85499 49.9631 1.75399 49.6091 1.75399 49.201 cv
1.75399 48.6591 1.97599 48.212 2.41899 47.86 cv
1.85399 47.86 li
1.85399 47.1451 li
5.82599 47.1451 li
6.54099 47.1451 7.04799 47.2181 7.34699 47.363 cv
7.64499 47.5091 7.88099 47.7391 8.05399 48.0551 cv
8.22699 48.3701 8.31299 48.7591 8.31299 49.2201 cv
8.31299 49.7681 8.18999 50.2101 7.94499 50.5471 cv
7.69899 50.8841 7.32799 51.0471 6.83299 51.035 cv
cp
4.07199 50.3961 mo
4.67699 50.3961 5.11799 50.2751 5.39499 50.035 cv
5.67199 49.7961 5.81099 49.4951 5.81099 49.1341 cv
5.81099 48.7751 5.67299 48.4761 5.39699 48.2331 cv
5.12099 47.9891 4.68799 47.868 4.09899 47.868 cv
3.53499 47.868 3.10999 47.993 2.82299 48.243 cv
2.53699 48.493 2.39499 48.7941 2.39499 49.1471 cv
2.39499 49.493 2.53499 49.7881 2.81699 50.0311 cv
3.09899 50.2751 3.51699 50.3961 4.07199 50.3961 cv
f
4.97199 42.72 mo
5.07099 41.9141 li
5.54099 42.04 5.90399 42.2751 6.16299 42.618 cv
6.42199 42.9611 6.55099 43.4001 6.55099 43.933 cv
6.55099 44.6041 6.34399 45.1371 5.93099 45.5291 cv
5.51799 45.923 4.93799 46.1191 4.19099 46.1191 cv
3.41899 46.1191 2.81999 45.9211 2.39399 45.522 cv
1.96799 45.1251 1.75399 44.6091 1.75399 43.9761 cv
1.75399 43.3621 1.96199 42.86 2.37999 42.472 cv
2.79699 42.0821 3.38399 41.8881 4.14099 41.8881 cv
4.18699 41.8881 4.25599 41.8901 4.34799 41.8921 cv
4.34799 45.321 li
4.85299 45.2921 5.23999 45.149 5.50799 44.8931 cv
5.77699 44.636 5.91099 44.3151 5.91099 43.9321 cv
5.91099 43.647 5.83599 43.402 5.68699 43.2001 cv
5.53699 42.998 5.29899 42.8381 4.97199 42.72 cv
cp
3.70799 45.2791 mo
3.70799 42.7111 li
3.32299 42.746 3.03499 42.8441 2.84199 43.006 cv
2.54299 43.2541 2.39499 43.576 2.39499 43.972 cv
2.39499 44.3301 2.51299 44.631 2.75199 44.8741 cv
2.98999 45.118 3.30899 45.2541 3.70799 45.2791 cv
f
6.45099 35.374 mo
1.85399 36.1281 li
1.85399 35.3671 li
4.38099 34.9691 li
4.65699 34.925 5.10699 34.871 5.73299 34.8071 cv
5.40699 34.657 5.03399 34.4661 4.61399 34.233 cv
1.85399 32.7031 li
1.85399 31.8781 li
6.45099 34.5031 li
6.45099 35.374 li
f
8.31299 30.327 mo
7.77099 30.7551 7.13799 31.1171 6.41199 31.4131 cv
5.68699 31.709 4.93499 31.8561 4.15699 31.8561 cv
3.47099 31.8561 2.81399 31.746 2.18599 31.5251 cv
1.45799 31.267 .730991 30.8671 .00799179 30.327 cv
.00799179 29.7701 li
.606991 30.1171 1.03599 30.3481 1.29099 30.459 cv
1.68899 30.6351 2.10399 30.772 2.53599 30.873 cv
3.07499 30.996 3.61599 31.0591 4.16099 31.0591 cv
5.54699 31.0591 6.93099 30.629 8.31299 29.7701 cv
8.31299 30.327 li
f
5.81199 27.23 mo
6.45199 27.3581 li
6.50099 27.5471 6.52599 27.7291 6.52599 27.9041 cv
6.52599 28.2151 6.44999 28.4621 6.29599 28.6461 cv
6.18099 28.7841 6.02299 28.8541 5.82399 28.8541 cv
5.72299 28.8541 5.49099 28.8151 5.12599 28.7401 cv
2.45299 28.1841 li
2.45299 28.7991 li
1.85399 28.6741 li
1.85399 28.0591 li
.728992 27.821 li
.19099 26.9281 li
1.85399 27.2771 li
1.85399 26.5041 li
2.45299 26.6371 li
2.45299 27.4021 li
4.99499 27.9341 li
5.31799 28.0011 5.51199 28.0331 5.57499 28.0331 cv
5.66799 28.0331 5.73799 28.0071 5.78699 27.9531 cv
5.83599 27.9001 5.86099 27.813 5.86099 27.6911 cv
5.86099 27.519 5.84499 27.3651 5.81199 27.23 cv
f
8.31299 25.632 mo
8.31299 26.189 li
6.93099 25.3301 5.54699 24.9 4.16099 24.9 cv
3.61999 24.9 3.08199 24.9631 2.54899 25.0861 cv
2.11699 25.184 1.70199 25.3201 1.30499 25.4951 cv
1.04499 25.6071 .613991 25.8391 .00799179 26.189 cv
.00799179 25.632 li
.730991 25.0931 1.45799 24.6921 2.18599 24.4351 cv
2.81399 24.2131 3.47099 24.103 4.15699 24.103 cv
4.93499 24.103 5.68699 24.251 6.41199 24.5491 cv
7.13799 24.8461 7.77099 25.207 8.31299 25.632 cv
f
8.31299 16.592 mo
7.77099 17.0201 7.13799 17.3821 6.41199 17.6781 cv
5.68699 17.9741 4.93499 18.1211 4.15699 18.1211 cv
3.47099 18.1211 2.81399 18.011 2.18599 17.7901 cv
1.45799 17.5311 .730991 17.1321 .00799179 16.592 cv
.00799179 16.0351 li
.606991 16.3831 1.03599 16.6121 1.29099 16.7251 cv
1.68899 16.899 2.10399 17.037 2.53599 17.1381 cv
3.07499 17.2621 3.61599 17.3231 4.16099 17.3231 cv
5.54699 17.3231 6.93099 16.8951 8.31299 16.0351 cv
8.31299 16.592 li
f
6.45099 15.16 mo
.10799 15.16 li
.10799 14.3791 li
3.71599 14.3791 li
1.85399 12.5331 li
1.85399 11.5251 li
3.56399 13.285 li
6.45099 11.3511 li
6.45099 12.311 li
4.09899 13.837 li
4.62599 14.3791 li
6.45099 14.3791 li
6.45099 15.16 li
f
6.45099 8.65503 mo
.10799 11.113 li
.10799 10.2031 li
4.71799 8.55408 li
5.08699 8.42108 5.43399 8.31006 5.75699 8.22107 cv
5.41099 8.12207 5.06399 8.00806 4.71799 7.87805 cv
.10799 6.16309 li
.10799 5.30505 li
6.45099 7.78503 li
6.45099 8.65503 li
f
8.31299 4.26202 mo
8.31299 4.81805 li
6.93099 3.95905 5.54699 3.52905 4.16099 3.52905 cv
3.61999 3.52905 3.08199 3.59204 2.54899 3.71503 cv
2.11699 3.81305 1.70199 3.94904 1.30499 4.12408 cv
1.04499 4.23608 .613991 4.46808 .00799179 4.81805 cv
.00799179 4.26202 li
.730991 3.72107 1.45799 3.32208 2.18599 3.06403 cv
2.81399 2.84204 3.47099 2.73108 4.15699 2.73108 cv
4.93499 2.73108 5.68699 2.88007 6.41199 3.17804 cv
7.13799 3.47504 7.77099 3.83606 8.31299 4.26202 cv
f
111.605 115.775 mo
111.605 110.18 li
109.518 110.18 li
109.518 109.431 li
114.531 109.431 li
114.531 110.18 li
112.444 110.18 li
112.444 115.775 li
111.605 115.775 li
f
116.048 110.32 mo
115.267 110.32 li
115.267 109.43 li
116.048 109.43 li
cp
115.267 110.32 mo
cp
116.048 115.775 mo
115.267 115.775 li
115.267 111.177 li
116.048 111.177 li
cp
f
117.397 115.775 mo
117.397 111.177 li
118.095 111.177 li
118.095 111.824 li
118.239 111.6 118.43 111.419 118.67 111.282 cv
118.909 111.146 119.181 111.077 119.487 111.077 cv
119.827 111.077 120.105 111.147 120.323 111.288 cv
120.541 111.43 120.694 111.627 120.783 111.881 cv
121.148 111.345 121.623 111.077 122.207 111.077 cv
122.665 111.077 123.016 111.203 123.263 111.455 cv
123.508 111.708 123.631 112.097 123.631 112.621 cv
123.631 115.775 li
122.85 115.775 li
122.85 112.88 li
122.85 112.568 122.825 112.344 122.774 112.207 cv
122.724 112.07 122.632 111.959 122.499 111.876 cv
122.366 111.792 122.21 111.75 122.031 111.75 cv
121.707 111.75 121.439 111.858 121.225 112.072 cv
121.012 112.288 120.905 112.632 120.905 113.105 cv
120.905 115.775 li
120.123 115.775 li
120.123 112.789 li
120.123 112.442 120.06 112.184 119.934 112.011 cv
119.807 111.837 119.6 111.75 119.312 111.75 cv
119.094 111.75 118.892 111.809 118.706 111.924 cv
118.521 112.039 118.386 112.208 118.303 112.43 cv
118.22 112.652 118.178 112.972 118.178 113.391 cv
118.178 115.775 li
117.397 115.775 li
f
128.004 114.294 mo
128.81 114.395 li
128.683 114.863 128.448 115.228 128.105 115.486 cv
127.762 115.744 127.324 115.874 126.791 115.874 cv
126.12 115.874 125.588 115.667 125.194 115.254 cv
124.801 114.841 124.604 114.261 124.604 113.515 cv
124.604 112.742 124.803 112.144 125.201 111.717 cv
125.598 111.29 126.114 111.077 126.748 111.077 cv
127.362 111.077 127.863 111.286 128.252 111.703 cv
128.641 112.12 128.836 112.707 128.836 113.464 cv
128.836 113.51 128.834 113.579 128.832 113.671 cv
125.402 113.671 li
125.431 114.176 125.574 114.564 125.831 114.831 cv
126.087 115.1 126.408 115.233 126.792 115.233 cv
127.078 115.233 127.321 115.159 127.524 115.01 cv
127.726 114.86 127.885 114.622 128.004 114.294 cv
cp
125.444 113.03 mo
128.013 113.03 li
127.978 112.647 127.88 112.357 127.718 112.165 cv
127.47 111.867 127.148 111.717 126.752 111.717 cv
126.394 111.717 126.093 111.837 125.849 112.074 cv
125.605 112.314 125.47 112.632 125.444 113.03 cv
f
136.499 115.135 mo
136.369 115.775 li
136.182 115.824 136.001 115.849 135.824 115.849 cv
135.514 115.849 135.267 115.772 135.083 115.619 cv
134.945 115.504 134.875 115.347 134.875 115.147 cv
134.875 115.046 134.913 114.814 134.988 114.449 cv
135.545 111.775 li
134.93 111.775 li
135.054 111.177 li
135.669 111.177 li
135.907 110.053 li
136.8 109.514 li
136.451 111.177 li
137.224 111.177 li
137.091 111.775 li
136.326 111.775 li
135.794 114.317 li
135.728 114.641 135.695 114.835 135.695 114.898 cv
135.695 114.99 135.721 115.062 135.775 115.11 cv
135.828 115.159 135.915 115.184 136.036 115.184 cv
136.209 115.184 136.363 115.168 136.499 115.135 cv
f
144.064 117.636 mo
143.636 117.094 143.274 116.461 142.978 115.734 cv
142.683 115.009 142.534 114.257 142.534 113.48 cv
142.534 112.793 142.645 112.137 142.866 111.509 cv
143.124 110.78 143.524 110.054 144.064 109.331 cv
144.621 109.331 li
144.273 109.93 144.044 110.358 143.932 110.614 cv
143.756 111.012 143.618 111.426 143.518 111.858 cv
143.395 112.397 143.332 112.939 143.332 113.483 cv
143.332 114.869 143.762 116.253 144.621 117.636 cv
144.064 117.636 li
f
145.156 114.402 mo
145.929 114.277 li
145.972 114.586 146.092 114.822 146.29 114.986 cv
146.487 115.151 146.763 115.233 147.118 115.233 cv
147.475 115.233 147.741 115.16 147.914 115.015 cv
148.087 114.87 148.173 114.699 148.173 114.503 cv
148.173 114.328 148.096 114.189 147.939 114.089 cv
147.831 114.02 147.565 113.932 147.142 113.825 cv
146.572 113.682 146.177 113.557 145.958 113.451 cv
145.738 113.347 145.572 113.201 145.458 113.016 cv
145.345 112.829 145.289 112.624 145.289 112.398 cv
145.289 112.194 145.335 112.005 145.429 111.83 cv
145.523 111.656 145.65 111.512 145.812 111.397 cv
145.932 111.308 146.097 111.231 146.306 111.17 cv
146.515 111.107 146.738 111.076 146.978 111.076 cv
147.338 111.076 147.654 111.129 147.926 111.232 cv
148.198 111.336 148.399 111.477 148.529 111.654 cv
148.659 111.831 148.748 112.068 148.797 112.365 cv
148.032 112.465 li
147.998 112.231 147.897 112.047 147.732 111.915 cv
147.566 111.782 147.333 111.717 147.03 111.717 cv
146.673 111.717 146.418 111.776 146.266 111.894 cv
146.113 112.012 146.037 112.15 146.037 112.309 cv
146.037 112.409 146.068 112.5 146.131 112.581 cv
146.195 112.664 146.294 112.733 146.43 112.787 cv
146.507 112.817 146.736 112.883 147.117 112.986 cv
147.667 113.134 148.051 113.254 148.269 113.348 cv
148.488 113.442 148.66 113.577 148.785 113.756 cv
148.909 113.935 148.972 114.156 148.972 114.421 cv
148.972 114.681 148.896 114.925 148.744 115.154 cv
148.593 115.383 148.374 115.561 148.089 115.686 cv
147.803 115.811 147.481 115.873 147.12 115.873 cv
146.523 115.873 146.067 115.75 145.755 115.503 cv
145.441 115.255 145.242 114.889 145.156 114.402 cv
f
150.425 117.636 mo
149.868 117.636 li
150.727 116.253 151.157 114.869 151.157 113.483 cv
151.157 112.942 151.095 112.404 150.971 111.871 cv
150.874 111.439 150.737 111.025 150.562 110.627 cv
150.45 110.368 150.219 109.936 149.868 109.331 cv
150.425 109.331 li
150.965 110.054 151.364 110.78 151.623 111.509 cv
151.844 112.137 151.955 112.793 151.955 113.48 cv
151.955 114.257 151.806 115.009 151.508 115.734 cv
151.211 116.461 150.85 117.094 150.425 117.636 cv
f
195.866 24.153 mo
195.4 23.566 195.007 22.881 194.685 22.0961 cv
194.364 21.3101 194.203 20.496 194.203 19.655 cv
194.203 18.913 194.323 18.202 194.564 17.522 cv
194.845 16.733 195.278 15.9481 195.866 15.166 cv
196.473 15.166 li
196.093 15.814 195.843 16.277 195.721 16.5551 cv
195.529 16.9841 195.379 17.434 195.269 17.9011 cv
195.135 18.4841 195.067 19.0701 195.067 19.6591 cv
195.067 21.158 195.536 22.6561 196.473 24.153 cv
195.866 24.153 li
f
200.693 21.518 mo
200.379 21.785 200.079 21.9741 199.79 22.084 cv
199.5 22.194 199.191 22.249 198.859 22.249 cv
198.313 22.249 197.893 22.116 197.6 21.85 cv
197.306 21.584 197.159 21.244 197.159 20.83 cv
197.159 20.587 197.214 20.3651 197.326 20.1641 cv
197.437 19.9641 197.582 19.803 197.761 19.682 cv
197.941 19.5601 198.143 19.468 198.368 19.405 cv
198.534 19.3621 198.784 19.32 199.118 19.2791 cv
199.798 19.1981 200.3 19.1021 200.622 18.9901 cv
200.624 18.8751 200.626 18.801 200.626 18.77 cv
200.626 18.4271 200.546 18.186 200.387 18.045 cv
200.171 17.855 199.85 17.76 199.424 17.76 cv
199.027 17.76 198.733 17.829 198.544 17.9691 cv
198.355 18.108 198.214 18.355 198.124 18.708 cv
197.301 18.5911 li
197.375 18.239 197.499 17.954 197.671 17.7371 cv
197.843 17.5211 198.092 17.3541 198.417 17.236 cv
198.742 17.1201 199.118 17.062 199.547 17.062 cv
199.972 17.062 200.317 17.111 200.583 17.2111 cv
200.849 17.311 201.044 17.437 201.169 17.588 cv
201.294 17.739 201.382 17.931 201.432 18.161 cv
201.46 18.3051 201.474 18.564 201.474 18.938 cv
201.474 20.059 li
201.474 20.842 201.491 21.337 201.526 21.544 cv
201.561 21.752 201.629 21.95 201.732 22.1411 cv
200.851 22.1411 li
200.769 21.963 200.716 21.756 200.693 21.518 cv
cp
200.626 19.647 mo
200.319 19.772 199.859 19.8781 199.246 19.965 cv
198.898 20.015 198.652 20.071 198.508 20.134 cv
198.364 20.195 198.252 20.287 198.175 20.406 cv
198.096 20.5261 198.057 20.66 198.057 20.807 cv
198.057 21.031 198.143 21.218 198.313 21.368 cv
198.483 21.518 198.732 21.593 199.06 21.593 cv
199.385 21.593 199.674 21.522 199.928 21.3801 cv
200.181 21.238 200.367 21.044 200.485 20.798 cv
200.576 20.6071 200.622 20.326 200.622 19.9561 cv
200.626 19.647 li
f
203.317 24.153 mo
202.71 24.153 li
203.647 22.6561 204.115 21.158 204.115 19.6591 cv
204.115 19.0731 204.048 18.4921 203.913 17.915 cv
203.807 17.447 203.658 16.999 203.467 16.5681 cv
203.345 16.288 203.092 15.8201 202.71 15.166 cv
203.317 15.166 li
203.904 15.9481 204.338 16.733 204.619 17.522 cv
204.86 18.202 204.98 18.913 204.98 19.655 cv
204.98 20.496 204.818 21.3101 204.495 22.0961 cv
204.172 22.881 203.779 23.566 203.317 24.153 cv
f
195.866 143.292 mo
195.4 142.706 195.007 142.021 194.686 141.235 cv
194.363 140.449 194.203 139.636 194.203 138.794 cv
194.203 138.052 194.323 137.341 194.564 136.661 cv
194.845 135.873 195.278 135.088 195.866 134.305 cv
196.473 134.305 li
196.094 134.953 195.843 135.417 195.721 135.694 cv
195.529 136.124 195.379 136.573 195.269 137.041 cv
195.135 137.624 195.067 138.21 195.067 138.799 cv
195.067 140.298 195.536 141.796 196.473 143.292 cv
195.866 143.292 li
f
198.215 141.28 mo
197.434 141.28 li
197.434 134.422 li
198.273 134.422 li
198.273 136.867 li
198.629 136.423 199.083 136.2 199.635 136.2 cv
199.94 136.2 200.23 136.263 200.502 136.385 cv
200.775 136.509 201 136.682 201.176 136.903 cv
201.352 137.127 201.491 137.396 201.59 137.71 cv
201.69 138.024 201.74 138.361 201.74 138.72 cv
201.74 139.57 201.53 140.228 201.109 140.692 cv
200.688 141.156 200.184 141.389 199.594 141.389 cv
199.009 141.389 198.549 141.145 198.215 140.656 cv
198.215 141.28 li
cp
198.207 138.757 mo
198.207 139.353 198.288 139.783 198.45 140.048 cv
198.714 140.481 199.071 140.698 199.523 140.698 cv
199.889 140.698 200.207 140.539 200.475 140.219 cv
200.742 139.899 200.876 139.423 200.876 138.79 cv
200.876 138.142 200.747 137.662 200.491 137.354 cv
200.234 137.045 199.924 136.891 199.56 136.891 cv
199.192 136.891 198.875 137.05 198.608 137.37 cv
198.34 137.689 198.207 138.151 198.207 138.757 cv
f
203.317 143.292 mo
202.71 143.292 li
203.646 141.796 204.115 140.298 204.115 138.799 cv
204.115 138.213 204.048 137.631 203.913 137.055 cv
203.807 136.587 203.658 136.138 203.467 135.708 cv
203.345 135.427 203.093 134.96 202.71 134.305 cv
203.317 134.305 li
203.904 135.088 204.338 135.873 204.619 136.661 cv
204.859 137.341 204.98 138.052 204.98 138.794 cv
204.98 139.636 204.818 140.449 204.495 141.235 cv
204.172 142.021 203.779 142.706 203.317 143.292 cv
f
.399 lw
[1.197 1.596 ] 0 dsh
144.331 94.13 mo
144.331 224.41 li
@
121.504 46.436 mo
122.776 40.3331 li
124.611 40.3331 li
125.052 40.3331 125.388 40.3651 125.621 40.4291 cv
125.953 40.5151 126.237 40.6681 126.472 40.889 cv
126.707 41.11 126.885 41.3851 127.003 41.7151 cv
127.123 42.045 127.182 42.4161 127.182 42.826 cv
127.182 43.3171 127.108 43.7651 126.96 44.1691 cv
126.812 44.5721 126.618 44.928 126.378 45.235 cv
126.139 45.5411 125.888 45.7811 125.627 45.9551 cv
125.365 46.1281 125.056 46.2571 124.698 46.3401 cv
124.427 46.4031 124.093 46.436 123.697 46.436 cv
121.504 46.436 li
cp
122.463 45.7451 mo
123.425 45.7451 li
123.859 45.7451 124.246 45.704 124.583 45.6201 cv
124.793 45.5701 124.973 45.4971 125.123 45.4001 cv
125.319 45.2751 125.498 45.1091 125.658 44.9041 cv
125.868 44.6321 126.036 44.3221 126.162 43.9741 cv
126.288 43.6251 126.351 43.2291 126.351 42.7841 cv
126.351 42.29 126.265 41.9111 126.094 41.6461 cv
125.922 41.381 125.704 41.2051 125.438 41.1191 cv
125.242 41.0551 124.936 41.0231 124.521 41.0231 cv
123.447 41.0231 li
122.463 45.7451 li
f
130.806 44.947 mo
131.538 45.014 li
131.432 45.376 131.189 45.72 130.81 46.0461 cv
130.43 46.3721 129.978 46.535 129.453 46.535 cv
129.124 46.535 128.823 46.459 128.549 46.308 cv
128.275 46.157 128.067 45.9371 127.924 45.6481 cv
127.781 45.3591 127.71 45.03 127.71 44.6611 cv
127.71 44.178 127.821 43.709 128.045 43.256 cv
128.269 42.8021 128.558 42.465 128.914 42.2441 cv
129.27 42.0231 129.655 41.913 130.069 41.913 cv
130.597 41.913 131.019 42.077 131.334 42.4041 cv
131.65 42.733 131.808 43.181 131.808 43.748 cv
131.808 43.965 131.789 44.1871 131.75 44.415 cv
128.491 44.415 li
128.48 44.501 128.474 44.579 128.474 44.647 cv
128.474 45.061 128.569 45.376 128.76 45.5941 cv
128.95 45.8121 129.183 45.92 129.458 45.92 cv
129.716 45.92 129.971 45.8361 130.222 45.6691 cv
130.472 45.5031 130.666 45.262 130.806 44.947 cv
cp
128.612 43.842 mo
131.097 43.842 li
131.1 43.7631 131.101 43.707 131.101 43.6741 cv
131.101 43.293 131.007 43.0021 130.817 42.7991 cv
130.628 42.5961 130.385 42.4951 130.088 42.4951 cv
129.765 42.4951 129.471 42.6061 129.206 42.8301 cv
128.94 43.0551 128.742 43.3911 128.612 43.842 cv
f
132.399 44.606 mo
132.558 43.85 li
134.852 43.85 li
134.694 44.606 li
132.399 44.606 li
f
138.164 44.822 mo
138.92 44.905 li
138.732 45.457 138.463 45.866 138.115 46.134 cv
137.767 46.4011 137.371 46.535 136.927 46.535 cv
136.447 46.535 136.059 46.3801 135.76 46.069 cv
135.462 45.7581 135.313 45.3231 135.313 44.7661 cv
135.313 44.282 135.408 43.808 135.6 43.3411 cv
135.792 42.874 136.065 42.5211 136.422 42.277 cv
136.778 42.0341 137.185 41.913 137.643 41.913 cv
138.117 41.913 138.494 42.0461 138.771 42.314 cv
139.048 42.5811 139.187 42.936 139.187 43.376 cv
138.447 43.426 li
138.444 43.147 138.363 42.9301 138.204 42.772 cv
138.044 42.6141 137.835 42.5361 137.574 42.5361 cv
137.272 42.5361 137.01 42.6321 136.788 42.8231 cv
136.567 43.0151 136.393 43.306 136.267 43.6951 cv
136.141 44.085 136.077 44.46 136.077 44.821 cv
136.077 45.1981 136.161 45.4811 136.327 45.67 cv
136.493 45.8591 136.697 45.9531 136.94 45.9531 cv
137.184 45.9531 137.417 45.86 137.639 45.6741 cv
137.862 45.4871 138.037 45.2031 138.164 44.822 cv
f
139.374 46.436 mo
140.646 40.3331 li
141.402 40.3331 li
140.913 42.6801 li
141.188 42.4061 141.445 42.209 141.682 42.0911 cv
141.918 41.972 142.163 41.9131 142.414 41.9131 cv
142.773 41.9131 143.053 42.0101 143.252 42.204 cv
143.451 42.3971 143.55 42.6531 143.55 42.972 cv
143.55 43.1271 143.504 43.412 143.411 43.8281 cv
142.84 46.436 li
142.085 46.436 li
142.674 43.7601 li
142.758 43.3711 142.8 43.1271 142.8 43.027 cv
142.8 42.8831 142.751 42.7661 142.653 42.6741 cv
142.556 42.5821 142.415 42.5361 142.231 42.5361 cv
141.964 42.5361 141.711 42.6081 141.469 42.751 cv
141.227 42.894 141.039 43.0901 140.901 43.3381 cv
140.765 43.587 140.639 43.9871 140.525 44.54 cv
140.13 46.436 li
139.374 46.436 li
f
147.116 45.636 mo
146.586 46.2351 146.043 46.5351 145.488 46.5351 cv
145.146 46.5351 144.871 46.438 144.661 46.2411 cv
144.451 46.0461 144.346 45.8071 144.346 45.5231 cv
144.346 45.3381 144.398 45.0191 144.5 44.5651 cv
145.078 42.0131 li
145.834 42.0131 li
145.187 44.8731 li
145.132 45.1121 145.105 45.2971 145.105 45.4291 cv
145.105 45.5841 145.156 45.7041 145.259 45.7901 cv
145.361 45.8771 145.513 45.9201 145.713 45.9201 cv
145.927 45.9201 146.137 45.8691 146.341 45.7671 cv
146.545 45.6641 146.721 45.5261 146.869 45.3521 cv
147.017 45.1781 147.138 44.9721 147.231 44.7331 cv
147.292 44.5811 147.364 44.3141 147.446 43.9331 cv
147.872 42.0131 li
148.627 42.0131 li
147.645 46.4361 li
146.95 46.4361 li
147.116 45.636 li
f
151.881 44.822 mo
152.638 44.905 li
152.449 45.457 152.181 45.866 151.833 46.134 cv
151.484 46.4011 151.088 46.535 150.645 46.535 cv
150.165 46.535 149.775 46.3801 149.477 46.069 cv
149.179 45.7581 149.03 45.3231 149.03 44.7661 cv
149.03 44.282 149.126 43.808 149.316 43.3411 cv
149.508 42.874 149.782 42.5211 150.139 42.277 cv
150.495 42.0341 150.902 41.913 151.36 41.913 cv
151.835 41.913 152.21 42.0461 152.488 42.314 cv
152.765 42.5811 152.904 42.936 152.904 43.376 cv
152.164 43.426 li
152.161 43.147 152.08 42.9301 151.921 42.772 cv
151.761 42.6141 151.551 42.5361 151.291 42.5361 cv
150.989 42.5361 150.727 42.6321 150.505 42.8231 cv
150.284 43.0151 150.109 43.306 149.984 43.6951 cv
149.857 44.085 149.794 44.46 149.794 44.821 cv
149.794 45.1981 149.878 45.4811 150.043 45.67 cv
150.21 45.8591 150.414 45.9531 150.658 45.9531 cv
150.901 45.9531 151.134 45.86 151.356 45.6741 cv
151.579 45.4871 151.754 45.2031 151.881 44.822 cv
f
153.084 46.436 mo
154.355 40.3331 li
155.111 40.3331 li
154.32 44.126 li
156.528 42.0131 li
157.523 42.0131 li
155.637 43.6611 li
156.778 46.436 li
155.955 46.436 li
155.064 44.1611 li
154.148 44.954 li
153.839 46.436 li
153.084 46.436 li
f
145.927 61.982 mo
144.331 65.175 li
142.735 61.982 li
144.523 50.681 mo
144.523 62.525 li
144.459 62.685 li
144.331 62.716 li
144.171 62.685 li
144.108 62.525 li
144.108 50.681 li
144.171 50.554 li
144.331 50.489 li
144.459 50.554 li
144.523 50.681 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/Procedure [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
