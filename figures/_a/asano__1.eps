%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R8418.tmp.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/06/16, 22:46:20
%%BoundingBox: -1 0 432 377
%%HiResBoundingBox: 0 0 432 376.7402
%%CropBox: 0 0 432 376.7402
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1076 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-06-16T22:45:43+08:00"
   xmp:CreateDate="2014-06-16T22:45:43+08:00"
   xmp:MetadataDate="2014-06-16T22:45:43+08:00"
   xmp:CreatorTool="IEEE Copyright"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:29143efb-a1a8-4324-8d68-807c01709719"
   xmpMM:InstanceID="uuid:0fc748ce-197f-42e5-9363-c669a773c7fb"
   pdf:Producer="Acrobat PDFWriter 4.05 for Windows NT">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Fundamental study of an electrostatic chuck for silicon wafer handling - Industry Applications, IEEE Transactions on</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -376.74 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 376.74 li
432 376.74 li
432 0 li
cp
clp
-7.62939e-6 184.08 mo
432 184.08 li
432 0 li
-7.62939e-6 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
gsave
clp
[1 0 0 -1 79.14 376.74 ]ct
[432 0 0 184.08 -79.14 192.66 ]ct
snap_to_device
<<
/T 1
/W 1800 
/H 767 
/M[1800 0 0 -767 0 767 ]
/BC 8 
/D[0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 2
>>
%%BeginBinary: 1
sepimg
Gb"-VM3b3P%Rsm`s/"PP:GI)<!VC^Eg>BSl.Np5EABCtt:s/n?zz!!%Ng_WW!?!+6r#5l^lb!!)Lgph0
5*!!"\WlQC`&s-!KT!PDh]"L);u5^*mk*-I;k;4'_4G4[[[c-<I'5_6clK!_;b$#5L3a,C(R3<X%dD_o
nu%/U%c=9lkhmHAG>R\T:*,mn]!dZ3`BW&a,a;kbt$+RSBPTD\b4oYq`D*SjS75S`VC(o/1cdHeRS=p&
_pAInhAzz!!)58pZ__Y4C]B7!-lLELac2f!'4O/`/M4G`#tir%PcdI7]_5POEU7S6d<l[%mZ.tE"(0Th
Ic!E$$H=tbg7:MO`p@T6a':i$UA-ThXH?.UUM+eI=b`)$8_=/8#.0=dHa%<]eK_*7rS#\E.Zp`K!aE:U
s*Ta+!*6(+Fok^VBe)V=d#HiZ?\RIn&N>`G+1,b;gLDL\XLW,[LU;!p-mD*3[2mN1tFqm^TI9[kiKs*r
jEcf8"U1JZYBcnQOs5e;aP$e^@W"(qYag7m"O^/BDe"t!5F-;.Bg;m(-`?&QBb/MD@6Ps,9]!lLUoNP#
Li,V]qo:A<6#O1iE,^d^_Fq*cIr+m?gIE.E60109DWMbH.W<_4$oc1Aj<YpfLZ'!W6K;LArh$S/A<32n
dXP;UEE=a^K[E*aNpoQaj`g>r=6[ll>er#2nQJ;rVOG#kpqO"_qU?";Cg3;il&G5a(F`WLOO&?C[8l!)
"J-XLQcr1`%,>YrU8a`69+"&cFRBPD;'a7kJq2Ap5\/cQG*,UQp.u]p8[)#hT)pim78V[-%NiP,u+9g\
]j.8L%sE=.Fu?(j4)]B*SM%^d:)?O]*$9._Ajdm]67rUAgqV&pmerVMR!t0mdW=TMK!e6k\&011W^O.!
QYEOF,2^@h.OXADWg5nR;<?.#1gVk*Z[60C,EsJ6`7e@DWg5nR;P_X`(p]I)^g\k*489A%_N_)0uhS>E
1GZC3c6Rlc!ge@i'i\:*-aDg@u+ts)E8n#E'$S?RnJ0<A0!dVm/<[]#6;;J:)Z&Op3/SgdHtISa>\5:I
aB;"2q)9ks/X_'WCWc8)0+R7:mK9sQfkXi40m`<pV1:1M3i>P^%pg;Ze)e%CXmRso7g)REUq0i>T\gBQ
%V'\j#Cdl!28,:oOMZ]ZfJ>@Mq[CtNn2$.(#u`aIS;Lfj`!8P&b%\+Q-;Q38WPq2l"BP[(n^-PX^[^1N
[EVj^@F]Gq7-(ul,(WK&H7k8p6Vt@\!s(?,PjCqH>ppL64(,N1bBM=-LeL'LfL:m[i<9j&r,"J-*50Di
&`;Npsmg7:B&&#pT_Dcr4%7Mit(=\rs1(N9g:PXTrVP%NnU*(d-c+o3nOjPp9T3cW^@lC[g4UOFn!umT
S(^90[r#=Nmgn$#_0YYc$*jf7nY&\j52tT`hI8`2sY6iI&BXa^JKlZ<?"s5,FC0(psihEG5DNZTC(Uo3
r!X:QGOiZQ+)`5G>`BZi=B@unB]Dr6HJ<N)6@aO=gkA%r;.>^)ok"hmB*hsp?CXMq,mTWQB.*:<_iqaq
([hoHTta:a3s"cdi:g09"#KSp+7H%Z(,^B5">4_=oXK,7bU(D.;t21:T'pJ5)/UE+H.(bP\F"j5u2P9A
LlG;Ce0o+m7+A>`]Da058-SJqT3uuJ@&g:.;EbMN&SQ$oL+O.[MBf3Md/5Ir\!S8hZQY^@3$>A[%k*UC
2V+/2o=&)SD>_<gU@=:_<4o*#9iKuD5Na@1>DKr1c8o)bK'<.JT]?+a`,(J]VDs8C9BGs`UCDE+mf6jJ
!BJIk3Ak43P/EX[VlJRK*G*UlK=GQ?:dVbc5ZZXX0^'sG2_k%!RFJ@F%euE;)X<$j^\1R+Bf"5/qi@Aq
aHdf^U`UXPAWQ7g7UJjTPD'0G<ZgB7G0)--6&,GKMUoAaMY^/qQkeHcMHqLH9+Ro1PWXt+kGh\#l]+\k
Z+3SbN6Y*I`DP]9\B&48#:$R8T-as#Kt2;YmgW:YCfV<IJ_SNR2/,!fo)t^)/f>'.DD<A864uR7r-5K-
Ml1d/@At^J']0qT1=\#FkW1$aEOEMPib%NZ_hmua,o=WS;cK?aHf!?_2$Ha`j&,O.XASsXBJ(X4mV`3`
BjR3+mc$%CAT^(N_Le@7JO+0V9c;-K6=CP9e-WRa[7@/+.f<9#J\SkJ;1:lm]5cn$p-A01`%>4[:$^WI
s,3?]O7$pR)/KK\7AP.Za_br:H)9OT5D,#QN>E')X+_q]pN9dk"lIcOg9)HH@+OMgc1m"QHt$h:N#S3j
sh5Ylg+g\,V!.ieJAbghk/e&q7:"QDS3c!(JN3s5=:g<2"A7k6$Ob,hhOD^`:/2ml[>kKn_N^kKW3*,h
fC9#A"rOBkgN:chD`+'LBa-?4+;o:<HCi,B0pTJrH^W.)uiZ;#flBUp>]k2<7t%F^%>4j6?W":^K-#!5
AOf_0C]e.6XDCZmX1H3c"0i?"J#<bGnfBM_Gj5b0>R\?6/_>F*%9#MPc:*]?@iFRXFn/-##gtc4+;i:=
49i:n:5N]5+juTBX/,2HSe7#!?]Z.f-t?qM10(>#:MJ9;+6L&>6jmOWk*>/-2RB)k4\Mmr@aUUn(?E5Y
K+'.If?Vh*o;Co[(UZ>h?f>C*NAA4L-kOuXfu-$I#3kbqs%A,5Q\_gb*h>4+osff'qD"E!I1H28VYHFE
%*@u7J-_$8ii/pQk//?]QsT<-(RUs9S`+0?+g6.$Hf>Y^gm_[Q<DeT$$H?"5u:<&SL6aKQ5#j^Gg0eaF
<:KF(R.k?Kpc^J0.e2Mjn^VqG,],?<`Gn!-`C='.<Yd6;3t?!1Q*ZM+;fdKQkKKrrYEnES?mJ-X.=!u3
Qc2nI/jTgk#L;NRYT;WTn'<nWOF="!m"6)=1)09m?)qfVHO5FmK6:Y/hd(tPG`'Pc5s.$AiQsb[Jstq^
![]nV^u,iIZ3(h+@f^De9DuBR):\u4-&=7>]6`OmJL8@oXLpc[=XA^%lM6g!/81b)nd%P5WkHFOi5]sE
5Gqm_!Co6%@Z<-ok]cql8fTqZa(4MDpnW&LZAb7nqm8$g.7u<,0TUL9LsXG:ptc$XkTI.q9'0;kKho&(
nVO;+c9?\%^^7SLeIQ=M0c.MGf'4$\GR81:;KcMl.pb"q7F>4la%)Y5)RJ\qP:WNf`0<$0AE1Bon2RJ;
&5mNp#nXckEUI9J*8pA3FoYk?q/-Nl9o9)qGmq#3\B^%)t&3ql%ZCF5u5;ag!krke1!$1Hj_$V+"jWZQ
A@_?b"6*cSau3UYeP(cquk"5K:7FHHXGoDg`fNI__e4:rj$::Vi6B$3IgM7f\_^orHka>^D(S"]m/\mI
DNCBB<Uju(kKk*)@lM`F3>]"S'QeX]c6Tc@6EB8oa*RlV7\t=!?XIA*+\-0AVe]oGY33%ji]hmqL06jm
qK`bU<b>7KT<Fip,pRNSS0qo_RYFJMh=3o$kPI_(7QJk[s_pJ#m(WQ(-?qB)'JPsX>NY<chl((!X/LJ>
+#*J?:l;p*9ZDTMe1YMr*;0h8LM?<ZTFn*4"Br<hiVL+L\5hHY%7'2LS"N(CH_#feBm68V,DXe<M<*un
aSo<R2/6Y`iY1<63;I)_:b;DYRZ,,#\^5(;7gfqTpCd*$W4b)R_eL8T>CY(h(;=eDWK7\&niF<3*e<W5
5@QFTXA!XM8SFk)FFR#/@2O4"*+IPDA4EAQa:B8#rE2.S?<[PO_R15%aHP#=juh\3LTT.J6Z>u_IbKWW
l,$d3%7.!8\`Z=]DSEHAfBsX#ls@@3$TV/jt%>5d7E,ZR.!Msrh&=eh5tP&QcuF!loem,ejd#lId)+AY
)=g#1^7Ioc;eXV<mgBCV(VcrLe7HjKrWcDP\lnH%erFl]oHoc$cNQj9EkW*W626Y<75T["$Y(2Y9QQkp
075Y1*#LKec,E5V!2+hS<B,?,C@k!r7Mb*@%\TEpZj2iQ89QNJY[bNLiR[o2!:"+5W?"2Qcp]=]:XUN9
YKB/Og-lmehi[[dD$+(qRB>eKrDJ&/DJo.pWX.k,5F7VnWq8hULd[[6hL,)acE`gXW`,+%r\ru-I&&5e
<=;9k<5mQ5f)"\^)Zr@P%RHu4q[sT!"Kl=[OfkI&ZC$"^sih=*;N3iB1ue`JcY8,>JV(,qm=WR&#@JX'
87YoC$oeO9*_3gpqnOJa]>G6@>ON*5ZdWq7%q\%FOq9d$J'_)iKKsGFmC/MO'*`^C$CYEX'A<!o$E#nE
NfK(&!rkhCifuqIifbd9D2i1i<-'T0J2,NEoieFUAK\L=g.oA!/I.Im/@so4j\h#nP0M8!"^Xg';`j@]
V>q%\66&ii1,;j3X>V3geLk:c*I=-jj#mZ]OI5pqWUKmej95HZ7tfO&1/nUK3@nXoFBea2E:$uRH7S!l
,Ur.k$A"#B.?,4\fEI">[RVY@H*1f9NF1]_i0%moV!fp;4p[j*:SZdW.2n[K+5\.-%c1S-7h)MTO*g%n
:e$DI0d]#V5*PQ8`B,aAP7Dhs8:p9A\HCA*!;WOhD@=Vd"Q5H(J;)&^hA=sn3i\PU#V0*;(\$-&jn'"E
Om^c)lM,1PEi9r#VZ9F;g>%\g<ahp.ri8E8sfCp>6p\7'4oaLN]VX9(9]"1YZq/36!$%?9\Rj%LG.B@<
<O5+$D8[.$:g=P)`m?T79dFU5_8LHA-?c.LGEL07if<WMq8STrS/Q!!6tl(_@L5'Y)gbmf*fuU;<[E,,
I>TSPO+#o8\N5<fCZTudK#dNoS"7,PVEC;0)FR>]3S`ED(VJXf2Z<$"MPOkLBG\0OaQdH/2g.oolL#SC
;;uamVkFZ/96f3K[hCTe88Lom]^nj#KgS>H?>r62g_3X1E1:iTJ=)UArQAW+)/@A"*L-jJ4g$)iIs$sU
`[9`gKbAhfA$R8AT%u9PSl""5A9g<b-NlbT<GN5NH3]ZqX<j@fh^YtD2??Lq@UCqoC'ZlkAPjSh,YFdP
t[$$.X)4:c/':T-o70cJ'd,k)d280C*/gt]eS;=Ah6[VTWs86ZH<p34tmLoB6^+D=;ku)fY\YNjVf<C'
<ub9(WqE-fcN'CE(<s>K%^Il@IFUXPR5NBN>d1(,Honc&V,_j42VG;_M[[j)L_B).p[2r?m^KNE'fts=
(T/>TnEr#pV3WqpIJ-YFh@F&6M)K![BAPNnJNP*\Jt,Q%#-dhcia>Kp<N.oR5!'MDPZ*+&(GB,"0StSL
)8!cOacqtlum`KDGqKnRCtDh:aV/!UEa3Tf`QAdg48MUXl4pg?fW:L$&d%LW7SrlggG%0-^=F9"ON@8e
BEJ)9l%Nrp==1LRBN;/DH?aBna.gT@DC03fA0$%lb,^drO]gV4A,Y0+c9<`B\TgUp@nJr]=rLA?XT2fM
Y:0dahB:@9^Jn?KJHn%7i[Pbod6_EC*2nRD[e(Yq&2<RE$_YG=liQXGSb^B32+RJck2$db>ddM[>u3Y>
JgbY]#G4?>Zmq-#6uOUprM;1:+4RKG0&Xb_E%sM@;cT&Pj')JjR=Ft2d,6?qKNg'CH/"]fDREa\_-QE[
f%W@ZG)6HXP,iHh^O&<HBV@34T[;NHYYU79GcC&=8>FDqqo.jp<pM(d)'fZ#AQ&Q!B0Z&E'fsFP)k'Vc
#+$@EG>TYH</58gYd9Y&p=o2AKK6e[G,K5,^TVe_ql;,.+<;fpQn@Q(s;@BbJEj1LYEoLQ+7rNhkg7sf
LD@WR_%1sJK@Td5XY7rE'ftq/GI$d+$X/Tn*Ci`>rV`<Nm$aiUf<Up%KO_lhAT-;e!9'Ef\"(ZFlbdt!
)1Ag)GV^0Q0*PJfY\S,jk<?LR#8R7S5?(5c2FlOLGPsQ[?j'2'74A:U!-T,r*b3gB2k.307@4Tp<N.oR
BS6nW546FWlh`94tmXsB6^,o=.0#JK5u!0[Ja\CgVq_BI<O8hQWW-)3,J0-cJ]hP)d''hf,OdXMS1gY;
!*]&_^ta9C-PpsGac"oc%5^bCVVOqcL=/g0[c#2Phg5;dr/t'0!fbV(Wq,fIWQhd2fkL\P8eJ']ed;tk
)9/4-XF-Jj7JksJ;`cbiIs$qMu\1PeXAKn\![]8cJBFF-kl;_'TTpdpO#B(T^a,g/M<2l]/HKZ[Sn>uZ
1Ad-+IeH-Y;snGWWnot[tYR=FH%;]]Zp:BdHFAOC_*<FVlF!C!+7;McL=/gYH_RI8!8I&<A(,/GHl@H(
Wq,b*HQH<(S%LG.=Jje]ed;tk%j=N_j.1Y<0^,@j'D#BiIs$oA&fRl6j9Kg>Y6+,@da^YPkc4Zk3sWK3
*#'<qKNg'B6^,of@Vg5,>#_N.[ST(]@]3_$Y@$h!28b4`8cfuAc"8'aj10Tgm_Ik4s;]7Jb@gE4Sl<$R
9K<9@bnYCB]mEPNRRaNJHtP4iIs$ojPRBEUFrT*F.BD>)fUeM1V?QHMtEbp=h0s\oUXih9C/5.Ked"G+
$JlRboEYMoEJQ0mgLk6q',_"8D*=l3*g/Ui#6rTGbN=ta[\S<DE#W#3kGFEfK6tYA\O&_%ibP8q38rHq
REUKp0eF+hqkm9P/Ue[a@:LaG[(H"$%IG&AG\<7BhaF9dG^Y_fTWPj31'4DoOI=u09l:TP!<dTiJX^Vm
A1?;`82AL#kO<.J)'8*(KKSN9-9OX]eeFTjss1*\C$'bWlh`94tmXsB=K,/=.9&,UCU^2Q"r%$?mbTmE
'p"s/Gl1H+3pf7=&Ab/7-pK'L+lt[p4j)A>Z"M(T_*elfK6t[@D6L@?gl`V,e;:ohnNCZJ,eD4C4BUh;
Oa3c1KJLsq[4sqW<83Vj#L=P*Q)J!!)1Ag)/]]n7fFR=s*:H)LLo"JNmi&i""pm'L)\!_0`^E0<c$nX4
XW2H,(!t4+\W__J?EFJArb>WAco3BGD7'RKU'HZ?"#8M2]g9^7JQeT?e\T"rr'.ln*/TG_3QCYrV)5`l
Nd+E(pdLP[bk'`IHpN19e*H&4m/8!p,rFg@da^aKF&SZk'4#N='0IYW@F7_a1Ktc_[U%k`f<&AM$m'Y\
Wf;7`SMJM#ST+>bi)/nE2q'Wo^OR-c>Z.<Yd%[J=/(:F<A(,/GHl@H)o@8f*HS_''qD:E.K-8J+5FK]4
2VM9_T%Tr4GaG@<On>XhSn=hD?pnVN'VcqK-g#1l*P$8Z(2eQr-(hlc&*u]qm>5T4"DLks$Y0Dq\R^S)
@/68_*'HQ@k`m^L1LEGBC?6fKF),gTG<V#jhn*-1WS`?\H*N"42VM9_FQo&P*MLs:>b:F\A[5AD?pnFp
<f/,hTTt#cYpT6p<IVEQnYh,NeH5+Nmi,o"0SnQL)\!_OaQerlumH?Y-T'dNP..'&14JPrkH(e7b%Lj[
k6?G]pJ[!hs7m7pG[>OrLKNgs6'1OCEcMt+F^Z\p=qK2W8&lkiK?%jRV8GO5p%BN.skp=+\Z"(r*c@]Q
haNOWlh`94tmXsB=K*Y=IT.rK+DToQ"r%$?mbTmE'p"s,l,?t*o<hFf3\<h9^J>/L+m%-nqW2f]MV\3^
%?lDfK6tYA\QUR%i]mUUT.RGklW`HGD6pVHtCDA2Yuo3<OqhO#A.H6$nmhO.q4JVI^l,P>]TmQ.e_0W6
CBO55<s=ripeBU[Qi#FC5GcWrHS6SO7hk`-$l,YnS5;AG53o%">1)J+Pt5s)."^)7eY5h[+iiFqFthBA
bOF=6CBOUO+*>LDN<1aC'-)pGD6pVKTUcVUT?@pS8L,%E1OZu]MRaK!C0/l@Pc'h2mi[QffR(ZA\o8co
V<upF.?PM)fUGC1V?QHC[@EMQ2H/OrTAFgkeCP_hYGiB2th`]QV.7ELZHcrK_P^Q#D%s&S`,8X@7,eiN
hl?FWa&.<mpb_o09cb^3oocUWAdi=;YkVSHY7Ss9\@]8LF[AXW@F7_a1Ktc_[C%mL(64k=]bo[cg74]K
ed((LE+#ZXFn<$p<N.oRBNl*%S)\.;cPHHO*@jQL)8![-2Gm-_tG8t]CYcor,'bI1+2KKP<ES[;dmEFo
b(!F>@RX3frf`Tg(jA1EjHJ2&qr(G!2a5o$nmk@,5[H`s8#+8mH-Ak-TBs-HY7SsbSSr&5K[k&a6>Up!
>jEN_[C%i/gW_M5J+!ZWnA&uS[R:tEV`@E^b,9*n3WPH4ScmL+9,QR?Va/+S8J7_l]'q#p;Xj-21M$X?
:O@-2(Na<[Wr#tZ$1p=b'^&-+#`n57TI"mdKaAnmgLk6q+?f7D!^,?WcIL'&'VuK)."`_PpCk3fY\Y.j
k<?LR#/L4]MR`@8cGs!LGu6U[?j'2'74A:U!-T,r*b3gB2k.307@4Tp<N.oRBJaK_hK89W%-D*qS5ekS
`,8X?a\sMoadk!D/[SC2]ltchd1O($giGU(:M[.DbjZ:HZJJnqNp*kf3RCj7C4`BELihmN,cia!3!2IL
)8![OaV<qmWNZADDN5NS\6hl;!*]&UDmpVS)\U\gOQ?kS`,8X?_eeB.(e:TVrQP:>\3@409l8Vs6)sUD
<<hVVDd?fHY7SsbSMLSNeFfPNmhiW"0StSL)8![N?.VZjnLKScfUD)M)B]WCQa[=D0ii6s#r'UKs-CtL
p'>)be>%l&MD1[Hs<!/%tTBYXcc5,>lc9]mgLk6q&2?WE$MDB<TR-TGSb^>GbN@5fJ/.+8\M)QQdWpdf
K6tYA\Q0E3BW/a9i\`g52O98)."`_20R4&b/-1FHtMgU09l8N46CKn@3#J7ZZh-?b']0hF*J>LS#UKXI
CtKO1V=:]lg(3[f=?o"!"Yk/V^gMW[1DnBD[\RX$"F*AqNfRnXMEl/K"lf)NC\kCK]B7Nln9hn*ia]p7
!<8+34]1q<:#V'L,*0G!'1`nRlO6aaUPc$hAC,9'1ViGPH`ofEI,oJ^bti*E'p$IdZ8jAm;@s5F*7YgY
r@CV_M"&"oHS3sF.A8S)fUqQ1#,SPlrs+D2fBt6Wn@P8Tl#!pS6dujE1OZsg^ke`ci0lja(kQf@s]S9`
t=/XG8Ks+H9tjUqk)Nn2r,mem+"M#CCU><`SMJ=#kO<-J(3,g)cc,0C*/h!]ed;4jss1*W1eu.WmVX34
tmRqB6YTD=.9%a6P"B?V(8Km?m><in3WMG2#3o$*q#t!=&Ae04RA'dL+m%=p.#QU]MXrsT_<q^fGh^;@
D[oof7kT^=1nY]Esh>4Q**+I0GAeC\04N_l0n!6epBJ/oA<[Xa$m/?'.4K(P+:X<"[D]+*+-K<=qm\O=
ji#EHu,m:GU%QF\04N_q+!rtE\kc#2n&fhfc.g<@DWi]FJPurF.@,H)fV4Y1#*<em,Ak8is/e<5Aao?n
:\%%c#L<gCVVOq`c+;4Yd%\u'?fnNEgsgCm;DL<_k^VA>taRl>*%8IQ**+I0GAeC\04PufJ/.+Bu-c@Q
eKK\fGh^;@D^$E3F%CK:0"mT5$g\,)"o@B5aAR-\H"cEXFn;Yj87hK#`j)_Gf-/-FV+==dh]$;:I5(&`
!*%g?"tJM,&%G9_'bq,p6(#+PqKJ*GEK69lemt'fat6/_X4hRIsn^N\XqIM>3j5r^\,R@]kUSHq'c@!a
7\)[rINK_h!nZK0j2h4*LI8nKY8r_@=Eds8;.-GHmPjPej6s2\LeLmIY.&[Aa'FP&=-OHeSr^G!:qnRK
d+Z8&0@f#qnNB@DI3NPct?Mama/=pMtpV&UoNb`h[/%c^!&(o+Pt)m(7Hql5^9*)liUTDgR[d<nOf7YE
&"$oO0m,[)#,`*@hACHbC9/-["mssg\mt]piH:,d(?KRD-aHfN^(2HpD7r'pM5HCNNbIaqa!PtX<Gm*j
Kb;5ii.),R"D1eIUG@D'-:kZr;d!2O&VApW-r%pj87hK#`ggerd\F49<u\Te35Ps9j_"tqukuPVV*%Gm
dNbJ\q8W@jtXM#IY[Dhe*N,4GBfo4?-]4cgBcM"&EP8F%lMW2LiJ2CP1%n14tmL5>6pu$"Q?':fcMs>n
4-Bf>ZVB<@rD`DPb0'\e0=ecW#TFR`+KDCO0u/!]TK.7:$7Fnc2ga>["TXH0+]2(/H*rJ:-f<.8cJ9rj
`f=+Pq?8JWS%+C*7BTCJB8)N64r>r#`hrNIc)_^[kIZ.&?d?m$UpFi+?WP-rdh8;jVIWr.,IJ@(5af\5
^9*A!<Bi2(0`Ja2plDM")\[WKd+_o&0@fk"FtED[:TouAQf1RdBnUca]s(df1+`V,MP#kr[s6(ZHj?d*
pUeh@/&TR/q/>NgDAF,]TT-D>g.E/,98\tW1.`oQMA[lX_=;,CD9`G]&j".9SU$qmgpQ*\FG;4EP]ahQ
eKK\$u_']+["7oisg4,Js01e[?"D:oS#0F:CnT4\FG;<$gSr)Oese5;1=,d:rePSgkcA5<k4GY?=e@gr
!q\J%NB<\ZV:$M)/:6,de!_/i0-tZ7V03qjF02WB1dj@A-sXuHkY,$WcB&E4tqMa03AIOKQ<6bhm&cLg
$R<>gVWq5lt;93E9g/g>#\e<=lWU2/"dJG>POT2Knh-N5Ob5Jgrt=1c"k*8R_H!qq$Fo*<Fm9I:=nn2>
SQW`]J"_hn5-<"5GZ'L=[-E2`nI`sl7`MXMAmdolsouH)H(`?lQG%UdhaY!2;s\[fcMp;W1.HOeus5)H
eDI8nV53<)>/f[au'D(VP<;_f"i`-p0\!B*?M1P=&Ab/6mQWc3qt,Q(2Udj_^/II.Z,=8L8HW*;1='E@
<!jL6$+ER>^P];'@HH+29IQ`,qP(q3f'q<Pq+82?m<Mcib+&[(<>G/KBPp-\Ur67-8N4eIYK7ZE@fs"M
QUKTCG1*D,+?6M7em4^KZ12C3NFboa`#q?oie6I>PE'[@#BAiG&#cmj1;8L\C5&!N@ni:VO:XC0#fk\'
*(u@mu*e]8m!(V7G]_aZJ/LenP7"!ib+&[(<?!.3"2\MG1Jsle*t*H)5;f'Z(,>7K*eU'*2h,i#2CuH0
7JX(@<!hOWP_iT@Pc'h191HM%.B+H+\GiVb>7[_PciN[JND"h^g3DCYX\ElU4gLjIa$\uYA`<'hbgtd(
P(BB#f_<*B^JGom]:o!A)EXL?dX9a?m-4o^;^[J=7@@p&8NQ-XoK+QhA8CDPd!+_crs=cWlh11nLh`Vi
cbZhFPq\eRCM*QPtUB%?&&*-94Q!^Xt6Z,^h:R^_POMI%UU"1&,"1eL1LBF2nUeK)E[)#A`<MPi3VBji
R6@5LF7)TW@F7_a1DcK$^\51n7W@'Rj#>ISs9k]P6W^Ae=?]q::Ni<-@*ibB$M:fiM"#f`ck,#ECT$jp
gA>R\0N$oi%&*<RH&CZgOQ>ZpOu8Oqu^:4X3DW^j4jiD27tSIP,08q:0;Dr3'AWJi1f1YiK>bj^fS*bB
-"oP%IX[k<7qMj&p?A&+PpgW?at20q]U:7H[JQR-2[H4[A<>9g2:OD`&eFs$^^GNNuEG2Q8$F:`-W)G$
+,@9?iQXMPZ4eG!&0\sIGn(mrD@&8DcDuP.",JI_u%<I2#F&f*o<hF=&Ab/7#(Gi954)iNBOpO<N`"eJ
Vag($^]<.NuE@iUT.QbklVS:hA7eUfcN*HE(3j<K$jlN1;#8F.^ED%Q2U:!nZBS+0AC'BJa6:#CCU><A
U%RlUrkkh#*21)rX$WJlo"?Xii&iQFnK@,A"BiS#);l+9="0l([0#d*2i,h#$`ss03j[:h[/ja,V(fpS
A*GkE67U`E9Z?^7"9o6qpF&FIC8`hf*L>;.\_-\2EZR=B%nCt7,?-LLj'co(G:[fF8U^hg7[2UAUCK-E
R!1c)TrI_<Oq5l^f6'_KhGpr*0)9JVlEuo+7Ctt0.)i(8A!n#3ok6+/iZkm;YkX)iI*FWZJS);<#M^N1
=/TlE2q'Wo^OQOqdQ(+^V`6BS8AhP1se`lE2q'Wo^OQOqdPY'^I.YbUO7^^27$?h3f",<:rCjD_pSOT)
r;B@ChFn2pTq18M@JR3#J*G5:0"ih52Kjq?]5S_A0!dMYIBAuig3^VJP>iX2]No+FBW0FhqkOgL[]LoA
Ct70^[0VPAPBZc,0R:,k'$SeEgWc.38l-tV)#So)&$eU@@7,@%I]3`ir'A/KTU(andV:3!.aNK`Fb1[A
Qf1R);c7*`;<iqX?W"u](NI\2KALTZ?!:lkr#dJf1F]U-`?Q\^[mq[a7eoTO%n)IQL5\Ej[5;^i!Nc#g
#KH-`rM%fI5+@$hshkCqDt#)/4n^o,G/??=7_0=,O9O(6+kVKI5+@$hshkCoBupJn+Vj?`*5PDmDE`>C
>SGiPjQaWLc:cq01Lfl4$J>el0"f2F$m;E(6<jb8=ofUUFd1pI<%L1BLCG0db3V;.rX7&7UoS]\!:jK)
.igD06XD.:i=M^oVdXW-Ut*(X!"3[Vh!/Ak_i<4rJhC3$s3`r%5tl*Fj*^_p'AH%1i:&iQp5V,*UGT3J
?`Z$ej6ss"FW!s[,8jIpm=D6Fg01_"0@,?bliGL9!mKpc1mY-h[e]mX?@fmpTZ.I$DP!(ol]b+e&lfP]
,=@F]CSNV^392g5]bMJ@3*9*M;$s3lX78skrQo8J1bXYF&].^">C9^>J+_l/2jkB#NlnoD\/72H7"4<a
5eE>:i9Xd9Sd"^g(eU!'PC+0^XUL!]O4G"EQ4jU.#?U:LZ\1q]\gcsYciB7Du\7`et-l(*W5$3iMUAd?
1N\EX4[o+k$]9gqdPLp^Vc>UXhMXBrSUHu%_p!<mq"3+%KYTQXlK#epn=*=9gHG&'cVaF*Fp<]5N[\R@
``d!)"2_fB,+]tA9N5*MO^I][[[/ki^QJI>^CD-(]]m/MbOgS0m<XBQ822cqRC2)OHGEbe8c7hmJGiRh
,p;`>lB+J1(:re\l+a1BfrR"GF7YTWT\^c5.`K]U%5R/_\p4!F,LsOq_?n>4jZYt(tmM3PY"sMNmC&6F
pJr1<lT,Fn$fD.il%c-a1L\VDr/ea=ariSUat$qHr9!?U&Zu'eo=[9aYnN(BY`S'>]6XbV>g!'MJ`^Q/
Sftu0k@rU;cI_9aq]U2``'6388jmm_hfPs%A0AH;cTtK$o"3GNf/t.AAE0%X/OrUQ)fcEN7OY\mHrk#h
iWY/;8K4]f,f\_^_Bt:Z(O7-\3;lt:60T&7aI\&g<LNbWAdi=g>c#7QpQ]d(:8i-A.2g@U5Z;F\"<O9r
iXf@YB'&Q[]\D-AZM3:!1Oa(XQU-9a;B6OeXN^Z>L.9(G:gs>cl>fB0m"]-:gr1gT&P9=RT-OTW#'$^6
MaLKZoc0ohN!5<g)].G-#rMY>45?<?0U,#*p8=_N7+MZ'g\D3;V$!WnIj%=9>^)JL3n'6es*1Tm;\k.^
`Z@/=:s&>1hBsJ*fd3Lf,c:H#)ps*La>?X893:*m,=>3Ep[l+BYXmjMHCR8?G`I2En5<qiL6cem;\;.^
]84d=;5ma_S]&geoBp4R]:DqERK(sGATrS'm3j"j33\;F7eFYWcIKHZ@G2QNCm:hG#lK?b`gVc!8s0CE
p[l;Ld5%D.TdO3;SqIA7FL213n^USQK)VugVq.Sf+7+QS)*f&ko?2,nobr6L!-u$5GnmD6PQF($$=[sJ
u*JM,Wnmn=i4Y$mVbt3bpPXseZ=;/JYsbU:fhq[=OJg=;RNW>4Wr.RI`6l9,Wnt3M8NH<C26bUm:SUjV
_2=`Im6JKUeM't8-s(6ogAkg-Egb,5uT1-ahpB\8o$VS!,^tYf@Tm_KSMUg"DmYj45]u1VTp>$abfb#g
$`kZ-E1A#^NXZ]T\!LpHg^kN+%H3+XXI_,CQ;qdEu#X,X$uDVrd`@2.1^Q#%D\O1hF*WE%s&X-BW4_jZ
4<=4!R8UV-7Rep7]$J5[&r+adAN__jKL[q5KhBSKCf>9C0\=:_G<Rfb&N[HGLXUdeBgnJeQURAbP:[*-
?EQL^mjG0^*!:1aAh-;R[7mG(RTn3Rj6)W^;T[k.Gj2VAd^9"1k*2_pm(9Q3q=_XV$s>%gRi.,_r#UEp
G3B?"5+bp]Opgc>IsO[8J?C+"ZKXt5F+.CY?br@(pj#*oL>\d09d/NV9I(VQ"#-P.GgfbO\q!gZH&-I"
$ZOo@Pc8T5V0+;ZH12"X&\/UB78H4e@E7oqT=jj&5*`JpuFrGmEqF/UrmF%$`pG?=qt@iesB*r!Z/498
'7AT1Bb'_Buo1OGLcj/AKb&gX5$Z)^k\W/f"pqI?_H3;T1f66;l,V+c+TMU30Z:".B<uKKV?h:0R>+UU
.9OOO(jn^^aHNM!I'4`j*#LWR-rihD<(ALe^eTgnj2sm/%473ISd=!\fEs$DFk>&+&gWj`NOI2`jgI^I
@oR!m`t+@.*!Hi("W1(["$[_WlfVg"NpIcr;Ci@3pW<NQ/1?!F>fmc^IYkY+OpomPY0lV93p7N=U+Wrn
Q.ipo#4_R.Y%o[S.^7pZ)h=/<'Lc+%+=S`#O]Z=b,HYGeRkZ]Eg#DcTQ@k&a7ccW.S6M66$"7JOVBGKS
Id@Ua/YL`D#)/64l,g#[KB+&Ia]F0]24mj#"cK13"b/(Dsc#L@F$#5[(EWq:Lc8NoRKW3&3j4ja_(WN$
1W&F6qnK35;HhpAM9[pC,tqf]1NqfpQhR)pP6pf"!A9W>]@<[,WE/%6G?l]qG^p]<I8fTpD;LY63u82o
?g>$rsTR5:PDA>W\D/RHn72V:eQ6g\D:8M)quS\h_7B>.^?s%I_g0SpM%\BC<Q@8"A^)m^06DcQJ;cA"
orD'o*AJ(!PO\>0Q!^sfjc$*>"cUAostVg^S$4cEf2i@2lhu?&B]GZ[bY&K)t.,=s$[>>rfVUi;Y+hYe
oZW52i#S"WKHsGdZVMYEg0f!MRQof^Z&K']]F#koO&]@56aBMG]WS%UY+L4*<ZM2m,NCFWOGJ;T&$J1Q
>TLX'p$GjFF/5aYug3l!'8;P@F$t?[#rjBV$t[f<];"<MXX:3&R)%%2Q!_WTo-Usa,b*:IWUeOA16LXQ
MOY_HrY.%Ce77nB<;BI58OJAMX.BBL1`Hga0lQ$a/GN'(9+q^D1^+)nW(@dfX<>(;L!2`SCYu@9pI)+I
[U0ae>LXip,8"W5F125#9WBYf9u\=U3`l)iRuKHZ$f9d]<Q\B=_H)*&9to!52?o:4mSo\djOKX%'5)3g
<s^VX=f=n,>\!U%c4?d<9IK^Xb4SVmS=6UYRW-m!U[l!<[kqmS)n/WQI'jsm$AYN:oUMe/`#!oEZa>&j
c(QmJPKZtEI($6@pKq_a75L-M<:`rFQHO*bPHX:>VXo[FHG'XV$t[fQB1E;iiqYp(QU[->sPAe>3B)mR
jtgnZNHMlD53.^W7s%\SfH1F=<e=]0+h:4^BL_4S9hG/Ru3]s@rW;;ac5m^mN2l\<n>jtQH+nijn0[tK
9K4T;C,s@.qdBJD(9FhO6p.<ZZYccZj,<mf@Q9+>iK\Dp1d>]'p1^uHI</L;BAa_B0[^'Hk8G[G-cR4h
\$j0K;(pJ.,?Ps#Na_>7E/9'Zes]V^%9>ghA"s\DopVIjOp64r!Crj[dtW3]3UI.lF6S)9L,#kDIWd=c
NWj9:g*LL%1U&oCci(,2_4Gj!OmK6.4B8jARL%)IAo=EhoS+>fO.ti)btmuT6hl0;u9X`K//_F\8X>l0
AE\Crrun-s-!=egc?e:YLZ'C[_I!tDdW4IFe67V;l.'4`A?L8=^!khK8*V5=5BmuH^_^b/<gC.%a0rsJ
4%j:bfd584@FCgO6MX76b:-@mK]DiHh6n.&oJJ7)Tq)6OuB$Si)3m9q=h`$F-7!em81KY<-@TI^30V*h
W:cMWH%]Y.$$/Ug5'Ko9:G,\)k@]<d^4nd"J:PA30U.tW!0],WEu^S3Is+`X11UfW@/95but'=J5;X!P
o?2+psZO-)oS>+nh>uloreNYUo@[sd2@L*%EhipH8`p`Hs>%9LO0J:+PWL&%5QZN]nI\a.t@0Mk-"Z28
r-i$5<0nqChVXOQMLr0n&RQRQ4P1eY`@8-B-TN22`\cp:#"R*_i+hb)A]V>oPBa^kpC*]Y%@JLopG9"R
WaB9NBA<A62F.k`gaHkRSS+BM0=S(NBA<E62J\A`gaBgg.un-R:__c$p5]p5rqUW`ga<cg.uk,\Q4usM
`W6D;:``tI>d'1/`q31NBrR'9t0NYO?>/g]Nu$t^?B[EHeUb.\h?(fBFi_.>+`9?]2ZFF34Y"fVJOX!e
IC`MWao8f.1)'?qhX:G5#tT_E0BK$BqH:$UILM"$9K]q1%lZ,pluP`Uj=mfjokHdX&9_PSWiUU4-)<_>
?D,]RRWPn#s0[!+ncpn\@0Vk%ZX3gY\I.[MQjE"*b!ZoL2V(J8ZGj$A4D)LUJb-GSX&[M]+-]GM[N9X]
a>tt!pnXjZ68G>KL_E*m*Y$e53$"gm39ls\K9/cg<2W/To[d>F<8+^HK"*7gcR:oO/)q,WEt:@.00oq8
m0LbZVhj;LO>etoWNFT2l^4/9il3a-T9n;2RP+"O]_u$cpPAuO4h[XmE>c>f;=iK>r!kf!BS:;k+V.eq
DXp?G6f%f9eDi]A6Qk1X!B2`s6_fTK6qckg$Yrn<K#^7TC(ZJT(+H"=*.`U^DSpLf9\!cEl>BQf?L)Sq
-kpdfbVL=mL_.=VNh$a>>9?iH*Y#?2]sST;&E[BRZ8e7]ThpTdLk\$i:'K@\>&O!-6T8KUbr9PB-oaRF
9FW73F#K_Y,;&H.7j:YA2e?g1,3jqnkcE?kY"pdRd(-T@'/P#WqY8V*grBUB6boV6$+HR>YXkn;m=em>
1LY6>Ed:SS?k<lmup%EWkt#(!@D5(ja(]EJkjUYZ8,C*hF'1MOrn)NJ`COG`@obV8r@e#qa&'UmIfS/$
3r:ePp";t"99`8/YBG*-0j9E.4[d!2cXN@rn8RP>$b9)eF7035mUj:cYL'>lfc'Z8LA%C=W'gH%JW3:n
7aH,rW"aYp4]G&IY.&KV#p^F,j]_DQk%R`E/V+W7'5tmKZC&4!T52.Ypn])R+HjMb`0G"pcOe-`*k?*X
U4!/R+6_6b`0G"pcR&k@JKS1.,Y"(>UO<26(FhD)=W<i0j"[QLI,q@e`#OE8XA_$NCGu@T>\&7@?'[If
.DKU^?pWNaKd%9)CgSXN7/oMJ<@Au=9fq'!nrP?:0"gR52O96)6AIO6NJ2q"fEhT8g!M2mL7[_a.\#)(
=ke0,BIM%%R(@+F:]1WWc0D8]Sj<V=9fq'!]l,E:0"fg52O96)6AIO6X:cZjbUg@\DU>?gTU7#*mC1k3
qt\!S'4Un3(H7u,5IkeM!sdc<1Z8#U8_]/Ari]K8jLDO)6AIO6TN7-L6E@A+AS8;%CjC4)6AIO6hs7lL
=9.l+AS8;%CjC4)6AIO6b18VL(eaB4\h>H%CjI6)6AIO6[;3@L/W9-4\h>H%CjI6)6AIO6[]I\ei-^LQ
bGRG3lj>*UtopLdpYuRmP8tjlepf";6U'GO4#r+J+)fAoGZt:[\Gp6YISIVriDBim-cb?pStFng7#md7
f[.1mL7[_a.\AT#66TW.U5:(!u!D5#4(4-;#:Q15SpH;'pLm9&T_Th%R(BA3f(LLKe"R"?m=aY?laV7M
KKJYW<u^'qS5MCS\[A^3#'+L6slt2'pLm9&T_S5Q\W*X%lDW3LlmHWWkoL84tmRiB<Vk0%[@/)m1NQYH
2L3VHi2dS!rmFOgUCcpPs)eJ6hIqT7B*&'$nD.lN-_,0Pg"-%*^<J6mL7[_a.ZaK%DrLah&`KC]E[/"m
L7[_a.[mV%E%GQboWe3][kLMNWCSMB<Vk0%cnsS(f"+Kp,JW*2;escB<Vk0%Q0gP(N[dnbIR7c?L*f<H
c`$Y%eK$2B'YHsQTI9P-LCW_fRA8#-1$C+?gdT3g31]j?c\88-WCaMYq*UXbam^)*L%jd@5:),8\KrfQ
dWptQofqCn9HRX3GJ$;_[O]jE6d5VDU,"Y*p9KLL-s,C[>,Wc#2l#^1KXmS`rasn(9]mHW%7ojQofqmM
a!1*[&5H]H^J5U!7$uoK6?[//>0P`hF*&jl/Q@!S\[A^4B=KKq`F6CS.-%sbd*iJ&GA>I^7Uk@XfA+Z0
t("=NY<bFI2P,;rm52iV)5o!?k5%C&\nY6c<qZ?*m7.;0Uf)ols[KLC;<!pcJX++cXXN,)hufVRlsH+8
I`2Og_m2GcXV5k)og?,RlsH3=Uhm]g_p#poQ_tuBu=o,DR[[N191HMQofqCn9HPi=i54$DRYDc1T^\eQ
ofqCn9M+=_*[kNY[?&Zq!@o^f0DaYmIi4Ck;(sEF(_]e5*$HLqs\2X:;VfJ.AVGcU[n.2DA67OC7<#I7
f]DqmL7[_kHV>!]7@=XKrZVM?m=aY?laV9MffS:M$d<]qS5MCS\[A^4;R6*\e5a\U@a"nQofqCn9HS96
$+D&>XdlZ'/=\8leqA:+hJ+=,q<.gklVSRG6[Bko2q^=E/_t9?-O8%5ub@OdK_+.mL7[_kHQ";D*FY6k
P4@2g[3!BnFpQYQDgh_r@@:"puG@R^"L;:%M=dXG6[Bko2m'^L;B\AD@b3+;?LelG6[Bko2mX9L;B,1D
@b3+;?LelG6[Bko2n0hLV\Y_Ae3@#;?LelG6[Bko2o<sLTtrtAe3@!:'9o>G6[Bko2o?)iHQllkGQh45
3ZHGE/h$Tm:"^DB>>bSc<qZ?*Xf;XK)!!D#Jl^UIn1idD_GDi06s:qHp3kV^DL[uM$hiU!LSbT1KXmS`
r]F;l:k6fPWiEng_m2GcXR"#`UtQ->Y6(kA*scV_<8(Rp(l4Fi%oFeYRWjX"gkbC%K`8j4+h\FGq>W%K
lmt%bhO);K?n$.XX3We.U5Rf04XDYf"pOSno,VTput2aE1F/BS[=d/U[kDlkPLKs8`/s`b6oZa/Ud.P"
+-D4M#]^nG6[Bko2m'^L@KBIAe3@)?3BULG6[Bko2lL.L'd(Th&`HF`!5")mL7[_kHQ";%27*2]0/ikM
%-u2g_m2GcXVZ<__?<.@/ZS"gY]-h&)k%D=(lkY9D%cCGFDr3p*CS%o;'&(=^Q7'n")t?XqfsGBjuqm#
+1+T1KXmSa3$(8#W*hW>XdlZ'/=\8leqA:9ttNHEh^ENPWgc5F(_]e5**ZDLos."X!iC(,3I0Y*IJodF
V%i8$<L+$^dQD;iG9N6`o?`FkY"mbMUD_V@dXY;lX64VM[gSK3$]tY7Hjmf0m<ifi:C&lA1c\srUO^nm
CuR'^9-0$PE_SiOIZ<S`S+(E#g!8$>"u#Hk@0,.YL;$0l/sDdS)[Ba.<Cl]#lq!LS\[A^4I1W$@5)Q-g
V`ZNe:=%4S\[A^4I1c0@5MQ)gV\-$eUW"jS\[A^4I1o<@5ME#fu%p"eUW"jS\[A^4I2&H@5),pfu*HLe
F7eL3\ko6ZZT(^9/Zpg-b<3^LCqj>J:b<fS?7G7mfu&]NLg\2;ons&ot&J!n#2K;Tu?309XKj%kdoRk7
Po#a9'4E,*IJn9\>iF_gE55GX/N/-QK,WAi^+*K_DMPuk$m`ef"pOSJC]m0',<-bO-_SF#4(4==?pqI]
nm)_b/_\m4+h\FGq>W%AYsU3d`7<jS`+B*<5nu#=Ct_A7jS32`7u63K9'LCmD\`F.U4GF04XDYBBrs'T
8W\qdLs5:n8E*ph_uAW@<02`Uu"LnCCU?g`S;?4K?n''8DGl_3$-s`Bs3TjXO->cdCb#`oX(dRb[CWQ(
*I8X$tnn!17"!6@5qQ#RDX-8eppuKS`+B*jR5h$kNL(5*2_2l#2E\U$tnn!17!]s@6@u-S&=lef75qNS
`*sG=!"7jqnP/eDV+4`0F`)9nGV;*=PojD^(I_9SLiNb.e_IRM&JP=jFL,(FN6t#&*5PUBt'SLfOcY,%
8gatR+RYDR3ujiaQ&2X7j\!]l*#]I9%keq[elf9[7:4o,3fTf_$@79^BOZpV(,_9klW^R[>$igoMkWI@
YNkQd$gnPm?J2U`S;>K..`]LJ(WDk)-,YL.j(.9]f!H!jss1*Yec)NU;F<>4tm^mBD<WD=I/knUCUF*K
kml>?n1m$E'p"s4StmC+23O<=&A_.9[''dLG3("Q2UAo>O8hc^\d==o[tnsr:GC(ilQ\"9]Ls-GN[k?!
lm0rf2mf80tjh_VVJr<r&Zc7&8nkq,nQ&q1!\DS!-S"dE'p!GdZ7_1c#/QjEG>S.ZaYZ._L.JpFJEYqF
.AhC)fV(U2;Ac*Mu9=l@Bl6\oUOZdX6ctIL+m%Ga':.kAS8BHh/Cf#Ykq'F`tPo==DkmqN8B^3NP`A+>
*;t?:B'%@HhZ6p*CY`+M58c=?m=aYn3`SIZ""86P'RcV/sVKa0mA?o_M!mhF*J>LS#C;*I(YEK1].e2D
![P,PITI;KhLOfA^$_(LG3.H`uM65dWP'OmoiWbpg*%-n3`SIZ""8>id)7Q/sVKa0mA?o_M!mhF#]?4S
#C;*I(YEK1].e2m,uCHF<B*:fIhZN8l@WobrBf9kP&f8s&eo#Rj+X]'jp*?IlRAAX<*F#?l]C8bam^J0
OY@iHBK#43D@Jm%CjX;)1Di)7fLetY1h*.3_jP-A`h;-6^TRUO+)c<D@Y-8C'-(EGD73VKTU]T,OBSpR
%A@<E0[sir"(36m%YA2\!t;-S(W>Xbam^J0O[ED7h*5]'&Dbs5k-p+UQ<TA^\Z7%rQbE2q'[QX%'BHDh
s-$K"*VBqGF9pP5iEab1GF$-+2W\BfcN*HE(3g:K$"=1@dXXhKF(;85A]iJN2COtPn-R-g_kPH':'tpf
\jXb;;p4Z+..qr1].e2/5?,J_1sh@_R3H/0GSYAp`W=5Rf$TH%qcT1]<De)Fj-E8LG3.^p.(*+Hk@*rT
^mZ%Qoi1pA\s>k?Q,5,g^VZnm(1NtHQ&>Rcah1QQ-\^!+,Ga\f,OdXMn(Y!:aV.fj14i@N,i^9WjLT"%
b#kr"7@shL)\9gOacpHm<3Q<?Lo(SLUf4r:aV.nUE<pRS&=lffmrD4S`,;Y@13/4&Jgir9Wr^N\A?r;N
X.G\&>17RXdR(KS(W>Xb`1S:11TE"K_Qb8qoqVu\qSo,0'g,.U\C6YNZsuXA2qg#%38llH/,I854isaD
@Z96U4Ln>S`,;Y@7,ein$;:%dN?"!q^8L);;kFKGSbF2pn>pacnU;'8\KrfQcd@lQoi1pA\s033F%F,9
iSW%52O96(lekX2KmI+b/-1FHt7+'7t_a!46UWp@3#J71,jq0b)?cMF1;k7S#C;*I(YEK1YbeRD!6tuO
gNt5KhLOf?-J;eLGEB#?g9J-a/K3NB&GbS&cU'PfM;9*@`7f2'.:CodL1&E4Kr&6@<uJb\AR)>DC?/fq
U(G.grs1f:2RdXk0@p5R4kk,IY?Np%b#K:"0OD'L)\9gOaM8GlumH;N`-m9RCP-/:aR`S2/;bjVmrs5\
oIPXcKa;*o&=$BD<%k=[qtrH,d4s&\$F2XD@c`[BLqjVDa00F\QED(2/9=Cihr0p0SZ)!c'UT1%;!E)=
JNkWhM;Nj?MVB1b`1S:11P%";1fBt7"oE[Hse;``pc?`YU'+`"s;-h$J/V[^eF*ciJ'*rC%d=A5($3BY
.aCWRFjU=%;!E)ljk%`pnB6CHfY?.Z+#H(b'`<m+#a&d6rgbjap2NfmgM.>#p]Bm70Y7k%FI,kgIVdaX
pA7ikk2Bj18<B(P/$muD/6I/Ce&>'Y*5Wg`bBJ/J;q5uge]>VoV3(:\!uFMS(`DYm&f6#11?t#h'fnk*
2_K/#$beY$pTs_@fXl:YhI<0qFthBA`h!W\+J99\r8?FkXS`jjuD1/2W-WCB=qE<TKHYKjP:Z+Y["l5,
Z(E)G&s0[',tnC]eeNI34GUTaHNk':6h^!q_FMu_UltN+meUMe<14<lp!akYHtn^D]i?CBt>;aMSJ-W`
<iQ-R'nu_S,uF;46,.k'Vu*lj_j.8_j.%S%#p?JXuQJ9'mjT+><#ajD7LTFi,C"q3(kWTif$J3n;4\5h
CV>sOtU&)`XOl^M$hPZ$^*KEZ2f8[mYnV:Oq]:fR(@:t%<nOu1\Ln9+C<4G)/j^E.8#sbFi/qQr^6p&D
$JQW]T]l^hX8H_88m4W!q!u"AnqQAS5Eu#4tq3#gDt"NDV9Z"a5uZ/[VJ$E-ON7CIVs7ukOet2oaHN6s
3XI]]7H9rH@&bsE@k>R%*A\Aak\F)FMNsko2OR#`jEd;A(dKaLsJaGSuSeJH^pt>)=WTq1L>"G;gH7tP
6!ob\mi"dBg/9mpR+,'p%CeM+#WAWC+"RR\oP-tBg/9mpR+,'p%CeU*u0VWrTHc(mIi6YB/JO1F(`-lM
o:a+FJJ2GH^n\()=X0,1Z#<$i[R72qGtmQ^BX>p97Il*PDsAQ^NXY"Q]th6^\R?;f7--$S#2tYZN'5ZX
g^GrpAKk45EBI4+,=r,)b!]m%kn60B=qT(`8s:2NAc/_on&k/JVfaUj8BnW/W8%o[,ILS(BgQF9Z5^(n
(/\#Bp<Lf%Hg^(+=MYG,3I0q^BSsVUN@Gk32c$F60SIb0mA?SqRiY%qMdC\;mh4MoRVjd42V)Ig9NCQ`
uCUQ4+VMcmpthp#P;^\_H[p+j5U.&d0!D2cL=)j2U^L+H:m>WadN%JMIA`E1AXW`dFT#"QX8!n9LFPI-
\gK`++!oQJn)*@Bm\pV,Nd;@5b9m^O,e>DAe3@:63A8_GD6@n[#oi[UoQD#R)\`cGNAK9F(]_?cWV*$]
=qGC]*@!gj1;Zf]d,PFJ!TIWCtm/%5K`l4j3_Gb[VbPSA[fFen90;<Y5K-ei7g&OJGZ2+6M^189)2QCj
iFeSOCD:AM3pBB"a/BcN&3XhlciVB]O)BAAF9jBe6*_FddS]g2c1erqKNm!B=OU0g5r"_:CHJ2n<pgC>
YlebaABdPW8L't9BkJJbam^E3b^s9)EpRn-Rr@n+"q-l$m3DZ)`-(7.'>L+iDTMs)09Hc+O8Z*JI1)a$
JXI9Dgil6?7;d3;;jDcI@rN?BD<Up)'^hjokJ9s^HqSb_`_UZ@p,N^7CTTWs1M[aScE'aMs@h=@>'CBW
0fZa#BA$+!-G"e2LCf$EuK"a\MKc&k)B55,@._1_fV<sJ:#M2iIj+#U`]O@9@k5^ca3o3@dXXPZmd6sk
XJ^dp+Uol2;f6kB6YRofo8hU1UfTC[r1)@#keMl-1,l&R-$1CE1aZs]TB"l#W6)T]fJs_r`:_\5Q/u.r
ar81)VIuM/Es#bV-&'R8`AAJ!)kUrL)89sA[-uK4T#d+Y+kQ>M3pBB$YdW/=@396%Z(No;>S'rbam^H1
h17$+Ti717"qZiI:+8]c>Z.=YVc60L*#c=$<L+$^dQD;iJ'*r=nW)[4hM@AY+kQ>M3pBB%;!EIljk"^3
$TnX7Hjmf0mA?kb(Q<r5BK",0Vl1dMa.6R*TCj#-h$8+:FoUD.p,QE29R&[(T?3:RuCiYDmln<_r%`mH
-*Ld$qiWNjtL9Y!*#@J_[g1ma?I14G.Tn2a12Yhb1mk`#kLL]d?1Tels[KNDSS-lcL=2g0Ck0qACY9&d
rfg9Xtb-T,J&7W!9d!TD"]PgB/e`eF([J,9,Ah'Y#Mf@&(>`K""l<PL*O9ON?7b2arO142L=.]_Y0;D^
Z/M7p+B.g4"Id"gH.@'MdV>5h5jIKe,/[[Vo/6&g;gg86QZ&9rn>DY9hcVDScBEY2o]d7*H*M5eS"86&
)A95+eJT2D-<0DB=dIh^i8_CYb/1U)3tQdS@LG)6KNGB)>Np,OSs0h&$`i28MP8$'lic#)Ta$$R#8F1I
R<.@.iJ-UXF(>dnp0n&Jq4$,3JpV_8G3>)<:$aW$S'2$ahYAu`D]D%8Z[Q3cV](i7^>MaVIFJ'?Vic>8
d9/sldFseCm'_tE5>D"W^a9a!2a4DNF,LBhOBuaYtUi:K*QdH<1g7Slk+cI#^YMID"#,72s%A5R?^C9/
o@U6ppX.mS:Rp4p@cD_is32]ZQfTOmf&KgH?VSF@t!lYT9"Wgm#9^4SZK(amfcIXEr8#(,H6j;bCVp<!
),i/)us6J:E!`@4.o3r+95`o5&#tHmXQceK)g-ZqkPri\c\s3%0GJ\m$#HAkmjXi2$e`aZVMKLV`UPDe
K=iucTZ'%SaM"X<J(9r4o;$0G.IdU<"/oep$@m^f]`mE;=t0EpTr0aA*5qH7b&R\hTnB$N1KEf)HD7eG
X)),0m:85C/k-4i;Eeb`n1S.W"??A!!`Y5`n1S.W"??A!!`Y5`n1S..#GM;J-U[?A*f-ZPXO=.^]VQ_0
m:\A$C^)Wi.>Fl(d$g["\j%<E'Z3qN1KNiJu1O.\0.1t`m/ip7a`1TS<1r6@jaD^,A@Se:.XN,Z'-5jO
gG=_TNn.X2oa-h5XNj8G_`4CZKd6((S=V1WQ*NWV;\al45uN;ioiGH!M:eZ""t7O6s:VcmAsbH'm*>PZ
9g@5mbQ3a5>%Z,U]&sP>U3tj]LPp7BltDrA+BIP6oD&^#>Gg!I2X,(,FUX(c?$cKK!rIA`&3[Aa'#7W:
X?Mg0h%@nm+nuR[pG!tWDJRef81"4^g>91PGfhfni/4cE+L&;^1s5-?1VFq$$Z8X<&;RNq$s@-(GfAD.
Z1`"^9<1NNU"u'He7@\GB?B8C?cWihZ5V.@`H#"<>!j'f6&eC[.C3;G-2?:Udd7boUkT&$:-9(?&l2rn
]g+QoSF_Tc!oGA'J!4-07#r_LZt_&'j<3Co&]Ei-'*fQOjiLD!l^XdQtZV.9K.1&RFQh7'X`m$3U.fgO
Qt72(K#LbHtuE3f=Ku[l'l?Qnu:.P/[lHJQe-DkT@n#A:X"F2%j(iC=0*Ii9BhHj!95M#))&<47T:VO3
Z((/]s1Q&.qB%1Z!u3`h@DK4D6;=Z*[5mkj$W>DaV3.uj_fjrVg@Y\i;ltX#P9:@AA$,e)=*O%hCK`G\
.6MS=n4YnkBu0Km9[.[jI]B=?o@TMH(jfIoA)#c'X?+WhFT\R(hPEd6W2$NRB8<SDgdqo3k-!P?:H*pP
^G%MK_u]02j@=2P]%sn-"!.I8&P-H<kdY8h7g,nmui(c+Z_m)1^7&q$5mcgf#Fs)Q4$($Q^:2-i)2/UU
k$Wo8Io:&][LL.4'oYpS_ZJ4+l=TkoQJ0)TYO+\'#lI#eOK10_d[%6Wb9)3Cs'1;2\qXA@$P"KIKUNOG
CR:#r8R=B%6&M.I/dQb%PH0!VVc7FJcaub.i@aIY<&E>U0J*n1uXKt#FGBZ[deQhnL*E[R_O*Pj7dcPj
#X^5Y+FI)6%Mo""cSe*$7)g?^O+#0jGEc2jC<0WjNmV2iN,kbLQ6!m)tG#OHs3cbB(<V&[``f4bABDSO
.ubd#RVF;'GX/F.t@<Aa3u!IFg/SNm@Tg88`f-08Vj+hcX1/]N:bfd]BsMWN/'W^\[=g/7Z\<<hC5IdX
B<?+<Fe[%LZ7o_c`%/K6p1o\]P\X^./!0PYB@k*h0-@>->--^_ZJY.l5/n'<Cg.AleQu)H)"Ubif3csI
,C$f9?F?d?MF4kI(L4cX<#.QWd/S;M]BB(X(fL3RfSSKl5-W<Pt4q-gYMd;j)m&*_Juo,h=DYg*^K6.G
p9EY[Zbhf?a*_Q"Zha10A\,llcjEf?Ug2n3c9\"Fi^>rTC[KKp0HMEZGf`m9BElLH-sZpndQ]4^cM8*B
(O*Gq$R`FQ7lPnRJrE;Hi<$u[,"9FOF5o=V<H)IAJK^KOK@*^UZX:mpIBTaret=(aWn"<DB]BP=3BgI4
4T67.A4F[nN(YP-b5AA7GH(8;gK[;Q/f4EO4d;+4ckp$n[\0rB*WDHib==HG>CHp_^"X!DC,ZT8(-B#\
i?`p=[gdbQScoa[i#aM_srXgYCkM(6PUd%WSpf3AjV/@lIlD&3%\B49rCkPP&j@\Oth#%gsMH@d+ip*M
MaHjh[^&<^/`puAC.[h?Wr[Hd+F,j'ifArL,Sk+nROCgAqV7C$5XOL<S'(M<NWUWG><fQNTq8r7T\:8a
[PUge9PAR-dAY,(anP(eO#a1dsaV$2bW/l)HJEi5J#&e6RPO><83iFi('D"AaGA4pM!p<!.J0-=fdsIb
F`e0fIh946rBP'3FJl*HcbOc^cN:;`J4oM^DB*ZgMlsEb]=lq:P4r6n2C)q;9U01rI5nQ4lK%i@[[,m)
8L=aD?95rq34b#+jp6"rHM;H%USu?lWa^f`-h^F^%,m4Qq*nJ+^(/GIYQkZ62^ia`F%32j]*;MEB!oS0
RcNeZ2sGeq92]0-.2\\RWZu2,^J\]mMB=>90AS[>3Uh')Sck6ArgCZM)L%@BDgT-2cN+-H(U&b8-&^X>
I!Iu$j$D/z!!!"Brs\s;W`k,~>

%%EndBinary
grestore
np
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3213575875000000cc000000606376
74200221e7370000012c000007e06670676d734aa71b0000090c0000066a
676c796639d9921d0000a358000a392e68656164e29cb91100000f780000
003668686561134d174b00000fb000000024686d7478248961c600000fd4
00003ccc6c6f6361524c498800004ca000003cd06d6178701616089d0000
8970000000206e616d658d34c7320000899000000a5d707265701bb53ff7
000093f000000f6867646972000000000000000000000000000303350190
00050008059a053300000125059a0533000003a000660212010502020603
050405020304e0002affc00078430000000900000000544d432000400020
fffc058cfe460133072101bb400001ffffff00000394054c000000200014
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000ad000000ad0000000000250096009f
002400f0013100c200c0004a00a6004100500094004700cf00af000e0079
01cb00040023004400a80025011f0002004600170105009900d9005c0072
00e500e00028004b00de011200240045007000160039ffe90016004b0088
ffb900d9000a004300ae00ba016c0153002f00430048022c012b0025008f
ffc000170028ffcdffd80025009d00e50124ffb10048009d00e600110027
007f00910012006a00cafffc00000024006200a7017c01e900210060008b
0434048aff6b003b00b500d5014bff6b004d007905d809b5006c009100a3
011701c0ffdfffe700be04010065007f00820088009900b200c0022e0343
05a000200026003d004e00610065007b00d9011301310340ff27ff42ff99
004e00a700f2022b02c603070011002b0049005f008d00a100af00d600e4
00f5010b0135019d01ab01ab01d101ee05d80000004b0075007a0080009d
00a600a700ac00b9013101310217021700020017002900550080008f00a5
00b200b300d0014b015901c001c103a50530fe3fff14ff15ffe7ffff002a
00580099009f00c100e400f40130015901ab01ab03220374041e04740532
fd81004d0064009c00d000d100d600de00e500f500f8012a012a01e1027e
027fff57ffa8ffe500000008001f00380051005a006f0076007700a200c0
00c200c400f101fb0209027e02cf04c5057a05f0ff92001200260042004b
004f005100530064008b00ae00b200b800b800d600f50111012001310138
014e01520167018f019601b801d901d902060221027102ea03b003cb03dc
04360505ff3a00120016001e001f002300570068006c007e0088009200a5
00a800c500c901150126012d013001d601d901f6023b0244024402a302cf
02de0385038f04fc0586fee0feebfefbff8a0007004400470058007500aa
00e400ef011601200129016a017301e3027e029002b4030e031003230335
0341035403590388039403c803ce047204ab04da0549056105ab0761fe6e
fed1ff4bff84000000010006001e0027002c0034003700620066006a006b
006c007000700072007c0081008a008e0091009200a000ab00b800bf00c9
00d500dd00ec00f40100012101300169016a016d017c0185018e018e0199
01ac01c101c501c901e101f601f601f60222022202280236023f02430246
026702850285029402d002d602e8031c0363037f03800380039e03b603d9
0400040404ff053205320548058b05a706cb07280748076208ccfcedfd2a
fd59fddefe00fe1afe5bfe96fec1fee7ff56ff7900010025002d002e007c
00870091009900a100a500a500aa00af00b600c600cc00d700dd00ec00f2
01020105011701180123012a012c0131013f014701490149014d01510151
015501550157015a015a0161016201680168017f0180018201830184018d
0195019501950198019901a501a901b601b601b701ba01ba01d501df01e6
01ea01f2020002000203021702250227022f0239024302430247024f0252
02520267026f026f027002720276027e02a702b302b902d603130325032d
03610371039903ae03c203d403f90402042c042f043c04560467048304cf
04d104d804fb051f05450568059e05c2061b06340655066a069806af06e8
06fc070607500762077c07d407ff082500ad00c700aa00b5000000000000
000000000000002f06cf01730514047802df009c00180370058701550025
00060254036c038e03d2056601f0032001da018a0369036bffa3034602f8
036f015602bf0122031f053a0366008c00ff01ab02e102f402e704150154
02e90128049101b7026f034302060000000005d30415048305e8000002d7
003a027d01c002c503830383ffbd003a059e01df059e02d1002004e00213
00df01c001870297000000ce0269028b0058043405fb0069015a01a90578
0182013e0288012a03d4049e00e5032302f301f00196007a00cd014a0424
025e023901ab00cf00fd011e00ed017100700195004001bb01dd01b80001
01a803a7014c020c018d01b0020d0137010000cd032101d4030a00590000
000001260215015002f0025503bc06d00335010100d000d2007a01030130
007c000000000000000000fe006e006600940227002b0045004d00d30132
00180097004100f4febcffe9001605d8058b009100a1032c00520030005d
02cb003a009200e500e500580086003200ba0099008800300298007cff80
01640028004d0065000200b8016a002f010b001100170100007f00040016
022200a6005f000000f8000a00ca0043004b01ee0077012000f401c00028
045f0000008c044500c20060007b008b008b0064005d00c2009c009206b5
05d3004f011700000420fe9e00cc00dc005e004600e30032001a003c0091
005a00a1042c0041002000490071009c009cfe4800400040008600cb0102
007d003a003e006a0050044800290096ff6a0097006900e0004c001b00c9
0069ff970043ffbd0052ff83ff8b005fffa1ff5c00670053ffa8002a0076
ffb20036008705590256052b043400de00c901c4004800db018b00b30048
00da01160125011800ea00ea00ae0000003e05bb008a04d70053003fff8c
ffd500150028002200990062004a00e4006d00ee00e5004803c00033fe4e
02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a50705
00ab0080001e05a50025008b04660230006900290016012f0080005c059f
03d703f1047040425554403f3e3d3c3b3a393837363534333231302f2e2d
2c2b2a292827262524232221201f1e1d1c1b1a1918171614131211100f0e
0d0c0b0a090807060504030201002c4523466020b02660b004262348482d
2c452346236120b02661b004262348482d2c45234660b0206120b04660b0
04262348482d2c4523462361b0206020b02661b02061b004262348482d2c
45234660b0406120b06660b004262348482d2c4523462361b0406020b026
61b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8
015a51582320b08d44235920b0ed51582320b04d44235920b09051582320
b00d44235921212d2c20204518684420b001602045b04676688a4560442d
2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b10117
3e01b0172370b10217453ab10200080d2d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2cb00143632362b0002342
b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061
b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0
112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0
112bb0172344b0177ae41b038a45186920b01723448a8a8720b0a05158b0
112bb0172344b0177ae41b21b0177ae45959182d2cb0022546608a46b040
618c482d2c4b53205c58b002855958b00185592d2c20b0032545b0192344
45b01a23444565234520b00325606a20b009234223688a6a606120b01a8a
b000527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb1
14008a5279b31940201945208a54582321b03f1b235961442d2cb1101143
23430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d43234365
0b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b21
21592d2c0120b003252349b04060b0206320b000525823b002253823b002
256538008a63381b212121212159012d2c4bb06451584569b00943608a10
3a1b212110592d2c01b005251023208af500b0016023edec2d2c01b00525
1023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0016001
10203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b007
43b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802b04520b0
005058b00161593a2f182d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2cb4000100000015b00826b00826b00826b008260f10161345683ab00116
2d2cb4000100000015b00826b00826b00826b008260f1016134568653ab0
01162d2c4b53234b515a5820458a60441b2121592d2c4b545820458a6044
1b2121592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c
014b53234b515ab00225b00425b006254923451869525a58b00225b00225
b00525462345696048592121212d2cb0134358031b02592d2cb013435802
1b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b0
0425060c6423646164b807085158b00425b00425012046b01060482046b0
106048590a21211b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b8fff060482046b8fff06048590a
21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a
58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c
8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346
608a8a462320468a608a61b8ff8062232010238ab9035803588a70456020
b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123
018851b1400188535a58b910000020885458b202010243604259b1240188
5158b920000040885458b2020202436042b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b202100243604259b12601885158b94000020063b80400885458b2
02400243604259b94000040063b80800885458b202800243604259b12801
885158b94000080063b81000885458ba0002010000024360425959595959
59592d2cb0024354584b53234b515a58381b2121591b21212121592d0000
000100000006cf5cb4674a6e5f0f3cf50819080000000000a2e31dc20000
0000ccb58117fb74fd8c105e085100000009000100010000000000010000
0721fe4500571000fb74f9d2105e00010000000000000000000000000000
0f330639011c00000000020000000200000002aa00e40344008504000025
0400006c06aa00480639004b0171005102aa005402aa002e040000910483
00250200006e02aa005302000091023900030400004a040000f00400002c
040000530400002004000062040000580400004c0400007c040000510239
00b00239008e048300250483002504830025038d005c075e006105c70010
055600220556004a05c7002304e3002a0473002105c7004805c7002302aa
0033031d002a05c7002204e30029071d002205c7ffe505c7004804730022
05c70048055600230473008004e3003e05c7000b05c70012078d001b05c7
000f05c7001304e3001a02aa00a80239000302aa004b03c100250400ffef
02aa0076038d00490400fffb038d004604000044038d004c02aa004f0400
003d0400000d0239003c0239ff63040000110239003d063900110400000c
040000450400fff90400004402aa000d031d006402390014040000020400
001105c7000d0400001b0400000c038d002903d7011b019a00a103d700b1
0454001405c7001005c7000e0556004a04e3002a05c7ffe505c7004805c7
000b038d0049038d0049038d0049038d0049038d0049038d0049038d0046
038d004c038d004c038d004c038d004c0239003c0239003c0239000d0239
00020400000c040000450400004504000045040000450400004504000002
0400000204000002040000020400006503330062040000810400003d0400
009c02cd007003a0fff204000023061400450614004507d7001e02aa00ec
02aa003904640019071dffe805c7004905b4003504640008046400180464
001804000002049c008603f4004005b4002b0696002e0464003e02310000
0235fffa027b001d062500470556004904000027038d005902aa00e40483
002404640053040000020464001e04e5001a0400004004000040080000e6
05c7000e05c7000e05c70048071d004b05c700430400ffee0800ffed038d
0043038d004302aa00b902aa00c10464001703f4002f0400000c05c70013
0156feab0400ffe902aa007702aa007304730019047300170400008b0200
009102aa00c1038d00430800004105c7000e04e3002a05c7001004e3002a
04e3002a02aa003302aa003202aa003202aa003205c7004805c7004805c7
004805c7000b05c7000b05c7000b0239003c02aa003c02aa001602aa0017
02aa003702aa00e902aa009602aa00bb02aa004e02aa001d02aa003c04e3
00160239001e0473007e031d006404e3001a038d0029019a00a105c70023
0400004405c700130400000c047300240400fff904830025048300a50266
0088026600140266002c06000086060000860600002a0400002105c70048
0400003d02aa003304730080031d00640556004a038d00460556004a038d
0046040000260400ffef02aa00ec05c70010038d004905c70010038d0049
05c70023052c004405c7002304e3002a038d004c04e3002a038d004c04e3
00290239003d04e300290340003c04e3002902c0003d05c7ffe50400000c
05c7ffe50400000c05c70048040000450556002302aa000d0556002302aa
000d04730080031d006404e3003e0239001404e3003e036b001305c7000b
0400000205c7000b0400000204e3001a038d002904e3001a038d002904a0
002505c7004c05d900470431005703c50046035c0047045000460337000c
049e00450400ffef049500e40285000207c0002c0800004f040000990800
004f040000990800004f040000980400009807d5016a05c700c004830026
04cd00990483002604d5022204d5010505abffe905ab027e05ab027e05ab
ffe905ab027e05abffe905ab027e05abffe905abffe905abffe905abffe9
05abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905ab
ffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e
05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d5
00920800000007eb013007eb012007eb013007eb012004d500b204d50080
04d5002a082b0198086b01b807550010060000f40600006f0440003a0540
003704c0003f04150040040000250600005505ab002f046b003b04d50003
01c00089035500a206ab003403d5006404d5009202d6008302d6008304d5
00b202d6007005c70010038d00490556004a038d00460556004a038d0046
04e3002a038d004c04e3002a038d004c04e3002a038d004c05c700480400
003d05c700480400003d05c700480400003d05c700230400000d05c70023
0400000d02aa00160239ffde02aa00170239ffdf02aa00330239fffe02aa
00330239003c031d002a0239ff6305c70022040000110400001104e30029
0239003d05c7ffe50400000c059d002603f5000c05c700480400004505c7
0048040000450556002302aa000d04730080031d006404e3003b02390010
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
0002078d001b05c7000d05c700130400000c0239001605c7000f038d0049
071dffe80556004905c7004904000027023900b2078d001b05c7000d078d
001b05c7000d078d001b05c7000d05c700130400000c02aa00b802aaffdb
0400003d04cd005a060000860600002a060000310600002502aa00c302aa
00bb02aa00ec02aaffea05c70010058dff5c0677ff5c034aff5c05c7ffb6
0687ff5c05f2ffb30227ffb105c70010055600220525003204e3002a04e3
001a05c7002302aa003305c7002205cd001c071d002205c7ffe50525004f
05c7004805c700250473002204a8002004e3003e05c7001305c7000f05e7
001805f2003c02aa003205c7001304310057035c0047042f000b02270025
03f6fffa0412006e0389000003500046042f000b03d50051022700250408
001503e10019044a0074039effd3039100460400004503fe0059032b0046
03f6fffa038d00180502001c0544004b0227000003f6fffa0400004503f6
fffa0544004b04e3002a0604003704a000250548004b0473008002aa0033
02aa0032031d002a06fa000d06fa002705ee00360556002505aa001a05c7
002505c70010049800240556002204a000250575001a04e3002a072b0012
0402002b05c7002505c7002505560025056d0012071d002205c7002305c7
004805c70025047300220556004a04e3003e05aa001a0652004c05c7000f
05c700250533fffa081200390812003905a6003606fa0025049800240548
003a083900260556ffee038d00490412004e03c700300348001f0412001a
038d004c05870017032900180448002e0448002e03e3002e03fe000c0510
002e0448002e040000450448002e0400fff9038d0046037f000c0400000c
052f00570400001b0448002e0406001e0629002e0629002e0423000c0560
002d03a6002e036f001b05fa002d03aeffff038d004c03dd00110348001f
036f0046031d00640239003c023900020239ff6305d1000c05c9002d0400
000d03e3002e0400000c0448002e039a002502cf001f0800004107a20010
040a000d000001010000001c0000003200000012000001020000008f0000
008f0000008f00000090000001020000001c000001020000012102d90056
0000008f025400e0000002af0000ff6b023900b003da005f03a4003302af
0021035a004303c5004e023b0043024a004e03d0005803ce004302220043
039e0043037600330374000f040f006403e2004e023200430270002103cd
005f03a2004303a200430386005803dc004303ae003d03ca006903c00043
04e200430400002104750043045d00430444004301ac006b02f9006b0636
0096023bff9d039e0043039e00430374ff5b0374ff5b03a2003304e20043
04e2004304e2004304e2004303da005f03da005f03da005f03a4003302af
0021035a004303c5004e023b00430279000c03ce004302220043039e0043
037600330374000f03e2004e0270002103cd005f03a200430386005803ae
003d03ca006903c0004304e2004304000021023b004303a4003303760033
038600580404000f0000ffdc0000ff250000ffdc0000fe51028d00ab028d
00a002da0043034d007901a8ffba00000046000000460000004600000046
000000480000004600000046000000460435017c0435012e043500b70435
00810435012c043500be043500af043500810435009a043500db04350085
028d00c1043500b3060001000600010002420036060001000435009e0435
0098043500cb060001000600010006000100060001000600010000000046
060001000600010006000100060001000600010006000100060001000600
0100051bffba06000100060001000600010005b5003a05b5003a01f4ffba
01f4ffba060001000600010006000100060001000481003604350036043d
ffba043dffba03e9004a03e9004a067f0014077600140327ffba041effba
067f0014077600140327ffba041effba051b003204b500240300fff70600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000000
003000000046000000460000004000000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0400001b0800000006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
028d007f028d005d0600010004ee0015034d007901a8001301d6ffd701a8
005601d60010037500320375003201a8002d01d60013051b003204b50024
01f4ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4
ffba024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
02b3005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5
ffba06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba
04a7ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a
00360435ffba0327ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d
0047040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba
043500450435004501f4ffba01f4ffba024200360300fff7039affba0327
ffba0375003203750032051b003204b50024051b003204b5002401f4ffba
01f4ffba045a003104ce0041045a002604ce0030045a005304ce0041045a
005304ce0041060001000600010000000046000000460600010006000100
060001000000004600000046060001000600010000000048000000460600
010006000100060001000000004600000046000000460000004600000040
000000300600010000000046000000460600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100028d00ca028d00c7
028d00c60600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000100ffba0800ffba1000ffba05c70048043b0045
0635000b045600020000fdcc0000fc140000fd130000fe420000fce00000
fdd40000fe620000fe2b0000fdb70000fc980000fd880000fc080000fcfe
0000feff0000ff030000fe9e041a00a206000088060000140000fe700000
fdd40000fdf60000fd770000fe620000fdbb0000fbd80000fbd80000fb74
0000fcfe0000fc8c0000fc460000fd270000fcb40000fca80000fcae0000
fc440000fe140000fe700000fd910000fc710000fdc30000fe470000fe62
0000fcc30000fde10000fd870000fd4b0000fd970000fd4b0000fc8a0000
fc620000fc090000fbd70239003c05c70010038d004905c70010038d0049
05c70010038d004905c70010038d004905c70010038d004905c70010038d
004905c70010038d004905c70010038d004905c70010038d004905c70010
038d004905c70010038d004905c70010038d004904e3002a038d004c04e3
002a038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c
04e3002a038d004c04e3002a038d004c04e3002a038d004c02aa00330239
003c02aa00330239003c05c700480400004505c700480400004505c70048
0400004505c700480400004505c700480400004505c700480400004505c7
00480400004505c70048043b004505c70048043b004505c70048043b0045
05c70048043b004505c70048043b004505c7000b0400000205c7000b0400
00020635000b045600020635000b045600020635000b045600020635000b
045600020635000b0456000205c700130400000c05c700130400000c05c7
00130400000c05c70010038d004902aa00330239000605c7004804000045
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
000205c7000b040000020000ff090000ff090000ff090000ff0904a00023
0348001f072b0012058700170556002503e3002e0556002503e3002e05c7
00230448002e05c700130400000205c700130400000205c7000f0400001b
0533fffa0406001e053300250400000d05c7002b038d004c05c700480400
004505b5003a01f4ffba0224ffba021affba04a7004601f4009e01f40010
01f4001b01f4001001f4006b01f4fff90227ffce0000000f01a8fff502aa
00a402aa00a40000001301a80056000000560000ffcf01a8000f01d6ffbf
01a8fff501d6ffcd01a8001d01d6fff501a8009301d60013037500320375
00320375003203750032051b003204b5002405b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3003202b3003202b3005f02b3
005f02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f
02b3005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
045a002a039a00360435ffba0327ffba064f0027064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba04a7004604a7004604a7004604a70046093e0032
093e00320740ffba0740ffba067f0014077600140327ffba041effba04cf
002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba043500450435004501f4ffba01f4ffba04350045
043500450435004504350045043500450435004501f4ffba01f4ffba0435
0045043500450481003604350036043dffba043dffba024200360300fff7
031a001a031a001a031a001a037500320375003203750032037500320375
003203750032037500320375003203750032037500320375003203750032
03750032037500320375003203750032051bffba04b5ffba051b003204b5
002401f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba
01f4ffba051b003204b50024067f0045067f0045067f0045067f004501a8
00280000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e
08fc003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000
ff9f018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff58
0000ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba045a002a039a00360435ffba0327ffba034d007902b40023
0242003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4
006d067f001407760014022200430000fee702bc000004440043045afff5
04cefff5045a005304ce0041045a005304ce0041045a005304ce0041045a
005304ce0041045a005304ce0041045a005304ce004104350071043500ad
045a000f04ce000f0400fffb061400000498002404000096049800240400
00000556004a0556004a038d004605c70023068500000498004404000044
03c5004604e3002f040200550473ff6d05c7004805c700120629000d0207
fffe02aa002305c70022040000110239002d03e100190688002305c7ff7a
0400000c05c700480766004a05880045053300000400fff9047300240473
006e031d004804a8002002c000040239001404e300000239001404e3003e
05f2003c05c7000b063f00440400000c04e3001a038d00290450002b0450
003f038d0046038d00500400002c0400002a038c0034036000140400fff9
019a00a1023f00a101fe000a02aa00e40aaa002309540023078d00440800
0029071c00290472003d08e4ffe50800ffe50639000c038d004c05c70010
038d00490000ff0905c70010038d0049071dffe80556004905c700480400
000005c700480400003d05c700220400001105c700480400004505c70048
040000450450002b038d00210239ff630aaa002309540023078d004405c7
00480400003d07990023047b002205c7ffe50400000c05c70010038d0049
05c70010038d004904e3002a038d004c04e3002a038d004c02aaffd30239
ffa102aa00330239fffe05c700480400004505c700480400004505560023
02aa000d0556002302aa000d05c7000b0400000205c7000b040000020473
0080031d006404e3003e023900140481004b0329005405c700230400000d
0533002504d400480400004504e3001a038d002905c70010038d004904e3
002a038d004c05c70048040000450000feec05c700480400004505c70048
0400004505c700480400004505c700130400000c038d0004042f0044042f
fff704000096038d0043038d00460400004404000044038d003a0504004c
035c0047035c004004b40040038b004502aaff30040000440400004403a0
004504000011038d00000400000d0400001b0400001b0239002d02270025
02390036023900280239003d0239003d049f003d06390009063900090639
00110400ff300400000c03fa000c04000045050a00450544004b046d0045
02aafff302aafff302aafff302aa000c02aa000d02aa001702aafff303e7
003603e70036031d006402aaff3002aaff30037dff9402aaffe302390014
02390014040000020464006603c200020400001105c7000d0400000c03f1
0004038d002903f70029038d0021038d003c038d005d038d0046038d005d
038d004605c7004803c70030038b004503a000450448002e0239ff7f0400
fff40370003604000044038d005d038d0046066b004406c2004406d30044
0485001403ae001405310014064d004f0487003d047a003d041d001403d9
003c0292001e02920026013effd201bd001e01bd000501bd00050259001e
036d00040260000401c0008902ec008902aa00b902aa00c102aa00b802aa
00f702aa00f701fc001e01fc001e04830027048300250483005304830053
02aa012102aa00ec02aa007602aa012102aa001d02aa007602aa00ec0239
00b6023900b602aa00f702aa00f702aa00a602aa00a602aa00a602aa001d
02aaffef030e002d025800040154001e01b3001e0250000401fc001e0310
00960310009603100096031000960310009602aa006202aa006202aa003c
02aa0017038d004304570096045700960457009604570096045700430457
0043045700430457004304570043031000430457002f0457002f0457002f
0457002f0457002f0310002f045700250457002504570025045700250457
00250310002f0457001a0457001a0457001a0457001a0457001a0310001a
045700420457004204570042045700420457004203100042045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457002f0457002f0457002f0457002f0457002f0310002f0457
002f0457002f0457002f0457002f0457002f0310002f0457002604570026
045700260457002604570026031000260457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
045700420457004204570042045700420310004204570026045700260457
002604570026045700260310002604570023045700230457002304570023
04570023031000230457002f0457002f0457002f0457002f0457002f0310
002f0457004b0457004b0457004b0457004b0457004b0310004b04570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457001a0457001a0457001a0457001a0457001a0310001a
0457002404570024045700240457002404570024031000240457002f0457
002f0457002f0457002f0457002f0310002f0457004e0457004e0457004e
0457004e0457004e0310004e045700960457009604570096045700960000
fee60000febf0000fdee0000fee00000ff940000fee60000ff440000fee3
0000fee50000ffce0000ff660000fee30000fee00000fee00000ff880000
ff880000ff88000000000000ff5b0000ff5d0000ff440000ff5f0000fe87
0000ffec0000ffa40000ff510000ff510000ff510000fec10000fe8a0000
00000000fee60000ff440000ff860000ff650000ff580000ffce0000fe87
0000febb0000fee50000fee60000fee00000fee00000fec10000febf0000
fdee0000fec10000fec10000febf0000fdee0000fe160000feb50000ffa4
0000fe870000ff440000feba0000ff230000ff9a0000fdee0000feb70000
00000000fec20000ff880000fe980000ff820000fe870000fde40000ff66
0000ff440000fec20000fec20000fec20000ff030000ff520000fd1f0000
ffb70000ffcb0000ff530000ff070000ff150000ff770000fef90000fecf
0000ff190000fede0000fed40000fe2a0000ff350000ff5b0000fed90000
fedc02aa00ec02aa007602aa00da0412005103f6000005c70013071f0000
05c700130436004505440000047b000a05c70048040000450556006e035c
001d0473002103930017049b0014039c001405da000a046e000006a00023
0639001104ed0046042b0045054a001e038d001d04560046045600460540
004504a60014059800480412004e03cd001e03160014047b000a0412004e
038d00460239ff6305c70048033d0046033d002804e3002a05c70025038d
004c0448002e0961004805110023055e00140458001e07be0027056b002d
05c7000004b800000843002306ac002d072b00120587001709ab0023077b
002d040200090329000005e700120502001c05c70048040000450682003a
04b600390682003a04b6003908c30048070a0045061a002a0487004509b4
0048065600460000fe3709610048051100230556004a038d004602ac001e
0000fea60000febc0000ff860000ff860000fc2b0000fc4c05c700250448
002e0498002403c3002e047300220400fff9050d0025041f001f0402002b
032900180556002503e3001f064900360496000c06ce002304fc002e0842
00250650002e0556004b038d00460556004a038d004604e3003e037f000c
0660003604d3000c0533fffa0406001e0707000a045f000a0707000a045f
000a02aa0033072b00120587001705560025041f002e056d001203fe000c
05c700230448002e05c700230448002e0533fffa0406001e071d00220510
002e044800dc05c70010038d004905c70010038d0049071dffe805560049
04e3002a038d004c05c7002b038d004c072b0012058700170402002b0329
00180402002b038d002105c700250448002e05c700250448002e05c70048
0400004505c70048040000450548003b036f001b05aa001a0400000c05aa
001a0400000c05aa001a0400000c0533fffa0406001e06fa00250560002d
0498004404000044066e0044062a0044066b006605a5005404970066039f
0054074100120604000c07990023064d002e05c7004803a000450591003e
04d0000c0000ff430000fec90000ff770000ffb00000ff470000ff560000
ff740000fed70000feac000000000000ff520000ff56000000000000feac
0000fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000
ff7f0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae
0000ff8c000001020000ff090000ff090000fee20000fee20000ff8f0000
ff210000ff0905c70010038d0049055600220400fffb055600220400fffb
055600220400fffb0556004a038d004605c700230400004405c700230400
004405c700230400004405c700230400004405c700230400004404e3002a
038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c04e3
002a038d004c0473002102aa004f05c700480400003d05c700230400000d
05c700230400000d05c700230400000d05c700230400000d05c700230400
000d02aa001b0239ffea02aa00330239000205c700220400001105c70022
0400001105c700220400001104e300290239003d04e300290239ffe904e3
00290239ffe704e300290239000f071d002206390011071d002206390011
071d00220639001105c7ffe50400000c05c7ffe50400000c05c7ffe50400
000c05c7ffe50400000c05c700480400004505c700480400004505c70048
0400004505c7004804000045047300220400fff9047300220400fff90556
002302aa000d0556002302aa000d0556002302aa000d0556002302aa000d
04730080031d006404730080031d006404730080031d006404730080031d
006004730080031d006404e3003e0239001404e3003e0239001404e3003e
0239fff504e3003e0239001405c7000b0400000205c7000b0400000205c7
000b0400000205c7000b0400000205c7000b0400000205c7001204000011
05c7001204000011078d001b05c7000d078d001b05c7000d05c7000f0400
001b05c7000f0400001b05c700130400000c04e3001a038d002904e3001a
038d002904e3001a038d00290400000d0239ffff05c7000d0400000c038d
004902390016043100570431005704310057043100570431005704310057
043100570431005705c7001005c700100654000006540000065400000654
00000654000006540000035c0047035c0047035c0047035c0047035c0047
035c004705fc000005fc0000073c0000073c0000073c0000073c0000042f
000b042f000b042f000b042f000b042f000b042f000b042f000b042f000b
06e0000006e0000008200000082000000820000008200000082000000820
000002270025022700250227ffaf0227ffaf0227ffff0227ffff0227ffd3
0227ffd303c3000003c30000050300000503000005030000050300000503
000005030000040000450400004504000045040000450400004504000045
065400000654000007f8000007f80000073000000730000003f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa06e00000
082a0000082a0000082a00000544004b0544004b0544004b0544004b0544
004b0544004b0544004b0544004b067f0000067f000007fb000007fb0000
076f0000076f0000076f0000076f00000431005704310057035c0047035c
0047042f000b042f000b0227002502270025040000450400004503f6fffa
03f6fffa0544004b0544004b043100570431005704310057043100570431
005704310057043100570431005705c7001005c700100654000006540000
06540000065400000654000006540000042f000b042f000b042f000b042f
000b042f000b042f000b042f000b042f000b06e0000006e0000008200000
08200000082000000820000008200000082000000544004b0544004b0544
004b0544004b0544004b0544004b0544004b0544004b067f0000067f0000
07fb000007fb0000076f0000076f0000076f0000076f0000043100570431
0057043100570431005704310057043100570431005705c7001005c70010
05c7001005c7001005c7001002aa00db02aa00d802aa00db02aa001602aa
0016042f000b042f000b042f000b042f000b042f000b05fc000006130000
06e1000006f7000005c7002302aa002702aa002702aa00160227fff10227
ffd10227fff30227fff30227ffd00227ffd002aa003302aa001603c40000
03da000002aa002702aa002702aa001603f6fffa03f6fffa03f6fffa03f6
fffa03fe005903fe005903f6fffa03f6fffa05c7001305c7001307090000
07330000058c000002aaffea02aaffea02aa00760544004b0544004b0544
004b0544004b0544004b06cd0000062f000006e400000632000005f2003c
02aa00ec02aa00db04ef00460556004a0556004a0639001105c7ffe508d0
0023078d001b05c7002204e3003e080000290400003004c100660000ffcb
0000ffcb0000ffb70000ffb70239002d0239ff630400000f047300220400
00440239003d0400000c0289001404ff001e04ed001e02aa009202aa0092
02aa00d102aa00d102aa009702aa007602aa004e02aa004e02aa00150239
00b002aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a
0000ff7b0000ffa00000fee00000ff230000ff7b0000ff7b0000feb20000
ffa00000ffcb0000ffcb0000ffcb047300240400fff90405000505290005
0556004903b8002d03d300450432002d0432002d038e002d032900180239
003c025f00190451002d038f00230510002e0448002e0400004503d3002d
04550045044d00450455002105c7003e037e0045040000450400004503a6
002e03aeffff03aeffff037f000c044c002d040a002d053d002d0409002d
0400001105c7000d038d002903290018032e0045044f000f0348001f0400
00110448002e03a6002e043a000f03fe000c03600000044e00000318001e
0318001e0370001e02f6001e02f6001e0376001e0386001e0199001e01f9
001e03aa001e02f8001e0452001e03b3001e0387001e0358001e02b0001e
02a7001e0347001e02e6001e03a0001e046e00000230001e0230001e0283
001e031f001e027a001e027d001e020d001e020d001e01ef001e01ef001e
0268001e014f001e0286001e03e9001e0241001e024e001e020c001e024e
001e024e001e027d001e0188001e029f001e0272001e03e9001e025a0005
028d00050242001e021f0005022b001e02ad001e02420005014f001e01d6
001e029f001e025a00050242001e021f0005025e001e02ad001e02420005
077d00460a660046038300460a2f00460541ffba01e9003c045a00110000
ff0d0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e
0000feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039a
ffba0327ffba0506005f0486004304f1004e04a2003304a0000f053b0064
04ec0043052c0021048300250000fe4b0000fe4c0000fe4c0400ffee038d
00430355000701a8ffba01a8ffba01a8ffba01a8ffba0658001509c50047
0400000008000000040000000800000002ab000002000000015500000400
000002000000019a000000ab0000000000000556004a071d00220510002e
0616000206310044062e004405c700100556004a0400008104e3002904e3
003e031d0064038d00290445005d000001020000ff420000fea40000ff3a
0000ffcb03fe000a055600470556004a0556004704a000250348001f0000
ff430000ff6b0000ffae027000580000ff39021affba0250001e0000ff3a
0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a05b5
003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba02b3003202b3003202b3005f
02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba045a
002a039a00360435ffba0327ffba045a002a039a00360435ffba0327ffba
045a002a039a00360435ffba0327ffba064f0027064f00270224ffba021a
ffba064f0027064f00270224ffba021affba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba02b4002302b400230327ffba0327ffba02b4002302b40023
0327ffba0327ffba043500450435004501f4ffba01f4ffba043500450435
004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d0047
040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a0692
003e0692003e043fffba043fffba0400ffa80400004402aa001406390011
0400000c0400ffae02aaffbc02aaffbc031d001e0239ffbd038d00290400
003d0296001e03c50041062100140239002c022700250400fff9044c002d
046400190400fffb0400004402aa004f04c6003d040000110239003d0639
00110400000c0400fff902aa000d031d00640365ff30040000110400001b
038d0029038d0049042f004404000044038d004c035c0047035c0040038d
004c0239003c038d00430384000a04000002038d002102830005020c001e
020c001e024d001e01ef001e01ab001e01abffa60221001e0292001e014f
00150175001e0151001e0151001a018b0000014f001e014f001e022a001e
0395001e03e9001e029fffa4029f001e0293001e024e001e0291001e01b3
001e01b9ff920188001e029f001f0289001e029a001e0253001e025a0005
0231001e0231001e026e001e0220001e0228001e0000fe930000fe930000
ff730000febc023900b00230001e020d001e024e001e02520005020d001e
05c7004805c700100473003c0556004a02aa005304310057043100570431
005704310057043100570431005704310057043100570227ffcd0227ffd1
0227ffd10227ffd10227ffcd0227fff10227ffcd0227fff103f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa0227ffd1
0227ffd10227fff10227fff103f6fffa03f6fffa03f6fffa03f6fffa045a
005304ce004a032e00130556002205c7000b05cd001c04e3002a038d004c
031d002a0239ff63059e004a040000440556002302aa000d05c700130400
000c038d0043038d0046038d00430239003d04a000230348001f05c7000f
0400001b05c7000f0400001b0402005503290042056d001203fe000c0000
fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff350000ff7b
0000feb2070e000503550045038d004304e300290239002d04e3000a0473
002205560023038d00490239000e05c700230400000d05c7002204000011
04e3001a038d002903c60041054600230409002e049e00450000ff3b0000
ff510000ff080000fef90000fea40000fea40239003c059d002605c7ffe5
059d00260000fee00000ff590000feeb0000ff0f0000fee60000ff090000
feed0000fef50000ff0e0000feed0000fdcc05c7004804000044078d001b
05c7000d05b500230000fe9205c9004804c6001107fc001b0697000d0239
00b002f300260171005101710051040000990400009902aa00e402aa00e4
02aa00e402aa003c000000460000003b0000003100000056000000440000
00560000004a0000004904e300370400006503e1004202db006e03c20042
0381003203d20024038a00340400005803e7004303d7006a040000510439
006702c100500400002c03b8004e0400002003e100620400005803b80022
0400007c040000510239003c04d5002906c7002906a800290466002306a6
00290422000a03ca00160447004904a4001a03940035035f001604b30049
04a4001802150027028f001c0474002703d10027051a002204a400130480
004903a8000a043d0027041e001602f4004d03d7002f04840008040e000a
0653001a043d001c0412000a043d00370572000a0615004903d100250480
004903aa000a04af0025048800180422000a0422000a0422000a0422000a
0422000a0422000a04470049039400350394003503940035039400350215
002702150027021500060215ffee04a40013048000490480004904800049
0480004904800049048400080484000804840008048400080412000a0422
000a0422000a0422000a0447004904470049044700490447004904a4001a
04af0025039400350394003503940035039400350394003504b3004904b3
004904b3004904b3004904a4001804a400180215ffcb0215ffcc0215ffec
021500270215002704a40027028f001c0474002703d1002703d1002703d1
002703d1002704a4001304a4001304a40013047a00180480004904800049
04800049041e0016041e0016041e001602f4004d02f4004d02f4004d02f4
004d02f4004d03d7002f03d7002f03d7002f03d7002f0484000804840008
048400080484000804840008048400080653001a0653001a0653001a0653
001a0412000a0412000a0412000a043d0037043d0037043d00370422000a
0572000a048000490422000a03ca0016035f001603cd001303940035043d
003704a40018043d0027021500270474002704510018051a002204a40013
03ef003b0480004904a4001803a8000a0394001803d7002f0412000a0476
0027043d001c04ab0018048600270422000a0394003504a4001802150027
04800049048600270412000a0215ffee0412000a0394003504ab002f035f
0016042a004902f4004d021500270215ffee028f001c05c1000a05d20018
04b5002f04590027045e001e04a400180422000a03b4001803ca0016035f
00160444000c0394003505bf000a032c002704a4001804a4001804590027
0440000a051a002204a400180480004904a4001803a8000a0447004903d7
002f045e001e04760027043d001c04a40018043300000680001806800018
0480002f0590001803b40018042a003c06600018041e0000035f00160256
00170256007902560012025600370256000c0256003b0256002102560023
0256003702560021025600170256007902560012025600370256000c0256
003b0256002102560023025600370256002104a400470807003e04ee0015
04ed009d04ed009d060b001a04d5008505e3008502260099022600890226
002c0226001e02260063022600300226001b0226001d0226001d02260029
0226001e022600260226001d02260008022600280c9600460e0c00460000
ffba0ed200460000ff5b0000ff910000ffb70000ff9b0481003604350036
043dffba043dffba0481003604350036043dffba043dffba0692003e0692
003e043fffba043fffba03e9004a03e9004a0481003604350036043dffba
043dffba01a8ffc301d6ff5f01a8ffe901d6ff85051b003204b5002401f4
ffba01f4ffba051b003204b5002401f4ffba01f4ffba051b003204b50024
01f4ffba01f4ffba03750032037500320375003203750032067f0045067f
0045067f0045067f00450481003604350036043dffba043dffba0692003e
0692003e043fffba043fffba0692003e0692003e043fffba043fffba04cf
002d04cf002d0327ffba0327ffba04b4ffe00500ffe00496ffe804e4ffe8
075c003205da0032070e0032051300390bdefbda0000fe2c0000fffc0000
006b000000730000006b051b003204b5002401f4ffba01f4ffba067f0014
077600140327ffba041effba067f0014077600140327ffba041effba051b
003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba
051b003204b5002401f4ffba01f4ffba01a8fff5046a0023034f000b04e3
004e037f002405c700250457002505480022038d005c0a6600440400004a
0400000b083e001205b7000c068d00220584fff90780ffee05a9ffff0556
00220451002d07a10012061e000c07f800230665002e05c700250448002e
053300250400000d02aa004702aa004f03c5004606d700330437003d0454
004803f90045053500240464ffec071d002205c7001705c9002b0492004c
02aafffe04000045038e002d013effd2040000110473008004e3001a0239
003c095800680a3dffb80bb600000a3000320ed2004401a8ffba01a8ffba
01a8ffba01d6000201a8003201a8004601a8ffba01a8001a0251003a01a8
002901a8004601a8ffba01a8004801a8ffba01a8002901a8ffba01a80046
01a8ffba01a8006e01a8ffba01f4009e01f4001001f4001b01f4001001f4
fff9022e008d01f4006b0199004602bf003202bf00320400001900>
<000000000000007600000076000000760000007600000130000002280000
03f60000062e0000083a00000a6e00000af200000b7600000bf800000dd0
00000ea000000f3e00000f9800000ff00000106200001194000012780000
14480000162600001738000018c400001a3e00001b3400001d4800001ece
00001f5e0000202c0000214a000021ec0000231c0000248c0000276e0000
29f600002d1a00002e9400003006000031d80000338800003582000037bc
000038de00003a3200003da800003ebe0000411a00004354000044700000
466a000047f200004a9200004d8c00004ee2000050ea0000536c00005742
00005b3a00005da000005eea00005f9200006014000060be000061a60000
61e200006238000066320000687600006ad400006da6000071860000740a
000078a200007bd200007e88000080ca000085340000871000008bda0000
8f42000091ae0000947a000096d40000990400009dc80000a01e0000a2c2
0000a5f00000aa520000aefe0000b1bc0000b3b80000b4ac0000b51a0000
b60c0000b6ca0000b71a0000b74c0000b7980000b7ce0000b80a0000b840
0000b88a0000b8c00000b9000000b9480000b9880000b9b60000b9ec0000
ba180000ba4c0000ba880000baca0000bb000000bb3a0000bb6a0000bba2
0000bbda0000bc160000bc4e0000bc800000bcbe0000bcfa0000bd380000
bd720000bda80000bdee0000be320000bf8e0000c0660000c25c0000c4c6
0000c7320000c78e0000c82a0000c9c60000ccde0000cee00000d14c0000
d1a40000d23a0000d39e0000d5ba0000d75e0000d8b20000d9b40000daf0
0000dc4c0000de820000e0040000e12c0000e2060000e2f00000e41a0000
e5000000e6960000e7840000e9180000ec820000eea40000f0000000f0a8
0000f1000000f1c60000f3480000f4b00000f5660000f5fe0000f69a0000
f79c0000f7d80000f8160000f84c0000fa8c0000fe200000fe580000fe90
0000ff960000ffbc000100680001010a000101ee000103000001034a0001
037c000103d80001053e000105a2000106020001086600010a8e00010d28
00010d7800010d9a00010eae00011186000111ce00011222000112600001
12a0000112d000011304000113580001139e000113d0000114040001143c
0001146e0001149e000114e40001151400011682000116fe000117c00001
17fc00011878000118d2000119ec00011ac200011b6000011bde00011c48
00011dc000011fc600012004000120420001207a000120c4000121480001
2292000124d60001250600012548000126c4000128b8000128fe00012a20
00012ad800012bf600012d1c00012f1a000130aa000132980001345c0001
3496000134d200013502000135480001359c000135d80001361800013654
000136880001392c0001396a000139ae000139ec00013a2e00013a540001
3a7a00013ab200013d6000013e8a00013eb200013ed800013f1000013f4e
00013f7e00013fb2000140e000014284000142b8000142ee000143240001
4362000143a4000143e000014412000144580001448e000144c400014502
000145360001457a000145b6000145dc0001460000014644000148900001
48d2000149040001493c0001496e0001499e000149d400014a1400014a54
00014af600014cc200014e4a00014f5a000150fc000152600001534a0001
5456000155bc0001562e00015662000157ae00015ad000015b7c00015c40
00015cee00015dac00015ec800015fe00001613c00016198000162d40001
63ba00016498000164f60001657a00016600000166420001667e000166ce
0001671e0001676e000167c00001682000016880000168e2000169480001
69d200016a3a00016aa000016b1600016b8c00016c1a00016c9000016d04
00016d9000016e0600016e8000016f0e00016f8600016ffc0001708a0001
710e0001719200017250000172d80001736800017422000174b00001753a
000175f80001768800017714000177d2000178ac0001798c00017aae0001
7af200017b2e00017b6c00017bb000017bf40001801c000187b000018ede
00018f1a00018f5800018f9e00018fe60001902c000190720001915a0001
91e2000192b00001945c000195be000197f6000198e400019a0e00019b08
00019c2000019cbe00019d4200019df000019ebe00019f1800019fc60001
a0480001a0b40001a0e80001a2720001a3cc0001a4440001a4920001a512
0001a5760001a5fc0001a6380001a66a0001a6a00001a6de0001a7200001
a74e0001a7920001a7c00001a7fa0001a8280001a8600001a88e0001a8da
0001a9220001a9620001a9920001a9b80001a9ee0001aa1e0001aa540001
ac420001aef60001af260001af700001afa20001afe80001b0180001b052
0001b0780001b09c0001b0da0001b27c0001b2b20001b2e20001b5040001
b52a0001b57a0001b5a40001b5d40001b71e0001b8c20001b8f80001b92e
0001b9620001b9a60001b9cc0001b9fc0001ba2c0001ba5e0001bbb60001
bda20001bdd20001be060001be380001be6c0001be9c0001becc0001bef2
0001bf180001bf480001bf7c0001bfac0001bfdc0001c0ca0001c10a0001
c14a0001c17a0001c1aa0001c1da0001c20a0001c2540001c2840001c2b4
0001c2e40001c3140001c3480001c37c0001c3b20001c3ec0001c4620001
c49c0001c6740001c7420001c94c0001cbcc0001ce1a0001d0200001d09a
0001d1340001d1440001d2580001d2840001d4060001d56c0001d62e0001
d6680001d7dc0001d8160001d8520001d8620001d8720001d98a0001d99a
0001d9aa0001d9ba0001d9ca0001d9da0001db4a0001db5a0001db6a0001
dcf20001dd020001de080001de180001df200001df300001df400001df50
0001e0be0001e2780001e2ac0001e2de0001e30e0001e33e0001e36e0001
e39c0001e3d20001e56e0001e66e0001e80e0001e9340001ea660001eb64
0001ed120001ee5e0001efc40001f0d20001f2d60001f2e60001f4400001
f58e0001f6ae0001f8320001f9be0001fb500001fb880001fbbe0001fbf6
0001fc260001fc560001fc8a0001fdfc0001fe2c0001ff520001ff620001
ff720001ffa60001ffb60002011c000202f800020486000204b600020696
000207f4000208040002092600020936000209d800020b0600020b160002
0dbe00020f5a000210d2000212b20002142c0002151e0002152e0002153e
0002154e0002155e0002156e0002157e0002158e000216f8000218a60002
18b6000219ea00021b3a00021d2200021f2e0002206a000221e2000222da
0002231400022476000224a6000224b600022622000227be000228a40002
2a1a00022a2a00022cf200022e5200023032000232880002349a000235fe
00023846000239f200023a0200023b6400023b7400023b8400023c8e0002
3c9e00023eb600023ec600024052000241ca000243ac000245c400024746
0002493e00024a8000024aba00024c7400024e2200024e68000250780002
50a6000251e8000251f80002520800025244000252540002543200025648
00025890000258c000025b2c00025ccc00025d6a00025e4800025e8e0002
604c000261d600026274000263d60002649e000265c200026618000266b2
0002679e000267d200026878000268ce000269c600026a1c00026a5c0002
6a9e00026ada00026b0c00026b5600026b9e00026c2600026e1600026eec
00026ffa000270d0000271f60002728a000273580002747a000276060002
76a00002775a0002780e0002794000027a2400027b7200027c2000027cfa
00027dea00027fa2000280b8000281de0002839600028560000286a00002
874a0002896800028a8a00028ba600028ccc00028df200028e4c00028efc
0002903400029066000290ac000290fa0002913e000291ae0002932c0002
935a00029388000293b6000293e40002941200029440000296e800029720
0002976e000297ac000297f800029858000299620002999600029a980002
9ad000029b0a00029b5000029b9400029bd800029c0600029da000029f48
00029f8e00029fe40002a01c0002a2a40002a2d80002a3060002a3340002
a3600002a3920002a5dc0002a6060002a7220002a7d40002a8800002a902
0002a9be0002aad60002abe40002ac180002ac9e0002adfa0002ae7c0002
aec20002afcc0002b0140002b1180002b1940002b1ec0002b26e0002b35a
0002b4700002b55e0002b6080002b7080002b7e80002b8d80002b9c00002
ba700002baf20002bd500002bd7a0002bda40002be5c0002be860002bfc8
0002c0ce0002c1b80002c1e20002c20c0002c2360002c2600002c28a0002
c40a0002c4340002c45e0002c4880002c4b20002c4dc0002c5060002c530
0002c55a0002c58e0002c5b80002c5e20002c60c0002c7860002c7960002
c8b00002c8c00002c8ea0002c9140002c93e0002c9680002cb100002cd20
0002ce4e0002ce5e0002cfda0002cfea0002d1300002d2fc0002d4020002
d5820002d72a0002d9560002dab80002dca20002dde60002df140002e002
0002e02c0002e0560002e0800002e0aa0002e0d40002e0fe0002e1280002
e1520002e17c0002e1a60002e1d00002e1fa0002e2240002e24e0002e278
0002e4b40002e6300002e7740002e95c0002eaa40002eace0002eaf80002
eb220002eb4c0002eb760002eba00002ebca0002ebf40002ec1e0002ec48
0002ec720002ec9c0002ecc60002ecf00002ed1a0002ed440002ed6e0002
ed980002efd40002f31a0002f3440002f36e0002f3980002f3c20002f3ec
0002f4160002f4400002f46a0002f4940002f4be0002f4e80002f5120002
f53c0002f5660002f5900002f5ba0002f5e40002f60e0002f6380002f662
0002f68c0002f6b60002f6e00002f70a0002f7340002f75e0002f7880002
f7b20002f84c0002f8620002f88c0002f8a40002f8b40002f8e00002f90c
0002fa4a0002fb8c0002fd320002fd420002fe840002ffd4000301c40003
0398000304b0000304c000030542000305d0000306d0000306e000030780
00030790000308a6000309fa00030b2a00030b3a00030c0800030c180003
0d8e00030d9e00030eb200030ec200030ff60003118c0003124800031258
00031356000314b00003153c0003154c0003167600031802000318be0003
18ce000319660003197600031a4200031a5200031b2a00031b3a00031c42
00031c5200031e1800031e2800031f8000031f90000321fa0003220a0003
2404000324140003257e0003258e0003267e0003268e0003282600032836
000329540003296400032aa400032ab400032ac400032ad400032c4c0003
2c5c00032c6c00032c7c00032dce00032f1e00032fec000330d000033250
000333d4000334d4000335e80003372c0003373c0003382a000339040003
3aa000033ab000033bce00033cd400033ecc00033edc00033eec00033efc
00034046000340560003410e0003411e0003422c0003423c000343280003
433800034456000344660003450400034514000345240003461200034786
000348b2000349ac000349bc000349cc000349dc00034b7a00034d340003
4e0200034e1200034e3c00034e66000350ec00035354000355da00035850
00035a2000035bda00035c0400035c2e00035c3e00035c4e00035c780003
5ca200035ccc00035cdc00035cec00035d1600035d4000035d5000035d60
00035d8a00035db400035dde00035dee00035dfe00035e0e00035e1e0003
5e2e00035e3e00035e6800035e7800035e8800035eb200035edc00035f06
00035f3000035f5a00035f8400035fae00035fd8000360020003602c0003
605600036080000360aa000360d4000360fe00036128000361520003617c
000361a6000361d0000361fa000362240003624e00036278000362a20003
62cc000362f6000363200003634a000363740003639e000363c8000363f2
0003641c00036446000364700003649a000364c4000364ee000365180003
65420003656c00036596000365c0000365ea000366140003663e00036668
00036692000366bc000366e6000367100003673a00036764000368040003
6848000368be000368e8000369120003693c0003696600036990000369ba
000369e400036a0e00036a3800036a6200036a8c00036ab600036ae00003
6b0a00036b3400036b5e00036b8800036bb200036bdc00036c0600036c30
00036c5a00036c8400036cae00036ce200036d1600036d4a00036ef80003
7108000372f80003750600037598000375f20003765c000376f600037786
000377f6000378ca000379b800037a8c00037b7c00037c1600037cea0003
7d8400037e3200037ed800037f2a00038088000380d6000381240003817c
000381d4000382260003827800038334000383f0000384860003851c0003
85b20003864e000386ea0003878600038798000387aa000387bc000387ce
000387e00003883a0003889a00038936000389480003895a0003896a0003
897a0003898c0003899e000389b0000389c2000389d4000389e600038a82
00038b1800038bb400038c4a00038d6600038d8c00038db200038dd80003
8e0200038e3e00038eac00038ef400038f6a00038faa0003901600039052
000390b6000390f80003915c0003919c000391f2000392320003929e0003
92e80003934000039378000393ca0003940c000394600003948e000394b4
000394de000395180003954800039578000395ce00039630000396940003
96fc00039764000397c4000398160003986e000398c80003992000039950
0003998e000399b4000399e800039a1200039a3800039a5e00039a840003
9ac000039b1800039b7400039bd600039c2800039c8600039cbe00039d0e
00039d5400039da400039dd400039e0c00039e3c00039e7000039e960003
9ebc00039eec00039f1c00039f4200039f6800039f9200039fbe00039fe4
0003a0200003a0500003a0800003a0b00003a0e00003a1060003a1420003
a1720003a1b20003a1dc0003a2080003a23a0003a2640003a2900003a2be
0003a2f40003a3320003a37a0003a3b80003a3e80003a4380003a4720003
a4b40003a4e40003a53a0003a5640003a6300003a65a0003a71a0003a744
0003a7fa0003a8240003a8e80003a9dc0003ab0a0003ac720003ada20003
ae7e0003afa20003b25e0003b5520003b7020003b9340003bb560003be46
0003bff20003c1ee0003c1fe0003c3620003c5d00003c7560003cb4a0003
ce600003d00e0003d2080003d3700003d3800003d4e60003d65a0003d76a
0003d8dc0003d9b60003da2c0003dae20003db880003dcf80003dd300003
ddaa0003de6c0003df260003df8e0003e0940003e1ca0003e2a80003e406
0003e4800003e4fa0003e5740003e62e0003e6e20003e73e0003e7980003
e7e00003e8500003e8cc0003e9160003e9500003e9960003e9da0003ea2c
0003ea7e0003eb000003eb820003ebc40003ec040003ec3a0003ec700003
ec9e0003eccc0003ed000003ed340003ed760003edb80003edf40003ee30
0003ee6a0003eea40003eed60003ef080003ef3a0003ef6c0003efa60003
efe00003f0220003f0640003f0a60003f0e80003f1360003f1840003f1c6
0003f2080003f2480003f2880003f2c20003f2fc0003f3480003f3940003
f3d20003f4120003f4580003f49e0003f4da0003f5300003f56c0003f5a8
0003f5e80003f6280003f6640003f6a00003f6e00003f7200003f7640003
f7a80003f7fc0003f88a0003f8cc0003f90e0003f9760003f9de0003fa10
0003fa420003fa7a0003fab20003fb480003fbde0003fc280003fc720003
fcae0003fcea0003fd400003fd960003fde00003fe2a0003fe820003feda
0003ff1a0003ff5a0003ff920003ffca000400140004005e0004009c0004
00da0004011c0004015e000401b2000402060004024c00040292000402d8
0004031e00040374000403ca0004042000040476000404c20004050e0004
055a000405a60004061a0004068e0004070200040776000407b4000407f2
000408300004086e000408ac000408ea0004092e00040972000409be0004
0a0a00040a6a00040ab600040af400040b4200040c5200040ca200040cf2
00040d2a00040d6200040db800040e0e00040e8200040ee600040f280004
0f6a00040fc00004100e0004105a000410a6000410e6000411260004116e
000411b6000412220004127c000412b4000412ec0004132c0004136c0004
143c00041538000415f8000416e60004173c00041792000417e400041838
0004189c0004190000041956000419ac00041a2200041a9800041ada0004
1b1c00041b5e00041ba000041be200041c2400041c7a00041cd000041d22
00041d7600041dfe00041e8000041f2000041fc2000420000004203e0004
207c000420b8000420f60004213400042172000421ae000422920004237e
00042494000425b00004267a000427440004283e0004293800042a360004
2b3400042c5200042d7000042e9600042fbc000430be000431c000043252
000432e40004332200043360000433ba000434140004344c000434840004
3594000435a4000435ec000436340004368c000436e40004371600043748
0004378a000437cc000438060004384000043884000438c8000439400004
39ba00043a4a00043a8e00043ace00043b5000043bd200043d2a00043d3a
00043d8800043dd600043e1200043e4e00043e9400043eda00043f280004
3f7600043fc60004401600044072000440ce00044244000443ac000443e4
0004441e0004446a000444b6000445080004455a000445ac000446020004
463e0004467a000446d0000447240004485c000448fc0004494a0004498a
000449c400044b5a00044dc200044e860004501c0004517a000452480004
53ee000456420004587a000458c0000458f20004599c00045ac000045ae4
00045b7e00045c8a00045d9a00045eaa00045fb80004613e000461700004
62120004623a0004629c000462fe00046360000463c2000464000004643e
00046478000464b2000464de0004652a000465640004659e000466fa0004
684e0004685e0004691c00046a5200046ab000046bc800046d5600046dfc
00046f4200046f8000046fbe00046ff60004704e0004707a000470bc0004
712000047168000471ca0004722a0004729c000473180004739400047416
000474a20004752e000475b80004763800047672000476ae000478120004
78dc0004790c0004793c00047aaa00047c4600047c5600047d7200047e84
00047fb0000480c40004820c0004838c0004839c000484c00004860a0004
872c0004889e000489e800048b7400048cbc00048e420004901000049176
00049226000492f200049598000497ce0004988000049aa800049c7e0004
9dce00049ece00049ede0004a0020004a1300004a26e0004a3f00004a604
0004a7b40004a9a40004a9b40004aac20004ac260004ad100004ae840004
af8a0004b0e00004b20c0004b32c0004b49a0004b5e40004b73c0004b878
0004b9d20004bb1a0004bcbe0004be480004bfa80004c12e0004c2fc0004
c3ee0004c42c0004c4820004c52a0004c53a0004c58c0004c5e40004c642
0004c6660004c69e0004c6ee0004c71e0004c7580004c7a60004c8d20004
c8fc0004c97a0004ca320004ca5a0004cada0004cb140004cb500004ccf8
0004cfea0004d0280004d05e0004d09c0004d0ea0004d1100004d1360004
d17e0004d1c20004d2080004d2500004d33e0004d3620004d38e0004d3c6
0004d4020004d43e0004d5a40004d6e20004d7240004d7600004d79a0004
d7e80004d82c0004d8600004d8aa0004d8f20004d9380004d96c0004d9a4
0004d9dc0004da140004da740004daba0004db020004db360004db700004
dbb60004dbfa0004dc380004dc6e0004dc860004dcce0004dd020004dd52
0004dd840004ddba0004df2a0004e13c0004e2960004e3cc0004e4020004
e4560004e58c0004e76c0004e8be0004e99e0004eac20004eaf60004eb28
0004ed0a0004eeb60004eee00004ef560004f09a0004f0c20004f13a0004
f16e0004f1a20004f1ca0004f23e0004f2760004f2b00004f4580004f59c
0004f6fa0004f8400004f9780004faf00004fc3e0004fd960004fed60005
009e00050210000503760005055a0005067a000507980005093000050a6c
00050baa00050d7a00050f76000510ac0005120e000513bc000514b60005
14c600051596000516b40005179e0005189c00051a4e00051c1c00051dea
00051ff00005212a00052264000523b6000523c6000525a0000526bc0005
283c00052910000529e400052aee00052bce00052ce000052db200052e76
000530480005321e0005346400053580000536d8000537d4000539380005
3a5000053b7400053ca200053da200053ec800053ffe000541e80005433e
00054458000545de00054776000548aa00054a6200054b5c00054c680005
4d6a00054e4600054f8800054f98000550c40005526000055270000553aa
0005559600055650000557ea0005592200055a6600055c3a00055ebc0005
611400056346000565440005672e0005697000056bda00056cf400056f02
00056f74000570e80005726e0005737e0005748a000575aa000576fc0005
789400057a7200057bdc00057c5800057d5800057dea00057e7600057f02
00057fa80005804e000581440005823a0005824a0005825a000583440005
843200058468000584c00005851600058578000585a6000585e200058620
000586a0000586fc0005879a00058838000588bc00058940000589d80005
8a0600058aa200058b5400058d6800058e1000059038000592120005934e
00059384000593c80005940c0005945000059486000594b8000594fa0005
9552000595960005969c000597140005979a0005980a0005986c000598f2
00059952000599bc00059a3000059aa000059afe00059ba400059c3c0005
9ca800059d3600059d9000059dfe00059ea800059f4e00059fe40005a054
0005a0d60005a13a0005a1e60005a2a40005a3500005a3e20005a4400005
a4ac0005a5020005a5840005a6020005a6880005a7140005a76e0005a7da
0005a84a0005a8b80005a9280005a9ac0005aa3c0005aaa20005ab1c0005
ab980005ac100005acb60005ad4e0005adde0005ae3c0005aeda0005af56
0005afe80005b08c0005b1360005b1ce0005b22a0005b27e0005b2e60005
b38c0005b4360005b5000005b5a60005b6080005b6600005b6c00005b74e
0005b7d40005b8620005b8c20005b9260005b9900005b9f80005ba600005
bad80005bb600005bbf40005bc600005bcc80005bd2c0005bdd80005be98
0005bf460005bfd40005c0320005c09e0005c10e0005c1b20005c2580005
c31c0005c3be0005c4220005c4b20005c5240005c5bc0005c63a0005c6b4
0005c7200005c7ae0005c80a0005c8680005c8ee0005c96a0005c9d20005
ca360005ca8a0005caf80005cb600005cbde0005cc540005ccce0005cd4e
0005cdaa0005ce100005ce740005cf140005cfb60005d0740005d1240005
d1800005d1f80005d2560005d2e00005d3780005d4060005d46c0005d4ca
0005d5580005d5ca0005d6640005d6f80005d7680005d7d80005d8500005
d8ae0005d90e0005d9880005d9e20005da420005da9c0005daf80005db60
0005dbbe0005dbee0005dc360005dcaa0005dcfe0005dd760005de640005
def40005df580005df8c0005dfda0005e0560005e1200005e1b00005e22a
0005e2b00005e32a0005e3a00005e3da0005e4180005e4980005e5180005
e54e0005e5fa0005e6b40005e73e0005e7c60005e8560005e8820005e90c
0005e9980005ea040005eb260005eba40005ec360005ecb20005ed120005
ed600005ee000005ee5c0005eeb80005ef200005ef8c0005f0180005f046
0005f0720005f0c60005f1540005f17e0005f1a60005f1f60005f2460005
f3000005f34c0005f38a0005f43a0005f4ae0005f51a0005f5880005f5c4
0005f6040005f69a0005f7260005f8180005f8740005f8b60005f90a0005
f9860005f9fa0005fb1a0005fc700005fd760005fde00005fe3a00060168
0006020a0006027a000602d2000604180006054c0006061e000607080006
084c0006095200060a7e00060bd800060da800060e9c00060f5400061092
00061278000612d00006130c000613580006146e00061592000616d60006
17280006175a0006187e000619da00061bde00061d0800061e2a00061ef0
00061ff6000621060006220600062336000623d4000625140006264a0006
286a00062aa000062bca00062cd000062e2400062f740006311800063282
000633fc000635ce000636ee0006380e0006394800063a0a00063bb20006
3cee00063e2000063e3000063e4000063eec00063f9c00063fcc00064018
000640480006408c0006426e00064422000645cc00064734000648d40006
4a8e00064bfe00064d7200064f84000651620006531a000654fe0006576e
00065a1a00065c1400065de200065fae0006613e0006629c000663da0006
64e6000665ee00066772000668dc00066a5c00066c1200066d6c00066ec6
0006710c000672d80006734c00067380000673ba000674d6000675fe0006
773e000677b80006780000067876000678ec00067aca00067cde00067ec0
000680fc000682320006833a000684d60006866e000687b80006891c0006
8b2000068d0c00068ee2000690c2000692760006944a0006957e000696e2
0006986c000699f200069b5200069cd000069e720006a0040006a1080006
a1f60006a3620006a49e0006a61a0006a7800006a8d00006aa6c0006abd0
0006ad040006ad140006ad480006ad6e0006af4e0006b0ec0006b2200006
b3760006b4f60006b6580006b7b20006b92c0006baac0006bc140006bde0
0006bfca0006c04e0006c0820006c0a60006c0f60006c1360006c1460006
c1560006c1980006c1c00006c2020006c2380006c2700006c2ac0006c2ee
0006c3240006c48c0006c49c0006c4d00006c5040006c53c0006c57a0006
c5b60006c5f20006c62e0006c66a0006c6a80006c6f20006c72a0006c762
0006c7a60006c7f40006c8480006c88c0006c8ce0006c9060006c93e0006
c9760006ca7c0006ca8c0006cc500006ce460006d02a0006d1c80006d33e
0006d4b20006d6400006d7ca0006d9640006dad80006dc260006dd3a0006
de9c0006dfca0006e0800006e1320006e20a0006e2880006e3360006e3ae
0006e41e0006e5300006e5920006e6400006e7240006e7880006e7ee0006
e89c0006ea740006eb700006ebf00006ec2a0006ecd60006ed4e0006ee18
0006eea00006ef040006effa0006f0b60006f1700006f1b20006f22c0006
f3380006f3d00006f41c0006f5020006f5e20006f7460006f8d60006f9ea
0006fafe0006fbf80006fc200006fc4a0006fc7e0006fcb20006fcd80006
fcfe0006fd260006fd4c0006fdc40006fe1e0006fe520006fe980006fec2
0006feee0006ff140006ff400006ff660006ff900006ffb60006ffde0007
0006000700720007009a000700f60007011c000701440007017200070198
000701cc000701fe000702320007026a000702a2000702d60007030a0007
03380007036200070388000703c0000703f8000704260007045a00070480
000704a6000704cc000704f20007051c0007057a000705ae000705ec0007
06200007064a000706700007069e000706c4000706ee0007073c00070796
000707c2000707e8000708140007083a00070872000708a6000708da0007
090e000709340007095a00070994000709c8000709f200070a1800070a3e
00070a6400070a8a00070ab000070ad800070b8e00070bb800070c580007
0c8000070cee00070d1600070d7400070da800070de400070e2400070e5a
00070e9600070ec800070ef000070f1600070f6200070fa400070fbc0007
0fe200071016000710480007107000071098000710ce000711320007115a
000711b4000711fc0007124200071276000712b8000712de000713040007
132a00071350000713760007139c000713c4000713ee000714140007143a
0007146000071486000714ae000715740007159e000716080007163c0007
1670000716a8000716dc00071710000717440007176e00071794000717c8
000717fe0007183600071876000718b2000718f60007194a000719940007
19ba000719e000071a0600071a2c00071a5200071a9c00071ad400071b0c
00071b5a00071b9600071bd200071c1200071c5000071c8e00071ccc0007
1d0a00071d4800071d8a00071dbe00071dfc00071e3600071e7000071eb0
00071ef000071f2400071f5800071fa600071fe200072024000720660007
209e000720d60007211e00072166000721be000722160007227c000722e2
000723180007234e00072388000723c2000723fa00072432000724780007
24be0007251e0007257e000725d60007262e00072688000726e20007272a
00072772000727ac000727e6000728240007286200072898000728ce0007
290c0007294a00072992000729da00072a2200072a6a00072ab800072b06
00072b4800072b8a00072bbe00072bf200072c2c00072c6600072ca00007
2cda00072d3a00072d9a00072dd400072e0e00072e6c00072eca00072f00
00072f4000072f7800072fb000072fea000730240007305e000730a20007
310a00073176000731e20007322c0007326000073294000732ce00073308
0007334c00073390000733c8000734000007344600073488000734c00007
34f80007354800073598000735e8000736380007366e000736b2000736ec
0007372c00073770000737a8000737e0000738160007385a0007389e0007
38d40007391e0007396a000739a6000739f400073a4600073a9400073ae2
00073b3000073b7e00073bce00073c2200073c6800073cb600073d020007
3d4e00073da000073df200073e3800073e7e00073ec600073f0e00073f5a
00073fa600073fee000740360007408c000740e200074154000741c60007
42300007429a0007430600074372000743cc000744260007446a000744ae
000744fa000745460007459a000745ee000746360007467e000746d60007
472a00074774000747be0007482800074892000748fc000749660007499a
000749ce00074a1600074a3c00074a9200074ac600074b0a00074b3e0007
4b7200074bb000074bf600074c1c00074c9400074ce400074d5c00074dea
00074ef600074f4a00074f7000074fb800074ff0000750380007508c0007
510800075158000751de00075204000752b40007536600075480000754b2
000754e400075568000755d60007560800075672000756a6000756da0007
57240007578e0007583c000758ea00075a1400075a5200075a8e00075b04
00075b6a00075ba600075bdc00075c1200075c7800075cac00075ce00007
5d3e00075db200075e1000075ed600075f9c00075fe40007604200076068
000760b6000760ea0007612e0007617c000761d80007622a000762840007
62aa00076302000763780007656c000767c40007699000076bbe00076da8
00076dce000770fe00077350000774f2000777040007784200077a580007
7aae00077b0200077b7e00077be400077c9400077d4400077f2c000780ec
00078256000783180007844800078514000786140007872a000787700007
87b6000787fe0007884200078964000789a200078a1400078aa000078b2c
00078b9400078bc600078bf600078c2600078c5600078ca200078cd40007
8d3c00078d7e00078dc800078e4e00078ecc00078f1200078f5400078fcc
000790160007907c000790aa000790d6000790e6000790f6000792080007
9386000795200007964600079704000797aa0007987c0007996200079a3e
00079ae600079b7200079cca00079daa00079dba00079dca00079dda0007
9e8800079f3e00079fee0007a0f20007a24e0007a3200007a3a00007a424
0007a4dc0007a4ec0007a6000007a6a20007a76c0007a81c0007a9220007
aa7c0007aa8c0007aa9c0007aaac0007ab860007ac700007ad540007ad64
0007ad740007ad840007ad940007aef20007af020007b0480007b2180007
b3740007b4ea0007b5e40007b6ee0007b7fa0007b91e0007ba280007baac
0007bb380007bc860007bd1c0007beb20007bfbe0007c0b40007c1900007
c2c00007c3b60007c52c0007c5ce0007c6f00007c9240007ca0e0007cafc
0007cbe20007cd5c0007ce640007cf800007d08e0007d1860007d25e0007
d33a0007d4840007d5280007d6a40007d7ec0007d8e20007d9d80007daba
0007db400007dbd00007dcfc0007dd7c0007de3e0007def60007e0360007
e18e0007e23e0007e3380007e3e00007e53c0007e6320007e73a0007e806
0007e8f40007e9ae0007eb040007ebf40007ec920007edec0007eedc0007
efdc0007f0440007f14a0007f1ea0007f2a80007f3560007f3960007f534
0007f5e00007f6980007f7c00007f94e0007fa5a0007faa40007fc340007
fcbc0007fcce0007fcfe0007fd2e0007fd660007fd9e0007fdd40007fe10
0007fe460007fe820007ffea0008007e00080160000801e4000802cc0008
0368000803da000804a2000804e400080614000806c4000807ae000807e6
0008080c000808460008094000080a5e00080b6000080b9e00080c0a0008
0c6800080c7800080c8800080c9800080ca800080cb800080cc800080cd8
00080ce800080cf800080d0800080d1800080d1800080dec00080f2a0008
1170000812a000081410000815ac00081774000818f800081908000819d0
00081af200081ce200081dd000081e9800081eda00081f92000820580008
20f00008215000082252000823260008241a0008251a000825be00082656
000826ac000826f400082736000827d60008283600082928000829b60008
29ec00082a6600082ade00082b2e00082c3a00082d3000082dda00082e04
00082e2e00082e5800082e8200082ec200082f0200082f3a00082f720008
2fbc000830060008304600083086000830d00008311a0008315a0008319a
000831f40008324e00083288000832c2000833060008334a0008338e0008
33d2000834260008347a000834c6000835120008355000083594000835e4
000836340008368e000836ec0008371600083740000837da000838740008
38b8000838fc00083a1200083a2200083a6a00083ab200083b0400083b56
00083bc000083c1400083c6000083cbe00083d4800083dac00083df00008
3e3a00083ea200083eec00083f2c00083f7400083fb000083fec00084028
00084062000840a4000840e60008412600084166000841b0000841fa0008
4250000842a8000842f60008434400084386000843d40008441600084460
000844a2000844e6000845420008459e000845ea00084636000846800008
46ca0008470800084746000847c4000848420008487c000848b600084950
000849ea00084abe00084b9200084bee00084c4a00084cbe00084d320008
4e9000084ea000084f8a00084f9a00084fd000085006000850400008507a
000850b6000850f2000851380008517e000852ee00085492000855e60008
57f20008596e00085b1e00085c5e00085d5c00085f2200086056000861a4
0008633e0008646800086588000867860008682a000868cc00086a460008
6b4400086ca000086dca00086f0800086ffa000871fa0008737800087422
000875b8000876da000878680008794c00087af600087bf800087d200008
7ed000087fa0000880e0000882000008832a0008844800088572000886a4
000887da000888be000889f200088ad200088bda00088ce200088de60008
8eee00089004000891400008921c000892d200089394000894d8000895be
000896b400089728000897ae0008987400089942000899c800089a720008
9b0600089c9200089dde00089ede00089fde0008a0e80008a1e00008a314
0008a5080008a5b20008a66c0008a76a0008a8a40008a9620008aa180008
ab3e0008abda0008acbe0008adca0008aec80008af4e0008afee0008b08e
0008b18c0008b1d60008b2a00008b3800008b48c0008b58a0008b7740008
b8780008ba6c0008bc180008bdbe0008bed20008bf480008bfa80008c008
0008c0680008c0c80008c1280008c1880008c1e80008c2480008c2a60008
c3040008c3620008c3c00008c41e0008c47c0008c4da0008c5380008c598
0008c5f80008c6580008c6b80008c7180008c7780008c7d80008c8380008
c8c40008c9500008c9e00008ca700008cb000008cb900008cc220008ccb4
0008cec80008d07a0008d1620008d2e40008d40a0008d41a0008d5c40008
d7440008d7fe0008d8e20008d9e60008dae00008dc120008dcfc0008de92
0008e0140008e0e20008e11c0008e1560008e1660008e24e0008e33c0008
e4e80008e6660008e81e0008e9d60008e9e60008eabe0008eba20008ec7a
0008ecbc0008ed000008ed420008ed860008edf80008ee640008eefa0008
ef400008efb80008f2500008f3180008f3280008f40e0008f4cc0008f5ce
0008f6f20008f8380008fa240008fb280008fb380008fc5c0008fdd80008
ff400008ffc20009004c000901ce0009028e0009033e0009041a00090468
000905180009056800090598000905dc0009061e0009064c000907700009
0888000909aa00090a1600090a8200090b3200090c0800090c8000090d38
00090e2600090e7c00090f6e0009105a000910cc000910dc000910ec0009
10fc0009110c0009123c0009124e000913380009140a000915fa0009175e
000917c8000918120009185200091892000918e200091932000919aa0009
1a2200091a9a00091af200091c0000091d2800091ea80009204600092206
000922f80009240a00092556000925ae000926b0000927980009281e0009
28fe000929100009298400092996000929a600092a2200092a3200092a44
00092a5400092a6600092a7600092a8600092a9600092aa600092ab60009
2ac600092ad600092ae600092af600092c9200092e7e00093052000931aa
000933b6000935000009363e0009375c000938540009395200093a2c0009
3b4a00093c6000093cdc00093d8e00093ef000093f8e000940ce000941e2
000942d8000943c200094558000946b4000948440009490200094a020009
4af400094c7e00094e5e00094f7200095016000951c4000953420009543a
000955fa0009572e0009584c0009596a00095998000959c6000959f40009
5a2200095a5400095a8400095aaa00095ad600095b0400095b3200095b64
00095b9000095bbc00095be800095c1800095c4600095c7400095ca20009
5cd000095cfe00095d3000095d5e00095d8c00095dba00095dec00095e1a
00095e4800095e7600095e9c00095eca00095ef800095f2600095f540009
5f8200095f9200095fc000095fee0009601c00096042000960700009609e
000960cc000960f2000961200009614e00096288000962b4000962e00009
630c000963300009635c00096374000963a0000963c6000963f200096418
0009643000096448000964760009649c000964ca000965fa000966280009
665600096688000966b6000966dc0009670a000967360009676200096786
000967b2000967d6000967fc000968220009685000096912000969400009
696e0009699c000969ce00096a0000096b6000096b8e00096bbc00096bea
00096c1c00096c4a00096c7c00096caa00096cd800096d0600096d340009
6d7800096da600096dd400096de400096df400096e8200096efe00096f0e
00096f1e00096f2e0009705a0009706a0009707a0009715a0009716a0009
717a000972c8000972d8000973aa000973ba000974a0000974b0000974c0
000975d2000975e20009772a0009785800097886000978b4000978e20009
790e0009793c0009796a00097998000979c8000979fa00097a2c00097b46
00097b7400097c9400097ca400097cb400097ce400097cf400097e3e0009
7f9a000980bc000980ea0009810e00098222000982320009833800098348
0009835800098490000984a0000987020009883600098974000989980009
8b6400098c5400098c6400098c7400098c8400098c9400098ca400098cb4
00098cc400098ddc00098dec00098dfc00098f2400099044000991ae0009
934800099444000995860009966200099780000998ee00099a2a00099aba
00099b7400099bf200099cca00099dca00099e4c00099efc00099fca0009
a0300009a1500009a21c0009a23a0009a2560009a2720009a28e0009a2ac
0009a2c80009a2e60009a3020009a3220009a3400009a5220009a68a0009
a8dc0009aa1a0009ab500009ad280009ae260009af5a0009afb00009b034
0009b0f20009b1ca0009b2780009b3060009b3cc0009b4460009b4dc0009
b5820009b6460009b7080009b7a80009b8860009b9480009b9b00009bb12
0009bb440009bc020009bcde0009bd7c0009be360009beee0009bf260009
bf5e0009bfa00009bfe20009c0420009c0b40009c1200009c18c0009c1da
0009c2280009c27a0009c2cc0009c31a0009c3680009c3980009c3c80009
c3f80009c4280009c4560009c4820009c4ae0009c4dc0009c5080009c534
0009c5620009c5900009c5bc0009c5e80009c6140009c6400009c6740009
c6c40009c7280009c78c0009c7ba0009c7e80009c8140009c8400009c86c
0009c89a0009c8c60009c8f40009c9200009c94c0009c98a0009c9c80009
c9fa0009ca2c0009ca5e0009ca900009cac20009caf40009cb260009cb58
0009cb8e0009cbc40009cc000009cc3c0009cc6a0009cc980009ccc40009
ccf00009ceb80009d5780009dd180009e07a0009e4420009e5560009e608
0009e6520009e71a0009e7620009e7b60009e7f80009e82a0009e85c0009
e8740009e8b00009e8ec0009e9280009e96a0009e9ac0009e9ee0009ea2e
0009ea5a0009ea860009eab20009eade0009eb140009eb4a0009eb800009
ebb60009ebea0009ec1e0009ec520009ec860009ec980009ed3c0009edda
0009ee580009ef0a0009efdc0009f0960009f2440009f3760009f4e60009
f5a00009f81e0009fa4a0009fc2e0009fe26000a0050000a022a000a03f2
000a05ba000a0770000a08c6000a0a34000a0bec000a0d84000a0e48000a
0f16000a1024000a113e000a124a000a1354000a1364000a144c000a156e
000a1662000a1768000a18f2000a1a96000a1bd6000a1cdc000a1db4000a
1f00000a1fd2000a212a000a220a000a22aa000a237c000a2560000a2636
000a265a000a2a14000a2e16000a3170000a3352000a34c2000a34da000a
34f2000a350a000a3522000a353a000a354c000a3564000a3576000a35dc
000a35ec000a35fe000a3616000a3628000a3640000a3650000a3666000a
3678000a3690000a36a2000a36ba000a36cc000a36de000a36f0000a3702
000a3714000a374e000a3760000a3772000a3782000a3794000a392e0001
00000f3302b5003c00ca000700020010002f00560000063404eb00050002
0000003a02be0000000300000000006a00000000000300000001001e006a
0000000300000002000e01120000000300000003005800e0000000030000
0004001e006a000000030000000500180138000000030000000600220150
00000003000000070076006a0000000300000008003000ae000000030000
000900860172000000030000000d029a01f8000100000000000000350492
0001000000000001000f04c700010000000000020007051b000100000000
0003002c05020001000000000004000f04c70001000000000005000c052e
00010000000000060011053a0001000000000007003b04c7000100000000
0008001804e900010000000000090043054b000100000000000d014d058e
0003000104030002000c06db0003000104050002001006eb000300010406
0002000c06fb000300010407000200100707000300010408000200100717
0003000104090000006a00000003000104090001001e006a000300010409
0002000e01120003000104090003005800e00003000104090004001e006a
000300010409000500180138000300010409000600220150000300010409
00070076006a0003000104090008003000ae000300010409000900860172
000300010409000d029a01f800030001040a0002000c06db00030001040b
00020010072700030001040c0002000c06db00030001040e0002000c0737
0003000104100002000e0747000300010413000200120755000300010414
0002000c06db0003000104150002001006db0003000104160002000c06db
0003000104190002000e076700030001041b00020010073700030001041d
0002000c06db00030001041f0002000c06db0003000104240002000e0775
00030001042a0002000e078300030001042d0002000e079100030001080a
0002000c06db0003000108160002000c06db000300010c0a0002000c06db
000300010c0c0002000c06db00a900200032003000310032002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e00200052006500670075006c00610072
00200028004d006900630072006f0073006f006600740029005600650072
00730069006f006e00200036002e0038003100540069006d00650073004e
006500770052006f006d0061006e00500053004d0054004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d0020005300740061
006e006c006500790020004d006f007200690073006f006e002c00200056
006900630074006f00720020004c0061007200640065006e007400200031
0039003300320059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e002000200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002ea9203230313220546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e54696d6573204e657720526f6d616e20697320612074726164
656d61726b206f6620546865204d6f6e6f7479706520436f72706f726174
696f6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e2052
6567756c617220284d6963726f736f66742956657273696f6e20362e3831
54696d65734e6577526f6d616e50534d544d6f6e6f747970652054797065
2044726177696e67204f6666696365202d205374616e6c6579204d6f7269
736f6e2c20566963746f72204c617264656e742031393332596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e202059
6f75206d6179206f6e6c792028692920656d626564207468697320666f6e
7420696e20636f6e74656e74206173207065726d69747465642062792074
686520656d62656464696e67207265737472696374696f6e7320696e636c
7564656420696e207468697320666f6e743b20616e642028696929207465
6d706f726172696c7920646f776e6c6f6164207468697320666f6e742074
6f2061207072696e746572206f72206f74686572206f7574707574206465
7669636520746f2068656c70207072696e7420636f6e74656e742e004e00
6f0072006d0061006c006e0079006f00620079010d0065006a006e00e900
6e006f0072006d0061006c005300740061006e0064006100720064039a03
b103bd03bf03bd03b903ba03ac004e006f0072006d00610061006c006900
4e006f0072006d00e1006c006e0065004e006f0072006d0061006c006500
5300740061006e00640061006100720064041e0431044b0447043d044b04
39004e0061007600610064006e006f0074006801b001a10300006e006700
41007200720075006e00740061000000410a005403ef02ad001d001f03ee
03ed003c001f03edb2061d1fb803ecb3032a1f3f411503e4006003e9009f
03e500df03e50004001003e4001003e5003f03e5007003e400ff03e40005
ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003e1b2
1a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb2424232b9
ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de000203de
03df0028001fffc003dfb3282e32f0410d03df0001037e000f0101001f00
a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c9006400
1fffc003c9b20d1132410a03c703b70012001f03b603b50064001fffc003
b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d0004
006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f03a7
004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5008f
03a50004005403aa0001006b03aa000103a8036a0022001f038c03940015
001f038b03930015001f03a40393001a001f03a20394001e001f03a10393
001e001f039f0394001e001f039b0394001a001f039a0393001e001f0399
03940016001f039803940016001f03970393001b001f03960394001b001f
03950393001b001f03760375001a001f03740375001a001f03a00373b21e
1f10411e0393002003930030039300030020039400300394004003940003
0000039400010383036c001e001f03b1036c0032001f036d036c0032001f
ffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0037d
00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c00b0
037c00c0037c00d0037c0004003003730040037300020000037300100373
00200373000300e0037300f00373000200b0037300c0037300d003730003
008403730090037300a0037300030377036a0029001f0389036ab2281f40
b80367b33940323fbb0366000100400366b3191d328fbb03660001004003
66b3090a3240b80366b3090e3240b80366b3090f323fbb03650001004003
65b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b0363
00020014036300240363003403630044036300040363b2242f1fba034e00
6d0800400e1f7f027f037f047f050430440112bf033200500800001f0012
032d003c080040291f5f3c01376009700980090310092009300940095009
056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ffc040
47063a33900ba00bb00bc00bd00b05b006c006d006e006f0060520063006
400650066006700680069006a006099006900702600b700b800b03100b20
0b300b400b500b051f0701a0418503620001000003620010036200700362
00900362000400f0035f00010020035e0020035f0030035f0040035e0004
0000035e0000035f0010035f00d0035e00e0035f00050010030f0020030f
0030030f00d0030f00e0030f00050000030f0010030f0050030f0060030f
0070030f00d0030f00060000030f0010030f0020030f0030030f00e0030f
00f0030f0006030f00270000030e0030030e000200e0030e00f0030e0002
030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc0020
02fc005002fc000300d002fc00e002fc0002000002fc001002fc002002fc
003002fc005002fc006002fc000600e002fc00f002fc0002002002fc0030
02fc004002fc000302fc406127c02901b02901a02901902901403c3f4132
40223f41321212125f235f255f285fa5046f236f256f286fa5044f234f25
4f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f281f
a5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8ffc0
b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02af00
df02af0003001f02af002f02af003f02af006f02af000402af02af001f02
ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02ad00
1f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad0002000f02
ad001f02ad003f02ad0003004002acb23a334f414d02ac005f02ac009f02
ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300b002
ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02ac00
3f02ac0003000f02ac0001000f035a0001000f035a001f035a003f035a00
5f035a0070035a000500cf035700df03570002000f0357001f0357007003
5700af03570004035a035a0357035702ad02ad02ac02ac032c400d31151f
001616000000121108104110020c004a000d01a8004a000d0198004a000d
0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0d
be02280041000d01940041000d0121400b410db4410d4f410d29410d4110
02170021000d02150021000d02060021000d01eb0021000d014e0021000d
012c4014210df9210df3210df1210d9d210d71210d3d210d4110021c001f
000d0214001f000d020b001f000d0196001f000d014a001f000d0126400b
1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d001e014100
0d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c291fb802
00b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab2
3c931fbc01f9010f0101001f01f6b224e41f411501f401490401001f01f3
01490401001f01f1014900ab001f01f001490067001f01a6003c0125001f
01a4b23c811f411501a3010f019a001f01a200220801001f01a100500401
001f019f0149019a001f019d01490067001f019cb22c621fb8019bb22c79
1fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1f
b8018fb2259e1fb8016ab23c2a1f4111016700240201001f0163002502ab
001f014c010f019a001f01480149006c001f0147b22c891fb80145b22c9e
1fb80144b22c791fb80143b223311fb80127b23c811fbc01230050010100
1f011fb223e41f4115011d0023019a001f011c00230801001f011b002508
01001f010e010f0401001f010d00220401001f0108b223811fb80106b425
e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab
1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb8
0801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b8
0801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc
0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403c
b80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025
b802abb61f2a24e41f2623b80156b21f5537ba023500070175402c077407
6207560751073b0733072d0720071d071c071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b534201b0124b004b5442b0372b4bb807ff52b0382b4bb00850
5b58b101018e59b0382bb00288b801005458b801ffb101018e851bb01243
58b90001012f858d1bb90001017c858d5959014bb0c063004b6220b0f653
23b8010a515ab0052342180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b53
58b0ff1d594bb04753205c58b90271026f4544b90270026f45445958b901
7a0271455258b90271017a4459594bb04753205c58b9002202704544b900
3c027045445958b901b30022455258b9002201b34459594bb04c53205c58
b9014900224544b1222245445958b901c20149455258b9014901c2445959
4bb06753205c58b9002402714544b90050027145445958b9021e00244552
58b90024021e4459594bb8020153205c58b9010f00224544b12222454459
58b90c00010f455258b9010f0c004459594bb01c53205c58b125254544b1
2c2545445958b13725455258b125374459594bb0ab53205c58b125254544
b1232545445958b901590025455258b9002501594459594bb8010153205c
58b125254544b1282545445958b902080025455258b9002502084459592b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b01b361dc6463456523456023456560234560b08b766818b080622020b1
64dc4565234520b003266062636820b003266165b0dc236544b064234420
b161634565234520b003266062636820b003266165b063236544b0612344
b10063455458b163406544b26140614523614459b3a67f434b4565234560
23456560234560b089766818b080622020b1437f4565234520b003266062
636820b003266165b07f236544b043234420b1a64b4565234520b0032660
62636820b003266165b04b236544b0a62344b1004b455458b14b406544b2
a640a645236144594b5242014b5058b108004259435c58b108004259b302
0b0a124358601b2159421610703eb0124358b93b21187e1bba040001a800
0b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59
b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b01023
42b0112342002b0018456944456944456944456944737373747373737374
75752b7373747475184569447373742b4bb021534bb046515a58b03cb03c
45b040604459012b2b2b2b757575757575757543584010bf3ccf3c026f3c
7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f227f228f229f
22af2206757559435c58b6403c9f22ef220375592b2b0174747474454473
737474757545447345447374454473747573737373730075757573757575
2b2b757575752b752b435841220063032d00010003032d0013032d002303
2d0033032d0053032d000500c3032d00d3032d00e3032d00f3032d000400
83032d0093032d00a3032d00b3032d0004032d032d451869447474757559
2b4358b900180332b330353238b80332b361663238b80332b3535a3238b8
0332b3454e3238b80332b33c413218b80332b23f330a410f0332000100ba
033200ca033200da033200ea033200fa0332000503320332451869447475
2b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b732b74012b00
2b2b017373737474732b2b00732b2b002b2b2b017374732b012b2b012b2b
2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073730173742b
2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b002b2b2b2b
00>
[15785 11565 15133 16145 15433 16373 16301 15977 14249 16209 15865 16061 16221
16021 15881 16237 16217 15373 15721 16057 15405 16345 16221 16017 15885 15209
16293 15725 15813 16357 16209 16073 15917 16249 16205 16321 16285 15345 16301
16093 16341 20607 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 2802 11 <00010054fe4a027c058e0013003a40239611a71102860c8911020a980911
009801130100000a09a80e22500601068014545e182b10f65dedfd3c3c10
3c003fed3fed3130005d015d01152627260235100037150606021514171e
02027c9765909c0132f67b9e4e211a4a7dfe6f254c6691018ad4013601ff
6e2a44ecfe96c5d6af8aa79a>TimesNewRomanPSMT AddT42Char 
2 2934 12 <0001002efe4a0256058e00130039402429042a08480503009801110a9809
13000101090aa80e222006300640060306801558a4182b10f65dedfd3c3c
103c003fed3fed3130015d13351617161215100007353636123534272e02
2e98658f9cfecff77b9f4d21194b7c05642a4b6692fe77d5fecafe016e25
45eb016bc5d5b08aa69a>TimesNewRomanPSMT AddT42Char 
3 9360 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>TimesNewRomanPSMT AddT42Char 
3 10378 69 <0002fffbffe403b9058e0016002401d2b10202435458b11e05b8fff44010
1010025505140c00180a0d0d0255180cb8ffe6b4131302550cb8fffcb40d
0d02550cb8fffcb40f0f02550cb8fff4400d101002550c0c181700040209
13b803e240111440090d02551415001b25090b21590207003fed3fed3fdd
2bed11121739012f2b2b2b2bdd2bc010c62f2bcd31301bb1060243545840
2618170003020913141500215902071b25090b1e0505262500180c0d0d06
55180210100655180cb8fff8b40d0d06550cb8ffeeb7101006550c0c2625
1112392f2b2bdd2b2bc01112392fcd003fed3fed3fddcd1112173931301b
4079102601a406b606b507ea1f040526430d5d3620267503760486038704
a603ab08074707013a0814270d41131e144418170c00041b160010210121
5902071b25090b1e311f0590050260058005af050305eb0c16000018240c
0c100d500d700d900d04800d900db00d03000d100d200d300db00dc00dd0
0d070db8ffc0b73c350d6025c24b182b4e10f42b5d71723c4d10fd3c103c
10fd5d72ed003fed3fed723f111739f5edfc01f53130437940281920030b
072620031e20011a0a181c0019180b0c1c081e20011f04212001190b1b1c
001d061b2000002b2b2b012b103c103c2b2b2b81810071015d2b005d0172
595901363332161514070623222627113426262322072725331111161633
323635342623220706013b859a8dd2a28bab50a5560f20181c2a0e01132d
336d395b9d9d6435352802f6b9f1d1f495803a3a03b59c481a102370fd28
fddc3233c8bfb0bd1b14>TimesNewRomanPSMT AddT42Char 
2 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>TimesNewRomanPSMT AddT42Char 
TimesNewRomanPSMT /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/a 68 def
/b 69 def
end
TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 97 /a put
dup 98 /b put
pop
end
%ADOEndSubsetFont
/ZDIAGS+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/ZDIAGS+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b 157{/.notdef}rp]
ZDIAGS+TimesNewRomanPSMT nf
ZDIAGS+TimesNewRomanPSMT*1 [7.97 0 0 -7.97 0 0 ]msf
88.38 196.02 mo
(\(a\))
[2.65395 3.53856 0 ]xsh
342.296 196.02 mo
(\(b\))sh
124.32 376.74 mo
307.68 376.74 li
307.68 203.46 li
124.32 203.46 li
cp
1 /0 /CSD get_res sepcs
gsave
clp
[1 0 0 -1 79.14 376.74 ]ct
[183.36 0 0 173.28 45.1799 2.65241e-6 ]ct
snap_to_device
<<
/T 1
/W 764 
/H 722 
/M[764 0 0 -722 0 722 ]
/BC 8 
/D[0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 2
>>
%%BeginBinary: 1
sepimg
Gb",kM.5L)%Rg!i5L#UV0-(0t3%0ne^"r,/JcGkkMB\r]ag)IE#U+j463n`f&/(i;j6@rs3M02_IW@3=
=H;5c-SpYAGhj`[1Q(;XI<%6@=H;5cB/>G,k^@J0UKEQ5-YG5mjlh,52FCVbPWm/5(s;`/&4-XGKFgHU
+bUC^/,W^(GprT7?#hiu=H;5cB/>G,7d5OfLJ^1SlTR=u;(P6+PHu.GEhi7mT#2tJ)l4)9*/="=.".2t
0T>`43>m.8&4-XGKFgHU+W%BYG/W@s_"eEIEa/64J(\*i5j!Zb/s37mn&N11LBD'>pg,k8SMK)XT*L,R
"Cr4iNRGjdr6n()I]4A2+JX1!PWjh4--c/Bjo>QA15b6al!m6oL0m*FI7YOmUNfPGh]JT/.ku@"o51,U
G=-S:7ghDEpSG[im>OL4^..Vkh^KX-bPI[5MA5_mF#0%rl4=<PqfpHlBdhiA]F=d1[f6%rrd@*aql^>#
7D#X].DY,82.h&FZFT(">J2!eCqf]oHl)Dl\N/B/onn2tb)36H\K::Pht$bEJ+,Gd0CsFfe60M8IssK,
n&,$\q==C>qu?+o]6D0*s.2N42u%NFI<MSQW#rN6;d;s!hqo5DPEe1uUPAs04jUk3ZaKt_r,f*mj9e.T
ILhe<_m2K,?M=u\T!fkom&+m3*g_EAZBf0FZlHe,'RCi';#X.kQK&$3<N6RrLA,mP7J^P>k'd<QT?Gc:
S.;L>iSj[]0iX8#5.qK;nJkU.>V+%.T\:A,QHJ<;s"XM$T(<+G#=S9lfQK)fS(Fm.B)=hU:hgO+#I=3]
HoO7FTDJMt<Bf<1rb_Jo_8Z]PF1.te>qR%F'R/q]:@GC=W)0pH2TqhB%e0Am+)66C`EnfnB`9s2/_bb$
.(`QhAQ`Bj4qFXuStU&p8ihjAWdW7ls(GcC[KkC?5<`2Ar>9P?QdJ[S-1rubIq3#A9B[e\P5?)k5;FsG
?WXX!L1lZBMfr)@_-3W+6#MHk.sd4<'mcJ`63n`f&4-XGKFgK0n9_:uWR1P'Ce!sM.".2t0[(Ks8*PXg
#'un('mcK7'mcK7'mcK7'mcK7Q!q=$aP"r:KFgHU+bUCn#U'_Pm(Wu:5!T$#rFSWM^PNAQjQ%LI2]OfY
61^;&aRd,JP27Qfd.Ej]g@e<sE]A]5m^,-DB6C^P+h(kV)mP]7BN^n5q%ZMo5NVje\phC@UO49S?TbYi
q5a:;Z@3qo1tlju/aK%kIA=N0(bg5brOKC/P"TUUNPD*_a3U[;JTE(Zcc+gj/$W9EW^<;nen]9KYM:'h
-DWkAZfTj=>qhR=a9aDmH2gJkaJ6gtr78TeCsidXq]jGX)tO9_#s!X?o7Fth_VV3da_A]L?F+O^![6Ak
Zi/Ug#pflA:6t;!^<NWD87usZ^N"+"aXfXEOKtDUH108FRoa1qhQ,1jch*hsT4dVGV5t/kb*2TZ@X`5(
_bL^p2a)Hc)VP#Kan.NAQd7$G;P<d+F6Voe:,c((A3o[Ja3r*-II<j9alETne,3`Mk^E#$H?d3RM[2XI
3PkSL58fY[G<DpUe^+)F8h!-KQTgc7-.Vnjnj+8&4O`JZk>sY>T<)s\>h/gkl2^C@XC_-'.'TeeJh?FM
Wbhsq1qEIo,`c0\5:J/[(>#@'mRu$X]:I8NEk=+,!u>o3LpmF4>ub,G%Mp?8%UcH4;_*Q#M@^DrmB2gT
CP=QZ&/(jSYE2\`KbI&iP!I2t&Z=1fa"%^a6Gm13V[A-q"UI[dG?DfMotoYhKOgc;/EHM>iFkCuBrDf*
ftCEGRSQHqR`0l-Y7qJD'9\43Z*<7!KnJWCA>4<"m.`s,@/@%:hU7LTUNe>)pg`8bG+[@,^m*Q">lX2@
=aoh8h4.cb&!tUh-\"?,;R=b%hG<Ks4:$8*4I5fVT@b!+(:'.dn:"hRjC(aMrPZ.cj.Q.gA!tO;]]C;^
d/2n'bj>;HY/g^U]D"rFMtH*'"'@_t?B;kkhp:oi4So!.T%20[H0;j?6*gFf%J)6_XAAgj[f4rFW-mJk
hCDS)b74!`h2pD;*R@nCP`4,]GamIrVjg@K/;,L)?$-gE9S^M[DuhJ_MHEs9F<jdoFVC).[r3ZtXjKj0
1+bCC+h83^L6Aq_h=Mp*@r`6E)R=90=fKeC4Yel12mkH4KISmllD>Si*.s`LM-`L`>?uAMNm&%#VFI#H
:drheKWKa\e4B0EWi1-l9f6r!:cIWA!C@MQZOjDEFH`.-+]QiC$6]X.2eb8q65A%R\g^,:!p1g]-Uao-
g(c;YJ'-okpYfI0YJ6B!=0$O`Y27%k8c$-NF$J%KUUnL_Ytsen4m+PdNSRnI0eFbbN^uTdP4ZK16t#/l
Z1m:lP)4IgpZ%g-a_@1C2VtA)aals.5G:qp"7GH&,t.3c(H;$$EnsOTPM?8Zr:E1`2>?`,*$Pn_[f4M-
kB3E(5qOmZpZ73;SY$isK&4gVSr?0T47DE^kh]$):O`&hnZHoebiber(S0*gf7%S=5;(.R#8*9ZDcln,
oK2OOm,qW^kEPO!rUXX4o'N8i2h"u2[3\n\;H\u\cB:Ld8kQ:\j@TlShjS9$IBZo;6/E,f9*WFMR@1`A
7r$T7dZWR'mQ9L,AkaqPMK2e#IcJ#&$*[NDB(*p*A+]t-aUC"L*cdHN0L2Q\36._?MQC=moW<o(U_aFN
WX-nTYFZjcR0@a%+ZHCn,(qFtF(fLb+ZDotb\b!'^XeD18L=MHbZ4E7B6ld.:,3E[AS/[Eb7T(#dJ/ZO
\1C1LUc\o$+nl5Kbfnq1,;&B9O-7,*)<:_Q=+qf=;3o?d9BglSqu4m_W+:,p91eA(PT92,^Mu"]MYZLb
>6!Ht]mn)s0[oo[JDP4hmVeSR%D>R+58JR;hL@#g]V"(k.%/p>#C:Y[s10:EVYA15LQV&nIHqll6KK00
LBjldWrE.241b@hrl\N[-%8XVhrEhk#*%5qoD'?orUKj+NVDJ=>%Uo<5PjP>o:<Gir`Y=H%VYfOqbYl[
4O:uQf@KJ?#Uktf@jnlJLWB:G%*[/,bjKks!)c51#SO-Cc=-F\BckE-T[oe1[Gu9[)&gR7oY,KR9I6G9
=CZ%5TD&6^VJI$uaUkh]618U0lZ"Z`9l&,Qg@8pFbX02coY,L](+%GVYQheE*NoUf7-N2=gA@T)jrC&g
9k'<k:ouIZpP69H>GNU@Tim$)f8^q>A25uWd/2Pe6\rs@@Z@(p+%gFriUspk.rk^`I\QRNrOHV.(VLp[
^9],+(>7O\,FuM4_#6I!59%`$J*q)X<Cekjg7HRLrD7MFmlMI4Vip=nbSp<ELQ^p#VfE16%sQ@[l\D!(
VY?^0cdQl%dLFS#:^4U/ld%sX"46pUE9R8md@8>Mh*38p[6W(=@`7+;8>r9<Q$mc$qsmdM5/7p>)F05u
]!2jI.!K5E*V$kV6)5lq"bHpi,A8T>65AUbm%X[>QT'\A#-e/=%AbV?+u\F'<"YWFansfKONmhA#T>se
5^dk_<Kt,$O5BHA]Ii1YRLXkL+kIDQm4Oo^.`u$gK.(au#*_'#S3tI$O>Z*^@\hh5P>F]Y.qoP`9m&^4
9?:6m)us,/XscbC4h(euPe3(_;8cE=PW+8cLMd.6)KJ+udV?TmW1r(41l.m&2P@>tj@%LWJZL$H'-hf.
!C@O_Y,">t.?sqqboipY=obj_>Yg;83q*f_.!HsHU.D6lW9a^K(!QfA2<8de6uO25W1r(41l.m%4J8tr
jBOMH":ZJCe-7+M.`u&M7lPePflL_\c,7;oea(uQdHA1554/7%'jlqQYJ37KQ$;Njf_\`%IaA&EqF&s.
=/3K.5=]mH2T!u:b!F]!0u3+hH@39KqkQhiFF(^XPr+:@Uc;b/#=opdat%f`Vhue^`ILiXj+WYcUF1EG
fduZt(SBQ&FsRTlkQpFB4?[CV<;A6NLum]OJ5St6Kp%q#RpY;.V.fhVdIbJ&%4W\o\nuqqU>2"jLn^ZP
'KHP;e*-a6K\i=?D$T;'e%G-cPXN;FNS^j-'(>RcNKOjq(=;sNriO$1)+pUs4*gkpKMn^g]`)h.;Z9RD
]RO/%np0]@];&q[:As)7rm"e$rHXUFZE3=DT6F*_htKbphtL)$^Y#i=OMX`u+TeM,70On+l7$4sP+/5=
F2)'QK_R_u.Is3B"E)[\W$8+\);["l%^s]gYLZf)HG?kD:mJOVp6jcUF<qBZW1m7U6i[?"m2B$j@G^`c
pBsQgX`.t*jAKH_fq+O,77`Tiq79p(.SYbr&@?4n.5B99c:t5],Y@7drBcZ]BcPhaX;&A*>3&eIAC(lJ
ZtibmHG?l/TcV<A=#mX'==JR2[0Wnl$eIR0.IoN/7-cBlW$8)F]g!O?I>1Y\Fi9*e=boU;75$*CN@pRG
)Ba;R3f=Ru7:&HB.#l1O<Q$`Yk5@VmiRqil7:&HB.#l1O<Q$^Sg\]9)7]4R;Jqhoqdeaff0S*MfjD4>u
C,467=L(At6ksL,k+(Jr*/+N48aeTTffnioIbEbOK![-TM7_nPUtZrG.`u$gK-[IAfIuD!j<&_'AYm@&
\Xp<kg]=d.OAJA>PEWZJS:S=$MO`<_bN6ZRj9D:-K1%1=hNL:Yk]/+t%=16.;<5[h=Y;'S,<#V)*[F\s
dtHSMJg0N;mB^%l>X_s@>!5ET,,WIBhKOuF4qq/G`*IF8dVYI@($2To6+X$dmmg7Im'^]V,2K[f;Gf0@
'^DP>]cX)lJn"U.<teYtf8!B;&uhgs:C:O*bGDGnM$o+9&pMU*HB:Zd`I1Vi)dP(MX\N+\gm>NdNn&c8
.UniOmJTBNk9U5ESb,+-gE-;cmh`:IZ(H&#'VP1>.>]NHkE$MBrKOX^!578\8Q;sD#5M`a:H9:"d//fe
6kuaMO>XKFPZ+7U^#)@P<3[2d>>4oCB0lWF^QF\X@O4_A=S>ZgKECdp,:-4+A!Bs.pJXh>!q^pd,uMWK
OOV)?;bhrH:\Hu:P$!UmLVWX_:4iUDpAXm>rB^MBrKOX]!578\8Q:i'a+3n_c@Q,iINt\YMF7U':H8^g
4PBU.8iILV21)MN5;0'-lH8uqG>J5;lr2((_s>-RWU`[WrZ^6,E0[2T+pP<#Q>7XZgsl5Q?h]!?h2[4B
%ek,#2/)Y*Oc#$V;@"3^=p.h[=g5G6KlOU51B=]b^$h4S%OC?t4.7o7pL+8Ves@TZp+fNCkpeSPZj7MA
of$R4@#BgjE\1sQ.FN,j,8HKH@\^t9Pp1s=FpERI.],JS?j=-e4V*biP=4rTDmnDpB]F&=-Nh`mhGX=%
\cI[H%ej,8@(QQTIuHXNTISCf>@_Ffm^)>MZ8IZmK1%1=(5(c5jo(2mO)BJ!NPg0F")O=^CY`J'=p/-e
52:!=>H3<8AA_<,<OPQIqo8uL#caU[>e(l`?,Q@L90lTUR[#):nI.f8.U>=i?L@]3>Mrf)p(L(b<`/^X
,5>\L+r-BG+;HR&I^qDqY$q3aV*M*&>tP]N/j#2Q8lr:FTg_cmlbf"B"77#8T3)H-MVOs@_5?c7WMjnR
)]`)b?+i.$Gll'i@Bs;j81CB(/4CDu7AQ[+'r9i#fDY7KJ6g(d'2(Vl;*'pca@ncA'pYpE'sG4:Q`&3e
2,#nZ"^+9.:l55t3Jg^7\q3noaSY'bZuunB%8/uZ.ICOmQ%@^Y.On^i.RMu&^M;I5=.Vfqf<G4l;XD""
Xkk&=9;nT5'f<L4=Ci4_WCFGqe(?No5Hto5'r<u@d[J3PUnZ9PUuE](Fj%\LG7E;&/-RIK2^_'5irk0;
<4]pn'Jcm]d+,PN'2Wnt+gm\hPYt\+U]cNR6jJ9@XHN@k?_3%aCC[>_'VpuARNj+LU`qi*P[]orGL'1t
pdY9bl2B"6i)Af?V!O-AFa*J\e5,mfe0bAXmJbrQ<C@(C;QQ&BGi(ITfJI1C2spV$+7cubIBAFigsc+Z
fD6_;TASfl7'K,,eY-n.g^A8IW,,oM;G,UB/B'5r8>r92'r9j>hY0`-!C`L,/fUar]bI[ILBt<oWZlTe
],-oC^eMH@Fe@O*-(82V9r%H6gpW/<8n'6q-Jf/BcrA\[h5'dL.99%(I19c7<8"@bk1DL:,tOgU3XCsZ
<=ut.6/&mjb+R[i`Omk#TRG5bC'I^2amfg'#EGqFFl/d+&m.o69%)Vo-'-8Rcu(9=@)Qm6`):8@O@Vfq
^iBd&r&!l/3Cqtpa1^%5<HJM*N=IOL<tY+SR>/qfH(=VSh/>tE3p*PAd_uc`Js:;W%aF;`;DE;*X,<I\
?`#'T2-:KWJs8V!HE?kG7F9"JhCfNTfp^ir:$qmU7>J[!MH(;8orI3Q1+/s$;,X5%QJs=3f=H_C[KrlW
Ibc[+P-HllX_Z6?$&jiR/V9u.HbW5_^,8NS'EV2G90Lo(fHO-@/Y\:^(\lQ0Gu=oA8M!=!lPWMJ/YYur
)tC%USG,Ac*<OD5<_9U1?R?$6)C8#`@4@47]\bqAYXQph5oIl,TNe1%8KfW2YnWW>,?,6q"A5pkP5JLm
9FnWjN[-/%YnWW>,Z53p"A5pkEf0VYRWPIa.'+?#^TSX!D%?]E==))^I];7%j;_pZWq0V\VnLZ0QM9@&
JW9]hd'#J@(:j.HXr-E409M-jN)5C37F1\%.DoA>WOZAr@ZdR:T-mSMPn?!)Z1j.n)4.X!%UtQuh=H:L
U4Y][<_5>uhkS-oPTmU(M*115DQ"a?#aAe`K\e@NDVGhmiOWrhVb*g43XCsZQ,L)D:b@G8f2-XH+ZW,n
B22#LFirQo8h++4K@'K][Y%oQrEq'o(1m.UTo)H@;@&^sY!h_sfFBsOpLh4ta$T>><_9N6)1af]jR!@8
kS2kiB2M]j&ZVcd-&(nhKY8J.2)M.#'8_q$qtn7(jB;j=Pc&!*n+51c\;F1[M&bO%qi9`@#q;+:i^MJt
E[kfSoR;`q7AVF^Pc*LUfDT^rGX!?kk^>sAXb7D2;t58(QchWU$Ah.=4-FA*U_#Ap>j9+PSoQ8^:I^oL
Fm[03rCRAF"O/Q#]$1'5C>'V'k^=DDMFpfF#b#&%FHuUDoe\V#d/,^f'pYYl:nEPWHG9kS].[R?ah<2R
^e^o)dZkNh;t7fX\n)9g)c/6+-oI]-GJ!9uP,h;KTfa(9]C)"_co7VB49k&)V$'GJObO'h63WXOTL#@^
\^D5L0B8^C5S6/6M=XR4c[X:$83t"lQ@W_V((t7.n+3sT+le1?IMmu3CE[]]I7J=[KG;R-nKdRiYu"CP
oY-;]7AVF^Pc*M`hT*Q+Ts;$GFbiER4-FA*UemY?=*YmO-4P*C3Tq$0hKL6s8k:+=G.H&cYBA#0=I^qL
p#Y<Uim@R_A;e6K.UM.`=IVF;%cm$tim@R_jQ>gEEI(sr*(QS+X%)P>P%uA>:nEQBh!^RRVOWFsK%qE9
""f2&"A<0u!-5o/8h++<Tfa(SI9uYXKISHG8YJ6]YOF_*9JU&f7I3h<>FEQ=liu;W-!-S!6?t%eEkdYb
P7-(b]l,)o:h`N/jf*LIFhb'V)4qGt4M9j^&ZY%+3)@M7Y5A0^[fEffLZDXVH66o^7]<%Ki&h_Z\aFC]
4Ik;@6,%FH4k,?X#(ha&\ps'=N]b/T-&br0DGR7j)@.g9XnO]<XFr&Q>tL_P'aO;Yae<#\<jOp)q\-Wn
(&Q6SnI"^e15)UXJ"l[giPU<u.UC^4Z)Td@pIcj@"].)"S\0I/4\tqQrc>_ZOtd7p-\DLqkPY]nle^.g
8"E71-DBO3f0E.eHN2W_*#[Z2MS-Ok,p/&lEirYF=Uck#H_+8>;CG>[&[)#-#Ir,QWa&D($n=a8\%7_h
Gq+hn^L+R&$S>s?"W\a;-!3bR6!6??W1ZN94;A+jId$qc[#ujS<7ZYYS`>."i>A8?%Y=4N]`+M#oE#e3
:.2^K6<HjaPSd7u^CZ19Gq*/#>.8SU'jAmM]7rXS9!FNs;-(FCLVS0b?K$<Dr)?Ld`B9ue,D;lr98O6l
oa>aFS>YB.fDST9=):[GLAo%VaUX.`PkWLKXW,,#E1VphH='`HVHF4?48T2?2'l?sS4-c^8fRoqWApFB
FfeX:V<E>6pZ&*7Pb@c/P%:HRe\E4IE6hILmfFI1kG^G,pDZ^^.;ClAD)m7Y1mIah_dA?ii&hbCjaFf^
e@$>`C2#h=ncVUB&S:VC!<mq&pDZFB-p9]^Sd-,3=tWg;hP^*$jAH^Gp:c^L6n&E7+GZV@I'_t#&gPQa
(ZGuc:W4isO0%;0.1!>p%\X!Pqd(mTn_W,XROCVIE=AXR@F]t+`/)k2Kn'6NI,-`J&k#Vmn2F2O(6Os"
3l%a!98O7Wi<oYi^<^rZI)"Q$!U8<Xh+,H#3l!caQGQ*/`r)LFk0]l#'6q9*1sWQ(_!CufJ-+&EcP*hG
027]&To`O*0i1uD?n!h)1jgI>^sDY%!Pl9i>k`/`ca2-"ePQgP!"',DP#uH)mh^eIRW::+5[eqiV8S2<
n2J(,pAMUP+9ta$RIBmpV5dr99MP/NV[*m1Q;=(Q]RQlpq05#`"=Wc`pH7S9[AX-`&+B7HL-NN!o?BdO
^D.:nSDGnQ:dqJQYkK0g^fl"U01XTKIh1Ft%L9:)AS`Gqkl$23rU]K'Jh>`B?B4C7hEEt?a9!(NES`?&
R;/%dpVl!nC6"VI8hW\8LCXp)#:di5:`8$.*ES>D]J$F>VW_Qj=mkO&Ab#3qlZ4uq[g.@(5K@uJ/Q/CU
C>.l1]'^@OXQtH+pBS7sY><t:X<./fg([g7=dF3+$7#p;87JQV]jFUQC<?^FKp3?^eUjX9Lskc?^-6]2
n8R<,4o^iFSPdsNPi)'nO<j$4I7bq;(OJA49t@(*'Y;L^hCm<pA*e9t)`^#?7V\SO>"=??NU$I_6kg3u
H=62o[3@u0l2=nMqKf9H:/GpOmu.$ZZ-OXJUbnaO(6^,N'KF8("R4l"p,V]'X<6edeCUb.PrLg(C)ZQ!
o'N[-,HmnbT_)ifQ/5:Y*@`q)pI4cKf]SB`;Hc>PiH:dL&!bjmVI?)e?:notC!Jd*Cu/NIT_E;?\\'SQ
G=9Z\YGLjk7W./_g&YOSI;QO_Gsq1_Lfmj7]]Zi7pLC8QqtlJ\b`(Cc\[?6lE=U8HqZHK)\qoC<8(=\r
PQe3Ymr&V>5O^\FljjNnrQKU0,iN"s01$;]ecai2e8^H<4(8(uo5Sn\HZiP_8aeUmlL4]-7N0mI_##.T
qn'Z&`4m[2A`pg`^N9)Z.ZkXJN7QCM;E)8OOT="%_#'!MN_q_)mIS4%]-lKggBWK9iWdP2f`t)"2=kt*
$FnXihX>F>^BdfYp2O'Nf]p-;mmGGWoR6tUN/9%0iVf"c_KqU.]!$qM)!+@d);E3rI0Hj1)8+;]IYs"k
mir/2^0V8MAM$@>2cB"C?fCtYDTVS4V3D`lfm(i<K$)_0SpCRNQhQbkEX3CM>7%85enQj(n)oqHeGIq]
f?22YO#Xf8Z!\A-;8kiiH&cJGD4"L"N[a:,cH>Ie6/Xj?kIL"&g;@W(P%1FMb%aIthD`Lm<=r>"$cUh?
ICdoi"9>IC5r;.`B:W&%eR!ja\!.g(SgVYW8/4.@->DSCZRWB:9@3PrV(TLM9=@P\?-(ln<mE0*Z3AB-
N_uq^Q*Gc8MX18#hH0>&akheb2:o];NUM9pi2:k8TD@"HR)/[B4H<:A`%GPkMXc$7,f/[BDWYjg@i*0/
)nl9,?,euAa*k(:#c=<\?g.GEZ-*ta&Qh@-fkY#mR]]=Mf=rSXT<EAp:kALgJ)opE(\8a"i-#&\:k>8&
rI"2YQ_=)V!u6(-HQI64-LYT:^Tmq0H*.5a\Beqra6KRK5Lo__qU]!H`>#,616uF7/$[9RN?0W.MYH_t
&!j\_j,cu/6#%ii3C^Oj<8cqc5K3S1D;O_g#:f4!n+WYWNE?PB`JM\p^\?Of;1SuF5#_n?eQ/o!YSOX)
j,iXlhN(W("n(FLbSsWbXbc_`:l<bVdTog1HG@jmI?;BF:\?p&>uW_.s4EVWiB9saMPn(bCs]=VS]MmJ
k'^3:HG:-4dp8\a&&.J,!n7$p.)jY@<&WV)1qKt'JsCohVg)QOr[^YR]9D!HpNMlI\L&2h.`PNXkPZpT
?hRmP7:kNXI\SFj+BYVql5dQf^A5qn3@O&>'qoACE?$S)P;uMQ(&/Bt5MQ,5j\PK^R%e]S4KbdB:ZY,9
<8`l4`=0fPWSZ5[]U_'am;,uUC/.Y&CE?PXn#(0$+tE(\]RLR2_QL"tai;rD()aC)j\iA6n)8Zqf@Gb?
-1e]$C1^7E&rBS0BTJ,_/`KkqfDB'GhmYHtfm(hQOV&NQ>/[]BNP4f9R[@p(mTX5?7Y_b!XIeeWOj*:L
R[@p`^-tM-FD)9,lIk#9a8FerM90@ZQ):o?7J&kj6n4o4&*&(.XbQCX$k-@8,`3`r`P)HHr\4I+P.<X)
<_]JI!g]rc1;sfj@c%34rtp;&ENGa\cZ;))&klN)Ul$<H"Y$9iNho]eFVCb<O:`EP>/[[l&+<kCIcK!-
a^PNK5tWT>@k#rBSO=qgAAgrm(3-G4`VUI`hmt[;[MZkZ'M4b6Q.;":I7,PGAAgrm(<Kf%CJ30V>Xkh5
pHW0n9<ms$"2#/@==*4pI<7qQN&+;!U%]-C'cf&=UI0rMY&5lr8^`N/)tZ<\UnU4GCij?Qbgiu,Eg?)#
.LqbtV')Ul'VP10P0j(EY(89P`"]"HOTKb"5*TNAK\k=bCSQTf'Vn]j!qa2mOt41`d,ng(g1VW\"Y!HI
!1;cn66oGAPn?Wn8ofsdM\m<MLGi<A90l0!H=A<E2'a@\;&Q&AX!F[6#VIllq*!HYqtAgRN)5C3P"VtT
oKKtGm)hMJ<K_.15DT'BSin5J"Y$9iL8B.U&-u9(AV<s_P$I)H)9f:mlj7)L81CAk/B+B>7&2"V,EuZ&
j=9U/DuN5D%b^&o.G#gi2EJ39k3?WZh\kN_BR.@4lmq*HoQe/u&%t_cV7p"Zn+2k949&UPIJWh4q)tqK
_64*CiE_%@[[VS-<"YB-9!M!/V>'/i[qYIuP2)969!M!/P5",u^N7llmsX']X6gsK-H*H/oKJAkQ4Z`o
8og6lV`2A3e*c]':dn>Q.)dZ-5O[Lq_XH<f1V=gaZm_W*kTE]Z<Kbh6qfA7a]kP.I,KWXtTbOOQkBVPl
o=Hr@hFE`u1.!Ej8P\pW`9)"*)Rc8?ML>`nrF5t6"C41,qpUuuY\E_nP2)969!M!/g2#Ne$*t2r[/53"
M,ZlSKMnn7S9j"`dep@E]>+)-'pYX='kd+:I-*pWNSYc%qf8M@]tZUDL/.qge*-bXmWl$*d+)(_pG_8L
RTp9*T6AoOI5/8],EuZ&jFZ^skM4&`<s&&5Q*$PMU"(`A@j4kb*<]!>Wd's+B?)VDYPVdL;ar/=W^Q<2
;+>]L"72nj"*a9!(;`NW.p[S<Ifg[rdJIBnXTYFD]mg(HVU>93E_DT&]`/uCCP-(oM^_2r+pC)p#nj8:
FCcQ4WZo.FTkK'f;Mutp.:moU,rY^f:e=)G8B#RTlft(O&aGmRe7&b_8m*6.M+t`2<)V*U;K5t1hphUa
.5@g@'Vn^nV?I9+6jJ9@XHI]!rXI-0SC&r.^#'_29!M!O/7YYgf47jBnM$r]'VpuAJ7I&;KISHW5q:=[
B2P:=6LT\/fF]U4#RRIi^A%(*\t;T\'Ym>gqhGHc#eE(ljg.&[F?c$A.=d\XpC@jP&Ti0ff!.=HGX%HM
.=d\XpC@jP&Ti/A?NAqY,u"_SV<IkF"Bu"7*WD?jGo$1(.X=nl.n/nK,1n+'lM.j3b*+OGViiG3Ju,\i
1'IuLN".V3pRc!qk'!?d4\g9JB^m4=P"Jg&+N&L)3Tb8K-bYQdf1L]qPUh$lO/5h%\1PLF?@1!SfDRlK
P%V6rd`;6GE'LY!]\eL-CF,W>`k1E5S97'3\]m_OG5t6tHM7t#WH9G?jOpYuo^i'qh%*:u<B@\n;?Z@C
:8ju:'f="9hQNP95Gi.s8k4(jMAR\E&Lsc%"V!6JrVg6Hg6;*1om6Q9a7;Ff55b/ih_MCa5H"ECr\BgI
_Q*OsaPjt=pAX9)7`2<_g.%q#>38`T^7Gq%0ic7u+N]6bSQLd+De,Lr#4?aX7Smg('XRtp5,ZZ:d/2lo
:hcjD[/\;6=gS)7LQ\]Dfk%OjR(GDQpDqA)pIQ6C-!p=-&lfjL-'uJL:E+J&[eFM8/YY.jdW2I`]q9;Z
&%uXP<70`SRU8@H-?7WWMfd^Y:e@K6q]JoS?$fT4d*kjf;+.bYRU_It3u0<FFCcQ4WhR\qAWLd!)kuSK
KqK-%e"f7SYj90"jD%ci6-R3@127u$s+N'5(4oH2SWNt6j),3ZOtCG1W<e"9l/)FVY!"n=<mAud_iPKH
@A1Hrj_pCX>:5a2nQ3`r^h;G6A%^.fQeu!r6r>'el2=3\BQRs3\WZ-`Y0n.!cnpqQ:l8LMN$s\)#aIg>
&e<Cf_kLilKqK-jPSd79M\.FqasA%qG0cqb6LuG#P(e'R/gWuoc9d1V.UC^4Z)[$\50_tQ="L^oE[``;
[MC#c;<c4cHGAq?k\ZLc%DbBC-C5>iH>`gN'pYrGUXT+8d+DuW^X8<poFno6pM2VI$LO9e8rU-gEtbPZ
8HOp$WqU4VOg\Ge?'@p<O_/rH65:Y8^sUJTX]mf>]E._ohJ[OJ*rXm[ro#-n%nJ0!!i9;$VY7`PoTQKU
a3t;BPS=EB5`B)63XA_b\h]=qJbP5'4r8iBTj<jTM%RBr,GC!V,iIl&H,"D!_m&Pb^#/%r55LQ$-T[*r
-C8c>F37UYjIFUnJ#u@OY^Mg9LA&?f,c1m]5<IL]b:,f*5EtLnXHX>K<Q#U2!o%?JL#+bafLq(ldedH0
3NWLICH3r01KPtbAb<Y$IbEa#NdT4'bVOcpT9JCE-0L6Dn",<sO.g<VB)qfmk6r+uc5E20*u.f!49O71
3G5QmEmEl3]heD"d?RB^J:4&27LLO*N8E1`FMF#oNemtEmrQcjU#`(!B7%C2rbLmckN?/U7-h"t`>ncF
10l:gB66g9cfubf`<&=-L_4e.#bd,r=8(#tYPU/+2\ZK"%3S-Iog=B^b$E[jVtXghF$S(P@RP&U6E$X6
Q$r;KHQILJ(RbH!?'EHg&[d/qTo*kldNI3+:aoD.6Frgm+OL0"o7#tITB>Tpl@>N.`/*89J5A\F/,SPP
hP^02TK=90!&;o8_,%#(gm*<[eCV:P4;+RN!6?(!74H[O_+gl&gm)@\X,>0f5p<57*"XrW(hkne,udb0
b!(.JFe@gBV<NN'!Q7O@$R_X*E`]NnYsiIj6XmDC!:?4[</^fop]sla]93@qoX(V(Bi7J/L]rA7&0k:%
%RLolY%"/9M\nC.T*Tlg#:(5G@G^Hoh>a&1R;YL9mc3_Tq>=7gf=kf:Hi<baoVKk%pH<uu!i/OIJ/H,s
fgr%cA7TZOT&(hYg8^b&IDms-L@IH.$<s'k6n\Yhqi+%UBgPYW*JbS`hJXsn9bW*[)F->YmiNcN.=2#?
17`7-aQYmQCb[J!3`M!n^RQM9%DU6L*?A?PY!pX0aBK33!3c9s7@YS65@oTiCEKJKD%?$4$3;PDfmoFj
k^D202#k+N4\E)0SDJ1M;AMh>L?KVqkP$rOO^?m_ktem1<*n;t0i9Q[AE4.28o>R@7.81\;KQ0X,-L&l
ge=jl/4G^BZ\Ftp7C6'(KIY,Mfa#>cBap.S!NdLm8J-*5&>=u%=8"qa;Ha1`8jI158Q%r^-:Ff,gm*:!
XH_E>\IR+-Eg@Eef81'=.!K5E"=p=X5ct0sL7BSZ)@H]S<Kt,$%t^']oKY#1[YC;!72cO;#Z[,$Z4DPP
C,J;[^gIU3;2R2sEYGH$G@_j!/(O!<>QAXN,uKOVQZ<b>.!K5E"=r#?K:IqC)KMhl!>]_hW[N(&*s=*J
1dXsVAdpb%MBJtq#Z[,$Z4DPP_HJ+\@C:i[/Oco:4G53,?.fJ!8tjLk;m9IncBfa=MKV<$jf[s&@&4;1
ONtA;+d\97L..)T.`u&M#Jj#8Rj(#b>=0hb7EeEBKIY,Mfa#>c3?'8W6grM$:PIZ'pR_f+:[^L_@FOFg
^\;IA3KWrnhD]_P(]F`7pH*Vlk+;ZobNSn\pM'Ws5n-TX+!]Jp2#m'\#,h3V&T&DsIrNonUA(G>-V79r
]))2&rq0^uK6]YsAJKRlEj!P'b#ZM5'.$TiS[!TJofgVb1$VfZ//'=/;=;RjLcV2#D))ah7`Htm,udb0
b!(VBTLEZP')G);//'=/;=;RjLd%J#DDD]]I>h;U8uSK>Q$nb6J/5uC0Jp3mAsk'@MK2el6!=@o'ISO[
g;TFjU4b#=?.fHs%VX7[$peqJA!VraW[N(&+/D&m7<NW6m6(k]-;((C[B&"GEAUQ'&Ss`g1q7,h&5^nK
W++m3d"!J5ab=+A(pco#:dqoFq]P*QQ44rQJaQjg1/T51Q*0J+Qj,B`"$%=<`l0JB,udb0b!(Vo_X^=s
r;DuXqY37cm,+pFH`r\K+D,GMU%b%aaF-mD9^a?)aNpTsT_FKr7?!<IU$OPJ:[d0ZAXhq4HN2RCqebfN
r:bm$VtV9j[`d"i50a*-p3TL%f-5>:%FMY00(1;rAU'j0^DDk=VYBiMe.9`bcT;i,of:oR4M9SN:qfa)
rqlqdDa3\L7XWMWT""PF1r#>@8'3a&s1"Wl=)4("<ep*5IC%ujg;gO'$7.&/;YMrW0:85nPTZ*Oas>=V
lL<m.?uFD5@Y?5R?$QWG:m4QUBI5Sc7&Zj8Q..KO4h3SQR>/KE.p_rTM$lpf!HqBd/O68/gm)rB"AQuX
^h2$$!ea/q_apK@r&"FP^tmL2$P4d:[fm4=s5l8N58H%4'AZ&K.e?1SUBKYD[+tj)%hgFl$m^N,%I!f'
")L&<4A;]L16E8;7%jEqNR^a"ZA27JAL;(%FkO:GA3A3J#EFQGPuPbd6Eh*q">VR;SHb+0$'eJEP<q`%
aD@+>qbZ6GVYA22U%cZ-J\6K%p[8@`-F\Wa-Vjp:IYS(oan.bg5]Xk-]he6`0;:24=lsPho>4;ggsl4/
%XBb60BVuBr2Q=M-SHH?8m4!7ChoF#-V$u`F]^Ga*:c;<:\5%SNP1B+c;0XnU,uh%mqZ(ek32\Jon26?
T2AVcL6?=0crgY-UUeT]<7S^VjB<";(d`CZG4?GM[;RJ(<^U`6UMaUg<4DX]WnKCr>cWEO6c^2%ANllh
p'i>"C)Fr6AAuS5TToS38lhFaKUSln]_NHK[Z[+Vaa2RZ:ck#*Il*_U1TG3I:i`[-]A\bWP$)K;`Fi0#
^7jUk%A_sC)Nks=CuR7N=u_aOX+<.`;+EA\O@agh<==SFCGi?$%O[F;!]n84<4-Zn\Q6VrE(<@=']A]S
)-&7.9!6_.f!*qgnG$tZqS+*NSc%+%\(gI:o+V(\/Xprr/YsG:NUO>MCU7@qIfFdFCnH4/3BjOrD(e$j
m>WuoD'2eU)5:?QjCt]T7.6<e_<X:1.W]s/jsPVh)2[2tA(/ap]t@/4P8$(SLu'LH1V`\KIc@*"Mb`k-
btm\Joh[U92h1H&+UpIokY1H+cgK$\mmGXs2@g9im*8pdL\@G!4!Sp(5K?iTQ>_J\aPZ`$]T8A&nGD0m
>(-;/fDsECn$,,IGA<5$0O_Fl*?%NcC7Hmc\MmBh$O.%d9/TH\LYS>keKo^"P/S?;X$^bubil?\6cieo
oCX99-"M)A^7f)J`p!PegCgg&B&?Fj;WDkQaA%MY>dnW"=fl\T8E>g+*FA?u`gWqQQ5W;@VoqKrLY(XN
-.gH?*O+(EqE%t3E\G'H<uedAV9A`1qb'^dMqeQ8^Dk2k\T2\l@I*GoaiGKA(`P="WSXhSXE(`E)pcVX
Z2;r2ga0>WH+aiR8c7'(`(s?!184Ha;k`s-;[FE;bZ?0FA.nSf]h]t$g\WflR>%k\pYMhDaXj67TB7Mb
&@LlPqfG&jK<Sd"k,81"%.s'Rbtl?WX7q,DKu!RWH2YUUcd)sQS@3aJn)sJ0rRXjEiq<=ZdQ&"e#1;bD
@"(F?a`IC:]AWgEoHqiS>O."O&CR1-f<;h+/jRJq,^FiUh09)icG8d<iHb=9EChm;O>FDlqgX[-)2+Nr
[GJ)/+QNYjldPalDP5S\rV2L2][+n*dN.!:\<EC"iX)(VqhLg<-@F_)nGVkNgXeW-7X4l*\BTiaO+01I
?ba$4KffUqq2$q//^*9TTm&GK&FsZ:)ZU,1cLh~>

%%EndBinary
grestore
np
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/ZDIAGS+TimesNewRomanPSMT*1 uf
/ZDIAGS+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
