%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R7512.tmp.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Richard
%%CreationDate: 2014/06/16, 08:49:12
%%BoundingBox: 0 0 227 184
%%HiResBoundingBox: 0 0 226.7710 183.7360
%%CropBox: 0 0 226.7710 183.7360
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1353 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-06-16T08:46:40+08:00"
   xmp:CreateDate="2014-06-16T08:46:40+08:00"
   xmp:MetadataDate="2014-06-16T08:46:40+08:00"
   xmp:CreatorTool="dvipsk 5.86 p1.5e Copyright 1996-2001 ASCII Corp.(www-ptex@ascii.co.jp)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e6c8ae6d-afee-4bfe-ba60-193ea4fbede6"
   xmpMM:InstanceID="uuid:d66dda5e-9359-4f0f-8372-e52a25a0ef08"
   pdf:Producer="Acrobat Distiller 7.0.5 (Windows)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Plasma and Fusion Research,ISSN 1880-6821</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">http://www.jspf.or.jp/PFR/ </rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>The Japan Society of Plasma Science and Nuclear Fusion Research</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
/0 {
<~!!*-'"9eu7#RLhG$k3[W&.oNg'GVB"(`=52*$$(B+<_pR,UFcb-n-Vr/1iJ-0JP==1c70M3&s#]4?Ykm
5X@_(6q'R884cEH9MJ8X:f1+h<)lt#=BSg3>[:ZC?t!MSA7]@cBPD3sCi+'.E,fo>FEMbNG^4U^I!pHn
J:W<)KS>/9Ll%"IN/`jYOHG]iPa.Q$R$jD4S=Q7DTV8*TUnsrdW2ZetXKAY/Yd(L?['d?O\@K2_]Y2%o
^qmn*`5Ta:aN;TJbg"GZd*^:jeCE.%f\,!5gtgiEi8N\UjQ5OekiqBum-X60nF?)@o_%qPq"ad`r;HWp
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 0 sub 255 div mul 0 add
dup 0 lt{pop 0 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
/1 {
<~J,k+MJH:=QJc^OUK*-aYKEQs]Ka!0aL'EBeLBiTiL^8fmM$]#qM@,5uM[PH$N!tZ(N=Cl,NXh)0Nt7;4
O:[M8OV*_<OqNq@P7s.DPSB@HPnfRLQ55dPQPZ!TQl)3XR2ME\RMqW`Ri@idS/e&hSK48lSfXJpT-'\t
THKo#Tcp,'U*?>+UEcP/Ua2b3V'Vt7VC&1;V^JC?W$nUCW@=gGW[b$KX"16OX=UHSXY$ZWXtHl[Y:m)_
YV<;cYq`MgZ8/_kZSSqoZo#.s[5GA"[PkS&[l:e*\2_".\N.42\iRF6]0!X:]KEj>]fj'B^-99F^H]KJ
^d,]N_*PoR_Eu,V_aD>Z`'hP^`C7bb`^[tfa%+1ja@OCna[sUrb"Bh!b=g%%bY67)btZI-c;)[1cVMm5
cqr*9d8A<=dSeNAdo4`Ee5XrIeQ(/MelLAQf2pSUfN?eYfid"]g034agKWFegg&Xih-JjmhHo'qhd>9u
i*bL$iF1^(iaUp,j(%-0jCI?4j^mQ8k%<c<k@`u@k\02Dl"TDHl>#VLlYGhPltl%Tm;;7XmV_I\mr.[`
n8RmdnT"*hnoF<lo5jNpoQ9`tol]s#p3-0'pNQB+piuT/q0Df3qKi#7qg85;r-\G?rI+YCrdOkGs*t(K
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 -1 sub 255 div mul -1 add
dup -1 lt{pop -1 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -183.736 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 183.736 li
226.771 183.736 li
226.771 0 li
cp
clp
.118 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.526 126.318 mo
61.649 126.318 li
61.06 126.318 mo
61.526 126.318 li
59.048 126.318 mo
59.637 126.318 li
57.037 126.318 mo
57.626 126.318 li
55.148 126.318 mo
55.736 126.318 li
53.136 126.318 mo
53.725 126.318 li
51.124 126.318 mo
51.737 126.318 li
49.137 126.318 mo
49.848 126.318 li
47.248 126.318 mo
47.836 126.318 li
45.236 126.318 mo
45.825 126.318 li
43.224 126.318 mo
43.813 126.318 li
41.212 126.318 mo
41.924 126.318 li
39.324 126.318 mo
39.912 126.318 li
37.336 126.318 mo
37.925 126.318 li
35.324 126.318 mo
35.914 126.318 li
202.201 157.059 mo
202.79 157.059 li
200.189 157.059 mo
200.9 157.059 li
198.3 157.059 mo
198.889 157.059 li
196.289 157.059 mo
196.902 157.059 li
194.301 157.059 mo
194.89 157.059 li
192.29 157.059 mo
193.001 157.059 li
190.4 157.059 mo
190.989 157.059 li
188.389 157.059 mo
188.977 157.059 li
186.377 157.059 mo
186.966 157.059 li
184.488 157.059 mo
185.077 157.059 li
182.501 157.059 mo
183.09 157.059 li
180.489 157.059 mo
181.077 157.059 li
178.477 157.059 mo
179.189 157.059 li
176.588 157.059 mo
177.177 157.059 li
174.577 157.059 mo
175.165 157.059 li
172.589 157.059 mo
173.178 157.059 li
170.577 157.059 mo
171.289 157.059 li
168.689 157.059 mo
169.278 157.059 li
166.677 157.059 mo
167.266 157.059 li
164.665 157.059 mo
165.253 157.059 li
162.653 157.059 mo
163.365 157.059 li
160.764 157.059 mo
161.378 157.059 li
158.777 157.059 mo
159.366 157.059 li
156.765 157.059 mo
157.355 157.059 li
154.876 157.059 mo
155.465 157.059 li
152.864 157.059 mo
153.453 157.059 li
150.852 157.059 mo
151.441 157.059 li
148.866 157.059 mo
149.553 157.059 li
146.976 157.059 mo
147.565 157.059 li
144.964 157.059 mo
145.553 157.059 li
142.953 157.059 mo
143.542 157.059 li
140.941 157.059 mo
141.653 157.059 li
139.052 157.059 mo
139.641 157.059 li
137.064 157.059 mo
137.653 157.059 li
135.053 157.059 mo
135.642 157.059 li
133.041 157.059 mo
133.753 157.059 li
131.152 157.059 mo
131.741 157.059 li
129.141 157.059 mo
129.73 157.059 li
127.128 157.059 mo
127.742 157.059 li
125.264 157.059 mo
125.853 157.059 li
123.252 157.059 mo
123.841 157.059 li
121.241 157.059 mo
121.83 157.059 li
119.229 157.059 mo
119.94 157.059 li
117.339 157.059 mo
117.928 157.059 li
115.328 157.059 mo
115.916 157.059 li
113.341 157.059 mo
113.93 157.059 li
111.329 157.059 mo
112.04 157.059 li
109.44 157.059 mo
110.029 157.059 li
107.428 157.058 mo
108.017 157.058 li
105.416 157.058 mo
106.005 157.058 li
103.429 157.058 mo
104.116 157.058 li
101.54 157.058 mo
102.129 157.058 li
99.528 157.058 mo
100.117 157.058 li
97.517 157.058 mo
98.105 157.058 li
95.628 157.058 mo
96.217 157.058 li
93.616 157.058 mo
94.205 157.058 li
91.629 157.058 mo
92.217 157.058 li
89.617 157.058 mo
90.328 157.058 li
87.728 157.058 mo
88.316 157.058 li
85.716 157.058 mo
86.305 157.058 li
83.705 157.058 mo
84.293 157.058 li
81.693 157.058 mo
82.404 157.058 li
79.804 157.058 mo
80.417 157.058 li
77.816 157.058 mo
78.405 157.058 li
75.805 157.058 mo
76.394 157.058 li
73.793 157.058 mo
74.504 157.058 li
71.904 157.058 mo
72.493 157.058 li
69.892 157.058 mo
70.481 157.058 li
67.905 157.058 mo
68.494 157.058 li
66.016 157.058 mo
66.605 157.058 li
64.004 157.058 mo
64.593 157.058 li
61.992 157.058 mo
62.581 157.058 li
59.98 157.058 mo
60.692 157.058 li
58.091 157.058 mo
58.68 157.058 li
56.105 157.058 mo
56.693 157.058 li
54.093 157.058 mo
54.681 157.058 li
52.081 157.058 mo
52.792 157.058 li
50.192 157.058 mo
50.78 157.058 li
48.18 157.058 mo
48.769 157.058 li
46.168 157.058 mo
46.757 157.058 li
44.181 157.058 mo
44.893 157.058 li
42.292 157.058 mo
42.881 157.058 li
40.28 157.058 mo
40.869 157.058 li
38.269 157.058 mo
38.857 157.058 li
36.379 157.058 mo
36.968 157.058 li
34.368 157.058 mo
34.956 157.058 li
90.206 95.702 mo
90.328 95.702 li
89.617 95.702 mo
90.206 95.702 li
87.728 95.702 mo
88.316 95.702 li
85.716 95.702 mo
86.305 95.702 li
83.705 95.702 mo
84.293 95.702 li
81.693 95.702 mo
82.404 95.702 li
79.804 95.702 mo
80.417 95.702 li
77.816 95.702 mo
78.405 95.702 li
75.805 95.702 mo
76.394 95.702 li
73.793 95.702 mo
74.504 95.702 li
71.904 95.702 mo
72.493 95.702 li
69.892 95.702 mo
70.481 95.702 li
67.905 95.702 mo
68.494 95.702 li
66.016 95.702 mo
66.605 95.702 li
64.004 95.702 mo
64.593 95.702 li
61.992 95.702 mo
62.581 95.702 li
59.98 95.702 mo
60.692 95.702 li
58.091 95.702 mo
58.68 95.702 li
56.105 95.702 mo
56.693 95.702 li
54.093 95.702 mo
54.681 95.702 li
52.081 95.702 mo
52.792 95.702 li
50.192 95.702 mo
50.78 95.702 li
48.18 95.702 mo
48.769 95.702 li
46.168 95.702 mo
46.757 95.702 li
44.181 95.702 mo
44.893 95.702 li
42.292 95.702 mo
42.881 95.702 li
40.28 95.702 mo
40.869 95.702 li
38.269 95.702 mo
38.857 95.702 li
36.379 95.702 mo
36.968 95.702 li
34.368 95.702 mo
34.956 95.702 li
201.244 126.319 mo
201.857 126.319 li
199.257 126.319 mo
199.846 126.319 li
197.245 126.319 mo
197.957 126.319 li
195.356 126.319 mo
195.945 126.319 li
193.344 126.319 mo
193.933 126.319 li
191.333 126.319 mo
191.921 126.319 li
189.346 126.319 mo
190.033 126.319 li
187.457 126.319 mo
188.045 126.319 li
185.445 126.319 mo
186.033 126.319 li
183.432 126.319 mo
184.021 126.319 li
181.421 126.319 mo
182.133 126.319 li
179.533 126.319 mo
180.121 126.319 li
177.545 126.319 mo
178.133 126.319 li
175.533 126.319 mo
176.122 126.319 li
173.644 126.319 mo
174.232 126.319 li
171.633 126.319 mo
172.221 126.319 li
169.62 126.319 mo
170.21 126.319 li
167.608 126.319 mo
168.32 126.319 li
165.745 126.319 mo
166.333 126.319 li
163.733 126.319 mo
164.321 126.319 li
161.721 126.319 mo
162.31 126.319 li
159.71 126.319 mo
160.421 126.319 li
157.82 126.319 mo
158.409 126.319 li
155.808 126.319 mo
156.398 126.319 li
153.821 126.319 mo
154.41 126.319 li
151.81 126.319 mo
152.521 126.319 li
149.92 126.319 mo
150.509 126.319 li
147.908 126.319 mo
148.498 126.319 li
145.896 126.319 mo
146.486 126.319 li
144.008 126.319 mo
144.596 126.319 li
142.021 126.319 mo
142.609 126.319 li
140.009 126.319 mo
140.598 126.319 li
137.997 126.319 mo
138.708 126.319 li
136.108 126.319 mo
136.696 126.319 li
134.096 126.319 mo
134.685 126.319 li
132.109 126.319 mo
132.698 126.319 li
130.098 126.319 mo
130.808 126.319 li
128.208 126.319 mo
128.796 126.319 li
126.196 126.319 mo
126.785 126.319 li
124.185 126.319 mo
124.773 126.319 li
122.173 126.319 mo
122.884 126.319 li
120.284 126.319 mo
120.898 126.319 li
118.296 126.319 mo
118.886 126.319 li
116.285 126.319 mo
116.874 126.319 li
114.396 126.319 mo
114.984 126.319 li
112.384 126.319 mo
112.973 126.319 li
110.372 126.319 mo
110.961 126.319 li
108.385 126.318 mo
109.072 126.318 li
106.496 126.318 mo
107.085 126.318 li
104.484 126.318 mo
105.073 126.318 li
102.473 126.318 mo
103.062 126.318 li
100.461 126.318 mo
101.172 126.318 li
98.572 126.318 mo
99.161 126.318 li
96.585 126.318 mo
97.173 126.318 li
94.573 126.318 mo
95.162 126.318 li
92.562 126.318 mo
93.273 126.318 li
90.672 126.318 mo
91.261 126.318 li
88.661 126.318 mo
89.249 126.318 li
86.648 126.318 mo
87.262 126.318 li
84.76 126.318 mo
85.373 126.318 li
82.773 126.318 mo
83.361 126.318 li
80.761 126.318 mo
81.349 126.318 li
78.749 126.318 mo
79.46 126.318 li
76.86 126.318 mo
77.448 126.318 li
74.848 126.318 mo
75.437 126.318 li
72.861 126.318 mo
73.45 126.318 li
70.849 126.318 mo
71.56 126.318 li
68.96 126.318 mo
69.549 126.318 li
66.948 126.318 mo
67.537 126.318 li
64.937 126.318 mo
65.525 126.318 li
62.949 126.318 mo
63.636 126.318 li
118.763 64.985 mo
118.886 64.985 li
118.296 64.985 mo
118.763 64.985 li
116.285 64.985 mo
116.874 64.985 li
114.396 64.985 mo
114.984 64.985 li
112.384 64.985 mo
112.973 64.985 li
110.373 64.985 mo
110.961 64.985 li
108.385 64.985 mo
109.072 64.985 li
106.496 64.985 mo
107.085 64.985 li
104.484 64.985 mo
105.073 64.985 li
102.473 64.985 mo
103.062 64.985 li
100.461 64.985 mo
101.172 64.985 li
98.572 64.985 mo
99.161 64.985 li
96.585 64.985 mo
97.173 64.985 li
94.573 64.985 mo
95.162 64.985 li
92.562 64.985 mo
93.273 64.985 li
90.672 64.985 mo
91.261 64.985 li
88.661 64.985 mo
89.249 64.985 li
86.648 64.985 mo
87.262 64.985 li
84.76 64.985 mo
85.373 64.985 li
82.773 64.985 mo
83.361 64.985 li
80.761 64.985 mo
81.349 64.985 li
78.749 64.985 mo
79.46 64.985 li
76.86 64.985 mo
77.448 64.985 li
74.848 64.985 mo
75.437 64.985 li
72.861 64.985 mo
73.45 64.985 li
70.849 64.985 mo
71.56 64.985 li
68.96 64.985 mo
69.549 64.985 li
66.948 64.985 mo
67.537 64.985 li
64.937 64.985 mo
65.525 64.985 li
62.949 64.985 mo
63.636 64.985 li
61.06 64.985 mo
61.649 64.985 li
59.048 64.985 mo
59.637 64.985 li
57.037 64.985 mo
57.626 64.985 li
55.148 64.985 mo
55.736 64.985 li
53.136 64.985 mo
53.725 64.985 li
51.124 64.985 mo
51.737 64.985 li
49.137 64.985 mo
49.848 64.985 li
47.248 64.985 mo
47.836 64.985 li
45.236 64.985 mo
45.825 64.985 li
43.224 64.985 mo
43.813 64.985 li
41.212 64.985 mo
41.924 64.985 li
39.324 64.985 mo
39.912 64.985 li
37.336 64.985 mo
37.925 64.985 li
35.324 64.985 mo
35.914 64.985 li
202.201 95.702 mo
202.79 95.702 li
200.189 95.702 mo
200.9 95.702 li
198.3 95.702 mo
198.889 95.702 li
196.289 95.702 mo
196.902 95.702 li
194.301 95.702 mo
194.89 95.702 li
192.29 95.702 mo
193.001 95.702 li
190.4 95.702 mo
190.989 95.702 li
188.389 95.702 mo
188.977 95.702 li
186.377 95.702 mo
186.966 95.702 li
184.488 95.702 mo
185.077 95.702 li
182.501 95.702 mo
183.09 95.702 li
180.489 95.702 mo
181.077 95.702 li
178.477 95.702 mo
179.189 95.702 li
176.588 95.702 mo
177.177 95.702 li
174.577 95.702 mo
175.165 95.702 li
172.589 95.702 mo
173.178 95.702 li
170.577 95.702 mo
171.289 95.702 li
168.689 95.702 mo
169.278 95.702 li
166.677 95.702 mo
167.266 95.702 li
164.665 95.702 mo
165.253 95.702 li
162.653 95.702 mo
163.365 95.702 li
160.764 95.702 mo
161.378 95.702 li
158.777 95.702 mo
159.366 95.702 li
156.765 95.702 mo
157.355 95.702 li
154.876 95.702 mo
155.465 95.702 li
152.864 95.702 mo
153.453 95.702 li
150.852 95.702 mo
151.441 95.702 li
148.866 95.702 mo
149.553 95.702 li
146.976 95.702 mo
147.565 95.702 li
144.964 95.702 mo
145.553 95.702 li
142.953 95.702 mo
143.542 95.702 li
140.941 95.702 mo
141.653 95.702 li
139.052 95.702 mo
139.641 95.702 li
137.064 95.702 mo
137.653 95.702 li
135.053 95.702 mo
135.642 95.702 li
133.041 95.702 mo
133.753 95.702 li
131.152 95.702 mo
131.741 95.702 li
129.141 95.702 mo
129.73 95.702 li
127.128 95.702 mo
127.742 95.702 li
125.264 95.702 mo
125.853 95.702 li
123.252 95.702 mo
123.841 95.702 li
121.241 95.702 mo
121.83 95.702 li
119.229 95.702 mo
119.94 95.702 li
117.339 95.702 mo
117.928 95.702 li
115.328 95.702 mo
115.916 95.702 li
113.341 95.702 mo
113.93 95.702 li
111.33 95.702 mo
112.041 95.702 li
109.44 95.702 mo
110.029 95.702 li
107.428 95.702 mo
108.018 95.702 li
105.416 95.702 mo
106.006 95.702 li
103.43 95.702 mo
104.116 95.702 li
101.54 95.702 mo
102.129 95.702 li
99.528 95.702 mo
100.117 95.702 li
97.517 95.702 mo
98.105 95.702 li
95.628 95.702 mo
96.217 95.702 li
93.616 95.702 mo
94.205 95.702 li
91.629 95.702 mo
92.217 95.702 li
147.443 34.245 mo
147.565 34.245 li
146.976 34.245 mo
147.443 34.245 li
144.964 34.245 mo
145.553 34.245 li
142.953 34.245 mo
143.542 34.245 li
140.941 34.245 mo
141.653 34.245 li
139.052 34.245 mo
139.641 34.245 li
137.064 34.245 mo
137.653 34.245 li
135.053 34.245 mo
135.642 34.245 li
133.041 34.245 mo
133.753 34.245 li
131.152 34.245 mo
131.741 34.245 li
129.141 34.245 mo
129.73 34.245 li
127.128 34.245 mo
127.742 34.245 li
125.264 34.245 mo
125.853 34.245 li
123.252 34.245 mo
123.841 34.245 li
121.241 34.245 mo
121.83 34.245 li
119.229 34.245 mo
119.94 34.245 li
117.339 34.245 mo
117.928 34.245 li
115.328 34.245 mo
115.916 34.245 li
113.341 34.245 mo
113.93 34.245 li
111.33 34.245 mo
112.041 34.245 li
109.44 34.245 mo
110.029 34.245 li
107.428 34.245 mo
108.018 34.245 li
105.416 34.245 mo
106.006 34.245 li
103.43 34.245 mo
104.116 34.245 li
101.54 34.245 mo
102.129 34.245 li
99.528 34.245 mo
100.117 34.245 li
97.517 34.245 mo
98.105 34.245 li
95.628 34.245 mo
96.217 34.245 li
93.616 34.245 mo
94.205 34.245 li
91.629 34.245 mo
92.217 34.245 li
89.617 34.245 mo
90.328 34.245 li
87.728 34.245 mo
88.316 34.245 li
85.716 34.245 mo
86.305 34.245 li
83.705 34.245 mo
84.293 34.245 li
81.693 34.245 mo
82.404 34.245 li
79.804 34.245 mo
80.417 34.245 li
77.816 34.245 mo
78.405 34.245 li
75.805 34.245 mo
76.394 34.245 li
73.793 34.245 mo
74.504 34.245 li
71.904 34.245 mo
72.493 34.245 li
69.892 34.245 mo
70.481 34.245 li
67.905 34.245 mo
68.494 34.245 li
66.016 34.245 mo
66.605 34.245 li
64.004 34.245 mo
64.593 34.245 li
61.992 34.245 mo
62.581 34.245 li
59.98 34.245 mo
60.692 34.245 li
58.091 34.245 mo
58.68 34.245 li
56.105 34.245 mo
56.693 34.245 li
54.093 34.245 mo
54.681 34.245 li
52.081 34.245 mo
52.792 34.245 li
50.192 34.245 mo
50.78 34.245 li
48.18 34.245 mo
48.769 34.245 li
46.168 34.245 mo
46.757 34.245 li
44.181 34.245 mo
44.893 34.245 li
42.292 34.245 mo
42.881 34.245 li
40.28 34.245 mo
40.869 34.245 li
38.269 34.245 mo
38.857 34.245 li
36.379 34.245 mo
36.968 34.245 li
34.368 34.245 mo
34.956 34.245 li
201.244 64.985 mo
201.857 64.985 li
199.257 64.985 mo
199.846 64.985 li
197.245 64.985 mo
197.957 64.985 li
195.356 64.985 mo
195.945 64.985 li
193.344 64.985 mo
193.933 64.985 li
191.333 64.985 mo
191.921 64.985 li
189.346 64.985 mo
190.033 64.985 li
187.457 64.985 mo
188.045 64.985 li
185.445 64.985 mo
186.033 64.985 li
183.432 64.985 mo
184.021 64.985 li
181.421 64.985 mo
182.133 64.985 li
179.533 64.985 mo
180.121 64.985 li
177.545 64.985 mo
178.133 64.985 li
175.533 64.985 mo
176.122 64.985 li
173.644 64.985 mo
174.232 64.985 li
171.633 64.985 mo
172.221 64.985 li
169.62 64.985 mo
170.21 64.985 li
167.608 64.985 mo
168.32 64.985 li
165.745 64.985 mo
166.333 64.985 li
163.733 64.985 mo
164.321 64.985 li
161.721 64.985 mo
162.31 64.985 li
159.71 64.985 mo
160.421 64.985 li
157.82 64.985 mo
158.409 64.985 li
155.808 64.985 mo
156.398 64.985 li
153.821 64.985 mo
154.41 64.985 li
151.81 64.985 mo
152.521 64.985 li
149.92 64.985 mo
150.509 64.985 li
147.908 64.985 mo
148.498 64.985 li
145.896 64.985 mo
146.486 64.985 li
144.008 64.985 mo
144.596 64.985 li
142.021 64.985 mo
142.609 64.985 li
140.009 64.985 mo
140.598 64.985 li
137.997 64.985 mo
138.708 64.985 li
136.108 64.985 mo
136.696 64.985 li
134.096 64.985 mo
134.685 64.985 li
132.109 64.985 mo
132.698 64.985 li
130.098 64.985 mo
130.808 64.985 li
128.208 64.985 mo
128.796 64.985 li
126.196 64.985 mo
126.785 64.985 li
124.185 64.985 mo
124.773 64.985 li
122.173 64.985 mo
122.884 64.985 li
120.284 64.985 mo
120.898 64.985 li
176 3.505 mo
176.122 3.505 li
175.533 3.505 mo
176 3.505 li
173.644 3.505 mo
174.232 3.505 li
171.633 3.505 mo
172.221 3.505 li
169.62 3.505 mo
170.21 3.505 li
167.608 3.505 mo
168.32 3.505 li
165.745 3.505 mo
166.333 3.505 li
163.733 3.505 mo
164.321 3.505 li
161.721 3.505 mo
162.31 3.505 li
159.71 3.505 mo
160.421 3.505 li
157.82 3.505 mo
158.409 3.505 li
155.808 3.505 mo
156.398 3.505 li
153.821 3.505 mo
154.41 3.505 li
151.81 3.505 mo
152.521 3.505 li
149.92 3.505 mo
150.509 3.505 li
147.908 3.505 mo
148.498 3.505 li
145.896 3.505 mo
146.486 3.505 li
144.008 3.505 mo
144.596 3.505 li
142.021 3.505 mo
142.609 3.505 li
140.009 3.505 mo
140.598 3.505 li
137.997 3.505 mo
138.708 3.505 li
136.108 3.505 mo
136.696 3.505 li
134.096 3.505 mo
134.685 3.505 li
132.109 3.505 mo
132.698 3.505 li
130.098 3.505 mo
130.808 3.505 li
128.208 3.505 mo
128.796 3.505 li
126.196 3.505 mo
126.785 3.505 li
124.185 3.505 mo
124.773 3.505 li
122.173 3.505 mo
122.884 3.505 li
120.284 3.505 mo
120.898 3.505 li
118.296 3.505 mo
118.886 3.505 li
116.285 3.505 mo
116.874 3.505 li
114.396 3.505 mo
114.984 3.505 li
112.384 3.505 mo
112.973 3.505 li
110.373 3.505 mo
110.961 3.505 li
108.385 3.505 mo
109.072 3.505 li
106.496 3.505 mo
107.085 3.505 li
104.484 3.505 mo
105.073 3.505 li
102.473 3.505 mo
103.062 3.505 li
100.461 3.505 mo
101.172 3.505 li
98.572 3.505 mo
99.161 3.505 li
96.585 3.505 mo
97.173 3.505 li
94.573 3.505 mo
95.162 3.505 li
92.562 3.505 mo
93.273 3.505 li
90.672 3.505 mo
91.261 3.505 li
88.661 3.505 mo
89.249 3.505 li
86.648 3.505 mo
87.262 3.505 li
84.76 3.505 mo
85.373 3.505 li
82.773 3.505 mo
83.361 3.505 li
80.761 3.505 mo
81.349 3.505 li
78.749 3.505 mo
79.46 3.505 li
76.86 3.505 mo
77.448 3.505 li
74.848 3.505 mo
75.437 3.505 li
72.861 3.505 mo
73.45 3.505 li
70.849 3.505 mo
71.56 3.505 li
68.96 3.505 mo
69.549 3.505 li
66.948 3.505 mo
67.537 3.505 li
64.937 3.505 mo
65.525 3.505 li
62.949 3.505 mo
63.636 3.505 li
61.06 3.505 mo
61.649 3.505 li
59.048 3.505 mo
59.637 3.505 li
57.037 3.505 mo
57.626 3.505 li
55.148 3.505 mo
55.736 3.505 li
53.136 3.505 mo
53.725 3.505 li
51.124 3.505 mo
51.737 3.505 li
49.137 3.505 mo
49.848 3.505 li
47.248 3.505 mo
47.836 3.505 li
45.236 3.505 mo
45.825 3.505 li
43.224 3.505 mo
43.813 3.505 li
41.212 3.505 mo
41.924 3.505 li
39.324 3.505 mo
39.912 3.505 li
37.336 3.505 mo
37.925 3.505 li
35.324 3.505 mo
35.914 3.505 li
202.201 34.245 mo
202.79 34.245 li
200.189 34.245 mo
200.9 34.245 li
198.3 34.245 mo
198.889 34.245 li
196.289 34.245 mo
196.902 34.245 li
194.301 34.245 mo
194.89 34.245 li
192.29 34.245 mo
193.001 34.245 li
190.4 34.245 mo
190.989 34.245 li
188.389 34.245 mo
188.977 34.245 li
186.377 34.245 mo
186.966 34.245 li
184.488 34.245 mo
185.077 34.245 li
182.501 34.245 mo
183.09 34.245 li
180.489 34.245 mo
181.077 34.245 li
178.477 34.245 mo
179.189 34.245 li
176.588 34.245 mo
177.177 34.245 li
174.577 34.245 mo
175.165 34.245 li
172.589 34.245 mo
173.178 34.245 li
170.577 34.245 mo
171.289 34.245 li
168.689 34.245 mo
169.278 34.245 li
166.677 34.245 mo
167.266 34.245 li
164.665 34.245 mo
165.253 34.245 li
162.653 34.245 mo
163.365 34.245 li
160.764 34.245 mo
161.378 34.245 li
158.777 34.245 mo
159.366 34.245 li
156.765 34.245 mo
157.355 34.245 li
154.876 34.245 mo
155.465 34.245 li
152.864 34.245 mo
153.453 34.245 li
150.852 34.245 mo
151.441 34.245 li
148.866 34.245 mo
149.553 34.245 li
35.791 126.318 mo
35.914 126.318 li
35.324 126.318 mo
35.791 126.318 li
202.201 157.059 mo
202.79 157.059 li
200.189 157.059 mo
200.9 157.059 li
198.3 157.059 mo
198.889 157.059 li
196.289 157.059 mo
196.902 157.059 li
194.301 157.059 mo
194.89 157.059 li
192.29 157.059 mo
193.001 157.059 li
190.4 157.059 mo
190.989 157.059 li
188.389 157.059 mo
188.977 157.059 li
186.377 157.059 mo
186.966 157.059 li
184.488 157.059 mo
185.077 157.059 li
182.501 157.059 mo
183.09 157.059 li
180.489 157.059 mo
181.077 157.059 li
178.477 157.059 mo
179.189 157.059 li
176.588 157.059 mo
177.177 157.059 li
174.577 157.059 mo
175.165 157.059 li
172.589 157.059 mo
173.178 157.059 li
170.577 157.059 mo
171.289 157.059 li
168.689 157.059 mo
169.278 157.059 li
166.677 157.059 mo
167.266 157.059 li
164.665 157.059 mo
165.253 157.059 li
162.653 157.059 mo
163.365 157.059 li
160.764 157.059 mo
161.378 157.059 li
158.777 157.059 mo
159.366 157.059 li
156.765 157.059 mo
157.355 157.059 li
154.876 157.059 mo
155.465 157.059 li
152.864 157.059 mo
153.453 157.059 li
150.852 157.059 mo
151.441 157.059 li
148.866 157.059 mo
149.553 157.059 li
146.976 157.059 mo
147.565 157.059 li
144.964 157.059 mo
145.553 157.059 li
142.953 157.059 mo
143.542 157.059 li
140.941 157.059 mo
141.653 157.059 li
139.052 157.059 mo
139.641 157.059 li
137.064 157.059 mo
137.653 157.059 li
135.053 157.059 mo
135.642 157.059 li
133.041 157.059 mo
133.753 157.059 li
131.152 157.059 mo
131.741 157.059 li
129.141 157.059 mo
129.73 157.059 li
127.128 157.059 mo
127.742 157.059 li
125.264 157.059 mo
125.853 157.059 li
123.252 157.059 mo
123.841 157.059 li
121.241 157.059 mo
121.83 157.059 li
119.229 157.059 mo
119.94 157.059 li
117.339 157.059 mo
117.928 157.059 li
115.328 157.059 mo
115.916 157.059 li
113.341 157.059 mo
113.93 157.059 li
111.329 157.059 mo
112.04 157.059 li
109.44 157.059 mo
110.029 157.059 li
107.428 157.058 mo
108.017 157.058 li
105.416 157.058 mo
106.005 157.058 li
103.429 157.058 mo
104.116 157.058 li
101.54 157.058 mo
102.129 157.058 li
99.528 157.058 mo
100.117 157.058 li
97.517 157.058 mo
98.105 157.058 li
95.628 157.058 mo
96.217 157.058 li
93.616 157.058 mo
94.205 157.058 li
91.629 157.058 mo
92.217 157.058 li
89.617 157.058 mo
90.328 157.058 li
87.728 157.058 mo
88.316 157.058 li
85.716 157.058 mo
86.305 157.058 li
83.705 157.058 mo
84.293 157.058 li
81.693 157.058 mo
82.404 157.058 li
79.804 157.058 mo
80.417 157.058 li
77.816 157.058 mo
78.405 157.058 li
75.805 157.058 mo
76.394 157.058 li
73.793 157.058 mo
74.504 157.058 li
71.904 157.058 mo
72.493 157.058 li
69.892 157.058 mo
70.481 157.058 li
67.905 157.058 mo
68.494 157.058 li
66.016 157.058 mo
66.605 157.058 li
64.004 157.058 mo
64.593 157.058 li
61.992 157.058 mo
62.581 157.058 li
59.98 157.058 mo
60.692 157.058 li
58.091 157.058 mo
58.68 157.058 li
56.105 157.058 mo
56.693 157.058 li
54.093 157.058 mo
54.681 157.058 li
52.081 157.058 mo
52.792 157.058 li
50.192 157.058 mo
50.78 157.058 li
48.18 157.058 mo
48.769 157.058 li
46.168 157.058 mo
46.757 157.058 li
44.181 157.058 mo
44.893 157.058 li
42.292 157.058 mo
42.881 157.058 li
40.28 157.058 mo
40.869 157.058 li
38.269 157.058 mo
38.857 157.058 li
36.379 157.058 mo
36.968 157.058 li
34.368 157.058 mo
34.956 157.058 li
201.244 3.505 mo
201.857 3.505 li
199.257 3.505 mo
199.846 3.505 li
197.245 3.505 mo
197.957 3.505 li
195.356 3.505 mo
195.945 3.505 li
193.344 3.505 mo
193.933 3.505 li
191.333 3.505 mo
191.921 3.505 li
189.346 3.505 mo
190.033 3.505 li
187.457 3.505 mo
188.045 3.505 li
185.445 3.505 mo
186.033 3.505 li
183.432 3.505 mo
184.021 3.505 li
181.421 3.505 mo
182.133 3.505 li
179.533 3.505 mo
180.121 3.505 li
177.545 3.505 mo
178.133 3.505 li
64.47 95.702 mo
64.593 95.702 li
64.004 95.702 mo
64.47 95.702 li
61.992 95.702 mo
62.581 95.702 li
59.98 95.702 mo
60.692 95.702 li
58.091 95.702 mo
58.68 95.702 li
56.105 95.702 mo
56.693 95.702 li
54.093 95.702 mo
54.681 95.702 li
52.081 95.702 mo
52.792 95.702 li
50.192 95.702 mo
50.78 95.702 li
48.18 95.702 mo
48.769 95.702 li
46.168 95.702 mo
46.757 95.702 li
44.181 95.702 mo
44.893 95.702 li
42.292 95.702 mo
42.881 95.702 li
40.28 95.702 mo
40.869 95.702 li
38.269 95.702 mo
38.857 95.702 li
36.379 95.702 mo
36.968 95.702 li
34.368 95.702 mo
34.956 95.702 li
201.244 126.319 mo
201.857 126.319 li
199.257 126.319 mo
199.846 126.319 li
197.245 126.319 mo
197.957 126.319 li
195.356 126.319 mo
195.945 126.319 li
193.344 126.319 mo
193.933 126.319 li
191.333 126.319 mo
191.921 126.319 li
189.346 126.319 mo
190.033 126.319 li
187.457 126.319 mo
188.045 126.319 li
185.445 126.319 mo
186.033 126.319 li
183.432 126.319 mo
184.021 126.319 li
181.421 126.319 mo
182.133 126.319 li
179.533 126.319 mo
180.121 126.319 li
177.545 126.319 mo
178.133 126.319 li
175.533 126.319 mo
176.122 126.319 li
173.644 126.319 mo
174.232 126.319 li
171.633 126.319 mo
172.221 126.319 li
169.62 126.319 mo
170.21 126.319 li
167.608 126.319 mo
168.32 126.319 li
165.745 126.319 mo
166.333 126.319 li
163.733 126.319 mo
164.321 126.319 li
161.721 126.319 mo
162.31 126.319 li
159.71 126.319 mo
160.421 126.319 li
157.82 126.319 mo
158.409 126.319 li
155.808 126.319 mo
156.398 126.319 li
153.821 126.319 mo
154.41 126.319 li
151.81 126.319 mo
152.521 126.319 li
149.92 126.319 mo
150.509 126.319 li
147.908 126.319 mo
148.498 126.319 li
145.896 126.319 mo
146.486 126.319 li
144.008 126.319 mo
144.596 126.319 li
142.021 126.319 mo
142.609 126.319 li
140.009 126.319 mo
140.598 126.319 li
137.997 126.319 mo
138.708 126.319 li
136.108 126.319 mo
136.696 126.319 li
134.096 126.319 mo
134.685 126.319 li
132.109 126.319 mo
132.698 126.319 li
130.098 126.319 mo
130.808 126.319 li
128.208 126.319 mo
128.796 126.319 li
126.196 126.319 mo
126.785 126.319 li
124.185 126.319 mo
124.773 126.319 li
122.173 126.319 mo
122.884 126.319 li
120.284 126.319 mo
120.898 126.319 li
118.296 126.319 mo
118.886 126.319 li
116.285 126.319 mo
116.874 126.319 li
114.396 126.319 mo
114.984 126.319 li
112.384 126.319 mo
112.973 126.319 li
110.372 126.319 mo
110.961 126.319 li
108.385 126.318 mo
109.072 126.318 li
106.496 126.318 mo
107.085 126.318 li
104.484 126.318 mo
105.073 126.318 li
102.473 126.318 mo
103.062 126.318 li
100.461 126.318 mo
101.172 126.318 li
98.572 126.318 mo
99.161 126.318 li
96.585 126.318 mo
97.173 126.318 li
94.573 126.318 mo
95.162 126.318 li
92.562 126.318 mo
93.273 126.318 li
90.672 126.318 mo
91.261 126.318 li
88.661 126.318 mo
89.249 126.318 li
86.648 126.318 mo
87.262 126.318 li
84.76 126.318 mo
85.373 126.318 li
82.773 126.318 mo
83.361 126.318 li
80.761 126.318 mo
81.349 126.318 li
78.749 126.318 mo
79.46 126.318 li
76.86 126.318 mo
77.448 126.318 li
74.848 126.318 mo
75.437 126.318 li
72.861 126.318 mo
73.45 126.318 li
70.849 126.318 mo
71.56 126.318 li
68.96 126.318 mo
69.549 126.318 li
66.948 126.318 mo
67.537 126.318 li
64.937 126.318 mo
65.525 126.318 li
62.949 126.318 mo
63.636 126.318 li
61.06 126.318 mo
61.649 126.318 li
59.048 126.318 mo
59.637 126.318 li
57.037 126.318 mo
57.626 126.318 li
55.148 126.318 mo
55.736 126.318 li
53.136 126.318 mo
53.725 126.318 li
51.124 126.318 mo
51.737 126.318 li
49.137 126.318 mo
49.848 126.318 li
47.248 126.318 mo
47.836 126.318 li
45.236 126.318 mo
45.825 126.318 li
43.224 126.318 mo
43.813 126.318 li
41.212 126.318 mo
41.924 126.318 li
39.324 126.318 mo
39.912 126.318 li
37.336 126.318 mo
37.925 126.318 li
93.15 64.985 mo
93.273 64.985 li
92.562 64.985 mo
93.15 64.985 li
90.672 64.985 mo
91.261 64.985 li
88.661 64.985 mo
89.249 64.985 li
86.648 64.985 mo
87.262 64.985 li
84.76 64.985 mo
85.373 64.985 li
82.773 64.985 mo
83.361 64.985 li
80.761 64.985 mo
81.349 64.985 li
78.749 64.985 mo
79.46 64.985 li
76.86 64.985 mo
77.448 64.985 li
74.848 64.985 mo
75.437 64.985 li
72.861 64.985 mo
73.45 64.985 li
70.849 64.985 mo
71.56 64.985 li
68.96 64.985 mo
69.549 64.985 li
66.948 64.985 mo
67.537 64.985 li
64.937 64.985 mo
65.525 64.985 li
62.949 64.985 mo
63.636 64.985 li
61.06 64.985 mo
61.649 64.985 li
59.048 64.985 mo
59.637 64.985 li
57.037 64.985 mo
57.626 64.985 li
55.148 64.985 mo
55.736 64.985 li
53.136 64.985 mo
53.725 64.985 li
51.124 64.985 mo
51.737 64.985 li
49.137 64.985 mo
49.848 64.985 li
47.248 64.985 mo
47.836 64.985 li
45.236 64.985 mo
45.825 64.985 li
43.224 64.985 mo
43.813 64.985 li
41.212 64.985 mo
41.924 64.985 li
39.324 64.985 mo
39.912 64.985 li
37.336 64.985 mo
37.925 64.985 li
35.324 64.985 mo
35.914 64.985 li
202.201 95.702 mo
202.79 95.702 li
200.189 95.702 mo
200.9 95.702 li
198.3 95.702 mo
198.889 95.702 li
196.289 95.702 mo
196.902 95.702 li
194.301 95.702 mo
194.89 95.702 li
192.29 95.702 mo
193.001 95.702 li
190.4 95.702 mo
190.989 95.702 li
188.389 95.702 mo
188.977 95.702 li
186.377 95.702 mo
186.966 95.702 li
184.488 95.702 mo
185.077 95.702 li
182.501 95.702 mo
183.09 95.702 li
180.489 95.702 mo
181.077 95.702 li
178.477 95.702 mo
179.189 95.702 li
176.588 95.702 mo
177.177 95.702 li
174.577 95.702 mo
175.165 95.702 li
172.589 95.702 mo
173.178 95.702 li
170.577 95.702 mo
171.289 95.702 li
168.689 95.702 mo
169.278 95.702 li
166.677 95.702 mo
167.266 95.702 li
164.665 95.702 mo
165.253 95.702 li
162.653 95.702 mo
163.365 95.702 li
160.764 95.702 mo
161.378 95.702 li
158.777 95.702 mo
159.366 95.702 li
156.765 95.702 mo
157.355 95.702 li
154.876 95.702 mo
155.465 95.702 li
152.864 95.702 mo
153.453 95.702 li
150.852 95.702 mo
151.441 95.702 li
148.866 95.702 mo
149.553 95.702 li
146.976 95.702 mo
147.565 95.702 li
144.964 95.702 mo
145.553 95.702 li
142.953 95.702 mo
143.542 95.702 li
140.941 95.702 mo
141.653 95.702 li
139.052 95.702 mo
139.641 95.702 li
137.064 95.702 mo
137.653 95.702 li
135.053 95.702 mo
135.642 95.702 li
133.041 95.702 mo
133.753 95.702 li
131.152 95.702 mo
131.741 95.702 li
129.141 95.702 mo
129.73 95.702 li
127.128 95.702 mo
127.742 95.702 li
125.264 95.702 mo
125.853 95.702 li
123.252 95.702 mo
123.841 95.702 li
121.241 95.702 mo
121.83 95.702 li
119.229 95.702 mo
119.94 95.702 li
117.339 95.702 mo
117.928 95.702 li
115.328 95.702 mo
115.916 95.702 li
113.341 95.702 mo
113.93 95.702 li
111.33 95.702 mo
112.041 95.702 li
109.44 95.702 mo
110.029 95.702 li
107.428 95.702 mo
108.018 95.702 li
105.416 95.702 mo
106.006 95.702 li
103.43 95.702 mo
104.116 95.702 li
101.54 95.702 mo
102.129 95.702 li
99.528 95.702 mo
100.117 95.702 li
97.517 95.702 mo
98.105 95.702 li
95.628 95.702 mo
96.217 95.702 li
93.616 95.702 mo
94.205 95.702 li
91.629 95.702 mo
92.217 95.702 li
89.617 95.702 mo
90.328 95.702 li
87.728 95.702 mo
88.316 95.702 li
85.716 95.702 mo
86.305 95.702 li
83.705 95.702 mo
84.293 95.702 li
81.693 95.702 mo
82.404 95.702 li
79.804 95.702 mo
80.417 95.702 li
77.816 95.702 mo
78.405 95.702 li
75.805 95.702 mo
76.394 95.702 li
73.793 95.702 mo
74.504 95.702 li
71.904 95.702 mo
72.493 95.702 li
69.892 95.702 mo
70.481 95.702 li
67.905 95.702 mo
68.494 95.702 li
66.016 95.702 mo
66.605 95.702 li
121.706 34.245 mo
121.83 34.245 li
121.241 34.245 mo
121.706 34.245 li
119.229 34.245 mo
119.94 34.245 li
117.339 34.245 mo
117.928 34.245 li
115.328 34.245 mo
115.916 34.245 li
113.341 34.245 mo
113.93 34.245 li
111.33 34.245 mo
112.041 34.245 li
109.44 34.245 mo
110.029 34.245 li
107.428 34.245 mo
108.018 34.245 li
105.416 34.245 mo
106.006 34.245 li
103.43 34.245 mo
104.116 34.245 li
101.54 34.245 mo
102.129 34.245 li
99.528 34.245 mo
100.117 34.245 li
97.517 34.245 mo
98.105 34.245 li
95.628 34.245 mo
96.217 34.245 li
93.616 34.245 mo
94.205 34.245 li
91.629 34.245 mo
92.217 34.245 li
89.617 34.245 mo
90.328 34.245 li
87.728 34.245 mo
88.316 34.245 li
85.716 34.245 mo
86.305 34.245 li
83.705 34.245 mo
84.293 34.245 li
81.693 34.245 mo
82.404 34.245 li
79.804 34.245 mo
80.417 34.245 li
77.816 34.245 mo
78.405 34.245 li
75.805 34.245 mo
76.394 34.245 li
73.793 34.245 mo
74.504 34.245 li
71.904 34.245 mo
72.493 34.245 li
69.892 34.245 mo
70.481 34.245 li
67.905 34.245 mo
68.494 34.245 li
66.016 34.245 mo
66.605 34.245 li
64.004 34.245 mo
64.593 34.245 li
61.992 34.245 mo
62.581 34.245 li
59.98 34.245 mo
60.692 34.245 li
58.091 34.245 mo
58.68 34.245 li
56.105 34.245 mo
56.693 34.245 li
54.093 34.245 mo
54.681 34.245 li
52.081 34.245 mo
52.792 34.245 li
50.192 34.245 mo
50.78 34.245 li
48.18 34.245 mo
48.769 34.245 li
46.168 34.245 mo
46.757 34.245 li
44.181 34.245 mo
44.893 34.245 li
42.292 34.245 mo
42.881 34.245 li
40.28 34.245 mo
40.869 34.245 li
38.269 34.245 mo
38.857 34.245 li
36.379 34.245 mo
36.968 34.245 li
34.368 34.245 mo
34.956 34.245 li
201.244 64.985 mo
201.857 64.985 li
199.257 64.985 mo
199.846 64.985 li
197.245 64.985 mo
197.957 64.985 li
195.356 64.985 mo
195.945 64.985 li
193.344 64.985 mo
193.933 64.985 li
191.333 64.985 mo
191.921 64.985 li
189.346 64.985 mo
190.033 64.985 li
187.457 64.985 mo
188.045 64.985 li
185.445 64.985 mo
186.033 64.985 li
183.432 64.985 mo
184.021 64.985 li
181.421 64.985 mo
182.133 64.985 li
179.533 64.985 mo
180.121 64.985 li
177.545 64.985 mo
178.133 64.985 li
175.533 64.985 mo
176.122 64.985 li
173.644 64.985 mo
174.232 64.985 li
171.633 64.985 mo
172.221 64.985 li
169.62 64.985 mo
170.21 64.985 li
167.608 64.985 mo
168.32 64.985 li
165.745 64.985 mo
166.333 64.985 li
163.733 64.985 mo
164.321 64.985 li
161.721 64.985 mo
162.31 64.985 li
159.71 64.985 mo
160.421 64.985 li
157.82 64.985 mo
158.409 64.985 li
155.808 64.985 mo
156.398 64.985 li
153.821 64.985 mo
154.41 64.985 li
151.81 64.985 mo
152.521 64.985 li
149.92 64.985 mo
150.509 64.985 li
147.908 64.985 mo
148.498 64.985 li
145.896 64.985 mo
146.486 64.985 li
144.008 64.985 mo
144.596 64.985 li
142.021 64.985 mo
142.609 64.985 li
140.009 64.985 mo
140.598 64.985 li
137.997 64.985 mo
138.708 64.985 li
136.108 64.985 mo
136.696 64.985 li
134.096 64.985 mo
134.685 64.985 li
132.109 64.985 mo
132.698 64.985 li
130.098 64.985 mo
130.808 64.985 li
128.208 64.985 mo
128.796 64.985 li
126.196 64.985 mo
126.785 64.985 li
124.185 64.985 mo
124.773 64.985 li
122.173 64.985 mo
122.884 64.985 li
120.284 64.985 mo
120.898 64.985 li
118.296 64.985 mo
118.886 64.985 li
116.285 64.985 mo
116.874 64.985 li
114.396 64.985 mo
114.984 64.985 li
112.384 64.985 mo
112.973 64.985 li
110.373 64.985 mo
110.961 64.985 li
108.385 64.985 mo
109.072 64.985 li
106.496 64.985 mo
107.085 64.985 li
104.484 64.985 mo
105.073 64.985 li
102.473 64.985 mo
103.062 64.985 li
100.461 64.985 mo
101.172 64.985 li
98.572 64.985 mo
99.161 64.985 li
96.585 64.985 mo
97.173 64.985 li
94.573 64.985 mo
95.162 64.985 li
150.386 3.505 mo
150.509 3.505 li
149.92 3.505 mo
150.386 3.505 li
147.908 3.505 mo
148.498 3.505 li
145.896 3.505 mo
146.486 3.505 li
144.008 3.505 mo
144.596 3.505 li
142.021 3.505 mo
142.609 3.505 li
140.009 3.505 mo
140.598 3.505 li
137.997 3.505 mo
138.708 3.505 li
136.108 3.505 mo
136.696 3.505 li
134.096 3.505 mo
134.685 3.505 li
132.109 3.505 mo
132.698 3.505 li
130.098 3.505 mo
130.808 3.505 li
128.208 3.505 mo
128.796 3.505 li
126.196 3.505 mo
126.785 3.505 li
124.185 3.505 mo
124.773 3.505 li
122.173 3.505 mo
122.884 3.505 li
120.284 3.505 mo
120.898 3.505 li
118.296 3.505 mo
118.886 3.505 li
116.285 3.505 mo
116.874 3.505 li
114.396 3.505 mo
114.984 3.505 li
112.384 3.505 mo
112.973 3.505 li
110.373 3.505 mo
110.961 3.505 li
108.385 3.505 mo
109.072 3.505 li
106.496 3.505 mo
107.085 3.505 li
104.484 3.505 mo
105.073 3.505 li
102.473 3.505 mo
103.062 3.505 li
100.461 3.505 mo
101.172 3.505 li
98.572 3.505 mo
99.161 3.505 li
96.585 3.505 mo
97.173 3.505 li
94.573 3.505 mo
95.162 3.505 li
92.562 3.505 mo
93.273 3.505 li
90.672 3.505 mo
91.261 3.505 li
88.661 3.505 mo
89.249 3.505 li
86.648 3.505 mo
87.262 3.505 li
84.76 3.505 mo
85.373 3.505 li
82.773 3.505 mo
83.361 3.505 li
80.761 3.505 mo
81.349 3.505 li
78.749 3.505 mo
79.46 3.505 li
76.86 3.505 mo
77.448 3.505 li
74.848 3.505 mo
75.437 3.505 li
72.861 3.505 mo
73.45 3.505 li
70.849 3.505 mo
71.56 3.505 li
68.96 3.505 mo
69.549 3.505 li
66.948 3.505 mo
67.537 3.505 li
64.937 3.505 mo
65.525 3.505 li
62.949 3.505 mo
63.636 3.505 li
61.06 3.505 mo
61.649 3.505 li
59.048 3.505 mo
59.637 3.505 li
57.037 3.505 mo
57.626 3.505 li
55.148 3.505 mo
55.736 3.505 li
53.136 3.505 mo
53.725 3.505 li
51.124 3.505 mo
51.737 3.505 li
49.137 3.505 mo
49.848 3.505 li
47.248 3.505 mo
47.836 3.505 li
45.236 3.505 mo
45.825 3.505 li
43.224 3.505 mo
43.813 3.505 li
41.212 3.505 mo
41.924 3.505 li
39.324 3.505 mo
39.912 3.505 li
37.336 3.505 mo
37.925 3.505 li
35.324 3.505 mo
35.914 3.505 li
202.201 34.245 mo
202.79 34.245 li
200.189 34.245 mo
200.9 34.245 li
198.3 34.245 mo
198.889 34.245 li
196.289 34.245 mo
196.902 34.245 li
194.301 34.245 mo
194.89 34.245 li
192.29 34.245 mo
193.001 34.245 li
190.4 34.245 mo
190.989 34.245 li
188.389 34.245 mo
188.977 34.245 li
186.377 34.245 mo
186.966 34.245 li
184.488 34.245 mo
185.077 34.245 li
182.501 34.245 mo
183.09 34.245 li
180.489 34.245 mo
181.077 34.245 li
178.477 34.245 mo
179.189 34.245 li
176.588 34.245 mo
177.177 34.245 li
174.577 34.245 mo
175.165 34.245 li
172.589 34.245 mo
173.178 34.245 li
170.577 34.245 mo
171.289 34.245 li
168.689 34.245 mo
169.278 34.245 li
166.677 34.245 mo
167.266 34.245 li
164.665 34.245 mo
165.253 34.245 li
162.653 34.245 mo
163.365 34.245 li
160.764 34.245 mo
161.378 34.245 li
158.777 34.245 mo
159.366 34.245 li
156.765 34.245 mo
157.355 34.245 li
154.876 34.245 mo
155.465 34.245 li
152.864 34.245 mo
153.453 34.245 li
150.852 34.245 mo
151.441 34.245 li
148.866 34.245 mo
149.553 34.245 li
146.976 34.245 mo
147.565 34.245 li
144.964 34.245 mo
145.553 34.245 li
142.953 34.245 mo
143.542 34.245 li
140.941 34.245 mo
141.653 34.245 li
139.052 34.245 mo
139.641 34.245 li
137.064 34.245 mo
137.653 34.245 li
135.053 34.245 mo
135.642 34.245 li
133.041 34.245 mo
133.753 34.245 li
131.152 34.245 mo
131.741 34.245 li
129.141 34.245 mo
129.73 34.245 li
127.128 34.245 mo
127.742 34.245 li
125.264 34.245 mo
125.853 34.245 li
123.252 34.245 mo
123.841 34.245 li
34.368 148.202 mo
34.368 148.325 li
34.368 147.712 mo
34.368 148.202 li
34.368 145.724 mo
34.368 146.313 li
34.368 143.713 mo
34.368 144.301 li
34.368 141.701 mo
34.368 142.412 li
34.368 139.811 mo
34.368 140.4 li
34.368 137.799 mo
34.368 138.388 li
34.368 135.788 mo
34.368 136.5 li
34.368 133.899 mo
34.368 134.488 li
34.368 131.887 mo
34.368 132.476 li
34.368 129.876 mo
34.368 130.464 li
34.368 127.864 mo
34.368 128.575 li
34.368 125.975 mo
34.368 126.563 li
34.368 123.963 mo
34.368 124.551 li
34.368 121.952 mo
34.368 122.663 li
34.368 120.062 mo
34.368 120.651 li
34.368 118.05 mo
34.368 118.639 li
34.368 116.039 mo
34.368 116.628 li
34.368 114.027 mo
34.368 114.738 li
34.368 112.138 mo
34.368 112.726 li
34.368 110.128 mo
34.368 110.715 li
34.368 108.116 mo
34.368 108.827 li
34.368 106.226 mo
34.368 106.815 li
34.368 104.214 mo
34.368 104.803 li
34.368 102.203 mo
34.368 102.816 li
34.368 100.216 mo
34.368 100.902 li
34.368 98.302 mo
34.368 98.916 li
34.368 96.315 mo
34.368 96.9041 li
34.368 94.303 mo
34.368 95.014 li
34.368 92.414 mo
34.368 93.0031 li
34.368 90.402 mo
34.368 90.991 li
34.368 88.39 mo
34.368 88.979 li
34.368 86.379 mo
34.368 87.091 li
34.368 84.4901 mo
34.368 85.079 li
34.368 82.478 mo
34.368 83.067 li
34.368 80.465 mo
34.368 81.177 li
34.368 78.577 mo
34.368 79.166 li
34.368 76.565 mo
34.368 77.154 li
34.368 74.553 mo
34.368 75.142 li
34.368 72.542 mo
34.368 73.254 li
34.368 70.652 mo
34.368 71.242 li
34.368 68.64 mo
34.368 69.23 li
34.368 66.629 mo
34.368 67.34 li
34.368 64.7401 mo
34.368 65.329 li
34.368 62.728 mo
34.368 63.317 li
34.368 60.716 mo
34.368 61.305 li
34.368 58.828 mo
34.368 59.417 li
34.368 56.816 mo
34.368 57.405 li
34.368 54.804 mo
34.368 55.393 li
34.368 52.793 mo
34.368 53.504 li
34.368 50.903 mo
34.368 51.492 li
34.368 48.891 mo
34.368 49.505 li
34.368 46.904 mo
34.368 47.494 li
34.368 44.991 mo
34.368 45.604 li
34.368 43.004 mo
34.368 43.592 li
34.368 40.992 mo
34.368 41.581 li
34.368 38.98 mo
34.368 39.692 li
34.368 37.09 mo
34.368 37.68 li
34.368 35.079 mo
34.368 35.669 li
34.368 33.067 mo
34.368 33.656 li
34.368 31.178 mo
34.368 31.767 li
34.368 29.167 mo
34.368 29.755 li
34.368 27.155 mo
34.368 27.744 li
34.368 25.143 mo
34.368 25.855 li
34.368 23.255 mo
34.368 23.842 li
34.368 21.243 mo
34.368 21.831 li
34.368 19.231 mo
34.368 19.819 li
34.368 17.341 mo
34.368 17.93 li
34.368 15.33 mo
34.368 15.919 li
34.368 13.318 mo
34.368 13.907 li
34.368 11.306 mo
34.368 12.017 li
34.368 9.41803 mo
34.368 10.005 li
34.368 7.40601 mo
34.368 7.99402 li
34.368 5.39404 mo
34.368 5.98199 li
34.368 3.505 mo
34.368 4.09302 li
201.244 3.505 mo
201.857 3.505 li
199.257 3.505 mo
199.846 3.505 li
197.245 3.505 mo
197.957 3.505 li
195.356 3.505 mo
195.945 3.505 li
193.344 3.505 mo
193.933 3.505 li
191.333 3.505 mo
191.921 3.505 li
189.346 3.505 mo
190.033 3.505 li
187.457 3.505 mo
188.045 3.505 li
185.445 3.505 mo
186.033 3.505 li
183.432 3.505 mo
184.021 3.505 li
181.421 3.505 mo
182.133 3.505 li
179.533 3.505 mo
180.121 3.505 li
177.545 3.505 mo
178.133 3.505 li
175.533 3.505 mo
176.122 3.505 li
173.644 3.505 mo
174.232 3.505 li
171.633 3.505 mo
172.221 3.505 li
169.62 3.505 mo
170.21 3.505 li
167.608 3.505 mo
168.32 3.505 li
165.745 3.505 mo
166.333 3.505 li
163.733 3.505 mo
164.321 3.505 li
161.721 3.505 mo
162.31 3.505 li
159.71 3.505 mo
160.421 3.505 li
157.82 3.505 mo
158.409 3.505 li
155.808 3.505 mo
156.398 3.505 li
153.821 3.505 mo
154.41 3.505 li
151.81 3.505 mo
152.521 3.505 li
90.672 38.489 mo
90.672 38.612 li
90.672 38.023 mo
90.672 38.489 li
90.672 36.011 mo
90.672 36.722 li
90.672 34.123 mo
90.672 34.711 li
90.672 32.111 mo
90.672 32.699 li
90.672 30.099 mo
90.672 30.687 li
90.672 28.088 mo
90.672 28.799 li
90.672 26.198 mo
90.672 26.787 li
90.672 24.186 mo
90.672 24.799 li
90.672 22.199 mo
90.672 22.886 li
90.672 20.286 mo
90.672 20.899 li
90.672 18.298 mo
90.672 18.887 li
90.672 16.287 mo
90.672 16.875 li
90.672 14.275 mo
90.672 14.986 li
90.672 12.385 mo
90.672 12.974 li
90.672 10.374 mo
90.672 10.963 li
90.672 8.362 mo
90.672 9.07404 li
90.672 6.47302 mo
90.672 7.06201 li
90.672 4.46204 mo
90.672 5.05005 li
62.459 156.127 mo
62.459 156.716 li
62.459 154.115 mo
62.459 154.704 li
62.459 152.103 mo
62.459 152.692 li
62.459 150.091 mo
62.459 150.803 li
62.459 148.202 mo
62.459 148.792 li
62.459 146.19 mo
62.459 146.78 li
62.459 144.178 mo
62.459 144.89 li
62.459 142.29 mo
62.459 142.879 li
62.459 140.278 mo
62.459 140.867 li
62.459 138.266 mo
62.459 138.855 li
62.459 136.255 mo
62.459 136.966 li
62.459 134.365 mo
62.459 134.954 li
62.459 132.353 mo
62.459 132.942 li
62.459 130.341 mo
62.459 131.053 li
62.459 128.453 mo
62.459 129.042 li
62.459 126.441 mo
62.459 127.03 li
62.459 124.429 mo
62.459 125.018 li
62.459 122.418 mo
62.459 123.129 li
62.459 120.528 mo
62.459 121.117 li
62.459 118.517 mo
62.459 119.105 li
62.459 116.505 mo
62.459 117.216 li
62.459 114.616 mo
62.459 115.205 li
62.459 112.604 mo
62.459 113.217 li
62.459 110.618 mo
62.459 111.206 li
62.459 108.705 mo
62.459 109.318 li
62.459 106.717 mo
62.459 107.306 li
62.459 104.706 mo
62.459 105.294 li
62.459 102.694 mo
62.459 103.405 li
62.459 100.804 mo
62.459 101.393 li
62.459 98.793 mo
62.459 99.381 li
62.459 96.781 mo
62.459 97.37 li
62.459 94.892 mo
62.459 95.48 li
62.459 92.88 mo
62.459 93.468 li
62.459 90.869 mo
62.459 91.457 li
62.459 88.856 mo
62.459 89.568 li
62.459 86.967 mo
62.459 87.556 li
62.459 84.956 mo
62.459 85.545 li
62.459 82.944 mo
62.459 83.533 li
62.459 81.055 mo
62.459 81.644 li
62.459 79.043 mo
62.459 79.632 li
62.459 77.031 mo
62.459 77.621 li
62.459 75.019 mo
62.459 75.731 li
62.459 73.13 mo
62.459 73.719 li
62.459 71.119 mo
62.459 71.708 li
62.459 69.107 mo
62.459 69.696 li
62.459 67.218 mo
62.459 67.807 li
62.459 65.207 mo
62.459 65.796 li
62.459 63.195 mo
62.459 63.808 li
62.459 61.208 mo
62.459 61.894 li
62.459 59.294 mo
62.459 59.907 li
62.459 57.306 mo
62.459 57.895 li
62.459 55.295 mo
62.459 55.883 li
62.459 53.406 mo
62.459 53.995 li
62.459 51.394 mo
62.459 51.983 li
62.459 49.383 mo
62.459 49.971 li
62.459 47.371 mo
62.459 48.082 li
62.459 45.482 mo
62.459 46.07 li
62.459 43.469 mo
62.459 44.058 li
62.459 41.458 mo
62.459 42.17 li
62.459 39.569 mo
62.459 40.158 li
62.459 37.557 mo
62.459 38.146 li
62.459 35.546 mo
62.459 36.134 li
62.459 33.534 mo
62.459 34.245 li
62.459 31.644 mo
62.459 32.233 li
62.459 29.632 mo
62.459 30.221 li
62.459 27.621 mo
62.459 28.333 li
62.459 25.732 mo
62.459 26.321 li
62.459 23.72 mo
62.459 24.309 li
62.459 21.709 mo
62.459 22.297 li
62.459 19.697 mo
62.459 20.408 li
62.459 17.807 mo
62.459 18.396 li
62.459 15.796 mo
62.459 16.384 li
62.459 13.784 mo
62.459 14.496 li
62.459 11.895 mo
62.459 12.484 li
62.459 9.88403 mo
62.459 10.497 li
62.459 7.896 mo
62.459 8.48505 li
62.459 5.88403 mo
62.459 6.59503 li
62.459 3.995 mo
62.459 4.58405 li
34.368 155.513 mo
34.368 156.225 li
34.368 153.624 mo
34.368 154.213 li
34.368 151.612 mo
34.368 152.225 li
34.368 149.625 mo
34.368 150.312 li
118.763 82.478 mo
118.763 82.6 li
118.763 82.012 mo
118.763 82.478 li
118.763 80.001 mo
118.763 80.588 li
118.763 77.989 mo
118.763 78.7 li
118.763 76.099 mo
118.763 76.688 li
118.763 74.088 mo
118.763 74.676 li
118.763 72.076 mo
118.763 72.787 li
118.763 70.187 mo
118.763 70.775 li
118.763 68.176 mo
118.763 68.763 li
118.763 66.163 mo
118.763 66.752 li
118.763 64.151 mo
118.763 64.863 li
118.763 62.262 mo
118.763 62.851 li
118.763 60.251 mo
118.763 60.8391 li
118.763 58.239 mo
118.763 58.95 li
118.763 56.349 mo
118.763 56.938 li
118.763 54.338 mo
118.763 54.926 li
118.763 52.326 mo
118.763 52.915 li
118.763 50.314 mo
118.763 51.026 li
118.763 48.425 mo
118.763 49.014 li
118.763 46.414 mo
118.763 47.003 li
118.763 44.402 mo
118.763 45.114 li
118.763 42.512 mo
118.763 43.102 li
118.763 40.501 mo
118.763 41.09 li
118.763 38.489 mo
118.763 39.102 li
118.763 36.502 mo
118.763 37.189 li
118.763 34.588 mo
118.763 35.202 li
118.763 32.601 mo
118.763 33.19 li
118.763 30.5891 mo
118.763 31.301 li
118.763 28.701 mo
118.763 29.29 li
118.763 26.688 mo
118.763 27.278 li
118.763 24.676 mo
118.763 25.266 li
118.763 22.788 mo
118.763 23.377 li
118.763 20.776 mo
118.763 21.365 li
118.763 18.764 mo
118.763 19.353 li
118.763 16.753 mo
118.763 17.4641 li
118.763 14.863 mo
118.763 15.453 li
118.763 12.851 mo
118.763 13.441 li
118.763 10.8391 mo
118.763 11.429 li
118.763 8.95105 mo
118.763 9.54004 li
118.763 6.93903 mo
118.763 7.52802 li
118.763 4.927 mo
118.763 5.51599 li
90.672 156.593 mo
90.672 157.181 li
90.672 154.581 mo
90.672 155.17 li
90.672 152.569 mo
90.672 153.28 li
90.672 150.68 mo
90.672 151.268 li
90.672 148.669 mo
90.672 149.256 li
90.672 146.657 mo
90.672 147.245 li
90.672 144.767 mo
90.672 145.356 li
90.672 142.755 mo
90.672 143.344 li
90.672 140.744 mo
90.672 141.333 li
90.672 138.732 mo
90.672 139.443 li
90.672 136.843 mo
90.672 137.431 li
90.672 134.832 mo
90.672 135.42 li
90.672 132.82 mo
90.672 133.409 li
90.672 130.93 mo
90.672 131.519 li
90.672 128.919 mo
90.672 129.508 li
90.672 126.907 mo
90.672 127.52 li
90.672 124.92 mo
90.672 125.607 li
90.672 123.006 mo
90.672 123.62 li
90.672 121.019 mo
90.672 121.608 li
90.672 119.006 mo
90.672 119.596 li
90.672 117.119 mo
90.672 117.707 li
90.672 115.106 mo
90.672 115.695 li
90.672 113.094 mo
90.672 113.683 li
90.672 111.083 mo
90.672 111.796 li
90.672 109.195 mo
90.672 109.784 li
90.672 107.183 mo
90.672 107.772 li
90.672 105.172 mo
90.672 105.76 li
90.672 103.282 mo
90.672 103.872 li
90.672 101.27 mo
90.672 101.86 li
90.672 99.258 mo
90.672 99.848 li
90.672 97.247 mo
90.672 97.959 li
90.672 95.358 mo
90.672 95.947 li
90.672 93.346 mo
90.672 93.935 li
90.672 91.335 mo
90.672 91.923 li
90.672 89.445 mo
90.672 90.035 li
90.672 87.433 mo
90.672 88.022 li
90.672 85.422 mo
90.672 86.01 li
90.672 83.411 mo
90.672 84.122 li
90.672 81.521 mo
90.672 82.11 li
90.672 79.509 mo
90.672 80.098 li
90.672 77.498 mo
90.672 78.209 li
90.672 75.609 mo
90.672 76.197 li
90.672 73.597 mo
90.672 74.211 li
90.672 71.61 mo
90.672 72.199 li
90.672 69.598 mo
90.672 70.309 li
90.672 67.709 mo
90.672 68.297 li
90.672 65.697 mo
90.672 66.286 li
90.672 63.685 mo
90.672 64.397 li
90.672 61.797 mo
90.672 62.385 li
90.672 59.785 mo
90.672 60.374 li
90.672 57.773 mo
90.672 58.362 li
90.672 55.761 mo
90.672 56.472 li
90.672 53.872 mo
90.672 54.461 li
90.672 51.86 mo
90.672 52.449 li
90.672 49.848 mo
90.672 50.56 li
90.672 47.96 mo
90.672 48.548 li
90.672 45.948 mo
90.672 46.536 li
90.672 43.936 mo
90.672 44.524 li
90.672 41.924 mo
90.672 42.635 li
90.672 40.035 mo
90.672 40.624 li
146.976 126.441 mo
146.976 126.564 li
146.976 125.975 mo
146.976 126.441 li
146.976 123.963 mo
146.976 124.552 li
146.976 121.952 mo
146.976 122.663 li
146.976 120.062 mo
146.976 120.651 li
146.976 118.05 mo
146.976 118.639 li
146.976 116.039 mo
146.976 116.628 li
146.976 114.027 mo
146.976 114.739 li
146.976 112.138 mo
146.976 112.727 li
146.976 110.128 mo
146.976 110.715 li
146.976 108.116 mo
146.976 108.827 li
146.976 106.226 mo
146.976 106.815 li
146.976 104.214 mo
146.976 104.803 li
146.976 102.203 mo
146.976 102.816 li
146.976 100.216 mo
146.976 100.903 li
146.976 98.302 mo
146.976 98.916 li
146.976 96.315 mo
146.976 96.9041 li
146.976 94.303 mo
146.976 95.014 li
146.976 92.414 mo
146.976 93.0031 li
146.976 90.402 mo
146.976 90.991 li
146.976 88.39 mo
146.976 88.979 li
146.976 86.379 mo
146.976 87.091 li
146.976 84.4901 mo
146.976 85.079 li
146.976 82.478 mo
146.976 83.067 li
146.976 80.466 mo
146.976 81.177 li
146.976 78.577 mo
146.976 79.166 li
146.976 76.565 mo
146.976 77.154 li
146.976 74.553 mo
146.976 75.142 li
146.976 72.542 mo
146.976 73.254 li
146.976 70.653 mo
146.976 71.242 li
146.976 68.6411 mo
146.976 69.23 li
146.976 66.63 mo
146.976 67.34 li
146.976 64.7401 mo
146.976 65.329 li
146.976 62.728 mo
146.976 63.317 li
146.976 60.716 mo
146.976 61.305 li
146.976 58.828 mo
146.976 59.417 li
146.976 56.816 mo
146.976 57.405 li
146.976 54.804 mo
146.976 55.393 li
146.976 52.793 mo
146.976 53.504 li
146.976 50.903 mo
146.976 51.492 li
146.976 48.891 mo
146.976 49.505 li
146.976 46.904 mo
146.976 47.494 li
146.976 44.991 mo
146.976 45.604 li
146.976 43.004 mo
146.976 43.592 li
146.976 40.992 mo
146.976 41.581 li
146.976 38.98 mo
146.976 39.692 li
146.976 37.09 mo
146.976 37.68 li
146.976 35.079 mo
146.976 35.669 li
146.976 33.067 mo
146.976 33.656 li
146.976 31.178 mo
146.976 31.767 li
146.976 29.167 mo
146.976 29.755 li
146.976 27.155 mo
146.976 27.744 li
146.976 25.143 mo
146.976 25.855 li
146.976 23.255 mo
146.976 23.842 li
146.976 21.243 mo
146.976 21.831 li
146.976 19.231 mo
146.976 19.819 li
146.976 17.341 mo
146.976 17.93 li
146.976 15.33 mo
146.976 15.919 li
146.976 13.318 mo
146.976 13.907 li
146.976 11.306 mo
146.976 12.017 li
146.976 9.41803 mo
146.976 10.005 li
146.976 7.40601 mo
146.976 7.99402 li
146.976 5.39404 mo
146.976 5.98199 li
146.976 3.505 mo
146.976 4.09302 li
118.763 155.047 mo
118.763 155.635 li
118.763 153.158 mo
118.763 153.747 li
118.763 151.146 mo
118.763 151.735 li
118.763 149.134 mo
118.763 149.723 li
118.763 147.123 mo
118.763 147.835 li
118.763 145.234 mo
118.763 145.823 li
118.763 143.222 mo
118.763 143.811 li
118.763 141.211 mo
118.763 141.824 li
118.763 139.321 mo
118.763 139.91 li
118.763 137.309 mo
118.763 137.922 li
118.763 135.322 mo
118.763 135.911 li
118.763 133.31 mo
118.763 134.022 li
118.763 131.422 mo
118.763 132.01 li
118.763 129.41 mo
118.763 129.999 li
118.763 127.398 mo
118.763 127.987 li
118.763 125.508 mo
118.763 126.098 li
118.763 123.497 mo
118.763 124.087 li
118.763 121.485 mo
118.763 122.074 li
118.763 119.473 mo
118.763 120.185 li
118.763 117.585 mo
118.763 118.173 li
118.763 115.573 mo
118.763 116.162 li
118.763 113.561 mo
118.763 114.273 li
118.763 111.672 mo
118.763 112.26 li
118.763 109.661 mo
118.763 110.249 li
118.763 107.649 mo
118.763 108.238 li
118.763 105.637 mo
118.763 106.349 li
118.763 103.749 mo
118.763 104.338 li
118.763 101.737 mo
118.763 102.326 li
118.763 99.725 mo
118.763 100.436 li
118.763 97.836 mo
118.763 98.424 li
118.763 95.824 mo
118.763 96.413 li
118.763 93.812 mo
118.763 94.401 li
118.763 91.801 mo
118.763 92.512 li
118.763 89.912 mo
118.763 90.501 li
118.763 87.9 mo
118.763 88.513 li
118.763 85.913 mo
118.763 86.599 li
118.763 83.999 mo
118.763 84.612 li
203.255 16.753 mo
203.255 16.875 li
203.255 16.287 mo
203.255 16.753 li
203.255 14.275 mo
203.255 14.986 li
203.255 12.385 mo
203.255 12.974 li
203.255 10.374 mo
203.255 10.963 li
203.255 8.362 mo
203.255 9.07404 li
203.255 6.47302 mo
203.255 7.06201 li
203.255 4.46204 mo
203.255 5.05005 li
175.067 156.127 mo
175.067 156.716 li
175.067 154.115 mo
175.067 154.704 li
175.067 152.103 mo
175.067 152.692 li
175.067 150.091 mo
175.067 150.803 li
175.067 148.203 mo
175.067 148.792 li
175.067 146.191 mo
175.067 146.78 li
175.067 144.179 mo
175.067 144.89 li
175.067 142.29 mo
175.067 142.879 li
175.067 140.278 mo
175.067 140.867 li
175.067 138.266 mo
175.067 138.855 li
175.067 136.255 mo
175.067 136.966 li
175.067 134.366 mo
175.067 134.954 li
175.067 132.354 mo
175.067 132.942 li
175.067 130.342 mo
175.067 131.053 li
175.067 128.453 mo
175.067 129.042 li
175.067 126.441 mo
175.067 127.03 li
175.067 124.429 mo
175.067 125.018 li
175.067 122.418 mo
175.067 123.129 li
175.067 120.529 mo
175.067 121.117 li
175.067 118.517 mo
175.067 119.105 li
175.067 116.505 mo
175.067 117.216 li
175.067 114.616 mo
175.067 115.205 li
175.067 112.604 mo
175.067 113.217 li
175.067 110.618 mo
175.067 111.206 li
175.067 108.705 mo
175.067 109.318 li
175.067 106.717 mo
175.067 107.306 li
175.067 104.706 mo
175.067 105.294 li
175.067 102.694 mo
175.067 103.405 li
175.067 100.804 mo
175.067 101.393 li
175.067 98.793 mo
175.067 99.381 li
175.067 96.781 mo
175.067 97.37 li
175.067 94.892 mo
175.067 95.48 li
175.067 92.88 mo
175.067 93.468 li
175.067 90.869 mo
175.067 91.457 li
175.067 88.856 mo
175.067 89.568 li
175.067 86.967 mo
175.067 87.556 li
175.067 84.956 mo
175.067 85.545 li
175.067 82.944 mo
175.067 83.533 li
175.067 81.055 mo
175.067 81.644 li
175.067 79.043 mo
175.067 79.632 li
175.067 77.031 mo
175.067 77.621 li
175.067 75.019 mo
175.067 75.731 li
175.067 73.13 mo
175.067 73.719 li
175.067 71.119 mo
175.067 71.708 li
175.067 69.107 mo
175.067 69.696 li
175.067 67.218 mo
175.067 67.807 li
175.067 65.207 mo
175.067 65.796 li
175.067 63.195 mo
175.067 63.808 li
175.067 61.208 mo
175.067 61.894 li
175.067 59.294 mo
175.067 59.907 li
175.067 57.306 mo
175.067 57.895 li
175.067 55.295 mo
175.067 55.883 li
175.067 53.406 mo
175.067 53.995 li
175.067 51.394 mo
175.067 51.983 li
175.067 49.383 mo
175.067 49.971 li
175.067 47.371 mo
175.067 48.082 li
175.067 45.482 mo
175.067 46.07 li
175.067 43.469 mo
175.067 44.058 li
175.067 41.458 mo
175.067 42.17 li
175.067 39.569 mo
175.067 40.158 li
175.067 37.557 mo
175.067 38.146 li
175.067 35.546 mo
175.067 36.134 li
175.067 33.534 mo
175.067 34.245 li
175.067 31.644 mo
175.067 32.233 li
175.067 29.632 mo
175.067 30.221 li
175.067 27.621 mo
175.067 28.333 li
175.067 25.732 mo
175.067 26.321 li
175.067 23.72 mo
175.067 24.309 li
175.067 21.709 mo
175.067 22.297 li
175.067 19.697 mo
175.067 20.408 li
175.067 17.807 mo
175.067 18.396 li
175.067 15.796 mo
175.067 16.384 li
175.067 13.784 mo
175.067 14.496 li
175.067 11.895 mo
175.067 12.484 li
175.067 9.88403 mo
175.067 10.497 li
175.067 7.896 mo
175.067 8.48505 li
175.067 5.88403 mo
175.067 6.59503 li
175.067 3.995 mo
175.067 4.58405 li
146.976 155.513 mo
146.976 156.225 li
146.976 153.624 mo
146.976 154.213 li
146.976 151.612 mo
146.976 152.226 li
146.976 149.626 mo
146.976 150.312 li
146.976 147.712 mo
146.976 148.325 li
146.976 145.724 mo
146.976 146.313 li
146.976 143.713 mo
146.976 144.301 li
146.976 141.701 mo
146.976 142.413 li
146.976 139.812 mo
146.976 140.401 li
146.976 137.799 mo
146.976 138.389 li
146.976 135.788 mo
146.976 136.5 li
146.976 133.899 mo
146.976 134.488 li
146.976 131.887 mo
146.976 132.476 li
146.976 129.876 mo
146.976 130.464 li
146.976 127.864 mo
146.976 128.576 li
203.255 157.059 mo
203.255 157.181 li
203.255 156.593 mo
203.255 157.059 li
203.255 154.581 mo
203.255 155.17 li
203.255 152.569 mo
203.255 153.281 li
203.255 150.68 mo
203.255 151.269 li
203.255 148.669 mo
203.255 149.258 li
203.255 146.657 mo
203.255 147.246 li
203.255 144.767 mo
203.255 145.356 li
203.255 142.755 mo
203.255 143.344 li
203.255 140.744 mo
203.255 141.333 li
203.255 138.732 mo
203.255 139.444 li
203.255 136.843 mo
203.255 137.432 li
203.255 134.832 mo
203.255 135.421 li
203.255 132.82 mo
203.255 133.409 li
203.255 130.93 mo
203.255 131.519 li
203.255 128.919 mo
203.255 129.508 li
203.255 126.907 mo
203.255 127.52 li
203.255 124.92 mo
203.255 125.607 li
203.255 123.006 mo
203.255 123.62 li
203.255 121.019 mo
203.255 121.608 li
203.255 119.008 mo
203.255 119.596 li
203.255 117.119 mo
203.255 117.707 li
203.255 115.106 mo
203.255 115.695 li
203.255 113.094 mo
203.255 113.683 li
203.255 111.083 mo
203.255 111.796 li
203.255 109.195 mo
203.255 109.784 li
203.255 107.183 mo
203.255 107.772 li
203.255 105.172 mo
203.255 105.76 li
203.255 103.282 mo
203.255 103.872 li
203.255 101.27 mo
203.255 101.86 li
203.255 99.258 mo
203.255 99.848 li
203.255 97.247 mo
203.255 97.959 li
203.255 95.358 mo
203.255 95.947 li
203.255 93.346 mo
203.255 93.935 li
203.255 91.335 mo
203.255 91.923 li
203.255 89.445 mo
203.255 90.035 li
203.255 87.433 mo
203.255 88.022 li
203.255 85.422 mo
203.255 86.01 li
203.255 83.411 mo
203.255 84.122 li
203.255 81.521 mo
203.255 82.11 li
203.255 79.509 mo
203.255 80.098 li
203.255 77.498 mo
203.255 78.209 li
203.255 75.609 mo
203.255 76.197 li
203.255 73.597 mo
203.255 74.211 li
203.255 71.61 mo
203.255 72.199 li
203.255 69.598 mo
203.255 70.309 li
203.255 67.709 mo
203.255 68.297 li
203.255 65.697 mo
203.255 66.286 li
203.255 63.685 mo
203.255 64.397 li
203.255 61.797 mo
203.255 62.385 li
203.255 59.785 mo
203.255 60.374 li
203.255 57.773 mo
203.255 58.362 li
203.255 55.761 mo
203.255 56.472 li
203.255 53.872 mo
203.255 54.461 li
203.255 51.86 mo
203.255 52.449 li
203.255 49.848 mo
203.255 50.56 li
203.255 47.96 mo
203.255 48.548 li
203.255 45.948 mo
203.255 46.536 li
203.255 43.936 mo
203.255 44.524 li
203.255 41.924 mo
203.255 42.635 li
203.255 40.035 mo
203.255 40.624 li
203.255 38.023 mo
203.255 38.612 li
203.255 36.011 mo
203.255 36.722 li
203.255 34.123 mo
203.255 34.711 li
203.255 32.111 mo
203.255 32.699 li
203.255 30.099 mo
203.255 30.687 li
203.255 28.088 mo
203.255 28.799 li
203.255 26.198 mo
203.255 26.787 li
203.255 24.186 mo
203.255 24.799 li
203.255 22.199 mo
203.255 22.886 li
203.255 20.286 mo
203.255 20.899 li
203.255 18.298 mo
203.255 18.887 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.37998 .307744 .312413 .00195315 cmyk
@
46.536 148.546 mo
46.07 148.546 li
46.07 148.08 li
46.414 147.368 li
46.879 147.368 li
46.879 147.957 li
.75021 .679683 .670222 .90164 cmyk
f
46.879 147.957 mo
46.414 147.957 li
46.414 147.368 li
46.879 146.902 li
47.469 146.902 li
47.469 147.368 li
f
47.469 147.368 mo
46.879 147.368 li
46.879 146.902 li
47.469 146.313 li
47.959 146.313 li
47.959 146.78 li
f
47.959 146.78 mo
47.469 146.78 li
47.469 146.313 li
47.959 145.822 li
48.425 145.822 li
48.425 146.313 li
f
48.425 146.313 mo
47.959 146.313 li
47.959 145.822 li
48.425 145.111 li
48.891 145.111 li
48.891 145.601 li
f
48.891 145.601 mo
48.425 145.601 li
48.425 145.111 li
48.891 144.423 li
49.358 144.423 li
49.358 145.013 li
f
49.358 145.013 mo
48.891 145.013 li
48.891 144.423 li
49.259 143.81 li
49.848 143.81 li
49.848 144.301 li
f
49.848 144.301 mo
49.259 144.301 li
49.259 143.81 li
49.848 143.221 li
50.314 143.221 li
50.314 143.713 li
f
50.314 143.713 mo
49.848 143.713 li
49.848 143.221 li
50.314 142.51 li
50.78 142.51 li
50.78 143.002 li
f
50.78 143.002 mo
50.314 143.002 li
50.314 142.51 li
50.78 141.823 li
51.247 141.823 li
51.247 142.412 li
f
51.247 142.412 mo
50.78 142.412 li
50.78 141.823 li
51.247 141.112 li
51.737 141.112 li
51.737 141.578 li
f
51.737 141.578 mo
51.247 141.578 li
51.247 141.112 li
51.615 140.4 li
52.081 140.4 li
52.081 140.867 li
f
52.081 140.867 mo
51.615 140.867 li
51.615 140.4 li
52.081 139.689 li
52.669 139.689 li
52.669 140.155 li
f
52.669 140.155 mo
52.081 140.155 li
52.081 139.689 li
52.669 138.855 li
53.136 138.855 li
53.136 139.443 li
f
53.136 139.443 mo
52.669 139.443 li
52.669 138.855 li
53.136 138.143 li
53.627 138.143 li
53.627 138.61 li
f
53.627 138.61 mo
53.136 138.61 li
53.136 138.143 li
53.504 137.309 li
53.97 137.309 li
53.97 137.799 li
f
53.97 137.799 mo
53.504 137.799 li
53.504 137.309 li
53.97 136.622 li
54.436 136.622 li
54.436 137.088 li
f
54.436 137.088 mo
53.97 137.088 li
53.97 136.622 li
54.436 135.666 li
54.902 135.666 li
54.902 136.131 li
f
54.902 136.131 mo
54.436 136.131 li
54.436 135.666 li
54.902 134.832 li
55.491 134.832 li
55.491 135.322 li
f
55.491 135.322 mo
54.902 135.322 li
54.902 134.832 li
55.491 134.022 li
55.981 134.022 li
55.981 134.488 li
f
55.981 134.488 mo
55.491 134.488 li
55.491 134.022 li
55.859 133.065 li
56.325 133.065 li
56.325 133.531 li
f
56.325 133.531 mo
55.859 133.531 li
55.859 133.065 li
56.325 132.231 li
56.791 132.231 li
56.791 132.721 li
f
56.791 132.721 mo
56.325 132.721 li
56.325 132.231 li
56.791 131.298 li
57.282 131.298 li
57.282 131.764 li
f
57.282 131.764 mo
56.791 131.764 li
56.791 131.298 li
57.282 130.341 li
57.871 130.341 li
57.871 130.93 li
f
57.871 130.93 mo
57.282 130.93 li
57.282 130.341 li
57.871 129.508 li
58.337 129.508 li
58.337 129.999 li
f
58.337 129.999 mo
57.871 129.999 li
57.871 129.508 li
58.337 128.575 li
58.803 128.575 li
58.803 129.042 li
f
58.803 129.042 mo
58.337 129.042 li
58.337 128.575 li
58.68 127.52 li
59.171 127.52 li
59.171 127.987 li
f
59.171 127.987 mo
58.68 127.987 li
58.68 127.52 li
59.171 126.563 li
59.637 126.563 li
59.637 127.03 li
f
59.637 127.03 mo
59.171 127.03 li
59.171 126.563 li
59.637 125.607 li
60.103 125.607 li
60.103 126.098 li
f
60.103 126.098 mo
59.637 126.098 li
59.637 125.607 li
60.103 124.429 li
60.692 124.429 li
60.692 124.92 li
f
60.692 124.92 mo
60.103 124.92 li
60.103 124.429 li
60.692 123.497 li
61.158 123.497 li
61.158 123.963 li
f
61.158 123.963 mo
60.692 123.963 li
60.692 123.497 li
61.06 122.32 li
61.526 122.32 li
61.526 122.908 li
f
61.526 122.908 mo
61.06 122.908 li
61.06 122.32 li
61.526 121.24 li
61.992 121.24 li
61.992 121.707 li
f
61.992 121.707 mo
61.526 121.707 li
61.526 121.24 li
61.992 120.308 li
62.459 120.308 li
62.459 120.773 li
f
62.459 120.773 mo
61.992 120.773 li
61.992 120.308 li
62.459 119.105 li
62.949 119.105 li
62.949 119.596 li
f
62.949 119.596 mo
62.459 119.596 li
62.459 119.105 li
62.826 117.928 li
63.415 117.928 li
63.415 118.419 li
f
63.415 118.419 mo
62.826 118.419 li
62.826 117.928 li
63.415 116.751 li
63.881 116.751 li
63.881 117.339 li
f
63.881 117.339 mo
63.415 117.339 li
63.415 116.751 li
63.881 115.695 li
64.348 115.695 li
64.348 116.162 li
f
64.348 116.162 mo
63.881 116.162 li
63.881 115.695 li
64.348 114.518 li
64.838 114.518 li
64.838 114.984 li
f
64.838 114.984 mo
64.348 114.984 li
64.348 114.518 li
64.838 113.217 li
65.305 113.217 li
65.305 113.683 li
f
65.305 113.683 mo
64.838 113.683 li
64.838 113.217 li
65.182 112.015 li
65.648 112.015 li
65.648 112.506 li
f
65.648 112.506 mo
65.182 112.506 li
65.182 112.015 li
65.648 110.838 li
66.236 110.838 li
66.236 111.303 li
f
66.236 111.303 mo
65.648 111.303 li
65.648 110.838 li
66.236 109.539 li
66.703 109.539 li
66.703 110.005 li
f
66.703 110.005 mo
66.236 110.005 li
66.236 109.539 li
66.703 108.238 li
67.194 108.238 li
67.194 108.827 li
f
67.194 108.827 mo
66.703 108.827 li
66.703 108.238 li
67.194 107.06 li
67.66 107.06 li
67.66 107.527 li
f
67.66 107.527 mo
67.194 107.527 li
67.194 107.06 li
67.66 105.76 li
68.126 105.76 li
68.126 106.349 li
f
68.126 106.349 mo
67.66 106.349 li
67.66 105.76 li
68.003 104.461 li
68.494 104.461 li
68.494 104.926 li
f
68.494 104.926 mo
68.003 104.926 li
68.003 104.461 li
68.494 103.037 li
69.082 103.037 li
69.082 103.626 li
f
69.082 103.626 mo
68.494 103.626 li
68.494 103.037 li
69.082 101.737 li
69.549 101.737 li
69.549 102.203 li
f
69.549 102.203 mo
69.082 102.203 li
69.082 101.737 li
69.549 100.436 li
70.015 100.436 li
70.015 100.903 li
f
70.015 100.903 mo
69.549 100.903 li
69.549 100.436 li
70.015 99.0131 li
70.481 99.0131 li
70.481 99.504 li
f
70.481 99.504 mo
70.015 99.504 li
70.015 99.0131 li
70.383 97.7131 li
70.849 97.7131 li
70.849 98.204 li
f
70.849 98.204 mo
70.383 98.204 li
70.383 97.713 li
70.849 96.192 li
71.438 96.192 li
71.438 96.658 li
f
71.438 96.658 mo
70.849 96.658 li
70.849 96.1921 li
71.438 94.6461 li
71.904 94.6461 li
71.904 95.235 li
f
71.904 95.235 mo
71.438 95.235 li
71.438 94.646 li
71.904 93.346 li
72.37 93.346 li
72.37 93.812 li
f
72.37 93.812 mo
71.904 93.812 li
71.904 93.3461 li
72.272 91.801 li
72.738 91.801 li
72.738 92.4141 li
f
72.738 92.414 mo
72.272 92.414 li
72.272 91.801 li
72.738 90.402 li
73.204 90.402 li
73.204 90.869 li
f
73.204 90.869 mo
72.738 90.869 li
72.738 90.402 li
73.204 88.8561 li
73.67 88.8561 li
73.67 89.4451 li
f
73.67 89.445 mo
73.204 89.445 li
73.204 88.856 li
73.67 87.311 li
74.259 87.311 li
74.259 87.8021 li
f
74.259 87.802 mo
73.67 87.802 li
73.67 87.311 li
74.259 85.79 li
74.75 85.79 li
74.75 86.256 li
f
74.75 86.256 mo
74.259 86.256 li
74.259 85.79 li
74.627 84.367 li
75.093 84.367 li
75.093 84.833 li
f
75.093 84.833 mo
74.627 84.833 li
74.627 84.3671 li
75.093 82.699 li
75.56 82.699 li
75.56 83.189 li
f
75.56 83.189 mo
75.093 83.189 li
75.093 82.699 li
75.56 81.1771 li
76.05 81.1771 li
76.05 81.644 li
f
76.05 81.644 mo
75.56 81.644 li
75.56 81.177 li
76.05 79.509 li
76.516 79.509 li
76.516 80.001 li
f
76.516 80.001 mo
76.05 80.001 li
76.05 79.509 li
76.516 77.866 li
77.105 77.866 li
77.105 78.455 li
f
77.105 78.455 mo
76.516 78.455 li
76.516 77.866 li
77.105 76.3201 li
77.571 76.3201 li
77.571 76.8101 li
f
77.571 76.81 mo
77.105 76.81 li
77.105 76.32 li
77.448 74.676 li
77.915 74.676 li
77.915 75.142 li
f
77.915 75.142 mo
77.448 75.142 li
77.448 74.6761 li
77.915 73.0081 li
78.405 73.0081 li
78.405 73.4991 li
f
78.405 73.499 mo
77.915 73.499 li
77.915 73.0081 li
78.405 71.3641 li
78.872 71.3641 li
78.872 71.8311 li
f
78.872 71.831 mo
78.405 71.831 li
78.405 71.364 li
78.872 69.598 li
79.46 69.598 li
79.46 70.187 li
f
79.46 70.187 mo
78.872 70.187 li
78.872 69.598 li
79.46 67.929 li
79.926 67.929 li
79.926 68.395 li
f
79.926 68.395 mo
79.46 68.395 li
79.46 67.9291 li
79.804 66.163 li
80.294 66.163 li
80.294 66.6301 li
f
80.294 66.63 mo
79.804 66.63 li
79.804 66.163 li
80.294 64.4951 li
80.761 64.4951 li
80.761 64.985 li
f
80.761 64.985 mo
80.294 64.985 li
80.294 64.495 li
80.761 62.606 li
81.227 62.606 li
81.227 63.096 li
f
81.227 63.096 mo
80.761 63.096 li
80.761 62.606 li
81.227 60.8391 li
81.693 60.8391 li
81.693 61.3051 li
f
81.693 61.305 mo
81.227 61.305 li
81.227 60.8391 li
81.595 59.073 li
82.183 59.073 li
82.183 59.54 li
f
82.183 59.54 mo
81.595 59.54 li
81.595 59.073 li
82.183 57.306 li
82.65 57.306 li
82.65 57.773 li
f
82.65 57.773 mo
82.183 57.773 li
82.183 57.306 li
82.65 55.3931 li
83.116 55.3931 li
83.116 55.8831 li
f
83.116 55.883 mo
82.65 55.883 li
82.65 55.393 li
83.116 53.627 li
83.581 53.627 li
83.581 54.092 li
f
83.581 54.092 mo
83.116 54.092 li
83.116 53.627 li
83.581 51.738 li
84.072 51.738 li
84.072 52.204 li
f
84.072 52.204 mo
83.581 52.204 li
83.581 51.738 li
83.95 49.726 li
84.416 49.726 li
84.416 50.192 li
f
84.416 50.192 mo
83.95 50.192 li
83.95 49.7261 li
84.416 47.96 li
85.005 47.96 li
85.005 48.425 li
f
85.005 48.425 mo
84.416 48.425 li
84.416 47.96 li
85.005 46.07 li
85.471 46.07 li
85.471 46.536 li
f
85.471 46.536 mo
85.005 46.536 li
85.005 46.0701 li
85.471 44.058 li
85.961 44.058 li
85.961 44.524 li
f
85.961 44.524 mo
85.471 44.524 li
85.471 44.058 li
85.961 42.17 li
86.428 42.17 li
86.428 42.635 li
f
86.428 42.635 mo
85.961 42.635 li
85.961 42.17 li
86.428 40.158 li
86.894 40.158 li
86.894 40.624 li
f
86.894 40.624 mo
86.428 40.624 li
86.428 40.1581 li
86.772 38.1461 li
87.262 38.1461 li
87.262 38.6121 li
f
87.262 38.612 mo
86.772 38.612 li
86.772 38.1461 li
87.262 36.134 li
87.851 36.134 li
87.851 36.722 li
f
87.851 36.722 mo
87.262 36.722 li
87.262 36.134 li
87.851 34.245 li
88.316 34.245 li
88.316 34.711 li
f
88.316 34.711 mo
87.851 34.711 li
87.851 34.2451 li
88.316 32.111 li
88.783 32.111 li
88.783 32.601 li
f
88.783 32.601 mo
88.316 32.601 li
88.316 32.111 li
88.783 30.001 li
89.249 30.001 li
89.249 30.4661 li
f
89.249 30.466 mo
88.783 30.466 li
88.783 30.001 li
89.127 27.989 li
89.617 27.989 li
89.617 28.5781 li
f
89.617 28.578 mo
89.127 28.578 li
89.127 27.989 li
89.617 25.9771 li
90.206 25.9771 li
90.206 26.4431 li
f
90.206 26.443 mo
89.617 26.443 li
89.617 25.9771 li
90.206 23.842 li
90.672 23.842 li
90.672 24.309 li
f
90.672 24.309 mo
90.206 24.309 li
90.206 23.842 li
90.672 21.709 li
91.138 21.709 li
91.138 22.199 li
f
91.138 22.199 mo
90.672 22.199 li
90.672 21.709 li
91.016 19.476 li
91.506 19.476 li
91.506 20.065 li
f
91.506 20.065 mo
91.016 20.065 li
91.016 19.476 li
91.506 17.4641 li
91.972 17.4641 li
91.972 17.9301 li
f
91.972 17.93 mo
91.506 17.93 li
91.506 17.4641 li
91.972 15.208 li
92.439 15.208 li
92.439 15.698 li
f
92.439 15.698 mo
91.972 15.698 li
91.972 15.208 li
92.439 13.097 li
93.027 13.097 li
93.027 13.563 li
f
46.07 69.352 mo
46.07 68.886 li
46.536 68.886 li
46.879 70.187 li
46.879 70.653 li
46.414 70.653 li
f
46.414 70.653 mo
46.414 70.1871 li
46.879 70.1871 li
47.125 70.53 li
47.125 70.996 li
46.536 70.996 li
f
47.591 73.499 mo
47.591 73.0081 li
48.057 73.0081 li
48.425 73.842 li
48.425 74.308 li
47.959 74.308 li
f
47.959 74.308 mo
47.959 73.842 li
48.425 73.842 li
48.646 74.431 li
48.646 74.897 li
48.18 74.897 li
f
49.137 77.399 mo
49.137 76.909 li
49.603 76.909 li
49.848 77.277 li
49.848 77.743 li
49.259 77.743 li
f
49.259 77.743 mo
49.259 77.277 li
49.848 77.277 li
50.314 78.577 li
50.314 79.043 li
49.848 79.043 li
f
50.78 81.301 mo
50.78 80.712 li
51.247 80.712 li
51.737 81.889 li
51.737 82.355 li
51.247 82.355 li
f
51.247 82.355 mo
51.247 81.889 li
51.737 81.889 li
51.958 82.478 li
51.958 82.944 li
51.492 82.944 li
f
52.326 85.201 mo
52.326 84.711 li
52.915 84.711 li
53.136 85.201 li
53.136 85.668 li
52.669 85.668 li
f
52.669 85.668 mo
52.669 85.201 li
53.136 85.201 li
53.627 86.1331 li
53.627 86.722 li
53.136 86.722 li
f
54.215 89.445 mo
54.215 88.856 li
54.681 88.856 li
54.902 89.445 li
54.902 89.912 li
54.436 89.912 li
f
54.436 89.912 mo
54.436 89.445 li
54.902 89.445 li
55.491 90.402 li
55.491 90.869 li
54.902 90.869 li
f
56.105 93.346 mo
56.105 92.8801 li
56.57 92.8801 li
56.791 93.346 li
56.791 93.812 li
56.325 93.812 li
f
56.325 93.812 mo
56.325 93.3461 li
56.791 93.3461 li
57.282 94.303 li
57.282 94.892 li
56.791 94.892 li
f
58.091 97.125 mo
58.091 96.658 li
58.582 96.658 li
58.803 97.002 li
58.803 97.492 li
58.337 97.492 li
f
58.337 97.492 mo
58.337 97.002 li
58.803 97.002 li
59.171 98.082 li
59.171 98.5471 li
58.68 98.5471 li
f
59.98 101.025 mo
59.98 100.559 li
60.569 100.559 li
60.692 100.682 li
60.692 101.148 li
60.103 101.148 li
f
60.103 101.148 mo
60.103 100.682 li
60.692 100.682 li
61.158 101.516 li
61.158 101.982 li
60.692 101.982 li
f
60.692 101.982 mo
60.692 101.516 li
61.158 101.516 li
61.526 102.326 li
61.526 102.816 li
61.06 102.816 li
f
62.459 105.294 mo
62.459 104.803 li
62.949 104.803 li
63.415 105.515 li
63.415 106.104 li
62.826 106.104 li
f
62.826 106.104 mo
62.826 105.515 li
63.415 105.515 li
63.881 106.349 li
63.881 106.815 li
63.415 106.815 li
f
64.838 109.072 mo
64.838 108.484 li
65.305 108.484 li
65.648 109.318 li
65.648 109.784 li
65.182 109.784 li
f
65.182 109.784 mo
65.182 109.318 li
65.648 109.318 li
66.236 110.005 li
66.236 110.495 li
65.648 110.495 li
f
67.66 113.217 mo
67.66 112.727 li
68.126 112.727 li
68.494 113.315 li
68.494 113.806 li
68.003 113.806 li
f
68.003 113.806 mo
68.003 113.315 li
68.494 113.315 li
69.082 113.905 li
69.082 114.518 li
68.494 114.518 li
f
70.383 116.751 mo
70.383 116.285 li
70.849 116.285 li
71.438 116.751 li
71.438 117.339 li
70.849 117.339 li
f
70.849 117.339 mo
70.849 116.751 li
71.438 116.751 li
71.904 117.462 li
71.904 117.928 li
71.438 117.928 li
f
71.438 117.928 mo
71.438 117.462 li
71.904 117.462 li
72.37 117.928 li
72.37 118.419 li
71.904 118.419 li
f
74.259 120.896 mo
74.259 120.406 li
74.75 120.406 li
75.093 120.896 li
75.093 121.363 li
74.627 121.363 li
f
74.627 121.363 mo
74.627 120.896 li
75.093 120.896 li
75.56 121.24 li
75.56 121.707 li
75.093 121.707 li
f
75.093 121.707 mo
75.093 121.24 li
75.56 121.24 li
76.05 121.707 li
76.05 122.197 li
75.56 122.197 li
f
77.915 124.087 mo
77.915 123.62 li
78.405 123.62 li
78.872 123.963 li
78.872 124.429 li
78.405 124.429 li
f
78.405 124.429 mo
78.405 123.963 li
78.872 123.963 li
79.46 124.306 li
79.46 124.797 li
78.872 124.797 li
f
78.872 124.797 mo
78.872 124.306 li
79.46 124.306 li
79.926 124.551 li
79.926 125.018 li
79.46 125.018 li
f
82.183 126.686 mo
82.183 126.22 li
82.65 126.22 li
83.116 126.441 li
83.116 126.907 li
82.65 126.907 li
f
82.65 126.907 mo
82.65 126.441 li
83.116 126.441 li
83.581 126.686 li
83.581 127.153 li
83.116 127.153 li
f
83.116 127.153 mo
83.116 126.686 li
83.581 126.686 li
84.072 126.808 li
84.072 127.275 li
83.581 127.275 li
f
.589 lw
0 lc
85.839 127.913 mo
86.428 127.913 li
85.961 127.913 mo
86.894 127.913 li
@
86.428 128.207 mo
86.428 127.619 li
86.894 127.619 li
87.262 127.742 li
87.262 128.33 li
86.772 128.33 li
f
86.772 128.33 mo
86.772 127.742 li
87.262 127.742 li
87.851 127.864 li
87.851 128.453 li
87.262 128.453 li
f
.491 lw
90.206 128.453 mo
91.138 128.453 li
90.672 128.453 mo
91.506 128.453 li
91.016 128.453 mo
91.972 128.453 li
@
60.103 154.213 mo
60.103 153.747 li
60.692 153.747 li
61.747 154.115 li
61.747 154.581 li
61.281 154.581 li
f
61.281 154.581 mo
61.281 154.115 li
61.747 154.115 li
62.949 154.336 li
62.949 154.827 li
62.459 154.827 li
f
62.459 154.827 mo
62.459 154.336 li
62.949 154.336 li
64.127 154.704 li
64.127 155.17 li
63.636 155.17 li
f
63.636 155.17 mo
63.636 154.704 li
64.127 154.704 li
65.305 154.827 li
65.305 155.292 li
64.838 155.292 li
f
64.838 155.292 mo
64.838 154.827 li
65.305 154.827 li
66.605 155.047 li
66.605 155.513 li
66.114 155.513 li
f
66.114 155.513 mo
66.114 155.047 li
66.605 155.047 li
67.66 155.292 li
67.66 155.881 li
67.194 155.881 li
f
67.194 155.881 mo
67.194 155.292 li
67.66 155.292 li
68.837 155.415 li
68.837 156.004 li
68.248 156.004 li
f
68.248 156.004 mo
68.248 155.415 li
68.837 155.415 li
70.015 155.513 li
70.015 156.127 li
69.549 156.127 li
f
69.549 156.127 mo
69.549 155.513 li
70.015 155.513 li
71.315 155.635 li
71.315 156.225 li
70.726 156.225 li
f
.589 lw
70.726 155.93 mo
72.37 155.93 li
71.904 155.93 mo
73.548 155.93 li
@
73.081 156.225 mo
73.081 155.635 li
73.548 155.635 li
74.75 155.881 li
74.75 156.347 li
74.259 156.347 li
f
74.75 156.347 mo
74.259 156.347 li
74.259 155.881 li
75.437 155.635 li
75.927 155.635 li
75.927 156.225 li
f
75.437 155.93 mo
77.105 155.93 li
76.516 155.93 mo
78.282 155.93 li
@
78.282 156.225 mo
77.816 156.225 li
77.816 155.635 li
78.994 155.513 li
79.583 155.513 li
79.583 156.127 li
f
79.583 156.127 mo
78.994 156.127 li
78.994 155.513 li
80.171 155.415 li
80.638 155.415 li
80.638 156.004 li
f
80.638 156.004 mo
80.171 156.004 li
80.171 155.415 li
81.349 155.292 li
81.815 155.292 li
81.815 155.881 li
f
81.815 155.881 mo
81.349 155.881 li
81.349 155.292 li
82.527 155.047 li
82.993 155.047 li
82.993 155.513 li
f
82.993 155.513 mo
82.527 155.513 li
82.527 155.047 li
83.705 154.827 li
84.17 154.827 li
84.17 155.292 li
f
84.17 155.292 mo
83.705 155.292 li
83.705 154.827 li
84.882 154.704 li
85.373 154.704 li
85.373 155.17 li
f
85.373 155.17 mo
84.882 155.17 li
84.882 154.704 li
86.06 154.336 li
86.55 154.336 li
86.55 154.827 li
f
86.55 154.827 mo
86.06 154.827 li
86.06 154.336 li
87.262 154.115 li
87.851 154.115 li
87.851 154.581 li
f
87.851 154.581 mo
87.262 154.581 li
87.262 154.115 li
88.44 153.747 li
88.906 153.747 li
88.906 154.213 li
f
88.906 154.213 mo
88.44 154.213 li
88.44 153.747 li
89.617 153.403 li
90.206 153.403 li
90.206 153.87 li
f
90.206 153.87 mo
89.617 153.87 li
89.617 153.403 li
90.795 152.913 li
91.261 152.913 li
91.261 153.526 li
f
91.261 153.526 mo
90.795 153.526 li
90.795 152.913 li
91.972 152.569 li
92.439 152.569 li
92.439 153.158 li
f
92.439 153.158 mo
91.972 153.158 li
91.972 152.569 li
93.15 152.225 li
93.616 152.225 li
93.616 152.692 li
f
93.616 152.692 mo
93.15 152.692 li
93.15 152.225 li
94.328 151.735 li
94.794 151.735 li
94.794 152.225 li
f
94.794 152.225 mo
94.328 152.225 li
94.328 151.735 li
95.382 151.268 li
95.971 151.268 li
95.971 151.735 li
f
95.971 151.735 mo
95.382 151.735 li
95.382 151.268 li
96.683 150.803 li
97.173 150.803 li
97.173 151.268 li
f
97.173 151.268 mo
96.683 151.268 li
96.683 150.803 li
97.86 150.091 li
98.474 150.091 li
98.474 150.68 li
f
98.474 150.68 mo
97.86 150.68 li
97.86 150.091 li
99.062 149.625 li
99.528 149.625 li
99.528 150.091 li
f
99.528 150.091 mo
99.062 150.091 li
99.062 149.625 li
100.24 149.011 li
100.706 149.011 li
100.706 149.502 li
f
100.706 149.502 mo
100.24 149.502 li
100.24 149.011 li
101.417 148.423 li
101.884 148.423 li
101.884 148.914 li
f
101.884 148.914 mo
101.417 148.914 li
101.417 148.423 li
102.595 147.834 li
103.062 147.834 li
103.062 148.325 li
f
103.062 148.325 mo
102.595 148.325 li
102.595 147.834 li
103.773 147.025 li
104.239 147.025 li
104.239 147.613 li
f
104.239 147.613 mo
103.773 147.613 li
103.773 147.025 li
104.95 146.313 li
105.416 146.313 li
105.416 146.78 li
f
105.416 146.78 mo
104.95 146.78 li
104.95 146.313 li
106.128 145.601 li
106.717 145.601 li
106.717 146.068 li
f
106.717 146.068 mo
106.128 146.068 li
106.128 145.601 li
107.306 144.89 li
107.796 144.89 li
107.796 145.356 li
f
107.796 145.356 mo
107.306 145.356 li
107.306 144.89 li
108.483 143.933 li
109.072 143.933 li
109.072 144.423 li
f
109.072 144.423 mo
108.483 144.423 li
108.483 143.933 li
109.686 143.222 li
110.151 143.222 li
110.151 143.713 li
f
110.151 143.713 mo
109.686 143.713 li
109.686 143.222 li
110.863 142.413 li
111.329 142.413 li
111.329 142.879 li
f
111.329 142.879 mo
110.863 142.879 li
110.863 142.413 li
112.04 141.456 li
112.506 141.456 li
112.506 142.045 li
f
112.506 142.045 mo
112.04 142.045 li
112.04 141.456 li
113.218 140.523 li
113.684 140.523 li
113.684 140.99 li
f
113.684 140.99 mo
113.218 140.99 li
113.218 140.523 li
114.518 139.689 li
114.984 139.689 li
114.984 140.156 li
f
114.984 140.156 mo
114.518 140.156 li
114.518 139.689 li
115.573 138.61 li
116.04 138.61 li
116.04 139.223 li
f
116.04 139.223 mo
115.573 139.223 li
115.573 138.61 li
116.628 137.677 li
117.217 137.677 li
117.217 138.144 li
f
117.217 138.144 mo
116.628 138.144 li
116.628 137.677 li
117.928 136.72 li
118.395 136.72 li
118.395 137.212 li
f
118.395 137.212 mo
117.928 137.212 li
117.928 136.72 li
119.106 135.543 li
119.597 135.543 li
119.597 136.009 li
f
119.597 136.009 mo
119.106 136.009 li
119.106 135.543 li
120.284 134.611 li
120.774 134.611 li
120.774 135.077 li
f
120.774 135.077 mo
120.284 135.077 li
120.284 134.611 li
121.486 133.409 li
121.952 133.409 li
121.952 134.022 li
f
121.952 134.022 mo
121.486 134.022 li
121.486 133.409 li
122.663 132.231 li
123.129 132.231 li
123.129 132.721 li
f
123.129 132.721 mo
122.663 132.721 li
122.663 132.231 li
123.841 131.176 li
124.308 131.176 li
124.308 131.642 li
f
124.308 131.642 mo
123.841 131.642 li
123.841 131.176 li
124.896 129.999 li
125.485 129.999 li
125.485 130.464 li
f
125.485 130.464 mo
124.896 130.464 li
124.896 129.999 li
126.196 128.821 li
126.663 128.821 li
126.663 129.287 li
f
126.663 129.287 mo
126.196 129.287 li
126.196 128.821 li
127.374 127.52 li
127.963 127.52 li
127.963 127.987 li
f
127.963 127.987 mo
127.374 127.987 li
127.374 127.52 li
128.551 126.22 li
129.018 126.22 li
129.018 126.686 li
f
129.018 126.686 mo
128.551 126.686 li
128.551 126.22 li
129.73 124.92 li
130.22 124.92 li
130.22 125.508 li
f
130.22 125.508 mo
129.73 125.508 li
129.73 124.92 li
130.906 123.62 li
131.398 123.62 li
131.398 124.087 li
f
131.398 124.087 mo
130.906 124.087 li
130.906 123.62 li
132.109 122.197 li
132.575 122.197 li
132.575 122.786 li
f
132.575 122.786 mo
132.109 122.786 li
132.109 122.197 li
133.286 120.896 li
133.753 120.896 li
133.753 121.363 li
f
133.753 121.363 mo
133.286 121.363 li
133.286 120.896 li
134.464 119.351 li
134.93 119.351 li
134.93 119.94 li
f
134.93 119.94 mo
134.464 119.94 li
134.464 119.351 li
135.642 118.05 li
136.231 118.05 li
136.231 118.517 li
f
136.231 118.517 mo
135.642 118.517 li
135.642 118.05 li
136.819 116.505 li
137.286 116.505 li
137.286 117.119 li
f
137.286 117.119 mo
136.819 117.119 li
136.819 116.505 li
137.874 115.106 li
138.341 115.106 li
138.341 115.573 li
f
138.341 115.573 mo
137.874 115.573 li
137.874 115.106 li
139.175 113.438 li
139.641 113.438 li
139.641 113.905 li
f
139.641 113.905 mo
139.175 113.905 li
139.175 113.438 li
140.353 112.015 li
140.818 112.015 li
140.818 112.506 li
f
140.818 112.506 mo
140.353 112.506 li
140.353 112.015 li
141.53 110.372 li
142.021 110.372 li
142.021 110.838 li
f
142.021 110.838 mo
141.53 110.838 li
141.53 110.372 li
142.707 108.827 li
143.198 108.827 li
143.198 109.318 li
f
143.198 109.318 mo
142.707 109.318 li
142.707 108.827 li
143.787 107.183 li
144.376 107.183 li
144.376 107.649 li
f
144.376 107.649 mo
143.787 107.649 li
143.787 107.183 li
145.087 105.417 li
145.553 105.417 li
145.553 106.005 li
f
145.553 106.005 mo
145.087 106.005 li
145.087 105.417 li
146.143 103.872 li
146.731 103.872 li
146.731 104.338 li
f
146.731 104.338 mo
146.143 104.338 li
146.143 103.872 li
147.443 102.105 li
147.908 102.105 li
147.908 102.571 li
f
147.908 102.571 mo
147.443 102.571 li
147.443 102.105 li
148.62 100.436 li
149.086 100.436 li
149.086 100.903 li
f
149.086 100.903 mo
148.62 100.903 li
148.62 100.436 li
149.798 98.5471 li
150.264 98.5471 li
150.264 99.0131 li
f
150.264 99.013 mo
149.798 99.013 li
149.798 98.5471 li
150.975 96.781 li
151.441 96.781 li
151.441 97.247 li
f
151.441 97.247 mo
150.975 97.247 li
150.975 96.7811 li
152.153 95.014 li
152.643 95.014 li
152.643 95.48 li
f
152.643 95.48 mo
152.153 95.48 li
152.153 95.014 li
153.331 93.101 li
153.821 93.101 li
153.821 93.591 li
f
153.821 93.591 mo
153.331 93.591 li
153.331 93.101 li
154.41 91.212 li
154.999 91.212 li
154.999 91.7031 li
f
154.999 91.703 mo
154.41 91.703 li
154.41 91.212 li
155.71 89.3231 li
156.176 89.3231 li
156.176 89.814 li
f
156.176 89.814 mo
155.71 89.814 li
155.71 89.3231 li
156.888 87.311 li
157.355 87.311 li
157.355 87.8021 li
f
157.355 87.802 mo
156.888 87.802 li
156.888 87.311 li
158.066 85.299 li
158.531 85.299 li
158.531 85.79 li
f
158.531 85.79 mo
158.066 85.79 li
158.066 85.299 li
159.12 83.312 li
159.586 83.312 li
159.586 83.901 li
f
159.586 83.901 mo
159.12 83.901 li
159.12 83.312 li
160.421 81.399 li
160.887 81.399 li
160.887 81.889 li
f
160.887 81.889 mo
160.421 81.889 li
160.421 81.399 li
161.598 79.289 li
162.064 79.289 li
162.064 79.755 li
f
162.064 79.755 mo
161.598 79.755 li
161.598 79.2891 li
162.653 77.1541 li
163.242 77.1541 li
163.242 77.621 li
f
163.242 77.621 mo
162.653 77.621 li
162.653 77.154 li
163.953 75.019 li
164.444 75.019 li
164.444 75.609 li
f
164.444 75.609 mo
163.953 75.609 li
163.953 75.019 li
165.033 73.0081 li
165.622 73.0081 li
165.622 73.499 li
f
165.622 73.499 mo
165.033 73.499 li
165.033 73.0081 li
166.333 70.8981 li
166.799 70.8981 li
166.799 71.3641 li
f
166.799 71.364 mo
166.333 71.364 li
166.333 70.8981 li
167.388 68.6411 li
167.854 68.6411 li
167.854 69.1071 li
f
167.854 69.107 mo
167.388 69.107 li
167.388 68.6411 li
168.689 66.409 li
169.155 66.409 li
169.155 66.875 li
f
169.155 66.875 mo
168.689 66.875 li
168.689 66.4091 li
169.866 64.0291 li
170.332 64.0291 li
170.332 64.618 li
f
170.332 64.618 mo
169.866 64.618 li
169.866 64.029 li
171.043 61.894 li
171.51 61.894 li
171.51 62.385 li
f
171.51 62.385 mo
171.043 62.385 li
171.043 61.894 li
172.221 59.54 li
172.687 59.54 li
172.687 60.0051 li
f
172.687 60.005 mo
172.221 60.005 li
172.221 59.54 li
173.276 57.183 li
173.865 57.183 li
173.865 57.65 li
f
173.865 57.65 mo
173.276 57.65 li
173.276 57.183 li
174.577 54.926 li
175.067 54.926 li
175.067 55.3931 li
f
175.067 55.393 mo
174.577 55.393 li
174.577 54.926 li
175.656 52.449 li
176.122 52.449 li
176.122 52.915 li
f
176.122 52.915 mo
175.656 52.915 li
175.656 52.449 li
176.956 50.093 li
177.422 50.093 li
177.422 50.682 li
f
.118 lw
1 lc
92.562 15.33 mo
92.684 15.33 li
88.661 11.306 mo
92.562 15.33 li
92.562 11.306 mo
92.684 11.306 li
88.661 15.33 mo
92.562 11.306 li
78.528 73.1301 mo
78.627 73.1301 li
74.627 69.1071 mo
78.528 73.1301 li
78.528 69.1071 mo
78.627 69.1071 li
74.627 73.1301 mo
78.528 69.1071 li
64.47 117.928 mo
64.593 117.928 li
60.569 113.905 mo
64.47 117.928 li
64.47 113.905 mo
64.593 113.905 li
60.569 117.928 mo
64.47 113.905 li
50.437 143.713 mo
50.535 143.713 li
46.414 139.811 mo
50.437 143.713 li
50.437 139.811 mo
50.535 139.811 li
46.414 143.713 mo
50.437 139.811 li
92.07 32.994 mo
92.07 32.16 91.408 31.522 90.598 31.522 cv
89.764 31.522 89.127 32.16 89.127 32.994 cv
89.127 33.803 89.764 34.465 90.598 34.465 cv
91.408 34.465 92.07 33.803 92.07 32.994 cv
cp
78.013 84.514 mo
78.013 83.705 77.351 83.067 76.54 83.067 cv
75.731 83.067 75.093 83.705 75.093 84.514 cv
75.093 85.324 75.731 85.986 76.54 85.986 cv
77.351 85.986 78.013 85.324 78.013 84.514 cv
cp
63.98 125.778 mo
63.98 124.945 63.317 124.306 62.508 124.306 cv
61.698 124.306 61.06 124.945 61.06 125.778 cv
61.06 126.588 61.698 127.251 62.508 127.251 cv
63.317 127.251 63.98 126.588 63.98 125.778 cv
cp
49.922 148.472 mo
49.922 147.662 49.235 147.025 48.401 147.025 cv
47.542 147.025 46.879 147.662 46.879 148.472 cv
46.879 149.282 47.542 149.944 48.401 149.944 cv
49.235 149.944 49.922 149.282 49.922 148.472 cv
cp
34.368 3.50507 mo
203.378 3.50507 li
34.368 157.058 mo
203.255 157.059 li
203.378 157.059 li
203.255 157.059 mo
203.255 3.38104 li
34.368 157.058 mo
34.368 3.38104 li
203.255 3.50507 mo
203.255 6.59503 li
175.067 3.50507 mo
175.067 6.59503 li
146.976 3.50507 mo
146.976 6.59503 li
118.763 3.50507 mo
118.763 6.59503 li
90.672 3.50507 mo
90.672 6.59503 li
62.459 3.50507 mo
62.459 6.59503 li
34.368 3.50507 mo
34.368 6.59503 li
203.255 157.059 mo
203.255 153.992 li
175.067 157.059 mo
175.067 153.992 li
146.976 157.059 mo
146.976 153.992 li
118.763 157.059 mo
118.763 153.992 li
90.672 157.058 mo
90.672 153.992 li
62.459 157.058 mo
62.459 153.992 li
34.368 157.058 mo
34.368 153.992 li
203.255 3.50507 mo
200.067 3.50507 li
203.255 34.2451 mo
200.067 34.2451 li
203.255 64.985 mo
200.067 64.985 li
203.255 95.702 mo
200.067 95.702 li
203.255 126.319 mo
200.067 126.319 li
203.255 157.059 mo
200.067 157.059 li
34.368 3.50507 mo
37.435 3.50507 li
34.368 34.2451 mo
37.435 34.2451 li
34.368 64.985 mo
37.435 64.985 li
34.368 95.702 mo
37.435 95.702 li
34.368 126.318 mo
37.435 126.318 li
34.368 157.058 mo
37.435 157.058 li
@
47.91 148.521 mo
47.91 147.687 47.223 147 46.389 147 cv
45.555 147 44.868 147.687 44.868 148.521 cv
44.868 149.355 45.555 150.042 46.389 150.042 cv
47.223 150.042 47.91 149.355 47.91 148.521 cv
ef
47.812 148.472 mo
47.812 147.662 47.149 147.025 46.34 147.025 cv
45.53 147.025 44.893 147.662 44.893 148.472 cv
44.893 149.282 45.53 149.944 46.34 149.944 cv
47.149 149.944 47.812 149.282 47.812 148.472 cv
cp
@
52.032 141.775 mo
52.032 140.94 51.345 140.254 50.511 140.254 cv
49.676 140.254 48.99 140.94 48.99 141.775 cv
48.99 142.608 49.676 143.296 50.511 143.296 cv
51.345 143.296 52.032 142.608 52.032 141.775 cv
ef
51.934 141.725 mo
51.934 140.916 51.271 140.278 50.461 140.278 cv
49.652 140.278 49.014 140.916 49.014 141.725 cv
49.014 142.535 49.652 143.197 50.461 143.197 cv
51.271 143.197 51.934 142.535 51.934 141.725 cv
cp
@
61.943 125.828 mo
61.943 124.968 61.256 124.282 60.422 124.282 cv
59.588 124.282 58.901 124.968 58.901 125.828 cv
58.901 126.662 59.588 127.348 60.422 127.348 cv
61.256 127.348 61.943 126.662 61.943 125.828 cv
ef
61.845 125.778 mo
61.845 124.945 61.183 124.306 60.373 124.306 cv
59.564 124.306 58.926 124.945 58.926 125.778 cv
58.926 126.588 59.564 127.251 60.373 127.251 cv
61.183 127.251 61.845 126.588 61.845 125.778 cv
cp
@
66.188 116.014 mo
66.188 115.18 65.476 114.493 64.617 114.493 cv
63.734 114.493 63.023 115.18 63.023 116.014 cv
63.023 116.848 63.734 117.536 64.617 117.536 cv
65.476 117.536 66.188 116.848 66.188 116.014 cv
ef
66.089 115.965 mo
66.089 115.156 65.402 114.518 64.568 114.518 cv
63.709 114.518 63.047 115.156 63.047 115.965 cv
63.047 116.775 63.709 117.437 64.568 117.437 cv
65.402 117.437 66.089 116.775 66.089 115.965 cv
cp
@
76.001 84.563 mo
76.001 83.729 75.314 83.043 74.48 83.043 cv
73.621 83.043 72.935 83.729 72.935 84.563 cv
72.935 85.397 73.621 86.085 74.48 86.085 cv
75.314 86.085 76.001 85.397 76.001 84.563 cv
ef
75.903 84.514 mo
75.903 83.705 75.241 83.067 74.431 83.067 cv
73.597 83.067 72.959 83.705 72.959 84.514 cv
72.959 85.324 73.597 85.986 74.431 85.986 cv
75.241 85.986 75.903 85.324 75.903 84.514 cv
cp
@
80.246 71.094 mo
80.246 70.26 79.558 69.574 78.724 69.574 cv
77.89 69.574 77.203 70.26 77.203 71.094 cv
77.203 71.928 77.89 72.616 78.724 72.616 cv
79.558 72.616 80.246 71.928 80.246 71.094 cv
ef
80.147 71.046 mo
80.147 70.236 79.485 69.598 78.675 69.598 cv
77.866 69.598 77.228 70.236 77.228 71.046 cv
77.228 71.855 77.866 72.517 78.675 72.517 cv
79.485 72.517 80.147 71.855 80.147 71.046 cv
cp
@
90.034 33.018 mo
90.034 32.184 89.347 31.498 88.513 31.498 cv
87.679 31.498 86.992 32.184 86.992 33.018 cv
86.992 33.8521 87.679 34.54 88.513 34.54 cv
89.347 34.54 90.034 33.8521 90.034 33.018 cv
ef
89.936 32.994 mo
89.936 32.16 89.274 31.522 88.464 31.522 cv
87.655 31.522 87.017 32.16 87.017 32.994 cv
87.017 33.803 87.655 34.465 88.464 34.465 cv
89.274 34.465 89.936 33.803 89.936 32.994 cv
cp
@
94.278 13.416 mo
94.278 12.5571 93.591 11.871 92.757 11.871 cv
91.923 11.871 91.236 12.5571 91.236 13.416 cv
91.236 14.2501 91.923 14.9371 92.757 14.9371 cv
93.591 14.9371 94.278 14.2501 94.278 13.416 cv
ef
177.055 44.77 mo
177.177 44.77 li
173.055 40.8691 mo
177.055 44.77 li
177.055 40.8691 mo
177.177 40.8691 li
173.055 44.77 mo
177.055 40.8691 li
163.021 74.2111 mo
163.144 74.2111 li
158.998 70.309 mo
163.021 74.2111 li
163.021 70.309 mo
163.144 70.309 li
158.998 74.2111 mo
163.021 70.309 li
148.866 98.793 mo
148.963 98.793 li
144.964 94.892 mo
148.866 98.793 li
148.866 94.892 mo
148.963 94.892 li
144.964 98.793 mo
148.866 94.892 li
134.808 116.873 mo
134.93 116.873 li
130.906 112.972 mo
134.808 116.873 li
134.808 112.972 mo
134.93 112.972 li
130.906 116.873 mo
134.808 112.972 li
120.774 132.01 mo
120.898 132.01 li
116.751 127.987 mo
120.774 132.01 li
120.774 127.987 mo
120.898 127.987 li
116.751 132.01 mo
120.774 127.987 li
106.717 146.19 mo
106.839 146.19 li
102.718 142.29 mo
106.717 146.19 li
106.717 142.29 mo
106.839 142.29 li
102.718 146.19 mo
106.717 142.29 li
92.562 151.858 mo
92.684 151.858 li
88.661 147.957 mo
92.562 151.858 li
92.562 147.957 mo
92.684 147.957 li
88.661 151.858 mo
92.562 147.957 li
78.528 156.47 mo
78.627 156.47 li
74.627 152.447 mo
78.528 156.47 li
78.528 152.447 mo
78.627 152.447 li
74.627 156.47 mo
78.528 152.447 li
64.47 158.237 mo
64.593 158.237 li
60.569 154.336 mo
64.47 158.237 li
64.47 154.336 mo
64.593 154.336 li
60.569 158.237 mo
64.47 154.336 li
176.564 66.2131 mo
176.564 65.3781 175.901 64.7401 175.092 64.7401 cv
174.282 64.7401 173.644 65.3781 173.644 66.2131 cv
173.644 67.022 174.282 67.684 175.092 67.684 cv
175.901 67.684 176.564 67.022 176.564 66.2131 cv
cp
162.408 90.084 mo
162.408 89.249 161.746 88.611 160.936 88.611 cv
160.127 88.611 159.488 89.249 159.488 90.084 cv
159.488 90.8931 160.127 91.5551 160.936 91.5551 cv
161.746 91.5551 162.408 90.8931 162.408 90.084 cv
cp
148.35 113.12 mo
148.35 112.309 147.688 111.672 146.878 111.672 cv
146.068 111.672 145.431 112.309 145.431 113.12 cv
145.431 113.929 146.068 114.591 146.878 114.591 cv
147.688 114.591 148.35 113.929 148.35 113.12 cv
cp
134.316 129.09 mo
134.316 128.256 133.654 127.619 132.845 127.619 cv
132.035 127.619 131.398 128.256 131.398 129.09 cv
131.398 129.9 132.035 130.563 132.845 130.563 cv
133.654 130.563 134.316 129.9 134.316 129.09 cv
cp
120.259 142.216 mo
120.259 141.383 119.597 140.744 118.788 140.744 cv
117.977 140.744 117.339 141.383 117.339 142.216 cv
117.339 143.026 117.977 143.688 118.788 143.688 cv
119.597 143.688 120.259 143.026 120.259 142.216 cv
cp
106.103 148.717 mo
106.103 147.883 105.441 147.245 104.631 147.245 cv
103.822 147.245 103.184 147.883 103.184 148.717 cv
103.184 149.527 103.822 150.19 104.631 150.19 cv
105.441 150.19 106.103 149.527 106.103 148.717 cv
cp
92.07 152.838 mo
92.07 152.03 91.408 151.391 90.598 151.391 cv
89.764 151.391 89.127 152.03 89.127 152.838 cv
89.127 153.648 89.764 154.311 90.598 154.311 cv
91.408 154.311 92.07 153.648 92.07 152.838 cv
cp
78.013 155.218 mo
78.013 154.384 77.351 153.747 76.54 153.747 cv
75.731 153.747 75.093 154.384 75.093 155.218 cv
75.093 156.028 75.731 156.69 76.54 156.69 cv
77.351 156.69 78.013 156.028 78.013 155.218 cv
cp
63.98 156.151 mo
63.98 155.341 63.317 154.704 62.508 154.704 cv
61.698 154.704 61.06 155.341 61.06 156.151 cv
61.06 156.961 61.698 157.624 62.508 157.624 cv
63.317 157.624 63.98 156.961 63.98 156.151 cv
cp
90.795 131.298 mo
92.684 128.33 li
94.696 131.298 li
90.795 131.298 li
86.55 129.287 mo
88.538 126.318 li
90.549 129.287 li
86.55 129.287 li
76.737 123.963 mo
78.627 121.019 li
80.638 123.963 li
76.737 123.963 li
72.493 121.485 mo
74.504 118.517 li
76.394 121.485 li
72.493 121.485 li
62.581 109.318 mo
64.593 106.349 li
66.605 109.318 li
62.581 109.318 li
58.459 102.816 mo
60.349 99.848 li
62.335 102.816 li
58.459 102.816 li
48.548 87.9 mo
50.535 84.9561 li
52.547 87.9 li
48.548 87.9 li
44.402 65.329 mo
46.291 62.3851 li
48.303 65.329 li
44.402 65.329 li
94.181 13.3671 mo
94.181 12.533 93.518 11.895 92.708 11.895 cv
91.899 11.895 91.261 12.533 91.261 13.3671 cv
91.261 14.176 91.899 14.8391 92.708 14.8391 cv
93.518 14.8391 94.181 14.176 94.181 13.3671 cv
cp
@
61.943 156.2 mo
61.943 155.366 61.256 154.678 60.422 154.678 cv
59.588 154.678 58.901 155.366 58.901 156.2 cv
58.901 157.034 59.588 157.721 60.422 157.721 cv
61.256 157.721 61.943 157.034 61.943 156.2 cv
ef
61.845 156.151 mo
61.845 155.341 61.183 154.704 60.373 154.704 cv
59.564 154.704 58.926 155.341 58.926 156.151 cv
58.926 156.961 59.564 157.624 60.373 157.624 cv
61.183 157.624 61.845 156.961 61.845 156.151 cv
cp
@
66.188 156.323 mo
66.188 155.489 65.476 154.801 64.617 154.801 cv
63.734 154.801 63.023 155.489 63.023 156.323 cv
63.023 157.157 63.734 157.843 64.617 157.843 cv
65.476 157.843 66.188 157.157 66.188 156.323 cv
ef
66.089 156.273 mo
66.089 155.463 65.402 154.827 64.568 154.827 cv
63.709 154.827 63.047 155.463 63.047 156.273 cv
63.047 157.084 63.709 157.746 64.568 157.746 cv
65.402 157.746 66.089 157.084 66.089 156.273 cv
cp
@
76.001 155.244 mo
76.001 154.409 75.314 153.722 74.48 153.722 cv
73.621 153.722 72.935 154.409 72.935 155.244 cv
72.935 156.077 73.621 156.764 74.48 156.764 cv
75.314 156.764 76.001 156.077 76.001 155.244 cv
ef
75.903 155.218 mo
75.903 154.384 75.241 153.747 74.431 153.747 cv
73.597 153.747 72.959 154.384 72.959 155.218 cv
72.959 156.028 73.597 156.69 74.431 156.69 cv
75.241 156.69 75.903 156.028 75.903 155.218 cv
cp
@
80.246 154.483 mo
80.246 153.6 79.558 152.888 78.724 152.888 cv
77.89 152.888 77.203 153.6 77.203 154.483 cv
77.203 155.366 77.89 156.077 78.724 156.077 cv
79.558 156.077 80.246 155.366 80.246 154.483 cv
ef
80.147 154.433 mo
80.147 153.6 79.485 152.913 78.675 152.913 cv
77.866 152.913 77.228 153.6 77.228 154.433 cv
77.228 155.292 77.866 155.98 78.675 155.98 cv
79.485 155.98 80.147 155.292 80.147 154.433 cv
cp
@
90.034 152.888 mo
90.034 152.053 89.347 151.367 88.513 151.367 cv
87.679 151.367 86.992 152.053 86.992 152.888 cv
86.992 153.722 87.679 154.409 88.513 154.409 cv
89.347 154.409 90.034 153.722 90.034 152.888 cv
ef
89.936 152.838 mo
89.936 152.03 89.274 151.391 88.464 151.391 cv
87.655 151.391 87.017 152.03 87.017 152.838 cv
87.017 153.648 87.655 154.311 88.464 154.311 cv
89.274 154.311 89.936 153.648 89.936 152.838 cv
cp
@
94.278 149.944 mo
94.278 149.086 93.591 148.398 92.757 148.398 cv
91.923 148.398 91.236 149.086 91.236 149.944 cv
91.236 150.778 91.923 151.466 92.757 151.466 cv
93.591 151.466 94.278 150.778 94.278 149.944 cv
ef
94.181 149.895 mo
94.181 149.06 93.518 148.423 92.708 148.423 cv
91.899 148.423 91.261 149.06 91.261 149.895 cv
91.261 150.705 91.899 151.367 92.708 151.367 cv
93.518 151.367 94.181 150.705 94.181 149.895 cv
cp
@
104.19 148.815 mo
104.19 147.932 103.503 147.22 102.669 147.22 cv
101.835 147.22 101.148 147.932 101.148 148.815 cv
101.148 149.673 101.835 150.385 102.669 150.385 cv
103.503 150.385 104.19 149.673 104.19 148.815 cv
ef
104.091 148.717 mo
104.091 147.883 103.429 147.245 102.62 147.245 cv
101.81 147.245 101.172 147.883 101.172 148.717 cv
101.172 149.527 101.81 150.19 102.62 150.19 cv
103.429 150.19 104.091 149.527 104.091 148.717 cv
cp
@
108.336 144.252 mo
108.336 143.419 107.649 142.731 106.815 142.731 cv
105.98 142.731 105.294 143.419 105.294 144.252 cv
105.294 145.087 105.98 145.773 106.815 145.773 cv
107.649 145.773 108.336 145.087 108.336 144.252 cv
ef
108.238 144.228 mo
108.238 143.393 107.576 142.755 106.766 142.755 cv
105.956 142.755 105.318 143.393 105.318 144.228 cv
105.318 145.037 105.956 145.7 106.766 145.7 cv
107.576 145.7 108.238 145.037 108.238 144.228 cv
cp
@
118.248 142.241 mo
118.248 141.407 117.561 140.719 116.726 140.719 cv
115.893 140.719 115.206 141.407 115.206 142.241 cv
115.206 143.075 115.893 143.761 116.726 143.761 cv
117.561 143.761 118.248 143.075 118.248 142.241 cv
ef
118.149 142.216 mo
118.149 141.383 117.487 140.744 116.678 140.744 cv
115.868 140.744 115.23 141.383 115.23 142.216 cv
115.23 143.026 115.868 143.688 116.678 143.688 cv
117.487 143.688 118.149 143.026 118.149 142.216 cv
cp
@
122.369 130.072 mo
122.369 129.238 121.683 128.551 120.848 128.551 cv
120.014 128.551 119.327 129.238 119.327 130.072 cv
119.327 130.906 120.014 131.593 120.848 131.593 cv
121.683 131.593 122.369 130.906 122.369 130.072 cv
ef
122.271 130.023 mo
122.271 129.213 121.608 128.576 120.799 128.576 cv
119.989 128.576 119.351 129.213 119.351 130.023 cv
119.351 130.833 119.989 131.495 120.799 131.495 cv
121.608 131.495 122.271 130.833 122.271 130.023 cv
cp
@
132.281 129.139 mo
132.281 128.281 131.594 127.594 130.76 127.594 cv
129.926 127.594 129.238 128.281 129.238 129.139 cv
129.238 129.974 129.926 130.661 130.76 130.661 cv
131.594 130.661 132.281 129.974 132.281 129.139 cv
ef
132.183 129.09 mo
132.183 128.256 131.52 127.619 130.711 127.619 cv
129.901 127.619 129.263 128.256 129.263 129.09 cv
129.263 129.9 129.901 130.563 130.711 130.563 cv
131.52 130.563 132.183 129.9 132.183 129.09 cv
cp
@
136.525 114.935 mo
136.525 114.1 135.838 113.414 135.004 113.414 cv
134.169 113.414 133.483 114.1 133.483 114.935 cv
133.483 115.769 134.169 116.456 135.004 116.456 cv
135.838 116.456 136.525 115.769 136.525 114.935 cv
ef
136.451 114.911 mo
136.451 114.076 135.789 113.438 134.98 113.438 cv
134.145 113.438 133.508 114.076 133.508 114.911 cv
133.508 115.719 134.145 116.383 134.98 116.383 cv
135.789 116.383 136.451 115.719 136.451 114.911 cv
cp
@
146.338 113.169 mo
146.338 112.335 145.651 111.647 144.817 111.647 cv
143.983 111.647 143.296 112.335 143.296 113.169 cv
143.296 114.003 143.983 114.689 144.817 114.689 cv
145.651 114.689 146.338 114.003 146.338 113.169 cv
ef
146.24 113.12 mo
146.24 112.309 145.578 111.672 144.768 111.672 cv
143.959 111.672 143.321 112.309 143.321 113.12 cv
143.321 113.929 143.959 114.591 144.768 114.591 cv
145.578 114.591 146.24 113.929 146.24 113.12 cv
cp
@
150.583 96.855 mo
150.583 96.02 149.896 95.334 149.062 95.334 cv
148.227 95.334 147.541 96.02 147.541 96.855 cv
147.541 97.689 148.227 98.376 149.062 98.376 cv
149.896 98.376 150.583 97.689 150.583 96.855 cv
ef
150.484 96.805 mo
150.484 95.996 149.823 95.358 149.013 95.358 cv
148.203 95.358 147.565 95.996 147.565 96.805 cv
147.565 97.6151 148.203 98.277 149.013 98.277 cv
149.823 98.277 150.484 97.6151 150.484 96.805 cv
cp
@
160.495 90.132 mo
160.495 89.274 159.783 88.587 158.924 88.587 cv
158.041 88.587 157.33 89.274 157.33 90.132 cv
157.33 90.9661 158.041 91.6541 158.924 91.6541 cv
159.783 91.6541 160.495 90.9661 160.495 90.132 cv
ef
160.396 90.084 mo
160.396 89.249 159.71 88.611 158.875 88.611 cv
158.016 88.611 157.355 89.249 157.355 90.084 cv
157.355 90.893 158.016 91.555 158.875 91.555 cv
159.71 91.555 160.396 90.893 160.396 90.084 cv
cp
@
164.616 72.272 mo
164.616 71.438 163.929 70.751 163.095 70.751 cv
162.261 70.751 161.573 71.438 161.573 72.272 cv
161.573 73.106 162.261 73.793 163.095 73.793 cv
163.929 73.793 164.616 73.106 164.616 72.272 cv
ef
164.518 72.223 mo
164.518 71.4141 163.855 70.775 163.046 70.775 cv
162.236 70.775 161.598 71.4141 161.598 72.223 cv
161.598 73.0331 162.236 73.6951 163.046 73.6951 cv
163.855 73.6951 164.518 73.0331 164.518 72.223 cv
cp
@
174.527 66.237 mo
174.527 65.403 173.84 64.715 173.005 64.715 cv
172.173 64.715 171.485 65.403 171.485 66.237 cv
171.485 67.071 172.173 67.7581 173.005 67.7581 cv
173.84 67.7581 174.527 67.071 174.527 66.237 cv
ef
174.43 66.213 mo
174.43 65.3781 173.767 64.7401 172.957 64.7401 cv
172.147 64.7401 171.51 65.3781 171.51 66.213 cv
171.51 67.022 172.147 67.684 172.957 67.684 cv
173.767 67.684 174.43 67.022 174.43 66.213 cv
cp
@
178.673 42.832 mo
178.673 41.998 177.986 41.311 177.153 41.311 cv
176.318 41.311 175.631 41.998 175.631 42.832 cv
175.631 43.6661 176.318 44.3531 177.153 44.3531 cv
177.986 44.3531 178.673 43.6661 178.673 42.832 cv
ef
178.575 42.807 mo
178.575 41.973 177.912 41.3361 177.103 41.3361 cv
176.293 41.3361 175.656 41.973 175.656 42.807 cv
175.656 43.6171 176.293 44.2791 177.103 44.2791 cv
177.912 44.2791 178.575 43.6171 178.575 42.807 cv
cp
@
26.877 156.061 mo
26.877 155.482 26.937 155.014 27.056 154.66 cv
27.176 154.305 27.353 154.033 27.589 153.841 cv
27.824 153.651 28.121 153.555 28.478 153.555 cv
28.741 153.555 28.973 153.609 29.172 153.714 cv
29.372 153.82 29.536 153.973 29.665 154.172 cv
29.793 154.373 29.894 154.616 29.967 154.902 cv
30.041 155.189 30.078 155.576 30.078 156.061 cv
30.078 156.637 30.019 157.102 29.901 157.457 cv
29.782 157.811 29.606 158.085 29.37 158.276 cv
29.135 158.468 28.837 158.564 28.478 158.564 cv
28.004 158.564 27.633 158.396 27.363 158.059 cv
27.039 157.649 26.877 156.983 26.877 156.061 cv
cp
27.497 156.06 mo
27.497 156.867 27.591 157.403 27.78 157.668 cv
27.968 157.933 28.201 158.066 28.478 158.066 cv
28.754 158.066 28.987 157.933 29.176 157.667 cv
29.364 157.4 29.459 156.865 29.459 156.06 cv
29.459 155.253 29.364 154.717 29.176 154.452 cv
28.988 154.186 28.753 154.053 28.471 154.053 cv
28.194 154.053 27.973 154.171 27.807 154.405 cv
27.6 154.704 27.497 155.255 27.497 156.06 cv
f
17.187 125.321 mo
17.187 124.741 17.246 124.274 17.366 123.92 cv
17.485 123.564 17.663 123.292 17.898 123.101 cv
18.133 122.91 18.43 122.815 18.787 122.815 cv
19.05 122.815 19.282 122.868 19.481 122.973 cv
19.681 123.08 19.845 123.232 19.974 123.432 cv
20.102 123.631 20.203 123.875 20.277 124.162 cv
20.351 124.448 20.387 124.835 20.387 125.321 cv
20.387 125.896 20.328 126.361 20.209 126.716 cv
20.091 127.071 19.915 127.344 19.679 127.536 cv
19.444 127.728 19.147 127.824 18.787 127.824 cv
18.314 127.824 17.942 127.655 17.672 127.318 cv
17.348 126.908 17.187 126.243 17.187 125.321 cv
cp
17.806 125.319 mo
17.806 126.126 17.9 126.662 18.089 126.927 cv
18.277 127.193 18.51 127.325 18.787 127.325 cv
19.064 127.325 19.296 127.192 19.485 126.925 cv
19.673 126.659 19.768 126.124 19.768 125.319 cv
19.768 124.512 19.674 123.976 19.486 123.711 cv
19.297 123.446 19.062 123.313 18.78 123.313 cv
18.503 123.313 18.282 123.43 18.116 123.664 cv
17.91 123.963 17.806 124.514 17.806 125.319 cv
f
21.537 127.741 mo
22.221 127.741 li
22.221 127.057 li
21.537 127.057 li
cp
f
22.973 125.321 mo
22.973 124.741 23.033 124.274 23.152 123.92 cv
23.272 123.564 23.449 123.292 23.685 123.101 cv
23.92 122.91 24.216 122.815 24.573 122.815 cv
24.837 122.815 25.068 122.868 25.268 122.973 cv
25.468 123.08 25.632 123.232 25.76 123.432 cv
25.889 123.631 25.99 123.875 26.063 124.162 cv
26.137 124.448 26.174 124.835 26.174 125.321 cv
26.174 125.896 26.115 126.361 25.997 126.716 cv
25.878 127.071 25.701 127.344 25.465 127.536 cv
25.23 127.728 24.933 127.824 24.573 127.824 cv
24.1 127.824 23.729 127.655 23.459 127.318 cv
23.135 126.908 22.973 126.243 22.973 125.321 cv
cp
23.593 125.319 mo
23.593 126.126 23.687 126.662 23.875 126.927 cv
24.064 127.193 24.296 127.325 24.573 127.325 cv
24.85 127.325 25.083 127.192 25.271 126.925 cv
25.459 126.659 25.554 126.124 25.554 125.319 cv
25.554 124.512 25.459 123.976 25.272 123.711 cv
25.084 123.446 24.849 123.313 24.566 123.313 cv
24.29 123.313 24.068 123.43 23.902 123.664 cv
23.696 123.963 23.593 124.514 23.593 125.319 cv
f
26.868 126.457 mo
27.5 126.412 li
27.547 126.716 27.655 126.943 27.825 127.096 cv
27.995 127.249 28.201 127.325 28.444 127.325 cv
28.737 127.325 28.983 127.215 29.183 126.997 cv
29.382 126.778 29.481 126.488 29.481 126.126 cv
29.481 125.781 29.386 125.509 29.195 125.311 cv
29.004 125.112 28.751 125.012 28.437 125.012 cv
28.241 125.012 28.065 125.058 27.911 125.149 cv
27.756 125.241 27.634 125.359 27.545 125.505 cv
26.977 125.422 li
27.449 122.898 li
29.89 122.898 li
29.89 123.472 li
27.929 123.472 li
27.669 124.789 li
27.963 124.585 28.273 124.482 28.596 124.482 cv
29.023 124.482 29.384 124.63 29.679 124.927 cv
29.973 125.225 30.12 125.607 30.12 126.074 cv
30.12 126.518 29.991 126.903 29.732 127.227 cv
29.417 127.625 28.988 127.824 28.444 127.824 cv
27.998 127.824 27.633 127.699 27.352 127.449 cv
27.069 127.2 26.908 126.869 26.868 126.457 cv
f
21.088 94.704 mo
21.088 94.124 21.148 93.657 21.267 93.302 cv
21.386 92.947 21.564 92.675 21.799 92.484 cv
22.035 92.294 22.331 92.198 22.689 92.198 cv
22.952 92.198 23.183 92.251 23.383 92.357 cv
23.583 92.463 23.747 92.616 23.875 92.815 cv
24.003 93.015 24.105 93.258 24.178 93.545 cv
24.252 93.832 24.289 94.218 24.289 94.704 cv
24.289 95.279 24.23 95.745 24.111 96.099 cv
23.993 96.454 23.816 96.727 23.581 96.919 cv
23.345 97.111 23.048 97.207 22.689 97.207 cv
22.215 97.207 21.844 97.039 21.573 96.701 cv
21.25 96.292 21.088 95.626 21.088 94.704 cv
cp
21.708 94.703 mo
21.708 95.509 21.802 96.046 21.991 96.31 cv
22.179 96.576 22.412 96.709 22.689 96.709 cv
22.965 96.709 23.198 96.576 23.386 96.309 cv
23.575 96.043 23.669 95.506 23.669 94.703 cv
23.669 93.895 23.575 93.359 23.387 93.094 cv
23.199 92.829 22.964 92.696 22.682 92.696 cv
22.405 92.696 22.184 92.813 22.017 93.047 cv
21.811 93.346 21.708 93.898 21.708 94.703 cv
f
25.315 97.124 mo
25.999 97.124 li
25.999 96.44 li
25.315 96.44 li
cp
f
29.142 97.124 mo
28.541 97.124 li
28.541 93.2861 li
28.396 93.423 28.206 93.5621 27.97 93.701 cv
27.734 93.8381 27.522 93.9421 27.334 94.011 cv
27.334 93.4291 li
27.671 93.2711 27.967 93.079 28.219 92.8541 cv
28.471 92.629 28.65 92.41 28.755 92.1981 cv
29.142 92.1981 li
29.142 97.124 li
f
17.187 63.988 mo
17.187 63.408 17.247 62.94 17.366 62.586 cv
17.485 62.231 17.663 61.959 17.898 61.768 cv
18.134 61.577 18.43 61.481 18.787 61.481 cv
19.051 61.481 19.282 61.535 19.482 61.64 cv
19.682 61.747 19.846 61.899 19.974 62.099 cv
20.103 62.298 20.204 62.542 20.277 62.829 cv
20.351 63.115 20.388 63.502 20.388 63.988 cv
20.388 64.563 20.329 65.028 20.21 65.382 cv
20.092 65.737 19.915 66.01 19.68 66.203 cv
19.444 66.394 19.147 66.491 18.787 66.491 cv
18.314 66.491 17.942 66.322 17.672 65.985 cv
17.349 65.575 17.187 64.909 17.187 63.988 cv
cp
17.807 63.986 mo
17.807 64.793 17.901 65.329 18.089 65.594 cv
18.278 65.859 18.511 65.992 18.787 65.992 cv
19.064 65.992 19.296 65.859 19.485 65.592 cv
19.674 65.326 19.768 64.791 19.768 63.986 cv
19.768 63.179 19.674 62.643 19.486 62.378 cv
19.298 62.112 19.063 61.98 18.78 61.98 cv
18.504 61.98 18.282 62.097 18.116 62.331 cv
17.91 62.63 17.807 63.181 17.807 63.986 cv
f
21.538 66.407 mo
22.222 66.407 li
22.222 65.723 li
21.538 65.723 li
cp
f
25.241 66.407 mo
24.641 66.407 li
24.641 62.569 li
24.496 62.708 24.305 62.845 24.069 62.984 cv
23.833 63.123 23.621 63.226 23.433 63.296 cv
23.433 62.713 li
23.771 62.554 24.065 62.363 24.318 62.137 cv
24.57 61.912 24.75 61.694 24.855 61.481 cv
25.241 61.481 li
25.241 66.407 li
f
26.869 65.123 mo
27.501 65.079 li
27.548 65.381 27.656 65.61 27.826 65.763 cv
27.995 65.916 28.201 65.992 28.444 65.992 cv
28.738 65.992 28.983 65.883 29.183 65.664 cv
29.382 65.445 29.481 65.154 29.481 64.793 cv
29.481 64.448 29.386 64.176 29.195 63.977 cv
29.004 63.779 28.752 63.679 28.437 63.679 cv
28.241 63.679 28.066 63.725 27.911 63.816 cv
27.756 63.907 27.635 64.026 27.546 64.172 cv
26.977 64.088 li
27.45 61.564 li
29.891 61.564 li
29.891 62.139 li
27.93 62.139 li
27.67 63.456 li
27.964 63.252 28.273 63.149 28.596 63.149 cv
29.024 63.149 29.385 63.297 29.679 63.594 cv
29.973 63.891 30.121 64.274 30.121 64.741 cv
30.121 65.185 29.991 65.57 29.732 65.894 cv
29.418 66.292 28.988 66.491 28.444 66.491 cv
27.998 66.491 27.634 66.366 27.352 66.116 cv
27.07 65.867 26.909 65.535 26.869 65.123 cv
f
21.088 33.247 mo
21.088 32.6671 21.148 32.2 21.267 31.8441 cv
21.386 31.4901 21.564 31.217 21.799 31.027 cv
22.035 30.837 22.331 30.741 22.688 30.741 cv
22.952 30.741 23.183 30.7941 23.383 30.9 cv
23.583 31.0051 23.747 31.1591 23.875 31.358 cv
24.003 31.5571 24.105 31.801 24.178 32.088 cv
24.252 32.3751 24.289 32.76 24.289 33.247 cv
24.289 33.822 24.23 34.288 24.111 34.642 cv
23.993 34.997 23.816 35.27 23.581 35.462 cv
23.345 35.6541 23.047 35.7501 22.688 35.7501 cv
22.215 35.7501 21.843 35.5811 21.573 35.244 cv
21.249 34.834 21.088 34.168 21.088 33.247 cv
cp
21.708 33.2451 mo
21.708 34.0521 21.802 34.588 21.99 34.853 cv
22.179 35.119 22.412 35.252 22.688 35.252 cv
22.965 35.252 23.197 35.119 23.386 34.851 cv
23.575 34.5861 23.669 34.049 23.669 33.2451 cv
23.669 32.438 23.575 31.902 23.387 31.637 cv
23.199 31.372 22.964 31.239 22.681 31.239 cv
22.405 31.239 22.183 31.356 22.017 31.5911 cv
21.81 31.8881 21.708 32.441 21.708 33.2451 cv
f
25.315 35.667 mo
25.999 35.667 li
25.999 34.983 li
25.315 34.983 li
cp
f
30.037 35.086 mo
30.037 35.6671 li
26.785 35.6671 li
26.78 35.5211 26.804 35.381 26.855 35.247 cv
26.939 35.025 27.072 34.807 27.255 34.592 cv
27.439 34.379 27.702 34.131 28.044 33.851 cv
28.577 33.414 28.938 33.067 29.127 32.811 cv
29.316 32.556 29.411 32.315 29.411 32.088 cv
29.411 31.849 29.325 31.648 29.153 31.485 cv
28.982 31.321 28.759 31.239 28.483 31.239 cv
28.192 31.239 27.959 31.326 27.785 31.501 cv
27.61 31.674 27.521 31.915 27.519 32.223 cv
26.899 32.1591 li
26.942 31.6981 27.102 31.345 27.379 31.104 cv
27.657 30.862 28.029 30.741 28.497 30.741 cv
28.969 30.741 29.342 30.872 29.617 31.132 cv
29.893 31.393 30.03 31.716 30.03 32.1021 cv
30.03 32.298 29.99 32.491 29.909 32.6801 cv
29.829 32.8701 29.695 33.07 29.508 33.2791 cv
29.321 33.489 29.011 33.777 28.578 34.142 cv
28.216 34.446 27.983 34.651 27.88 34.759 cv
27.777 34.867 27.692 34.976 27.625 35.086 cv
30.037 35.086 li
f
17.187 2.50598 mo
17.187 1.92603 17.247 1.45898 17.366 1.104 cv
17.485 .75 17.663 .47699 17.898 .286987 cv
18.134 .0950317 18.43 0 18.787 0 cv
19.051 0 19.282 .0530396 19.482 .158997 cv
19.682 .265015 19.846 .41803 19.974 .617004 cv
20.103 .817017 20.204 1.06 20.277 1.34698 cv
20.351 1.63403 20.388 2.01898 20.388 2.50598 cv
20.388 3.08203 20.329 3.547 20.21 3.901 cv
20.092 4.255 19.915 4.52899 19.68 4.72101 cv
19.444 4.91302 19.147 5.00903 18.787 5.00903 cv
18.314 5.00903 17.942 4.841 17.672 4.50403 cv
17.349 4.09302 17.187 3.427 17.187 2.50598 cv
cp
17.807 2.505 mo
17.807 3.31104 17.901 3.84698 18.089 4.11304 cv
18.278 4.37799 18.511 4.51001 18.787 4.51001 cv
19.064 4.51001 19.296 4.37799 19.485 4.11102 cv
19.674 3.84399 19.768 3.30902 19.768 2.505 cv
19.768 1.698 19.674 1.16199 19.486 .895996 cv
19.298 .630005 19.063 .499023 18.78 .499023 cv
18.504 .499023 18.282 .61499 18.116 .848999 cv
17.91 1.14801 17.807 1.70001 17.807 2.505 cv
f
21.538 4.92499 mo
22.222 4.92499 li
22.222 4.24097 li
21.538 4.24097 li
cp
f
26.136 4.34399 mo
26.136 4.92505 li
22.884 4.92505 li
22.879 4.78101 22.903 4.64001 22.955 4.50604 cv
23.038 4.28503 23.171 4.06604 23.355 3.85205 cv
23.538 3.63702 23.801 3.39001 24.144 3.11102 cv
24.676 2.672 25.037 2.32605 25.226 2.07104 cv
25.415 1.81604 25.51 1.57501 25.51 1.34601 cv
25.51 1.10803 25.424 .907043 25.252 .744019 cv
25.081 .580017 24.858 .499023 24.582 .499023 cv
24.292 .499023 24.059 .585999 23.884 .759033 cv
23.709 .933044 23.621 1.17401 23.619 1.48199 cv
22.998 1.41901 li
23.041 .957031 23.201 .605042 23.479 .363037 cv
23.756 .121033 24.128 0 24.596 0 cv
25.068 0 25.441 .130005 25.716 .391052 cv
25.992 .652039 26.129 .975037 26.129 1.36102 cv
26.129 1.55701 26.089 1.75104 26.008 1.94 cv
25.928 2.13 25.794 2.32904 25.607 2.539 cv
25.42 2.74805 25.11 3.03601 24.677 3.401 cv
24.315 3.70502 24.082 3.91101 23.98 4.01801 cv
23.877 4.12701 23.791 4.23505 23.724 4.34399 cv
26.136 4.34399 li
f
26.869 3.64099 mo
27.501 3.59705 li
27.548 3.90002 27.656 4.12903 27.826 4.28101 cv
27.995 4.43402 28.201 4.51001 28.444 4.51001 cv
28.738 4.51001 28.983 4.401 29.183 4.18201 cv
29.382 3.96301 29.481 3.672 29.481 3.31 cv
29.481 2.966 29.386 2.69501 29.195 2.49603 cv
29.004 2.297 28.752 2.198 28.437 2.198 cv
28.241 2.198 28.066 2.24304 27.911 2.33502 cv
27.756 2.42505 27.635 2.54504 27.546 2.69 cv
26.977 2.60699 li
27.45 .0830078 li
29.891 .0830078 li
29.891 .65802 li
27.93 .65802 li
27.67 1.974 li
27.964 1.77002 28.273 1.66803 28.596 1.66803 cv
29.024 1.66803 29.385 1.81604 29.679 2.11304 cv
29.973 2.41003 30.121 2.79303 30.121 3.25903 cv
30.121 3.70404 29.991 4.08801 29.732 4.41302 cv
29.418 4.81 28.988 5.00903 28.444 5.00903 cv
27.998 5.00903 27.634 4.88403 27.352 4.63403 cv
27.07 4.38501 26.909 4.05304 26.869 3.64099 cv
f
208.401 156.65 mo
208.401 156.07 208.461 155.602 208.58 155.248 cv
208.7 154.893 208.877 154.621 209.113 154.429 cv
209.348 154.239 209.645 154.143 210.002 154.143 cv
210.265 154.143 210.497 154.196 210.696 154.302 cv
210.896 154.409 211.06 154.561 211.189 154.76 cv
211.317 154.961 211.418 155.204 211.491 155.49 cv
211.565 155.777 211.602 156.164 211.602 156.65 cv
211.602 157.225 211.543 157.69 211.425 158.045 cv
211.306 158.399 211.129 158.672 210.894 158.865 cv
210.658 159.056 210.361 159.152 210.002 159.152 cv
209.528 159.152 209.157 158.984 208.887 158.647 cv
208.563 158.237 208.401 157.571 208.401 156.65 cv
cp
209.021 156.648 mo
209.021 157.455 209.115 157.991 209.304 158.256 cv
209.492 158.521 209.725 158.654 210.002 158.654 cv
210.278 158.654 210.511 158.521 210.7 158.255 cv
210.888 157.988 210.982 157.453 210.982 156.648 cv
210.982 155.841 210.888 155.304 210.7 155.04 cv
210.512 154.774 210.277 154.641 209.995 154.641 cv
209.718 154.641 209.497 154.759 209.331 154.993 cv
209.124 155.292 209.021 155.843 209.021 156.648 cv
f
211.564 127.747 mo
211.564 128.329 li
208.312 128.329 li
208.307 128.182 208.331 128.043 208.382 127.908 cv
208.466 127.686 208.599 127.469 208.782 127.255 cv
208.965 127.04 209.228 126.793 209.571 126.513 cv
210.103 126.075 210.464 125.728 210.654 125.473 cv
210.843 125.218 210.937 124.977 210.937 124.749 cv
210.937 124.51 210.852 124.309 210.681 124.146 cv
210.509 123.983 210.286 123.901 210.01 123.901 cv
209.719 123.901 209.486 123.988 209.312 124.162 cv
209.137 124.336 209.048 124.577 209.046 124.884 cv
208.427 124.821 li
208.469 124.359 208.629 124.008 208.906 123.765 cv
209.184 123.523 209.556 123.402 210.024 123.402 cv
210.496 123.402 210.869 123.533 211.145 123.794 cv
211.419 124.054 211.557 124.378 211.557 124.763 cv
211.557 124.96 211.517 125.153 211.436 125.342 cv
211.356 125.532 211.222 125.731 211.035 125.941 cv
210.849 126.15 210.538 126.438 210.106 126.803 cv
209.743 127.107 209.51 127.312 209.407 127.421 cv
209.304 127.529 209.219 127.637 209.152 127.747 cv
211.564 127.747 li
f
210.331 97.712 mo
210.331 96.536 li
208.197 96.536 li
208.197 95.986 li
210.439 92.804 li
210.931 92.804 li
210.931 95.986 li
211.596 95.986 li
211.596 96.536 li
210.931 96.536 li
210.931 97.712 li
210.331 97.712 li
cp
210.331 95.986 mo
210.331 93.766 li
208.789 95.986 li
210.331 95.986 li
f
211.532 63.167 mo
210.931 63.212 li
210.877 62.9771 210.801 62.807 210.703 62.701 cv
210.539 62.53 210.338 62.445 210.098 62.445 cv
209.906 62.445 209.735 62.499 209.588 62.605 cv
209.399 62.744 209.251 62.945 209.141 63.21 cv
209.031 63.475 208.974 63.8521 208.97 64.343 cv
209.115 64.123 209.292 63.959 209.502 63.851 cv
209.712 63.745 209.933 63.691 210.163 63.691 cv
210.565 63.691 210.908 63.838 211.19 64.134 cv
211.473 64.429 211.615 64.811 211.615 65.28 cv
211.615 65.588 211.548 65.874 211.415 66.137 cv
211.283 66.402 211.1 66.604 210.867 66.745 cv
210.635 66.885 210.371 66.956 210.076 66.956 cv
209.573 66.956 209.163 66.771 208.845 66.402 cv
208.528 66.033 208.369 65.424 208.369 64.577 cv
208.369 63.629 208.545 62.939 208.896 62.508 cv
209.203 62.134 209.616 61.947 210.135 61.947 cv
210.522 61.947 210.839 62.054 211.087 62.271 cv
211.335 62.487 211.482 62.786 211.532 63.167 cv
cp
209.059 65.281 mo
209.059 65.488 209.103 65.686 209.192 65.876 cv
209.28 66.065 209.403 66.21 209.56 66.308 cv
209.719 66.408 209.886 66.458 210.062 66.458 cv
210.319 66.458 210.539 66.355 210.722 66.15 cv
210.904 65.945 210.995 65.667 210.995 65.314 cv
210.995 64.975 210.905 64.709 210.725 64.513 cv
210.544 64.319 210.316 64.221 210.039 64.221 cv
209.766 64.221 209.534 64.319 209.344 64.513 cv
209.154 64.709 209.059 64.9641 209.059 65.281 cv
f
209.327 33.468 mo
209.075 33.3771 208.889 33.2471 208.768 33.077 cv
208.647 32.908 208.586 32.7061 208.586 32.4691 cv
208.586 32.113 208.715 31.813 208.972 31.5701 cv
209.23 31.3281 209.572 31.2061 209.999 31.2061 cv
210.429 31.2061 210.774 31.3301 211.037 31.579 cv
211.298 31.827 211.429 32.1301 211.429 32.486 cv
211.429 32.7131 211.37 32.9111 211.249 33.079 cv
211.131 33.2471 210.949 33.3771 210.706 33.468 cv
211.006 33.5671 211.234 33.725 211.392 33.944 cv
211.548 34.163 211.627 34.4241 211.627 34.7271 cv
211.627 35.147 211.478 35.5001 211.181 35.7861 cv
210.884 36.072 210.493 36.2141 210.008 36.2141 cv
209.523 36.2141 209.131 36.071 208.834 35.785 cv
208.537 35.498 208.388 35.139 208.388 34.7111 cv
208.388 34.3911 208.469 34.124 208.632 33.9091 cv
208.795 33.6931 209.026 33.5471 209.327 33.468 cv
cp
209.008 34.7131 mo
209.008 34.884 209.048 35.05 209.128 35.212 cv
209.209 35.3721 209.33 35.496 209.492 35.585 cv
209.654 35.6721 209.828 35.7161 210.013 35.7161 cv
210.303 35.7161 210.542 35.624 210.727 35.438 cv
210.915 35.254 211.008 35.0181 211.008 34.733 cv
211.008 34.4431 210.911 34.2031 210.719 34.0131 cv
210.527 33.824 210.285 33.7291 209.993 33.7291 cv
209.707 33.7291 209.471 33.8231 209.286 34.0101 cv
209.101 34.1981 209.008 34.4321 209.008 34.7131 cv
cp
209.206 32.451 mo
209.206 32.681 209.28 32.871 209.429 33.017 cv
209.578 33.1641 209.773 33.2371 210.014 33.2371 cv
210.249 33.2371 210.44 33.165 210.588 33.019 cv
210.735 32.874 210.81 32.6951 210.81 32.4841 cv
210.81 32.264 210.733 32.079 210.581 31.9291 cv
210.429 31.7791 210.238 31.704 210.008 31.704 cv
209.775 31.704 209.584 31.777 209.432 31.9241 cv
209.281 32.071 209.206 32.2471 209.206 32.451 cv
f
210.669 5.39099 mo
210.068 5.39099 li
210.068 1.552 li
209.923 1.69104 209.733 1.82904 209.497 1.96704 cv
209.261 2.10602 209.049 2.21002 208.861 2.27899 cv
208.861 1.69702 li
209.199 1.53802 209.494 1.34601 209.746 1.12103 cv
209.999 .89502 210.177 .677002 210.283 .46405 cv
210.669 .46405 li
210.669 5.39099 li
f
212.393 2.97101 mo
212.393 2.39105 212.453 1.92303 212.571 1.56903 cv
212.691 1.21405 212.869 .942017 213.104 .751038 cv
213.34 .560059 213.636 .46405 213.993 .46405 cv
214.256 .46405 214.488 .518066 214.688 .624023 cv
214.888 .730042 215.051 .883057 215.18 1.08307 cv
215.308 1.28204 215.409 1.52502 215.483 1.81104 cv
215.557 2.09802 215.593 2.48505 215.593 2.97101 cv
215.593 3.54706 215.534 4.01105 215.416 4.36707 cv
215.298 4.72101 215.121 4.99402 214.885 5.18604 cv
214.649 5.37805 214.352 5.47406 213.993 5.47406 cv
213.52 5.47406 213.148 5.30505 212.878 4.96802 cv
212.555 4.55804 212.393 3.89203 212.393 2.97101 cv
cp
213.012 2.96906 mo
213.012 3.77606 213.106 4.31201 213.295 4.57806 cv
213.483 4.84302 213.716 4.97504 213.993 4.97504 cv
214.27 4.97504 214.502 4.84204 214.691 4.57605 cv
214.879 4.30902 214.974 3.77405 214.974 2.96906 cv
214.974 2.16302 214.879 1.62701 214.692 1.36102 cv
214.503 1.09601 214.269 .963013 213.987 .963013 cv
213.71 .963013 213.488 1.08105 213.322 1.31403 cv
213.115 1.61304 213.012 2.16504 213.012 2.96906 cv
f
32.766 163.984 mo
32.766 163.404 32.825 162.937 32.944 162.583 cv
33.064 162.227 33.241 161.955 33.477 161.764 cv
33.712 161.573 34.009 161.478 34.366 161.478 cv
34.629 161.478 34.861 161.531 35.061 161.636 cv
35.26 161.743 35.424 161.895 35.553 162.095 cv
35.681 162.295 35.782 162.538 35.855 162.825 cv
35.93 163.111 35.966 163.498 35.966 163.984 cv
35.966 164.559 35.907 165.024 35.789 165.379 cv
35.67 165.734 35.494 166.007 35.258 166.199 cv
35.023 166.391 34.725 166.487 34.366 166.487 cv
33.893 166.487 33.521 166.318 33.251 165.981 cv
32.927 165.571 32.766 164.905 32.766 163.984 cv
cp
33.385 163.982 mo
33.385 164.789 33.48 165.325 33.668 165.59 cv
33.856 165.856 34.089 165.988 34.366 165.988 cv
34.643 165.988 34.875 165.855 35.064 165.588 cv
35.252 165.322 35.347 164.787 35.347 163.982 cv
35.347 163.175 35.252 162.639 35.064 162.374 cv
34.876 162.109 34.642 161.976 34.359 161.976 cv
34.082 161.976 33.861 162.093 33.695 162.327 cv
33.488 162.626 33.385 163.177 33.385 163.982 cv
f
57.908 163.984 mo
57.908 163.404 57.967 162.937 58.086 162.583 cv
58.206 162.227 58.383 161.955 58.619 161.764 cv
58.855 161.573 59.151 161.478 59.508 161.478 cv
59.772 161.478 60.003 161.531 60.203 161.636 cv
60.402 161.743 60.566 161.895 60.695 162.095 cv
60.823 162.295 60.924 162.538 60.998 162.825 cv
61.072 163.111 61.108 163.498 61.108 163.984 cv
61.108 164.559 61.049 165.024 60.931 165.379 cv
60.812 165.734 60.636 166.007 60.4 166.199 cv
60.165 166.391 59.867 166.487 59.508 166.487 cv
59.035 166.487 58.663 166.318 58.393 165.981 cv
58.069 165.571 57.908 164.905 57.908 163.984 cv
cp
58.527 163.982 mo
58.527 164.789 58.622 165.325 58.81 165.59 cv
58.998 165.856 59.231 165.988 59.508 165.988 cv
59.785 165.988 60.018 165.855 60.206 165.588 cv
60.394 165.322 60.489 164.787 60.489 163.982 cv
60.489 163.175 60.394 162.639 60.207 162.374 cv
60.019 162.109 59.784 161.976 59.501 161.976 cv
59.225 161.976 59.003 162.093 58.837 162.327 cv
58.63 162.626 58.527 163.177 58.527 163.982 cv
f
62.258 166.404 mo
62.942 166.404 li
62.942 165.72 li
62.258 165.72 li
cp
f
66.98 165.822 mo
66.98 166.404 li
63.728 166.404 li
63.724 166.258 63.747 166.118 63.799 165.984 cv
63.882 165.762 64.015 165.545 64.198 165.33 cv
64.382 165.116 64.644 164.868 64.988 164.588 cv
65.52 164.15 65.88 163.803 66.07 163.548 cv
66.259 163.294 66.353 163.052 66.353 162.824 cv
66.353 162.587 66.268 162.385 66.097 162.221 cv
65.926 162.058 65.702 161.976 65.426 161.976 cv
65.135 161.976 64.903 162.063 64.727 162.237 cv
64.553 162.412 64.465 162.652 64.462 162.96 cv
63.843 162.896 li
63.885 162.434 64.045 162.083 64.323 161.84 cv
64.6 161.598 64.973 161.478 65.44 161.478 cv
65.912 161.478 66.285 161.608 66.561 161.869 cv
66.835 162.13 66.974 162.453 66.974 162.838 cv
66.974 163.035 66.933 163.228 66.853 163.418 cv
66.772 163.607 66.638 163.806 66.451 164.016 cv
66.264 164.226 65.955 164.513 65.521 164.879 cv
65.159 165.182 64.927 165.388 64.824 165.497 cv
64.721 165.604 64.635 165.713 64.568 165.822 cv
66.98 165.822 li
f
86.114 163.984 mo
86.114 163.404 86.174 162.937 86.293 162.583 cv
86.413 162.227 86.59 161.955 86.825 161.764 cv
87.061 161.573 87.357 161.478 87.714 161.478 cv
87.978 161.478 88.209 161.531 88.409 161.636 cv
88.609 161.743 88.773 161.895 88.901 162.095 cv
89.03 162.295 89.131 162.538 89.204 162.825 cv
89.278 163.111 89.315 163.498 89.315 163.984 cv
89.315 164.559 89.256 165.024 89.137 165.379 cv
89.019 165.734 88.842 166.007 88.606 166.199 cv
88.371 166.391 88.074 166.487 87.714 166.487 cv
87.241 166.487 86.869 166.318 86.6 165.981 cv
86.275 165.571 86.114 164.905 86.114 163.984 cv
cp
86.733 163.982 mo
86.733 164.789 86.828 165.325 87.016 165.59 cv
87.205 165.856 87.437 165.988 87.714 165.988 cv
87.991 165.988 88.224 165.855 88.412 165.588 cv
88.601 165.322 88.695 164.787 88.695 163.982 cv
88.695 163.175 88.601 162.639 88.413 162.374 cv
88.225 162.109 87.99 161.976 87.707 161.976 cv
87.431 161.976 87.21 162.093 87.044 162.327 cv
86.836 162.626 86.733 163.177 86.733 163.982 cv
f
90.341 166.404 mo
91.025 166.404 li
91.025 165.72 li
90.341 165.72 li
cp
f
93.809 166.404 mo
93.809 165.228 li
91.675 165.228 li
91.675 164.678 li
93.917 161.497 li
94.41 161.497 li
94.41 164.678 li
95.074 164.678 li
95.074 165.228 li
94.41 165.228 li
94.41 166.404 li
93.809 166.404 li
cp
93.809 164.678 mo
93.809 162.459 li
92.268 164.678 li
93.809 164.678 li
f
114.204 163.984 mo
114.204 163.404 114.263 162.937 114.382 162.583 cv
114.502 162.227 114.679 161.955 114.915 161.764 cv
115.15 161.573 115.447 161.478 115.804 161.478 cv
116.067 161.478 116.299 161.531 116.498 161.636 cv
116.698 161.743 116.863 161.895 116.991 162.095 cv
117.119 162.295 117.221 162.538 117.294 162.825 cv
117.368 163.111 117.404 163.498 117.404 163.984 cv
117.404 164.559 117.345 165.024 117.227 165.379 cv
117.109 165.734 116.932 166.007 116.696 166.199 cv
116.461 166.391 116.163 166.487 115.804 166.487 cv
115.331 166.487 114.959 166.318 114.689 165.981 cv
114.366 165.571 114.204 164.905 114.204 163.984 cv
cp
114.823 163.982 mo
114.823 164.789 114.917 165.325 115.106 165.59 cv
115.294 165.856 115.527 165.988 115.804 165.988 cv
116.081 165.988 116.313 165.855 116.502 165.588 cv
116.69 165.322 116.785 164.787 116.785 163.982 cv
116.785 163.175 116.69 162.639 116.502 162.374 cv
116.315 162.109 116.08 161.976 115.797 161.976 cv
115.521 161.976 115.299 162.093 115.133 162.327 cv
114.926 162.626 114.823 163.177 114.823 163.982 cv
f
118.527 166.404 mo
119.211 166.404 li
119.211 165.72 li
118.527 165.72 li
cp
f
123.217 162.698 mo
122.616 162.743 li
122.562 162.508 122.486 162.338 122.388 162.232 cv
122.224 162.061 122.023 161.976 121.783 161.976 cv
121.591 161.976 121.42 162.03 121.273 162.136 cv
121.085 162.274 120.935 162.476 120.826 162.741 cv
120.716 163.005 120.659 163.384 120.655 163.875 cv
120.8 163.654 120.977 163.49 121.188 163.382 cv
121.398 163.275 121.618 163.222 121.848 163.222 cv
122.25 163.222 122.593 163.37 122.875 163.665 cv
123.158 163.961 123.3 164.342 123.3 164.811 cv
123.3 165.119 123.232 165.405 123.1 165.669 cv
122.967 165.933 122.784 166.135 122.551 166.276 cv
122.319 166.417 122.056 166.487 121.761 166.487 cv
121.258 166.487 120.847 166.302 120.53 165.933 cv
120.212 165.564 120.054 164.956 120.054 164.108 cv
120.054 163.16 120.23 162.47 120.581 162.04 cv
120.888 161.665 121.301 161.478 121.82 161.478 cv
122.207 161.478 122.524 161.586 122.772 161.802 cv
123.019 162.018 123.167 162.317 123.217 162.698 cv
cp
120.744 164.812 mo
120.744 165.019 120.788 165.217 120.877 165.407 cv
120.964 165.596 121.087 165.74 121.246 165.839 cv
121.403 165.939 121.571 165.988 121.747 165.988 cv
122.004 165.988 122.224 165.886 122.406 165.681 cv
122.588 165.475 122.68 165.197 122.68 164.845 cv
122.68 164.506 122.59 164.24 122.409 164.045 cv
122.23 163.849 122 163.753 121.723 163.753 cv
121.451 163.753 121.219 163.849 121.029 164.045 cv
120.839 164.24 120.744 164.496 120.744 164.812 cv
f
142.383 163.984 mo
142.383 163.404 142.442 162.937 142.562 162.583 cv
142.681 162.227 142.858 161.955 143.094 161.764 cv
143.329 161.573 143.625 161.478 143.983 161.478 cv
144.246 161.478 144.477 161.531 144.678 161.636 cv
144.877 161.743 145.041 161.895 145.17 162.095 cv
145.298 162.295 145.399 162.538 145.473 162.825 cv
145.547 163.111 145.584 163.498 145.584 163.984 cv
145.584 164.559 145.524 165.024 145.405 165.379 cv
145.287 165.734 145.111 166.007 144.875 166.199 cv
144.64 166.391 144.342 166.487 143.983 166.487 cv
143.509 166.487 143.138 166.318 142.868 165.981 cv
142.544 165.571 142.383 164.905 142.383 163.984 cv
cp
143.002 163.982 mo
143.002 164.789 143.097 165.325 143.285 165.59 cv
143.474 165.856 143.706 165.988 143.983 165.988 cv
144.259 165.988 144.492 165.855 144.681 165.588 cv
144.87 165.322 144.964 164.787 144.964 163.982 cv
144.964 163.175 144.87 162.639 144.682 162.374 cv
144.493 162.109 144.259 161.976 143.976 161.976 cv
143.7 161.976 143.477 162.093 143.312 162.327 cv
143.106 162.626 143.002 163.177 143.002 163.982 cv
f
146.61 166.404 mo
147.294 166.404 li
147.294 165.72 li
146.61 165.72 li
cp
f
149.094 163.74 mo
148.843 163.649 148.657 163.518 148.536 163.349 cv
148.415 163.18 148.354 162.977 148.354 162.741 cv
148.354 162.384 148.482 162.085 148.74 161.841 cv
148.998 161.599 149.339 161.478 149.768 161.478 cv
150.197 161.478 150.543 161.602 150.804 161.85 cv
151.066 162.099 151.197 162.401 151.197 162.758 cv
151.197 162.985 151.137 163.183 151.018 163.351 cv
150.898 163.519 150.717 163.649 150.474 163.74 cv
150.773 163.838 151.003 163.997 151.159 164.216 cv
151.317 164.434 151.395 164.696 151.395 165 cv
151.395 165.42 151.247 165.772 150.949 166.058 cv
150.651 166.343 150.261 166.487 149.775 166.487 cv
149.291 166.487 148.899 166.343 148.602 166.056 cv
148.304 165.769 148.156 165.412 148.156 164.983 cv
148.156 164.664 148.237 164.396 148.4 164.18 cv
148.562 163.965 148.794 163.818 149.094 163.74 cv
cp
148.775 164.985 mo
148.775 165.157 148.815 165.323 148.896 165.483 cv
148.977 165.644 149.098 165.768 149.259 165.856 cv
149.421 165.944 149.595 165.988 149.78 165.988 cv
150.071 165.988 150.309 165.896 150.496 165.711 cv
150.682 165.525 150.775 165.291 150.775 165.005 cv
150.775 164.714 150.68 164.475 150.487 164.286 cv
150.295 164.096 150.053 164.002 149.76 164.002 cv
149.475 164.002 149.24 164.095 149.054 164.283 cv
148.868 164.469 148.775 164.704 148.775 164.985 cv
cp
148.974 162.722 mo
148.974 162.954 149.048 163.143 149.197 163.29 cv
149.346 163.436 149.541 163.509 149.783 163.509 cv
150.017 163.509 150.209 163.437 150.356 163.291 cv
150.504 163.145 150.577 162.967 150.577 162.756 cv
150.577 162.536 150.502 162.351 150.349 162.201 cv
150.197 162.051 150.005 161.976 149.775 161.976 cv
149.543 161.976 149.352 162.049 149.2 162.196 cv
149.049 162.342 148.974 162.518 148.974 162.722 cv
f
175.703 166.404 mo
175.102 166.404 li
175.102 162.565 li
174.956 162.704 174.766 162.841 174.53 162.98 cv
174.294 163.119 174.082 163.222 173.894 163.292 cv
173.894 162.71 li
174.231 162.551 174.526 162.359 174.779 162.133 cv
175.032 161.908 175.21 161.69 175.315 161.478 cv
175.703 161.478 li
175.703 166.404 li
f
200.94 166.404 mo
200.34 166.404 li
200.34 162.565 li
200.194 162.704 200.003 162.841 199.768 162.98 cv
199.532 163.119 199.32 163.222 199.132 163.292 cv
199.132 162.71 li
199.469 162.551 199.764 162.359 200.017 162.133 cv
200.27 161.908 200.448 161.69 200.553 161.478 cv
200.94 161.478 li
200.94 166.404 li
f
202.899 166.404 mo
203.583 166.404 li
203.583 165.72 li
202.899 165.72 li
cp
f
207.621 165.822 mo
207.621 166.404 li
204.369 166.404 li
204.365 166.258 204.388 166.118 204.44 165.984 cv
204.523 165.762 204.656 165.545 204.839 165.33 cv
205.023 165.116 205.286 164.868 205.629 164.588 cv
206.161 164.15 206.522 163.803 206.711 163.548 cv
206.9 163.294 206.995 163.052 206.995 162.824 cv
206.995 162.587 206.909 162.385 206.738 162.221 cv
206.566 162.058 206.343 161.976 206.067 161.976 cv
205.777 161.976 205.543 162.063 205.369 162.237 cv
205.195 162.412 205.106 162.652 205.103 162.96 cv
204.484 162.896 li
204.526 162.434 204.687 162.083 204.964 161.84 cv
205.241 161.598 205.614 161.478 206.081 161.478 cv
206.553 161.478 206.927 161.608 207.202 161.869 cv
207.477 162.13 207.614 162.453 207.614 162.838 cv
207.614 163.035 207.575 163.228 207.494 163.418 cv
207.413 163.607 207.279 163.806 207.092 164.016 cv
206.905 164.226 206.595 164.513 206.163 164.879 cv
205.8 165.182 205.567 165.388 205.464 165.497 cv
205.361 165.604 205.277 165.713 205.21 165.822 cv
207.621 165.822 li
f
4.73899 127.568 mo
4.97699 126.63 li
5.74999 126.827 6.33899 127.181 6.74499 127.694 cv
7.15099 128.207 7.35399 128.833 7.35399 129.574 cv
7.35399 130.34 7.19799 130.963 6.88599 131.444 cv
6.57299 131.924 6.12199 132.29 5.52999 132.541 cv
4.93799 132.791 4.30299 132.916 3.62399 132.916 cv
2.88299 132.916 2.23699 132.775 1.68599 132.492 cv
1.13399 132.209 .714989 131.806 .428989 131.284 cv
.14399 130.761 -1.14441e-5 130.187 -1.14441e-5 129.559 cv
-1.14441e-5 128.848 .180988 128.25 .542988 127.764 cv
.904987 127.279 1.41499 126.941 2.07099 126.751 cv
2.28899 127.677 li
1.77199 127.842 1.39499 128.081 1.15899 128.395 cv
.922989 128.709 .804989 129.103 .804989 129.578 cv
.804989 130.125 .935989 130.582 1.19799 130.948 cv
1.45999 131.315 1.81199 131.573 2.25299 131.721 cv
2.69399 131.871 3.14999 131.945 3.61899 131.945 cv
4.22399 131.945 4.75099 131.857 5.20299 131.68 cv
5.65399 131.504 5.99099 131.23 6.21399 130.858 cv
6.43699 130.486 6.54899 130.084 6.54899 129.65 cv
6.54899 129.123 6.39599 128.676 6.09299 128.311 cv
5.78899 127.945 5.33699 127.698 4.73899 127.568 cv
f
7.23199 125.785 mo
.12199 125.785 li
.12199 124.909 li
2.67099 124.909 li
2.19799 124.502 1.96099 123.988 1.96099 123.367 cv
1.96099 122.985 2.03699 122.654 2.18699 122.373 cv
2.33699 122.091 2.54499 121.89 2.81099 121.768 cv
3.07599 121.647 3.46099 121.587 3.96599 121.587 cv
7.23199 121.587 li
7.23199 122.463 li
3.96699 122.463 li
3.52999 122.463 3.21199 122.556 3.01399 122.746 cv
2.81499 122.934 2.71499 123.202 2.71499 123.547 cv
2.71499 123.805 2.78199 124.048 2.91599 124.277 cv
3.05099 124.505 3.23299 124.667 3.46199 124.763 cv
3.69199 124.861 4.00899 124.909 4.41399 124.909 cv
7.23199 124.909 li
7.23199 125.785 li
f
7.23199 116.875 mo
6.47199 116.875 li
7.05499 117.275 7.34699 117.819 7.34699 118.505 cv
7.34699 118.808 7.28899 119.091 7.17299 119.354 cv
7.05599 119.617 6.90999 119.812 6.73299 119.94 cv
6.55699 120.067 6.34099 120.157 6.08499 120.208 cv
5.91399 120.244 5.64199 120.261 5.26999 120.261 cv
2.07599 120.261 li
2.07599 119.385 li
4.93399 119.385 li
5.38999 119.385 5.69699 119.368 5.85599 119.333 cv
6.08499 119.278 6.26599 119.162 6.39699 118.985 cv
6.52799 118.807 6.59299 118.588 6.59299 118.327 cv
6.59299 118.066 6.52599 117.822 6.39199 117.592 cv
6.25799 117.364 6.07499 117.202 5.84399 117.107 cv
5.61299 117.012 5.27699 116.964 4.83699 116.964 cv
2.07599 116.964 li
2.07599 116.089 li
7.23199 116.089 li
7.23199 116.875 li
f
5.34099 111.333 mo
5.45599 110.477 li
6.04699 110.571 6.51099 110.811 6.84499 111.198 cv
7.17999 111.585 7.34699 112.057 7.34699 112.62 cv
7.34699 113.325 7.11699 113.891 6.65599 114.319 cv
6.19499 114.748 5.53399 114.962 4.67399 114.962 cv
4.11699 114.962 3.62999 114.87 3.21299 114.685 cv
2.79599 114.502 2.48299 114.22 2.27399 113.844 cv
2.06499 113.467 1.96099 113.058 1.96099 112.616 cv
1.96099 112.056 2.10399 111.6 2.38799 111.245 cv
2.67099 110.889 3.07399 110.661 3.59699 110.561 cv
3.72499 111.411 li
3.37699 111.491 3.11599 111.633 2.93999 111.838 cv
2.76499 112.045 2.67699 112.293 2.67699 112.584 cv
2.67699 113.023 2.83399 113.38 3.14999 113.655 cv
3.46599 113.93 3.96599 114.067 4.64899 114.067 cv
5.34299 114.067 5.84599 113.935 6.16099 113.67 cv
6.47499 113.404 6.63199 113.057 6.63199 112.63 cv
6.63199 112.287 6.52599 112 6.31499 111.77 cv
6.10399 111.542 5.77999 111.395 5.34099 111.333 cv
f
7.23199 109.62 mo
.12199 109.62 li
.12199 108.744 li
4.16699 108.744 li
2.07599 106.679 li
2.07599 105.55 li
3.99199 107.518 li
7.23199 105.353 li
7.23199 106.428 li
4.59499 108.137 li
5.18599 108.744 li
7.23199 108.744 li
7.23199 109.62 li
f
4.73899 96.746 mo
4.97699 95.806 li
5.74999 96.004 6.33899 96.359 6.74499 96.871 cv
7.15099 97.383 7.35399 98.01 7.35399 98.751 cv
7.35399 99.517 7.19799 100.14 6.88599 100.621 cv
6.57299 101.101 6.12199 101.466 5.52999 101.717 cv
4.93799 101.967 4.30299 102.093 3.62399 102.093 cv
2.88299 102.093 2.23699 101.952 1.68599 101.669 cv
1.13399 101.385 .714989 100.983 .428989 100.461 cv
.14399 99.938 -1.14441e-5 99.364 -1.14441e-5 98.737 cv
-1.14441e-5 98.025 .180988 97.426 .542988 96.942 cv
.904987 96.457 1.41499 96.119 2.07099 95.927 cv
2.28899 96.854 li
1.77199 97.019 1.39499 97.258 1.15899 97.572 cv
.922989 97.885 .804989 98.28 .804989 98.755 cv
.804989 99.302 .935989 99.758 1.19799 100.126 cv
1.45999 100.492 1.81199 100.751 2.25299 100.899 cv
2.69399 101.047 3.14999 101.122 3.61899 101.122 cv
4.22399 101.122 4.75099 101.034 5.20299 100.858 cv
5.65399 100.681 5.99099 100.407 6.21399 100.035 cv
6.43699 99.664 6.54899 99.26 6.54899 98.827 cv
6.54899 98.299 6.39599 97.853 6.09299 97.488 cv
5.78899 97.123 5.33699 96.875 4.73899 96.746 cv
f
7.23199 91.475 mo
6.47199 91.475 li
7.05499 91.875 7.34699 92.419 7.34699 93.105 cv
7.34699 93.409 7.28899 93.692 7.17299 93.955 cv
7.05599 94.217 6.90999 94.412 6.73299 94.54 cv
6.55699 94.667 6.34099 94.756 6.08499 94.808 cv
5.91399 94.843 5.64199 94.861 5.26999 94.861 cv
2.07599 94.861 li
2.07599 93.986 li
4.93399 93.986 li
5.38999 93.986 5.69699 93.968 5.85599 93.933 cv
6.08499 93.879 6.26599 93.762 6.39699 93.585 cv
6.52799 93.408 6.59299 93.188 6.59299 92.927 cv
6.59299 92.667 6.52599 92.422 6.39199 92.193 cv
6.25799 91.964 6.07499 91.802 5.84399 91.707 cv
5.61299 91.612 5.27699 91.564 4.83699 91.564 cv
2.07599 91.564 li
2.07599 90.689 li
7.23199 90.689 li
7.23199 91.475 li
f
7.23199 89.287 mo
2.07599 89.287 li
2.07599 88.501 li
2.85699 88.501 li
2.49299 88.301 2.25199 88.115 2.13599 87.946 cv
2.01999 87.776 1.96099 87.589 1.96099 87.385 cv
1.96099 87.091 2.05499 86.792 2.24099 86.488 cv
3.04899 86.793 li
2.92399 87.005 2.86199 87.217 2.86199 87.429 cv
2.86199 87.62 2.91999 87.791 3.03499 87.942 cv
3.14899 88.093 3.30899 88.201 3.51299 88.266 cv
3.82399 88.363 4.16399 88.411 4.53299 88.411 cv
7.23199 88.411 li
7.23199 89.287 li
f
7.23199 85.961 mo
2.07599 85.961 li
2.07599 85.174 li
2.85699 85.174 li
2.49299 84.974 2.25199 84.789 2.13599 84.6201 cv
2.01999 84.449 1.96099 84.263 1.96099 84.059 cv
1.96099 83.765 2.05499 83.465 2.24099 83.162 cv
3.04899 83.466 li
2.92399 83.678 2.86199 83.8911 2.86199 84.103 cv
2.86199 84.294 2.91999 84.4641 3.03499 84.616 cv
3.14899 84.767 3.30899 84.875 3.51299 84.94 cv
3.82399 85.037 4.16399 85.085 4.53299 85.085 cv
7.23199 85.085 li
7.23199 85.961 li
f
5.57099 79.133 mo
5.68599 78.233 li
6.21199 78.375 6.62099 78.638 6.91199 79.023 cv
7.20199 79.407 7.34699 79.897 7.34699 80.4951 cv
7.34699 81.247 7.11499 81.843 6.65099 82.284 cv
6.18699 82.724 5.53599 82.945 4.69799 82.945 cv
3.83099 82.945 3.15799 82.722 2.67999 82.276 cv
2.20099 81.8311 1.96099 81.254 1.96099 80.543 cv
1.96099 79.855 2.19599 79.294 2.66399 78.858 cv
3.13299 78.422 3.79199 78.204 4.64199 78.204 cv
4.69399 78.204 4.77099 78.2061 4.87499 78.209 cv
4.87499 82.051 li
5.44199 82.018 5.87699 81.858 6.17899 81.57 cv
6.48099 81.282 6.63199 80.922 6.63199 80.493 cv
6.63199 80.172 6.54699 79.899 6.37899 79.672 cv
6.20999 79.446 5.94099 79.2661 5.57099 79.133 cv
cp
4.15899 81.999 mo
4.15899 79.124 li
3.72499 79.163 3.39899 79.273 3.18299 79.454 cv
2.84599 79.7321 2.67699 80.092 2.67699 80.535 cv
2.67699 80.936 2.81199 81.273 3.07999 81.546 cv
3.34999 81.819 3.70899 81.97 4.15899 81.999 cv
f
7.23199 77.115 mo
2.07599 77.115 li
2.07599 76.33 li
2.80799 76.33 li
2.24399 75.951 1.96099 75.405 1.96099 74.691 cv
1.96099 74.38 2.01699 74.094 2.12899 73.835 cv
2.24099 73.575 2.38699 73.38 2.56799 73.251 cv
2.74899 73.122 2.96399 73.031 3.21399 72.979 cv
3.37499 72.947 3.65899 72.93 4.06299 72.93 cv
7.23199 72.93 li
7.23199 73.805 li
4.09499 73.805 li
3.73899 73.805 3.47199 73.8391 3.29499 73.908 cv
3.11899 73.975 2.97899 74.095 2.87299 74.268 cv
2.76799 74.441 2.71499 74.643 2.71499 74.875 cv
2.71499 75.246 2.83399 75.566 3.06999 75.836 cv
3.30599 76.105 3.75499 76.24 4.41499 76.24 cv
7.23199 76.24 li
7.23199 77.115 li
f
6.45499 69.67 mo
7.22599 69.542 li
7.27599 69.788 7.30299 70.008 7.30299 70.201 cv
7.30299 70.518 7.25199 70.763 7.15199 70.938 cv
7.05099 71.113 6.91899 71.236 6.75599 71.307 cv
6.59199 71.378 6.24799 71.414 5.72299 71.414 cv
2.75299 71.414 li
2.75299 72.059 li
2.07599 72.059 li
2.07599 71.414 li
.800987 71.414 li
.277988 70.538 li
2.07599 70.538 li
2.07599 69.67 li
2.75299 69.67 li
2.75299 70.538 li
5.77599 70.538 li
6.02499 70.538 6.18599 70.523 6.25699 70.493 cv
6.32899 70.463 6.38599 70.413 6.42799 70.343 cv
6.46999 70.275 6.49099 70.176 6.49099 70.048 cv
6.49099 69.953 6.47899 69.826 6.45499 69.67 cv
f
.33799 63.111 mo
9.37199 63.111 li
9.37199 62.709 li
.33799 62.709 li
cp
f
7.23199 61.435 mo
.12199 59.947 li
.12199 59.001 li
7.23199 60.489 li
7.23199 61.435 li
f
9.05799 59.006 mo
8.47799 59.006 8.01099 58.946 7.65599 58.827 cv
7.30099 58.708 7.02799 58.53 6.83799 58.295 cv
6.64699 58.059 6.55099 57.762 6.55099 57.406 cv
6.55099 57.142 6.60399 56.911 6.70999 56.711 cv
6.81599 56.511 6.96899 56.347 7.16899 56.218 cv
7.36899 56.09 7.61199 55.99 7.89799 55.916 cv
8.18499 55.842 8.57099 55.805 9.05799 55.805 cv
9.63299 55.805 10.098 55.865 10.453 55.983 cv
10.807 56.101 11.081 56.278 11.273 56.513 cv
11.464 56.749 11.561 57.047 11.561 57.406 cv
11.561 57.879 11.392 58.251 11.055 58.52 cv
10.644 58.844 9.97899 59.006 9.05799 59.006 cv
cp
9.05599 58.386 mo
9.86199 58.386 10.399 58.293 10.665 58.103 cv
10.93 57.915 11.062 57.682 11.062 57.406 cv
11.062 57.129 10.929 56.896 10.662 56.708 cv
10.396 56.519 9.85999 56.425 9.05599 56.425 cv
8.24899 56.425 7.71299 56.519 7.44699 56.707 cv
7.18199 56.895 7.04999 57.13 7.04999 57.412 cv
7.04999 57.689 7.16699 57.911 7.40099 58.077 cv
7.69999 58.283 8.25099 58.386 9.05599 58.386 cv
f
.33799 54.598 mo
9.37199 54.598 li
9.37199 54.195 li
.33799 54.195 li
cp
f
9.32099 45.978 mo
8.71399 46.459 8.00299 46.8651 7.18899 47.1981 cv
6.37499 47.53 5.53199 47.6971 4.65899 47.6971 cv
3.88999 47.6971 3.15299 47.5721 2.44899 47.324 cv
1.63099 47.0331 .81699 46.5851 .00598907 45.978 cv
.00598907 45.3521 li
.67799 45.743 1.15799 46.0021 1.44599 46.1281 cv
1.89199 46.3251 2.35699 46.48 2.84099 46.5931 cv
3.44599 46.733 4.05299 46.8021 4.66399 46.8021 cv
6.21799 46.8021 7.77099 46.319 9.32099 45.3521 cv
9.32099 45.978 li
f
7.23199 44.346 mo
2.07599 44.346 li
2.07599 43.5601 li
2.79799 43.5601 li
2.54599 43.398 2.34399 43.183 2.19099 42.916 cv
2.03799 42.648 1.96099 42.342 1.96099 42.0001 cv
1.96099 41.619 2.04099 41.306 2.19799 41.062 cv
2.35599 40.8181 2.57799 40.647 2.86099 40.5471 cv
2.26099 40.139 1.96099 39.608 1.96099 38.955 cv
1.96099 38.4431 2.10299 38.05 2.38599 37.7761 cv
2.66899 37.501 3.10499 37.363 3.69399 37.363 cv
7.23199 37.363 li
7.23199 38.238 li
3.98299 38.238 li
3.63299 38.238 3.38199 38.2661 3.22799 38.3231 cv
3.07399 38.3801 2.94999 38.4821 2.85599 38.6301 cv
2.76199 38.778 2.71499 38.9531 2.71499 39.153 cv
2.71499 39.5131 2.83599 39.813 3.07699 40.0521 cv
3.31799 40.291 3.70499 40.411 4.23499 40.411 cv
7.23199 40.411 li
7.23199 41.286 li
3.88099 41.286 li
3.49199 41.286 3.20099 41.3571 3.00699 41.499 cv
2.81199 41.6411 2.71499 41.874 2.71499 42.197 cv
2.71499 42.442 2.77999 42.6691 2.90999 42.877 cv
3.03899 43.0861 3.22899 43.236 3.47799 43.33 cv
3.72699 43.424 4.08599 43.47 4.55599 43.47 cv
7.23199 43.47 li
7.23199 44.346 li
f
7.23199 36.75 mo
.12199 34.025 li
.12199 33.007 li
7.23199 30.103 li
7.23199 31.174 li
5.07899 31.996 li
5.07899 34.979 li
7.23199 35.755 li
7.23199 36.75 li
cp
4.31199 34.7061 mo
4.31199 32.295 li
2.34499 33.0341 li
1.74699 33.26 1.25499 33.429 .868988 33.5421 cv
1.32599 33.6331 1.77899 33.761 2.22799 33.926 cv
4.31199 34.7061 li
f
9.32099 29.003 mo
9.32099 29.629 li
7.77099 28.662 6.21799 28.178 4.66399 28.178 cv
4.05699 28.178 3.45399 28.248 2.85599 28.387 cv
2.37199 28.497 1.90599 28.651 1.45999 28.847 cv
1.16899 28.974 .68499 29.234 .00598907 29.629 cv
.00598907 29.003 li
.81699 28.396 1.63099 27.947 2.44899 27.657 cv
3.15299 27.408 3.88999 27.284 4.65899 27.284 cv
5.53199 27.284 6.37499 27.451 7.18899 27.785 cv
8.00299 28.119 8.71399 28.525 9.32099 29.003 cv
f
219.546 22.927 mo
226.657 22.927 li
226.657 25.593 li
226.657 26.136 226.585 26.571 226.441 26.9 cv
226.297 27.2271 226.075 27.484 225.776 27.671 cv
225.477 27.856 225.164 27.949 224.837 27.949 cv
224.533 27.949 224.247 27.867 223.978 27.702 cv
223.71 27.537 223.493 27.288 223.328 26.955 cv
223.202 27.385 222.987 27.715 222.683 27.947 cv
222.379 28.178 222.02 28.294 221.606 28.294 cv
221.273 28.294 220.964 28.223 220.678 28.083 cv
220.392 27.9431 220.171 27.769 220.016 27.562 cv
219.861 27.355 219.744 27.095 219.665 26.7841 cv
219.585 26.472 219.546 26.0891 219.546 25.637 cv
219.546 22.927 li
cp
220.383 23.867 mo
220.383 25.6381 li
220.383 25.942 220.395 26.156 220.416 26.2791 cv
220.456 26.496 220.52 26.677 220.611 26.8231 cv
220.702 26.968 220.834 27.088 221.007 27.182 cv
221.18 27.2761 221.38 27.3231 221.606 27.3231 cv
221.872 27.3231 222.102 27.255 222.298 27.117 cv
222.494 26.98 222.632 26.791 222.711 26.549 cv
222.79 26.309 222.83 25.963 222.83 25.51 cv
222.83 23.867 li
220.383 23.867 li
cp
223.667 23.867 mo
223.667 25.403 li
223.667 25.82 223.694 26.119 223.749 26.3 cv
223.821 26.54 223.939 26.7191 224.105 26.84 cv
224.27 26.962 224.477 27.022 224.727 27.022 cv
224.963 27.022 225.171 26.965 225.351 26.853 cv
225.531 26.7401 225.654 26.578 225.72 26.368 cv
225.787 26.158 225.82 25.7971 225.82 25.287 cv
225.82 23.867 li
223.667 23.867 li
f
219.546 32.84 mo
220.306 32.84 li
219.723 32.4401 219.431 31.897 219.431 31.2111 cv
219.431 30.907 219.489 30.6241 219.606 30.3611 cv
219.722 30.0981 219.869 29.9031 220.045 29.7761 cv
220.221 29.6481 220.437 29.5591 220.693 29.5081 cv
220.864 29.472 221.136 29.454 221.508 29.454 cv
224.702 29.454 li
224.702 30.3301 li
221.844 30.3301 li
221.388 30.3301 221.081 30.347 220.922 30.3821 cv
220.692 30.4371 220.512 30.553 220.381 30.73 cv
220.25 30.9081 220.185 31.1271 220.185 31.3871 cv
220.185 31.649 220.252 31.894 220.386 32.123 cv
220.52 32.3511 220.703 32.5131 220.935 32.608 cv
221.166 32.704 221.501 32.751 221.941 32.751 cv
224.702 32.751 li
224.702 33.6271 li
219.546 33.6271 li
219.546 32.84 li
f
219.546 35.891 mo
226.657 35.891 li
226.657 35.016 li
219.546 35.016 li
cp
f
219.546 37.249 mo
226.657 37.249 li
226.657 38.124 li
222.612 38.124 li
224.702 40.189 li
224.702 41.3181 li
222.786 39.35 li
219.546 41.5151 li
219.546 40.4401 li
222.183 38.7311 li
221.592 38.124 li
219.546 38.124 li
219.546 37.249 li
f
219.546 45.063 mo
226.657 45.063 li
226.657 48.213 li
226.657 48.845 226.593 49.328 226.465 49.657 cv
226.337 49.987 226.112 50.25 225.788 50.447 cv
225.464 50.644 225.107 50.743 224.715 50.743 cv
224.21 50.743 223.785 50.58 223.439 50.253 cv
223.092 49.926 222.873 49.422 222.779 48.741 cv
222.659 48.99 222.542 49.178 222.425 49.308 cv
222.173 49.583 221.858 49.842 221.48 50.087 cv
219.546 51.317 li
219.546 50.141 li
221.024 49.201 li
221.451 48.926 221.777 48.701 222.003 48.523 cv
222.23 48.345 222.388 48.186 222.478 48.046 cv
222.569 47.905 222.632 47.761 222.668 47.616 cv
222.691 47.509 222.702 47.336 222.702 47.092 cv
222.702 46.002 li
219.546 46.002 li
219.546 45.063 li
cp
223.513 46.002 mo
223.513 48.023 li
223.513 48.453 223.558 48.789 223.647 49.031 cv
223.736 49.273 223.879 49.457 224.075 49.583 cv
224.271 49.709 224.484 49.771 224.714 49.771 cv
225.051 49.771 225.328 49.65 225.545 49.406 cv
225.762 49.162 225.871 48.777 225.871 48.252 cv
225.871 46.002 li
223.513 46.002 li
f
221.207 55.43 mo
221.092 56.332 li
220.565 56.189 220.157 55.925 219.867 55.5421 cv
219.576 55.158 219.431 54.6671 219.431 54.07 cv
219.431 53.318 219.663 52.721 220.127 52.281 cv
220.592 51.841 221.243 51.62 222.08 51.62 cv
222.947 51.62 223.62 51.842 224.099 52.288 cv
224.578 52.733 224.816 53.311 224.816 54.021 cv
224.816 54.71 224.582 55.271 224.114 55.707 cv
223.645 56.142 222.986 56.36 222.136 56.36 cv
222.085 56.36 222.007 56.359 221.903 56.355 cv
221.903 52.514 li
221.335 52.547 220.9 52.707 220.599 52.995 cv
220.297 53.283 220.146 53.6411 220.146 54.072 cv
220.146 54.392 220.231 54.666 220.399 54.892 cv
220.568 55.119 220.837 55.297 221.207 55.43 cv
cp
222.619 52.565 mo
222.619 55.44 li
223.053 55.402 223.379 55.2921 223.596 55.111 cv
223.933 54.833 224.101 54.472 224.101 54.03 cv
224.101 53.629 223.967 53.2921 223.698 53.018 cv
223.429 52.746 223.069 52.594 222.619 52.565 cv
f
221.085 57.104 mo
221.22 57.9661 li
220.874 58.015 220.608 58.15 220.423 58.372 cv
220.239 58.593 220.146 58.903 220.146 59.3 cv
220.146 59.702 220.228 59.999 220.392 60.1931 cv
220.556 60.387 220.748 60.484 220.969 60.484 cv
221.166 60.484 221.322 60.398 221.435 60.225 cv
221.513 60.105 221.612 59.808 221.732 59.334 cv
221.894 58.695 222.034 58.252 222.152 58.005 cv
222.27 57.757 222.433 57.57 222.642 57.442 cv
222.85 57.3151 223.081 57.252 223.333 57.252 cv
223.563 57.252 223.775 57.303 223.971 57.4091 cv
224.166 57.5131 224.329 57.657 224.458 57.838 cv
224.558 57.973 224.643 58.1591 224.712 58.392 cv
224.782 58.627 224.816 58.8781 224.816 59.1461 cv
224.816 59.551 224.759 59.905 224.642 60.21 cv
224.526 60.515 224.369 60.741 224.17 60.886 cv
223.971 61.032 223.706 61.131 223.373 61.187 cv
223.258 60.3311 li
223.523 60.2921 223.73 60.179 223.878 59.994 cv
224.027 59.809 224.101 59.5471 224.101 59.208 cv
224.101 58.807 224.035 58.522 223.902 58.351 cv
223.769 58.1801 223.613 58.0941 223.435 58.0941 cv
223.321 58.0941 223.219 58.13 223.128 58.201 cv
223.034 58.272 222.956 58.3831 222.895 58.535 cv
222.862 58.622 222.788 58.879 222.671 59.304 cv
222.506 59.921 222.371 60.351 222.266 60.595 cv
222.161 60.8391 222.008 61.031 221.808 61.17 cv
221.607 61.309 221.358 61.379 221.06 61.379 cv
220.77 61.379 220.496 61.294 220.239 61.124 cv
219.981 60.955 219.783 60.71 219.642 60.389 cv
219.502 60.07 219.431 59.709 219.431 59.304 cv
219.431 58.635 219.57 58.126 219.848 57.775 cv
220.127 57.424 220.539 57.201 221.085 57.104 cv
f
219.546 62.549 mo
224.702 62.549 li
224.702 63.424 li
219.546 63.424 li
cp
225.654 62.549 mo
226.657 62.549 li
226.657 63.424 li
225.654 63.424 li
cp
f
221.085 64.424 mo
221.22 65.287 li
220.874 65.335 220.608 65.4691 220.423 65.691 cv
220.239 65.913 220.146 66.222 220.146 66.6201 cv
220.146 67.0211 220.228 67.319 220.392 67.512 cv
220.556 67.707 220.748 67.803 220.969 67.803 cv
221.166 67.803 221.322 67.717 221.435 67.546 cv
221.513 67.424 221.612 67.1281 221.732 66.653 cv
221.894 66.014 222.034 65.571 222.152 65.325 cv
222.27 65.077 222.433 64.89 222.642 64.762 cv
222.85 64.634 223.081 64.571 223.333 64.571 cv
223.563 64.571 223.775 64.624 223.971 64.728 cv
224.166 64.834 224.329 64.976 224.458 65.158 cv
224.558 65.293 224.643 65.478 224.712 65.713 cv
224.782 65.947 224.816 66.1981 224.816 66.4661 cv
224.816 66.8701 224.759 67.2241 224.642 67.53 cv
224.526 67.8361 224.369 68.0601 224.17 68.2061 cv
223.971 68.351 223.706 68.452 223.373 68.506 cv
223.258 67.65 li
223.523 67.6121 223.73 67.5001 223.878 67.314 cv
224.027 67.129 224.101 66.866 224.101 66.528 cv
224.101 66.1281 224.035 65.8411 223.902 65.671 cv
223.769 65.5001 223.613 65.415 223.435 65.415 cv
223.321 65.415 223.219 65.45 223.128 65.5211 cv
223.034 65.5911 222.956 65.7031 222.895 65.855 cv
222.862 65.942 222.788 66.1981 222.671 66.6251 cv
222.506 67.241 222.371 67.671 222.266 67.915 cv
222.161 68.1591 222.008 68.35 221.808 68.4901 cv
221.607 68.629 221.358 68.6981 221.06 68.6981 cv
220.77 68.6981 220.496 68.613 220.239 68.444 cv
219.981 68.274 219.783 68.0291 219.642 67.71 cv
219.502 67.389 219.431 67.028 219.431 66.6251 cv
219.431 65.9561 219.57 65.4451 219.848 65.095 cv
220.127 64.7451 220.539 64.52 221.085 64.424 cv
f
220.324 71.637 mo
219.553 71.7651 li
219.502 71.519 219.476 71.2991 219.476 71.1061 cv
219.476 70.7891 219.526 70.543 219.627 70.3691 cv
219.727 70.194 219.859 70.071 220.022 70.0001 cv
220.186 69.9291 220.53 69.8931 221.055 69.8931 cv
224.024 69.8931 li
224.024 69.248 li
224.702 69.248 li
224.702 69.8931 li
225.977 69.8931 li
226.5 70.7681 li
224.702 70.7681 li
224.702 71.637 li
224.024 71.637 li
224.024 70.7681 li
221.002 70.7681 li
220.752 70.7681 220.592 70.7841 220.52 70.814 cv
220.449 70.8441 220.392 70.894 220.351 70.9631 cv
220.308 71.032 220.287 71.1301 220.287 71.2581 cv
220.287 71.3541 220.299 71.48 220.324 71.637 cv
f
220.178 75.852 mo
219.905 75.528 219.712 75.216 219.6 74.919 cv
219.487 74.62 219.431 74.298 219.431 73.957 cv
219.431 73.391 219.569 72.958 219.846 72.654 cv
220.123 72.35 220.476 72.198 220.906 72.198 cv
221.158 72.198 221.388 72.255 221.597 72.37 cv
221.806 72.485 221.973 72.635 222.099 72.821 cv
222.225 73.006 222.321 73.216 222.385 73.448 cv
222.43 73.619 222.474 73.878 222.516 74.223 cv
222.601 74.926 222.701 75.445 222.817 75.778 cv
222.937 75.781 223.013 75.782 223.045 75.782 cv
223.401 75.782 223.653 75.701 223.798 75.536 cv
223.996 75.314 224.095 74.984 224.095 74.546 cv
224.095 74.136 224.023 73.835 223.879 73.64 cv
223.736 73.445 223.482 73.301 223.117 73.208 cv
223.232 72.351 li
223.597 72.429 223.892 72.556 224.117 72.734 cv
224.341 72.912 224.514 73.169 224.635 73.505 cv
224.756 73.84 224.816 74.23 224.816 74.672 cv
224.816 75.112 224.765 75.468 224.662 75.744 cv
224.558 76.018 224.429 76.22 224.271 76.349 cv
224.115 76.478 223.917 76.569 223.678 76.621 cv
223.53 76.65 223.261 76.664 222.873 76.664 cv
221.707 76.664 li
220.895 76.664 220.381 76.683 220.166 76.719 cv
219.95 76.756 219.744 76.83 219.546 76.939 cv
219.546 76.025 li
219.726 75.935 219.937 75.879 220.178 75.852 cv
cp
222.133 75.782 mo
222.004 75.466 221.894 74.991 221.804 74.358 cv
221.752 73.999 221.693 73.745 221.628 73.596 cv
221.564 73.448 221.469 73.333 221.345 73.253 cv
221.22 73.172 221.082 73.13 220.93 73.13 cv
220.697 73.13 220.503 73.218 220.348 73.395 cv
220.192 73.571 220.114 73.828 220.114 74.167 cv
220.114 74.502 220.189 74.801 220.335 75.061 cv
220.483 75.323 220.684 75.515 220.94 75.637 cv
221.137 75.731 221.428 75.778 221.813 75.778 cv
222.133 75.782 li
f
219.546 78.054 mo
224.702 78.054 li
224.702 78.8391 li
223.97 78.8391 li
224.534 79.218 224.816 79.764 224.816 80.4791 cv
224.816 80.79 224.761 81.074 224.649 81.335 cv
224.538 81.5941 224.392 81.79 224.21 81.9191 cv
224.029 82.048 223.814 82.1381 223.564 82.1901 cv
223.403 82.222 223.12 82.2391 222.715 82.2391 cv
219.546 82.2391 li
219.546 81.3641 li
222.684 81.3641 li
223.04 81.3641 223.306 81.33 223.482 81.262 cv
223.659 81.194 223.8 81.074 223.905 80.9011 cv
224.01 80.7291 224.063 80.527 224.063 80.295 cv
224.063 79.923 223.944 79.603 223.708 79.334 cv
223.472 79.064 223.023 78.929 222.363 78.929 cv
219.546 78.929 li
219.546 78.054 li
f
221.437 86.963 mo
221.322 87.8201 li
220.731 87.725 220.268 87.486 219.933 87.0991 cv
219.598 86.713 219.431 86.239 219.431 85.676 cv
219.431 84.9711 219.661 84.405 220.123 83.9771 cv
220.583 83.548 221.244 83.335 222.105 83.335 cv
222.661 83.335 223.148 83.426 223.565 83.611 cv
223.982 83.795 224.295 84.0751 224.504 84.452 cv
224.712 84.8281 224.816 85.238 224.816 85.6801 cv
224.816 86.2401 224.675 86.697 224.391 87.0521 cv
224.107 87.408 223.704 87.636 223.181 87.736 cv
223.053 86.886 li
223.401 86.8051 223.663 86.663 223.838 86.4581 cv
224.014 86.2531 224.101 86.004 224.101 85.713 cv
224.101 85.2731 223.943 84.916 223.627 84.6411 cv
223.312 84.366 222.812 84.2291 222.129 84.2291 cv
221.435 84.2291 220.932 84.361 220.618 84.627 cv
220.304 84.892 220.146 85.239 220.146 85.6671 cv
220.146 86.009 220.252 86.2971 220.463 86.5261 cv
220.674 86.756 220.999 86.902 221.437 86.963 cv
f
221.207 92.085 mo
221.092 92.985 li
220.565 92.842 220.157 92.5801 219.867 92.196 cv
219.576 91.811 219.431 91.321 219.431 90.723 cv
219.431 89.9711 219.663 89.376 220.127 88.9341 cv
220.592 88.4941 221.243 88.2731 222.08 88.2731 cv
222.947 88.2731 223.62 88.4971 224.099 88.941 cv
224.578 89.387 224.816 89.9641 224.816 90.676 cv
224.816 91.363 224.582 91.9241 224.114 92.36 cv
223.645 92.7971 222.986 93.014 222.136 93.014 cv
222.085 93.014 222.007 93.012 221.903 93.009 cv
221.903 89.168 li
221.335 89.2001 220.9 89.36 220.599 89.6481 cv
220.297 89.936 220.146 90.2961 220.146 90.725 cv
220.146 91.0461 220.231 91.319 220.399 91.5461 cv
220.568 91.772 220.837 91.952 221.207 92.085 cv
cp
222.619 89.2191 mo
222.619 92.0941 li
223.053 92.0551 223.379 91.9451 223.596 91.764 cv
223.933 91.486 224.101 91.1271 224.101 90.683 cv
224.101 90.2831 223.967 89.9451 223.698 89.6721 cv
223.429 89.399 223.069 89.249 222.619 89.2191 cv
f
219.546 99.265 mo
226.657 100.754 li
226.657 103.729 li
226.657 104.316 226.607 104.761 226.509 105.065 cv
226.41 105.368 226.225 105.606 225.953 105.778 cv
225.681 105.951 225.338 106.038 224.924 106.038 cv
224.345 106.038 223.865 105.848 223.483 105.47 cv
223.101 105.092 222.853 104.481 222.74 103.637 cv
222.55 103.896 222.362 104.091 222.178 104.224 cv
221.76 104.52 221.328 104.758 220.881 104.937 cv
219.546 105.485 li
219.546 104.422 li
220.867 103.911 li
221.346 103.727 221.76 103.516 222.109 103.281 cv
222.352 103.122 222.512 102.958 222.588 102.791 cv
222.664 102.623 222.702 102.35 222.702 101.973 cv
222.702 100.872 li
219.546 100.212 li
219.546 99.265 li
cp
223.475 101.034 mo
223.475 102.343 li
223.475 102.949 223.484 103.342 223.5 103.526 cv
223.536 103.884 223.617 104.178 223.743 104.408 cv
223.869 104.637 224.039 104.815 224.252 104.941 cv
224.466 105.067 224.696 105.13 224.941 105.13 cv
225.148 105.13 225.329 105.084 225.482 104.99 cv
225.636 104.896 225.74 104.774 225.795 104.623 cv
225.85 104.47 225.877 104.213 225.877 103.848 cv
225.877 101.537 li
223.475 101.034 li
f
215.179 106.51 mo
220.085 106.51 li
220.085 108.352 li
220.085 108.727 220.036 109.028 219.937 109.255 cv
219.838 109.481 219.685 109.659 219.478 109.786 cv
219.273 109.915 219.057 109.979 218.832 109.979 cv
218.622 109.979 218.425 109.922 218.24 109.809 cv
218.055 109.694 217.905 109.523 217.792 109.294 cv
217.705 109.589 217.557 109.817 217.346 109.977 cv
217.136 110.135 216.888 110.216 216.603 110.216 cv
216.373 110.216 216.159 110.167 215.961 110.069 cv
215.764 109.973 215.611 109.852 215.504 109.71 cv
215.396 109.567 215.315 109.388 215.261 109.173 cv
215.206 108.958 215.179 108.694 215.179 108.381 cv
215.179 106.51 li
cp
215.76 107.162 mo
215.76 108.383 li
215.76 108.593 215.768 108.741 215.784 108.826 cv
215.81 108.975 215.855 109.1 215.917 109.2 cv
215.98 109.3 216.071 109.383 216.19 109.448 cv
216.31 109.512 216.448 109.545 216.603 109.545 cv
216.787 109.545 216.945 109.498 217.081 109.405 cv
217.215 109.31 217.31 109.18 217.365 109.014 cv
217.419 108.848 217.447 108.609 217.447 108.297 cv
217.447 107.162 li
215.76 107.162 li
cp
218.028 107.162 mo
218.028 108.223 li
218.028 108.51 218.047 108.716 218.085 108.841 cv
218.134 109.008 218.215 109.131 218.328 109.215 cv
218.441 109.298 218.584 109.34 218.755 109.34 cv
218.917 109.34 219.06 109.301 219.183 109.223 cv
219.306 109.145 219.391 109.034 219.436 108.888 cv
219.481 108.744 219.504 108.495 219.504 108.142 cv
219.504 107.162 li
218.028 107.162 li
f
217.456 118.252 mo
218.064 117.77 218.775 117.364 219.589 117.032 cv
220.403 116.699 221.247 116.533 222.119 116.533 cv
222.888 116.533 223.624 116.657 224.329 116.906 cv
225.146 117.196 225.96 117.644 226.771 118.252 cv
226.771 118.878 li
226.1 118.486 225.62 118.227 225.332 118.101 cv
224.887 117.904 224.421 117.749 223.937 117.635 cv
223.332 117.497 222.725 117.427 222.114 117.427 cv
220.56 117.427 219.007 117.911 217.456 118.878 cv
217.456 118.252 li
f
219.546 119.973 mo
226.657 119.973 li
226.657 121.386 li
221.624 123.074 li
221.156 123.229 220.805 123.342 220.573 123.414 cv
220.831 123.495 221.211 123.622 221.712 123.793 cv
226.657 125.498 li
226.657 126.765 li
219.546 126.765 li
219.546 125.858 li
225.5 125.858 li
219.546 123.787 li
219.546 122.939 li
225.602 120.88 li
219.546 120.88 li
219.546 119.973 li
f
219.546 134.875 mo
219.546 132.128 li
220.897 132.244 li
221.088 132.699 221.359 133.034 221.711 133.249 cv
222.064 133.463 222.558 133.571 223.194 133.571 cv
224.073 133.571 224.747 133.357 225.217 132.928 cv
225.687 132.501 225.922 131.962 225.922 131.312 cv
225.922 130.685 225.684 130.156 225.207 129.722 cv
224.731 129.29 224.082 129.074 223.262 129.074 cv
222.616 129.074 222.101 129.183 221.716 129.405 cv
221.331 129.626 221.059 129.958 220.897 130.403 cv
219.546 130.524 li
219.546 127.79 li
220.9 127.79 li
220.9 127.962 li
220.702 127.971 220.567 128.022 220.496 128.115 cv
220.382 128.259 220.325 128.478 220.325 128.773 cv
220.325 130.088 li
220.665 130.088 li
220.861 129.41 221.199 128.886 221.677 128.516 cv
222.156 128.146 222.72 127.962 223.369 127.962 cv
224.183 127.962 224.87 128.263 225.429 128.866 cv
225.987 129.468 226.267 130.284 226.267 131.312 cv
226.267 131.943 226.148 132.522 225.911 133.05 cv
225.673 133.579 225.327 133.987 224.872 134.273 cv
224.416 134.559 223.915 134.702 223.369 134.702 cv
222.7 134.702 222.118 134.505 221.622 134.113 cv
221.126 133.719 220.807 133.207 220.665 132.573 cv
220.325 132.534 li
220.325 133.865 li
220.325 134.165 220.371 134.373 220.462 134.491 cv
220.553 134.607 220.699 134.675 220.9 134.696 cv
220.9 134.875 li
219.546 134.875 li
f
217.456 136.31 mo
217.456 135.683 li
219.007 136.65 220.56 137.133 222.114 137.133 cv
222.722 137.133 223.324 137.064 223.922 136.925 cv
224.407 136.815 224.872 136.662 225.318 136.464 cv
225.608 136.338 226.093 136.078 226.771 135.683 cv
226.771 136.31 li
225.96 136.917 225.146 137.365 224.329 137.655 cv
223.624 137.904 222.888 138.028 222.119 138.028 cv
221.247 138.028 220.403 137.861 219.589 137.527 cv
218.775 137.193 218.064 136.788 217.456 136.31 cv
f
68.435 179.286 mo
65.688 172.175 li
66.708 172.175 li
68.555 177.339 li
68.703 177.754 68.828 178.141 68.928 178.504 cv
69.038 178.116 69.166 177.727 69.311 177.339 cv
71.231 172.175 li
72.192 172.175 li
69.413 179.286 li
68.435 179.286 li
f
72.722 176.709 mo
72.722 175.754 72.986 175.047 73.516 174.588 cv
73.957 174.206 74.497 174.015 75.132 174.015 cv
75.839 174.015 76.417 174.247 76.866 174.712 cv
77.315 175.175 77.539 175.817 77.539 176.635 cv
77.539 177.298 77.439 177.82 77.241 178.201 cv
77.042 178.581 76.754 178.876 76.374 179.086 cv
75.995 179.297 75.581 179.401 75.132 179.401 cv
74.413 179.401 73.831 179.17 73.387 178.708 cv
72.943 178.245 72.722 177.578 72.722 176.709 cv
cp
73.616 176.709 mo
73.616 177.37 73.76 177.864 74.047 178.192 cv
74.334 178.521 74.696 178.685 75.132 178.685 cv
75.565 178.685 75.925 178.52 76.213 178.19 cv
76.5 177.86 76.644 177.357 76.644 176.679 cv
76.644 176.042 76.5 175.558 76.21 175.23 cv
75.921 174.901 75.562 174.737 75.132 174.737 cv
74.696 174.737 74.334 174.9 74.047 175.228 cv
73.76 175.554 73.616 176.048 73.616 176.709 cv
f
78.475 179.286 mo
79.35 179.286 li
79.35 172.176 li
78.475 172.176 li
cp
f
82.723 178.508 mo
82.85 179.279 li
82.605 179.331 82.385 179.356 82.19 179.356 cv
81.874 179.356 81.628 179.306 81.454 179.206 cv
81.279 179.105 81.156 178.973 81.085 178.809 cv
81.014 178.646 80.978 178.301 80.978 177.777 cv
80.978 174.807 li
80.333 174.807 li
80.333 174.13 li
80.978 174.13 li
80.978 172.855 li
81.854 172.332 li
81.854 174.13 li
82.723 174.13 li
82.723 174.807 li
81.854 174.807 li
81.854 177.83 li
81.854 178.08 81.869 178.24 81.899 178.311 cv
81.93 178.382 81.98 178.439 82.048 178.481 cv
82.117 178.524 82.215 178.545 82.343 178.545 cv
82.44 178.545 82.565 178.533 82.723 178.508 cv
f
86.889 178.654 mo
86.565 178.927 86.253 179.12 85.954 179.232 cv
85.655 179.344 85.335 179.401 84.993 179.401 cv
84.427 179.401 83.993 179.263 83.69 178.986 cv
83.386 178.71 83.234 178.356 83.234 177.926 cv
83.234 177.674 83.291 177.444 83.406 177.235 cv
83.521 177.026 83.671 176.859 83.856 176.733 cv
84.043 176.607 84.251 176.511 84.484 176.447 cv
84.655 176.401 84.913 176.358 85.259 176.316 cv
85.962 176.232 86.481 176.131 86.814 176.015 cv
86.816 175.895 86.818 175.819 86.818 175.787 cv
86.818 175.43 86.736 175.179 86.572 175.034 cv
86.35 174.836 86.019 174.737 85.582 174.737 cv
85.173 174.737 84.871 174.809 84.676 174.953 cv
84.481 175.096 84.337 175.35 84.244 175.714 cv
83.387 175.599 li
83.465 175.235 83.593 174.94 83.77 174.715 cv
83.948 174.491 84.205 174.318 84.541 174.197 cv
84.877 174.076 85.266 174.015 85.708 174.015 cv
86.148 174.015 86.505 174.067 86.779 174.171 cv
87.054 174.273 87.256 174.404 87.385 174.56 cv
87.514 174.717 87.605 174.915 87.656 175.154 cv
87.685 175.302 87.7 175.571 87.7 175.96 cv
87.7 177.125 li
87.7 177.937 87.718 178.451 87.755 178.667 cv
87.792 178.882 87.865 179.088 87.975 179.286 cv
87.061 179.286 li
86.972 179.106 86.914 178.895 86.889 178.654 cv
cp
86.818 176.699 mo
86.502 176.828 86.026 176.938 85.393 177.029 cv
85.035 177.081 84.781 177.138 84.632 177.204 cv
84.483 177.268 84.369 177.363 84.288 177.487 cv
84.207 177.612 84.167 177.75 84.167 177.902 cv
84.167 178.135 84.255 178.33 84.43 178.485 cv
84.606 178.64 84.864 178.717 85.202 178.717 cv
85.538 178.717 85.836 178.643 86.097 178.497 cv
86.358 178.349 86.551 178.148 86.673 177.892 cv
86.767 177.695 86.814 177.404 86.814 177.019 cv
86.818 176.699 li
f
88.933 179.714 mo
89.782 179.841 li
89.818 180.102 89.916 180.293 90.078 180.412 cv
90.294 180.573 90.59 180.653 90.965 180.653 cv
91.368 180.653 91.68 180.573 91.899 180.412 cv
92.119 180.25 92.268 180.024 92.346 179.734 cv
92.39 179.556 92.411 179.183 92.408 178.615 cv
92.027 179.062 91.552 179.286 90.984 179.286 cv
90.277 179.286 89.729 179.031 89.341 178.519 cv
88.954 178.007 88.76 177.395 88.76 176.679 cv
88.76 176.188 88.849 175.734 89.026 175.319 cv
89.205 174.903 89.461 174.582 89.799 174.355 cv
90.137 174.129 90.533 174.015 90.989 174.015 cv
91.596 174.015 92.097 174.26 92.491 174.75 cv
92.491 174.13 li
93.296 174.13 li
93.296 178.585 li
93.296 179.387 93.215 179.956 93.051 180.291 cv
92.888 180.626 92.63 180.89 92.275 181.085 cv
91.922 181.278 91.486 181.376 90.969 181.376 cv
90.355 181.376 89.858 181.237 89.48 180.962 cv
89.102 180.685 88.92 180.269 88.933 179.714 cv
cp
89.654 176.617 mo
89.654 177.294 89.789 177.787 90.057 178.098 cv
90.325 178.409 90.66 178.564 91.064 178.564 cv
91.465 178.564 91.8 178.41 92.072 178.1 cv
92.343 177.791 92.478 177.306 92.478 176.646 cv
92.478 176.014 92.339 175.539 92.06 175.218 cv
91.78 174.897 91.443 174.737 91.05 174.737 cv
90.662 174.737 90.333 174.895 90.062 175.211 cv
89.791 175.527 89.654 175.995 89.654 176.617 cv
f
98.155 177.625 mo
99.056 177.74 li
98.914 178.266 98.65 178.674 98.267 178.965 cv
97.882 179.255 97.392 179.401 96.794 179.401 cv
96.043 179.401 95.446 179.17 95.005 178.705 cv
94.565 178.241 94.344 177.589 94.344 176.752 cv
94.344 175.884 94.567 175.212 95.013 174.734 cv
95.458 174.255 96.036 174.015 96.746 174.015 cv
97.434 174.015 97.995 174.25 98.431 174.718 cv
98.867 175.187 99.085 175.846 99.085 176.696 cv
99.085 176.748 99.084 176.825 99.08 176.928 cv
95.239 176.928 li
95.271 177.497 95.431 177.931 95.719 178.233 cv
96.007 178.535 96.367 178.685 96.796 178.685 cv
97.117 178.685 97.39 178.601 97.617 178.433 cv
97.843 178.264 98.023 177.995 98.155 177.625 cv
cp
95.29 176.213 mo
98.165 176.213 li
98.127 175.779 98.017 175.453 97.835 175.236 cv
97.557 174.899 97.197 174.731 96.754 174.731 cv
96.353 174.731 96.016 174.865 95.743 175.134 cv
95.47 175.403 95.319 175.762 95.29 176.213 cv
f
105.755 181.376 mo
106.515 181.376 li
106.515 172.061 li
105.755 172.061 li
cp
f
109.44 179.286 mo
108.08 172.174 li
108.996 172.174 li
109.811 176.416 li
109.965 177.184 110.066 177.805 110.113 178.277 cv
110.409 177.671 110.651 177.19 110.842 176.835 cv
113.378 172.174 li
114.355 172.174 li
110.463 179.286 li
109.44 179.286 li
f
113.628 181.233 mo
113.628 180.653 113.687 180.186 113.807 179.831 cv
113.926 179.476 114.104 179.204 114.339 179.013 cv
114.575 178.823 114.871 178.727 115.228 178.727 cv
115.492 178.727 115.723 178.78 115.923 178.886 cv
116.123 178.992 116.287 179.145 116.415 179.344 cv
116.543 179.544 116.645 179.787 116.718 180.074 cv
116.791 180.361 116.829 180.747 116.829 181.233 cv
116.829 181.808 116.769 182.274 116.651 182.629 cv
116.533 182.983 116.356 183.256 116.12 183.448 cv
115.885 183.64 115.587 183.736 115.228 183.736 cv
114.755 183.736 114.383 183.567 114.113 183.23 cv
113.79 182.82 113.628 182.154 113.628 181.233 cv
cp
114.248 181.231 mo
114.248 182.039 114.342 182.575 114.53 182.839 cv
114.719 183.105 114.952 183.238 115.228 183.238 cv
115.505 183.238 115.738 183.105 115.926 182.838 cv
116.114 182.572 116.209 182.036 116.209 181.231 cv
116.209 180.424 116.114 179.888 115.927 179.624 cv
115.739 179.358 115.503 179.225 115.222 179.225 cv
114.944 179.225 114.723 179.342 114.557 179.577 cv
114.351 179.875 114.248 180.427 114.248 181.231 cv
f
118.13 181.376 mo
118.89 181.376 li
118.89 172.061 li
118.13 172.061 li
cp
f
120.36 179.286 mo
120.36 178.29 li
121.356 178.29 li
121.356 179.286 li
121.356 179.651 121.292 179.946 121.162 180.171 cv
121.032 180.395 120.826 180.569 120.545 180.692 cv
120.302 180.321 li
120.487 180.24 120.623 180.121 120.71 179.964 cv
120.797 179.807 120.846 179.581 120.856 179.286 cv
120.36 179.286 li
f
125.83 181.376 mo
126.59 181.376 li
126.59 172.061 li
125.83 172.061 li
cp
f
130.098 179.286 mo
128.737 172.175 li
129.653 172.175 li
130.468 176.416 li
130.622 177.185 130.723 177.805 130.77 178.277 cv
131.065 177.672 131.308 177.19 131.499 176.835 cv
134.036 172.175 li
135.011 172.175 li
131.12 179.286 li
130.098 179.286 li
f
136.978 182.497 mo
137.603 182.58 li
137.505 182.944 137.323 183.227 137.058 183.428 cv
136.792 183.629 136.452 183.729 136.039 183.729 cv
135.519 183.729 135.107 183.569 134.802 183.25 cv
134.498 182.929 134.345 182.481 134.345 181.904 cv
134.345 181.306 134.499 180.842 134.808 180.512 cv
135.115 180.182 135.515 180.017 136.006 180.017 cv
136.481 180.017 136.87 180.179 137.171 180.504 cv
137.472 180.827 137.623 181.282 137.623 181.869 cv
137.623 181.905 137.622 181.959 137.62 182.03 cv
134.965 182.03 li
134.987 182.419 135.098 182.715 135.296 182.922 cv
135.495 183.129 135.743 183.231 136.04 183.231 cv
136.261 183.231 136.45 183.172 136.606 183.056 cv
136.762 182.939 136.886 182.753 136.978 182.497 cv
cp
134.997 181.532 mo
136.984 181.532 li
136.957 181.234 136.881 181.011 136.756 180.862 cv
136.564 180.631 136.315 180.516 136.009 180.516 cv
135.732 180.516 135.5 180.608 135.31 180.793 cv
135.122 180.977 135.017 181.223 134.997 181.532 cv
f
138.601 183.653 mo
138.601 180.56 li
138.071 180.56 li
138.071 180.094 li
138.601 180.094 li
138.601 179.717 li
138.601 179.479 138.622 179.302 138.665 179.187 cv
138.723 179.031 138.825 178.905 138.972 178.808 cv
139.118 178.712 139.323 178.663 139.586 178.663 cv
139.756 178.663 139.944 178.683 140.149 178.723 cv
140.059 179.246 li
139.933 179.224 139.815 179.213 139.703 179.213 cv
139.521 179.213 139.391 179.252 139.315 179.33 cv
139.239 179.408 139.202 179.553 139.202 179.767 cv
139.202 180.094 li
139.892 180.094 li
139.892 180.56 li
139.202 180.56 li
139.202 183.653 li
138.601 183.653 li
f
140.602 183.653 mo
140.602 180.56 li
140.071 180.56 li
140.071 180.094 li
140.602 180.094 li
140.602 179.717 li
140.602 179.479 140.623 179.302 140.666 179.187 cv
140.724 179.031 140.826 178.905 140.972 178.808 cv
141.119 178.712 141.324 178.663 141.587 178.663 cv
141.757 178.663 141.944 178.683 142.149 178.723 cv
142.059 179.246 li
141.935 179.224 141.816 179.213 141.705 179.213 cv
141.522 179.213 141.393 179.252 141.316 179.33 cv
141.241 179.408 141.202 179.553 141.202 179.767 cv
141.202 180.094 li
141.892 180.094 li
141.892 180.56 li
141.202 180.56 li
141.202 183.653 li
140.602 183.653 li
f
142.811 181.375 mo
143.571 181.375 li
143.571 172.061 li
142.811 172.061 li
cp
f
152.016 181.375 mo
151.535 180.767 151.128 180.056 150.795 179.243 cv
150.463 178.428 150.297 177.585 150.297 176.713 cv
150.297 175.943 150.421 175.207 150.67 174.503 cv
150.96 173.685 151.409 172.871 152.016 172.06 cv
152.642 172.06 li
152.25 172.732 151.992 173.212 151.865 173.5 cv
151.668 173.945 151.513 174.411 151.4 174.895 cv
151.261 175.5 151.191 176.107 151.191 176.717 cv
151.191 178.271 151.674 179.824 152.642 181.375 cv
152.016 181.375 li
f
153.662 179.286 mo
153.662 172.174 li
154.537 172.174 li
154.537 176.22 li
156.602 174.13 li
157.731 174.13 li
155.763 176.046 li
157.929 179.286 li
156.852 179.286 li
155.144 176.649 li
154.537 177.239 li
154.537 179.286 li
153.662 179.286 li
f
160.865 179.286 mo
158.118 172.174 li
159.137 172.174 li
160.984 177.339 li
161.132 177.754 161.257 178.141 161.357 178.503 cv
161.467 178.115 161.595 177.727 161.74 177.339 cv
163.661 172.174 li
164.622 172.174 li
161.842 179.286 li
160.865 179.286 li
f
165.913 181.375 mo
165.287 181.375 li
166.253 179.824 166.737 178.271 166.737 176.717 cv
166.737 176.11 166.667 175.507 166.528 174.91 cv
166.418 174.424 166.265 173.96 166.067 173.513 cv
165.941 173.223 165.681 172.738 165.287 172.06 cv
165.913 172.06 li
166.519 172.871 166.968 173.685 167.259 174.503 cv
167.507 175.207 167.631 175.943 167.631 176.713 cv
167.631 177.585 167.464 178.428 167.13 179.243 cv
166.796 180.056 166.39 180.767 165.913 181.375 cv
f
116.996 62.161 mo
117.354 62.161 li
117.354 54.092 li
116.996 54.092 li
cp
f
118.568 60.251 mo
119.897 53.9 li
120.739 53.9 li
119.41 60.251 li
118.568 60.251 li
f
120.775 62.063 mo
120.775 61.563 120.826 61.161 120.929 60.855 cv
121.032 60.549 121.185 60.314 121.388 60.149 cv
121.591 59.985 121.845 59.902 122.153 59.902 cv
122.38 59.902 122.579 59.948 122.751 60.039 cv
122.923 60.13 123.064 60.262 123.175 60.434 cv
123.286 60.607 123.373 60.816 123.436 61.063 cv
123.5 61.31 123.532 61.644 123.532 62.063 cv
123.532 62.559 123.481 62.961 123.379 63.265 cv
123.277 63.571 123.125 63.806 122.922 63.972 cv
122.719 64.138 122.463 64.221 122.153 64.221 cv
121.746 64.221 121.425 64.076 121.193 63.784 cv
120.914 63.431 120.775 62.857 120.775 62.063 cv
cp
121.308 62.063 mo
121.308 62.758 121.389 63.22 121.552 63.449 cv
121.714 63.678 121.915 63.793 122.153 63.793 cv
122.392 63.793 122.592 63.678 122.754 63.448 cv
122.917 63.217 122.998 62.756 122.998 62.063 cv
122.998 61.368 122.917 60.905 122.755 60.676 cv
122.593 60.448 122.39 60.334 122.148 60.334 cv
121.909 60.334 121.718 60.434 121.576 60.636 cv
121.398 60.894 121.308 61.37 121.308 62.063 cv
f
124.553 62.161 mo
124.911 62.161 li
124.911 54.092 li
124.553 54.092 li
cp
f
129.508 60.251 mo
128.101 55.65 li
128.907 55.65 li
129.642 58.306 li
129.912 59.294 li
129.922 59.244 130.002 58.928 130.15 58.344 cv
130.891 55.65 li
131.681 55.65 li
132.373 58.319 li
132.599 59.198 li
133.655 55.65 li
134.413 55.65 li
132.973 60.251 li
132.165 60.251 li
131.433 57.497 li
131.25 56.712 li
130.312 60.251 li
129.508 60.251 li
f
135.706 54.795 mo
134.927 54.795 li
134.927 53.901 li
135.706 53.901 li
cp
134.927 54.795 mo
cp
135.706 60.251 mo
134.927 60.251 li
134.927 55.65 li
135.706 55.65 li
cp
f
138.631 59.551 mo
138.747 60.2391 li
138.527 60.285 138.331 60.308 138.157 60.308 cv
137.873 60.308 137.654 60.2631 137.498 60.173 cv
137.342 60.0851 137.231 59.9661 137.168 59.821 cv
137.105 59.675 137.073 59.3691 137.073 58.902 cv
137.073 56.2571 li
136.498 56.2571 li
136.498 55.6501 li
137.073 55.6501 li
137.073 54.511 li
137.852 54.0441 li
137.852 55.6501 li
138.631 55.6501 li
138.631 56.2571 li
137.852 56.2571 li
137.852 58.944 li
137.852 59.1661 137.866 59.308 137.893 59.3721 cv
137.921 59.4351 137.965 59.4861 138.027 59.5231 cv
138.088 59.561 138.177 59.5801 138.292 59.5801 cv
138.377 59.5801 138.491 59.5701 138.631 59.551 cv
f
139.414 60.251 mo
139.414 53.9 li
140.193 53.9 li
140.193 56.18 li
140.556 55.759 141.015 55.548 141.569 55.548 cv
141.909 55.548 142.205 55.615 142.456 55.75 cv
142.707 55.883 142.887 56.069 142.995 56.306 cv
143.103 56.543 143.157 56.886 143.157 57.337 cv
143.157 60.251 li
142.378 60.251 li
142.378 57.337 li
142.378 56.947 142.293 56.663 142.124 56.485 cv
141.956 56.307 141.717 56.219 141.408 56.219 cv
141.178 56.219 140.96 56.279 140.757 56.399 cv
140.554 56.518 140.409 56.681 140.322 56.885 cv
140.236 57.091 140.193 57.374 140.193 57.735 cv
140.193 60.251 li
139.414 60.251 li
f
147.915 60.251 mo
146.239 53.9 li
147.105 53.9 li
148.07 58.063 li
148.173 58.499 148.262 58.932 148.338 59.362 cv
148.501 58.685 148.597 58.295 148.625 58.191 cv
149.834 53.9 li
150.846 53.9 li
151.751 57.116 li
151.977 57.913 152.143 58.662 152.248 59.362 cv
152.331 58.963 152.437 58.503 152.566 57.983 cv
153.56 53.9 li
154.404 53.9 li
152.669 60.251 li
151.85 60.251 li
150.523 55.411 li
150.408 55.008 150.339 54.759 150.318 54.667 cv
150.247 54.96 150.184 55.209 150.127 55.414 cv
148.789 60.251 li
147.915 60.251 li
f
158.694 59.682 mo
158.404 59.9271 158.125 60.1 157.858 60.201 cv
157.591 60.3021 157.305 60.3521 156.999 60.3521 cv
156.495 60.3521 156.107 60.2291 155.836 59.9821 cv
155.564 59.736 155.429 59.421 155.429 59.037 cv
155.429 58.811 155.481 58.606 155.583 58.42 cv
155.685 58.233 155.819 58.085 155.985 57.971 cv
156.151 57.859 156.338 57.774 156.545 57.7161 cv
156.698 57.676 156.929 57.636 157.237 57.5991 cv
157.866 57.524 158.329 57.434 158.625 57.3311 cv
158.629 57.2241 158.63 57.1561 158.63 57.1281 cv
158.63 56.8101 158.556 56.588 158.409 56.457 cv
158.21 56.2811 157.915 56.1931 157.522 56.1931 cv
157.156 56.1931 156.886 56.257 156.71 56.386 cv
156.537 56.515 156.407 56.7421 156.324 57.069 cv
155.564 56.9661 li
155.632 56.64 155.747 56.376 155.906 56.176 cv
156.064 55.9741 156.294 55.819 156.594 55.7111 cv
156.894 55.6021 157.242 55.548 157.637 55.548 cv
158.029 55.548 158.348 55.5941 158.594 55.687 cv
158.839 55.7791 159.02 55.8961 159.134 56.036 cv
159.25 56.176 159.331 56.353 159.377 56.567 cv
159.403 56.7 159.416 56.9401 159.416 57.285 cv
159.416 58.322 li
159.416 59.046 159.432 59.5031 159.466 59.696 cv
159.5 59.8881 159.565 60.074 159.665 60.251 cv
158.854 60.251 li
158.771 60.088 158.718 59.899 158.694 59.682 cv
cp
158.63 57.944 mo
158.347 58.059 157.922 58.157 157.356 58.238 cv
157.036 58.2841 156.809 58.3361 156.675 58.3931 cv
156.543 58.451 156.44 58.535 156.368 58.645 cv
156.296 58.756 156.26 58.8801 156.26 59.014 cv
156.26 59.221 156.338 59.394 156.496 59.532 cv
156.652 59.671 156.882 59.739 157.185 59.739 cv
157.485 59.739 157.752 59.673 157.985 59.543 cv
158.219 59.412 158.391 59.233 158.501 59.0051 cv
158.584 58.83 158.625 58.571 158.625 58.2291 cv
158.63 57.944 li
f
160.713 60.251 mo
160.713 56.257 li
160.023 56.257 li
160.023 55.65 li
160.713 55.65 li
160.713 55.161 li
160.713 54.852 160.741 54.622 160.795 54.471 cv
160.871 54.269 161.002 54.105 161.191 53.98 cv
161.379 53.854 161.644 53.792 161.985 53.792 cv
162.204 53.792 162.446 53.817 162.712 53.87 cv
162.595 54.549 li
162.434 54.521 162.28 54.506 162.136 54.506 cv
161.899 54.506 161.732 54.557 161.634 54.659 cv
161.536 54.759 161.486 54.949 161.486 55.226 cv
161.486 55.65 li
162.387 55.65 li
162.387 56.257 li
161.493 56.257 li
161.493 60.251 li
160.713 60.251 li
f
166.153 58.768 mo
166.959 58.871 li
166.832 59.3411 166.598 59.705 166.254 59.963 cv
165.911 60.223 165.472 60.3521 164.939 60.3521 cv
164.267 60.3521 163.733 60.1461 163.34 59.731 cv
162.946 59.3181 162.749 58.7371 162.749 57.9901 cv
162.749 57.2161 162.949 56.616 163.346 56.189 cv
163.745 55.761 164.261 55.548 164.895 55.548 cv
165.51 55.548 166.012 55.7581 166.401 56.176 cv
166.791 56.5941 166.986 57.182 166.986 57.941 cv
166.986 57.9871 166.984 58.056 166.981 58.148 cv
163.548 58.148 li
163.577 58.6541 163.72 59.0421 163.977 59.3101 cv
164.234 59.58 164.555 59.713 164.939 59.713 cv
165.226 59.713 165.469 59.6381 165.672 59.488 cv
165.874 59.338 166.035 59.098 166.153 58.768 cv
cp
163.593 57.509 mo
166.162 57.509 li
166.127 57.123 166.028 56.832 165.867 56.6381 cv
165.618 56.338 165.296 56.187 164.901 56.187 cv
164.542 56.187 164.242 56.307 163.998 56.5471 cv
163.753 56.787 163.619 57.108 163.593 57.509 cv
f
167.939 60.251 mo
167.939 55.65 li
168.641 55.65 li
168.641 56.349 li
168.82 56.023 168.984 55.807 169.136 55.704 cv
169.288 55.6 169.454 55.548 169.636 55.548 cv
169.898 55.548 170.165 55.631 170.437 55.799 cv
170.164 56.52 li
169.975 56.409 169.785 56.353 169.595 56.353 cv
169.425 56.353 169.272 56.404 169.137 56.506 cv
169.001 56.61 168.905 56.752 168.847 56.933 cv
168.761 57.211 168.718 57.513 168.718 57.842 cv
168.718 60.251 li
167.939 60.251 li
f
97.296 23.619 mo
97.654 23.619 li
97.654 15.55 li
97.296 15.55 li
cp
f
98.867 21.709 mo
100.196 15.358 li
101.038 15.358 li
99.709 21.709 li
98.867 21.709 li
f
100.952 23.644 mo
100.952 23.144 101.003 22.742 101.106 22.436 cv
101.209 22.13 101.361 21.895 101.565 21.73 cv
101.767 21.566 102.023 21.483 102.33 21.483 cv
102.557 21.483 102.756 21.529 102.928 21.62 cv
103.099 21.712 103.241 21.843 103.352 22.015 cv
103.462 22.187 103.55 22.397 103.613 22.644 cv
103.677 22.891 103.709 23.225 103.709 23.644 cv
103.709 24.14 103.658 24.541 103.556 24.846 cv
103.454 25.152 103.301 25.387 103.099 25.553 cv
102.895 25.719 102.64 25.802 102.33 25.802 cv
101.922 25.802 101.602 25.656 101.37 25.365 cv
101.091 25.012 100.952 24.438 100.952 23.644 cv
cp
101.485 23.644 mo
101.485 24.339 101.566 24.801 101.729 25.03 cv
101.891 25.259 102.092 25.374 102.33 25.374 cv
102.568 25.374 102.769 25.259 102.931 25.029 cv
103.094 24.798 103.175 24.337 103.175 23.644 cv
103.175 22.949 103.094 22.486 102.932 22.257 cv
102.769 22.029 102.567 21.915 102.324 21.915 cv
102.086 21.915 101.895 22.015 101.752 22.217 cv
101.574 22.474 101.485 22.951 101.485 23.644 cv
f
104.828 23.619 mo
105.186 23.619 li
105.186 15.55 li
104.828 15.55 li
cp
f
109.686 21.709 mo
108.279 17.108 li
109.084 17.108 li
109.819 19.764 li
110.089 20.751 li
110.1 20.702 110.18 20.385 110.328 19.802 cv
111.068 17.108 li
111.858 17.108 li
112.55 19.777 li
112.776 20.656 li
113.041 19.766 li
113.833 17.108 li
114.591 17.108 li
113.15 21.709 li
112.343 21.709 li
111.611 18.955 li
111.428 18.17 li
110.489 21.709 li
109.686 21.709 li
f
116.035 16.252 mo
115.255 16.252 li
115.255 15.357 li
116.035 15.357 li
cp
115.255 16.252 mo
cp
116.035 21.709 mo
115.255 21.709 li
115.255 17.108 li
116.035 17.108 li
cp
f
118.845 21.007 mo
118.96 21.696 li
118.74 21.743 118.544 21.7651 118.37 21.7651 cv
118.087 21.7651 117.867 21.7211 117.711 21.631 cv
117.555 21.5421 117.445 21.4241 117.381 21.2791 cv
117.317 21.134 117.286 20.827 117.286 20.3591 cv
117.286 17.715 li
116.711 17.715 li
116.711 17.108 li
117.286 17.108 li
117.286 15.9691 li
118.065 15.5021 li
118.065 17.108 li
118.845 17.108 li
118.845 17.715 li
118.065 17.715 li
118.065 20.402 li
118.065 20.624 118.079 20.7661 118.106 20.8301 cv
118.134 20.8931 118.178 20.9431 118.24 20.9811 cv
118.302 21.0181 118.39 21.038 118.505 21.038 cv
118.591 21.038 118.704 21.0281 118.845 21.007 cv
f
119.617 21.709 mo
119.617 15.357 li
120.397 15.357 li
120.397 17.637 li
120.76 17.216 121.219 17.005 121.773 17.005 cv
122.113 17.005 122.409 17.073 122.66 17.207 cv
122.911 17.341 123.091 17.527 123.199 17.763 cv
123.307 18.001 123.361 18.344 123.361 18.794 cv
123.361 21.709 li
122.581 21.709 li
122.581 18.794 li
122.581 18.404 122.498 18.121 122.329 17.943 cv
122.16 17.765 121.921 17.676 121.613 17.676 cv
121.382 17.676 121.165 17.737 120.961 17.856 cv
120.758 17.976 120.613 18.138 120.526 18.343 cv
120.44 18.548 120.397 18.832 120.397 19.193 cv
120.397 21.709 li
119.617 21.709 li
f
124.263 19.408 mo
124.263 18.5571 124.499 17.926 124.973 17.5161 cv
125.368 17.176 125.85 17.0051 126.418 17.0051 cv
127.05 17.0051 127.566 17.2131 127.968 17.6281 cv
128.369 18.0411 128.569 18.613 128.569 19.3431 cv
128.569 19.9351 128.481 20.4 128.303 20.7391 cv
128.125 21.0781 127.867 21.3411 127.528 21.5291 cv
127.189 21.7161 126.819 21.8101 126.418 21.8101 cv
125.774 21.8101 125.255 21.6041 124.858 21.191 cv
124.461 20.7791 124.263 20.184 124.263 19.408 cv
cp
125.062 19.4091 mo
125.062 19.999 125.19 20.439 125.447 20.7321 cv
125.704 21.025 126.028 21.1721 126.418 21.1721 cv
126.805 21.1721 127.127 21.025 127.385 20.73 cv
127.642 20.4351 127.771 19.986 127.771 19.3831 cv
127.771 18.8151 127.641 18.3831 127.383 18.09 cv
127.124 17.7971 126.802 17.6511 126.418 17.6511 cv
126.028 17.6511 125.704 17.7971 125.447 18.0881 cv
125.19 18.3801 125.062 18.8201 125.062 19.4091 cv
f
132.505 21.709 mo
132.505 21.031 li
132.148 21.55 131.662 21.81 131.047 21.81 cv
130.776 21.81 130.523 21.758 130.289 21.655 cv
130.053 21.55 129.879 21.42 129.765 21.262 cv
129.651 21.105 129.571 20.913 129.525 20.685 cv
129.493 20.532 129.477 20.289 129.477 19.958 cv
129.477 17.108 li
130.256 17.108 li
130.256 19.659 li
130.256 20.066 130.273 20.34 130.304 20.481 cv
130.353 20.686 130.457 20.847 130.615 20.964 cv
130.774 21.082 130.97 21.139 131.203 21.139 cv
131.437 21.139 131.656 21.08 131.86 20.96 cv
132.065 20.84 132.21 20.677 132.295 20.47 cv
132.38 20.264 132.422 19.964 132.422 19.572 cv
132.422 17.108 li
133.202 17.108 li
133.202 21.709 li
132.505 21.709 li
f
136.242 21.007 mo
136.356 21.696 li
136.137 21.743 135.94 21.7651 135.767 21.7651 cv
135.483 21.7651 135.264 21.7211 135.107 21.631 cv
134.952 21.5421 134.842 21.4241 134.778 21.2791 cv
134.714 21.134 134.683 20.827 134.683 20.3591 cv
134.683 17.715 li
134.108 17.715 li
134.108 17.108 li
134.683 17.108 li
134.683 15.9691 li
135.462 15.5021 li
135.462 17.108 li
136.242 17.108 li
136.242 17.715 li
135.462 17.715 li
135.462 20.402 li
135.462 20.624 135.476 20.7661 135.503 20.8301 cv
135.53 20.8931 135.575 20.9431 135.637 20.9811 cv
135.698 21.0181 135.787 21.038 135.901 21.038 cv
135.987 21.038 136.101 21.0281 136.242 21.007 cv
f
140.683 21.709 mo
139.007 15.357 li
139.873 15.357 li
140.838 19.521 li
140.941 19.957 141.03 20.389 141.106 20.82 cv
141.269 20.143 141.365 19.753 141.393 19.648 cv
142.602 15.357 li
143.614 15.357 li
144.519 18.573 li
144.745 19.371 144.911 20.12 145.016 20.82 cv
145.098 20.42 145.205 19.961 145.334 19.44 cv
146.327 15.357 li
147.172 15.357 li
145.437 21.709 li
144.618 21.709 li
143.29 16.869 li
143.175 16.465 143.107 16.217 143.086 16.125 cv
143.015 16.418 142.951 16.666 142.895 16.872 cv
141.557 21.709 li
140.683 21.709 li
f
151.214 21.139 mo
150.923 21.384 150.645 21.558 150.377 21.659 cv
150.111 21.76 149.825 21.81 149.519 21.81 cv
149.014 21.81 148.627 21.687 148.356 21.44 cv
148.085 21.193 147.949 20.879 147.949 20.494 cv
147.949 20.269 148 20.063 148.102 19.878 cv
148.205 19.691 148.339 19.542 148.505 19.429 cv
148.67 19.317 148.857 19.232 149.065 19.173 cv
149.218 19.133 149.448 19.094 149.757 19.056 cv
150.386 18.982 150.848 18.892 151.146 18.789 cv
151.148 18.682 151.15 18.614 151.15 18.586 cv
151.15 18.268 151.076 18.045 150.929 17.915 cv
150.73 17.739 150.434 17.651 150.042 17.651 cv
149.676 17.651 149.405 17.715 149.231 17.844 cv
149.056 17.972 148.927 18.2 148.843 18.526 cv
148.083 18.424 li
148.152 18.097 148.267 17.834 148.425 17.632 cv
148.584 17.431 148.813 17.277 149.113 17.169 cv
149.413 17.06 149.761 17.005 150.156 17.005 cv
150.549 17.005 150.868 17.052 151.113 17.145 cv
151.358 17.237 151.539 17.354 151.654 17.494 cv
151.77 17.634 151.851 17.811 151.896 18.025 cv
151.922 18.158 151.935 18.397 151.935 18.743 cv
151.935 19.78 li
151.935 20.503 151.953 20.961 151.986 21.154 cv
152.02 21.346 152.086 21.531 152.185 21.709 cv
151.374 21.709 li
151.291 21.547 151.237 21.357 151.214 21.139 cv
cp
151.15 19.402 mo
150.867 19.517 150.442 19.615 149.876 19.695 cv
149.555 19.741 149.328 19.793 149.196 19.85 cv
149.063 19.908 148.96 19.993 148.888 20.103 cv
148.815 20.213 148.779 20.337 148.779 20.472 cv
148.779 20.679 148.858 20.852 149.015 20.99 cv
149.172 21.128 149.402 21.197 149.705 21.197 cv
150.005 21.197 150.272 21.131 150.505 21.001 cv
150.739 20.87 150.91 20.69 151.02 20.463 cv
151.103 20.288 151.146 20.029 151.146 19.686 cv
151.15 19.402 li
f
153.446 21.709 mo
153.446 17.715 li
152.756 17.715 li
152.756 17.108 li
153.446 17.108 li
153.446 16.619 li
153.446 16.309 153.474 16.08 153.528 15.929 cv
153.603 15.727 153.734 15.563 153.923 15.437 cv
154.112 15.312 154.376 15.249 154.717 15.249 cv
154.937 15.249 155.179 15.275 155.444 15.327 cv
155.328 16.007 li
155.166 15.979 155.013 15.964 154.869 15.964 cv
154.632 15.964 154.464 16.015 154.366 16.116 cv
154.268 16.217 154.219 16.407 154.219 16.683 cv
154.219 17.108 li
155.12 17.108 li
155.12 17.715 li
154.226 17.715 li
154.226 21.709 li
153.446 21.709 li
f
158.876 20.226 mo
159.683 20.3281 li
159.556 20.7971 159.321 21.163 158.977 21.4221 cv
158.634 21.681 158.196 21.8101 157.663 21.8101 cv
156.99 21.8101 156.457 21.603 156.064 21.189 cv
155.67 20.775 155.473 20.194 155.473 19.447 cv
155.473 18.673 155.672 18.074 156.07 17.6461 cv
156.468 17.2191 156.984 17.0051 157.619 17.0051 cv
158.233 17.0051 158.735 17.215 159.125 17.6331 cv
159.514 18.051 159.709 18.64 159.709 19.3981 cv
159.709 19.4451 159.708 19.514 159.705 19.606 cv
156.272 19.606 li
156.3 20.1121 156.443 20.5001 156.701 20.7681 cv
156.958 21.038 157.278 21.1721 157.663 21.1721 cv
157.949 21.1721 158.193 21.0961 158.395 20.946 cv
158.597 20.796 158.757 20.5551 158.876 20.226 cv
cp
156.316 18.967 mo
158.885 18.967 li
158.85 18.58 158.752 18.29 158.59 18.095 cv
158.342 17.795 158.02 17.645 157.625 17.645 cv
157.267 17.645 156.965 17.764 156.721 18.0051 cv
156.477 18.2451 156.342 18.566 156.316 18.967 cv
f
160.662 21.709 mo
160.662 17.108 li
161.365 17.108 li
161.365 17.806 li
161.543 17.481 161.709 17.265 161.86 17.162 cv
162.011 17.058 162.178 17.005 162.359 17.005 cv
162.622 17.005 162.889 17.088 163.16 17.255 cv
162.888 17.977 li
162.698 17.867 162.508 17.811 162.318 17.811 cv
162.148 17.811 161.996 17.862 161.86 17.964 cv
161.725 18.067 161.629 18.21 161.571 18.391 cv
161.484 18.669 161.441 18.971 161.441 19.3 cv
161.441 21.709 li
160.662 21.709 li
f
.307 lw
145.234 100.731 mo
141.432 100.731 138.341 101.958 138.341 103.479 cv
138.341 105.024 141.432 106.252 145.234 106.252 cv
149.013 106.252 152.104 105.024 152.104 103.479 cv
152.104 101.958 149.013 100.731 145.234 100.731 cv
cp
49.407 73.327 mo
45.628 73.327 42.562 74.553 42.562 76.0751 cv
42.562 77.571 45.628 78.7971 49.407 78.7971 cv
53.209 78.7971 56.276 77.571 56.276 76.0751 cv
56.276 74.553 53.209 73.327 49.407 73.327 cv
cp
84.98 43.175 mo
81.202 43.175 78.135 44.402 78.135 45.9481 cv
78.135 47.468 81.202 48.6951 84.98 48.6951 cv
88.783 48.6951 91.85 47.468 91.85 45.9481 cv
91.85 44.402 88.783 43.175 84.98 43.175 cv
cp
@
71.29 74.824 mo
73.744 76.051 li
71.29 77.277 li
56.227 75.879 mo
71.708 75.879 li
71.805 75.927 li
71.855 76.051 li
71.805 76.148 li
71.708 76.197 li
56.227 76.197 li
56.105 76.148 li
56.055 76.051 li
56.105 75.927 li
56.227 75.879 li
f
66.948 47.174 mo
64.495 45.9481 li
66.948 44.7211 li
78.135 46.095 mo
66.531 46.095 li
66.433 46.046 li
66.384 45.9481 li
66.433 45.825 li
66.531 45.7761 li
78.135 45.7761 li
78.258 45.825 li
78.307 45.9481 li
78.258 46.046 li
78.135 46.095 li
f
122.566 104.656 mo
120.112 103.429 li
122.566 102.203 li
138.341 103.601 mo
122.148 103.601 li
122.05 103.552 li
122.001 103.429 li
122.05 103.332 li
122.148 103.282 li
138.341 103.282 li
138.463 103.332 li
138.513 103.429 li
138.463 103.552 li
138.341 103.601 li
f
43.074 58.091 mo
44.294 52.239 li
46.752 52.239 li
47.237 52.239 47.604 52.28 47.855 52.361 cv
48.105 52.442 48.302 52.5941 48.444 52.8181 cv
48.586 53.0421 48.658 53.3231 48.658 53.6641 cv
48.658 54.14 48.502 54.535 48.19 54.848 cv
47.878 55.163 47.375 55.366 46.68 55.459 cv
46.893 55.616 47.054 55.77 47.163 55.9221 cv
47.407 56.265 47.603 56.622 47.75 56.989 cv
48.2 58.091 li
47.326 58.091 li
46.905 57.001 li
46.753 56.6071 46.581 56.2661 46.388 55.978 cv
46.255 55.7791 46.119 55.647 45.98 55.585 cv
45.842 55.523 45.616 55.491 45.305 55.491 cv
44.393 55.491 li
43.851 58.091 li
43.074 58.091 li
cp
44.525 54.859 mo
45.608 54.859 li
46.109 54.859 46.436 54.8521 46.588 54.8391 cv
46.884 54.8101 47.126 54.744 47.315 54.64 cv
47.504 54.537 47.651 54.3961 47.755 54.221 cv
47.858 54.046 47.911 53.8571 47.911 53.655 cv
47.911 53.484 47.872 53.3361 47.794 53.21 cv
47.717 53.084 47.615 52.998 47.49 52.952 cv
47.365 52.907 47.151 52.884 46.85 52.884 cv
44.936 52.884 li
44.525 54.859 li
f
48.962 60.128 mo
48.962 56.313 li
50.392 56.313 li
50.683 56.313 50.916 56.3521 51.092 56.429 cv
51.268 56.506 51.406 56.625 51.505 56.786 cv
51.605 56.946 51.655 57.114 51.655 57.29 cv
51.655 57.453 51.611 57.606 51.523 57.751 cv
51.435 57.894 51.301 58.01 51.123 58.099 cv
51.353 58.167 51.531 58.282 51.654 58.445 cv
51.778 58.608 51.84 58.801 51.84 59.022 cv
51.84 59.201 51.802 59.367 51.727 59.52 cv
51.652 59.673 51.559 59.792 51.447 59.875 cv
51.337 59.959 51.198 60.021 51.03 60.064 cv
50.863 60.106 50.658 60.128 50.416 60.128 cv
48.962 60.128 li
cp
49.467 57.917 mo
50.291 57.917 li
50.515 57.917 50.675 57.902 50.773 57.873 cv
50.9 57.835 50.997 57.771 51.062 57.682 cv
51.127 57.594 51.16 57.483 51.16 57.349 cv
51.16 57.223 51.129 57.111 51.069 57.015 cv
51.008 56.919 50.921 56.853 50.809 56.817 cv
50.696 56.782 50.503 56.763 50.229 56.763 cv
49.467 56.763 li
49.467 57.917 li
cp
49.467 59.677 mo
50.416 59.677 li
50.58 59.677 50.694 59.671 50.76 59.659 cv
50.877 59.638 50.974 59.603 51.051 59.554 cv
51.13 59.506 51.194 59.436 51.244 59.343 cv
51.294 59.251 51.319 59.143 51.319 59.022 cv
51.319 58.88 51.283 58.756 51.209 58.652 cv
51.137 58.547 51.036 58.473 50.906 58.43 cv
50.777 58.388 50.591 58.367 50.349 58.367 cv
49.467 58.367 li
49.467 59.677 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/Procedure [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
