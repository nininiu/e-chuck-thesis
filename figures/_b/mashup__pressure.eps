%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: pressure mashup.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/05/29, 16:37:18
%%BoundingBox: -1 0 491 69
%%HiResBoundingBox: 0 0 490.9080 68.5090
%%CropBox: 0 0 490.9080 68.5090
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1020 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2014-05-29T16:37:12+08:00"
   xmp:CreateDate="2014-05-29T16:36:13+08:00"
   xmp:MetadataDate="2014-05-29T16:37:12+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for Excel"
   xmpMM:DocumentID="uuid:f77f52b2-80d6-4ccb-b781-6d401cb37388"
   xmpMM:InstanceID="uuid:1081bad6-dfef-4539-b348-43cdcaa28218"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:Company="">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yin Zhong</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -68.509 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 68.509 li
490.908 68.509 li
490.908 0 li
cp
clp
66.0508 66.5911 mo
104.571 66.5911 li
104.571 58.1901 li
66.0508 58.1901 li
cp
false sop
.514977 .00158694 .684779 0 cmyk
f
104.451 66.5911 mo
142.971 66.5911 li
142.971 58.1901 li
104.451 58.1901 li
cp
.271977 .00888075 .642023 0 cmyk
f
142.851 66.5911 mo
181.371 66.5911 li
181.371 58.1901 li
142.851 58.1901 li
cp
.0136416 .0546883 .587915 0 cmyk
f
181.251 66.5911 mo
219.771 66.5911 li
219.771 58.1901 li
181.251 58.1901 li
cp
.00384527 .173739 .577813 0 cmyk
f
219.651 66.5911 mo
258.171 66.5911 li
258.171 58.1901 li
219.651 58.1901 li
cp
0 .288762 .569451 0 cmyk
f
258.051 66.5911 mo
296.571 66.5911 li
296.571 58.1901 li
258.051 58.1901 li
cp
.00833143 .0943008 .591791 0 cmyk
f
296.451 66.5911 mo
334.971 66.5911 li
334.971 58.1901 li
296.451 58.1901 li
cp
.00436408 .167666 .580529 0 cmyk
f
334.851 66.5911 mo
373.371 66.5911 li
373.371 58.1901 li
334.851 58.1901 li
cp
.271977 .00888075 .642023 0 cmyk
f
373.251 66.5911 mo
411.771 66.5911 li
411.771 58.1901 li
373.251 58.1901 li
cp
.620294 0 .695277 0 cmyk
f
411.651 66.5911 mo
450.171 66.5911 li
450.171 58.1901 li
411.651 58.1901 li
cp
.534905 0 .687007 0 cmyk
f
450.051 66.5911 mo
488.571 66.5911 li
488.571 58.1901 li
450.051 58.1901 li
cp
.617975 0 .694972 0 cmyk
f
gsave
1.61084 66.9512 mo
488.931 66.9512 li
488.931 2.15118 li
1.61084 2.15118 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode Initial
ct_T42Dict begin
-0.613 -0.438 1.383 1.145
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+LucidaSansUnicode
Type42DictBegin
[<00010000000c000c000c000c4f532f32bfc6da0d000000cc000000566376
74206bf8410600000124000001906670676d5a50aa13000002b40000020f
676c79663df11215000042c400001a9868656164ce6ab449000004c40000
0036686865610ef209d2000004fc00000024686d74785a344ecb00000520
00001bcc6c6f636100b30ca4000020ec00001bd06d6178700fee09f20000
3cbc000000206e616d65488966b200003cdc00000365707265708c8a5da4
000040440000028067646972000000000000000000000000000103eb0190
00050008059a0533000000a3059a0533000001f0006602430000020b0602
03050402020480001aff0000396b00000000000000004226482000400020
feff0644fe5d00a808c60385200000bfd7f700000000062b001905c80025
05c80025043e00180000ffdb0000ffe70000ffdbfe75ffe8062b0000fed8
0000039cffee062b00120250000c05d2000c0000fff40382000c04a00025
02e4001901590062006f0075007b008000850088008f0094009d00ad00b9
00be00c500c900d200d700df00f700570064006a006f00720075007a0085
00890094009d00a100a800aa0000000000d200c500ca00ab00f000b800a9
00c100800063009401180094009d00ad00f500f1010c00630088004a007b
008e006e0057000000000000000000000000000000000000000000000000
007c00c5068e00630025ffdb00dfff2100f7ff790019ffe702b3015401b8
025cfda400ad00b900c500f7ffffffffffffffffffffffffffffffffffff
ffff029afffffe50ffffffff065000940094032203b604a000deffffffff
ffff00630063007b0088ffff0050ffffffffffffffff04d200de00c600af
003e00510056ff0cff9d004902b300c6039d0606ffed005d028205ca0281
0378018b0019ffffffffffffffff008000850088008f0094009d00ad005a
0019b41413121110b40f0e0d0c0bb40a09080706b40504030201b0002c8a
03458a8a87b0012bb0472344b0477ae4182d2c2069b04061b0008b20b102
c08a8cb8100062602b0c642364615c58b00361592d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb20040052b59b002602d
2c21b0c051580c6423648bb81555621bb20080052b59b002602d2c0c6423
648bb84000626023212d2c00b0462370b101463e01b0462370b10246453a
b10200080d2d2c452320b12a04258a5058618b1b608c59692d2c20204518
684420b001602045b04676688a4560442d2c20b003254a64b1070526232b
8a103a2d2c20b003254a64b1070526232b8a10653a2d2c20b00325472347
236120b1070626232b208a61b8ff8062b004262020108a3a204620b81000
6357604821212d2c20b003254723476120b1070626232b236120b0806261
8a2020108a3a204620b8100063576048212d2c20b003254a6420b1070626
232b208a61b8ff8062b004262020108a3a2f3a2d2c20b003254a642069b0
05268b208a61b8ff8062b004262020108a3a2f3a2d2c462346608a8a4623
20468a608a61b8ff8062232010238ab14b4b8a70456020b0005058b00161
b8ffc08b1bb0408c5968013a2d2c01b00643b00743650a2d2c4b52584544
1b2121592d2c4523204520b10405258a505826618a8b1b26608a8c59442d
2c0110203c003c2d2c01b10b0a432343650a2d0000010000000500006d4a
3e3e5f0f3cf50019080000000000a7cf816a00000000c142e83dfb15fc7b
0b1309280000000900010001000000000001000008c6fc7b00000bd8fb16
fa8b0b130001000000000000000000000000000006f30600010000000000
0600000002880000028800e102fd006f050f000f050f00d80559000c0594
004a01d5006f029a007b029a004a03db006e065c00de028800c804a10094
028800c8043200de050f0082050f012e050f00aa050f00d0050f0069050f
00f9050f0089050f00de050f00b1050f009c028800e1028800e1065c00de
065c00de065c00de0360002506de005d05850011049a00bf0589006805fe
00bf045600bf044a00bf05c8006805e100bf024e00be027dff48053900bf
044400bf06e400bf05e900bf06370068046c00bf06370068050f00bf044f
0064050f0012058b00b3053b002406d800020502001004fc001104d6005f
029a00c5043200de029a004a050f00690400005604ea018b046b00670509
00c50419006f0509006f0475006f02f1005004fd006f04f700c5025000c5
026fff6704ad00c5025000c5077800c504f700c504ea006f050900c50509
006f034600c50414009d02fe004504f700b904240012062a000c04e80058
042e00100496007b029a001902fd014d029a0088050f0069058500110585
001105890068045600bf05e900bf06370068058b00b3046b0067046b0067
046b0067046b0067046b0067046b00670419006f0475006f0475006f0475
006f0475006f025000940250ffe80250ffcb0250000c04f700c504ea006f
04ea006f04ea006f04ea006f04ea006f04f700b904f700b904f700b904f7
00b9050f00e402370040050f00cd050f00f7050f00dd050f01cf050f00d8
04c900c5050f00cc06d800630675003104ea018b04ea0159065c00de0741
001206370068078500de065c00de065c00de065c00de050f0050050300c5
053e00de067500de076c00de063e004a04a000de0360007b0360007b0702
009a06cf006704ea006f03600025028800e1065c00de067500b10320ff9e
065c00de072200de0431006f0431004a080000f302880000058500110585
00110637006808000068076d006f040000690800006302fd006f02fd006f
028800c8028800c8065c00de060700de042e001004fc0011043200de050e
ffe302a7006f02a7004a050f00e4047c00de028800c802fd006f0819000c
05850011045600bf05850011045600bf045600bf024e0093024effca024e
000b024effe7063700680637006806370068058b00b3058b00b3058b00b3
025000c504ea011704ea012804ea013404ea012804ea021204ea019204ea
01fe04ea00ed04ea01f404ea01170444ffe30250ffe5044f00640413009d
04d7005f0497007b02f9014d05feffe204d2006d04fc0011042e0010046c
00bf050900c5065c00de065c00de03600103036000950360009e06690063
0669006306690063050f005005c8006804fd006f024e00be044f00640413
009d058900680419006f058900680419006f0509006f029a006f04000056
050f020c05850011046b006705850011046b006705850011046b00670589
00680419006f058900680419006f05fe00bf0631006f05feffe2045600bf
0475006f045600bf0475006f045600bf0475006f045600bf0475006f0456
00bf0475006f05c8006804fd006f05c8006804fd006f05c8006804fd006f
05e100bf04f7ffcb0651003104f70000024effdb0250ffdc024effe70250
ffe8024effdb0250ffdc024e00870250008204c400be04a100c5027dff49
026fff67053900bf04ad00c504ad00c5044400ac02500094044400bf0444
00bf0250008f0250008f044400bf037800c5044400bf031600c505e900bf
04f700c505e900bf04f700c505e900bf04f700c505ed004a05e900bf04f7
00c50637006804ea006f0637006804ea006f0637006804ea006f050f00bf
034600c5050f00bf034600b6050f00bf0346009a044f00640413009d044f
00640413009d050f001202fe0045050f0012049c0045050f001202fe0014
058b00b304f700b9058b00b304f700b9058b00b304f700b9058b00b304f7
00b9058b00b304f700b9058b00b304f700b906d80002062a000c04fc0011
042e001004d7005f0497007b04d6005f0496007b050900000597001904a7
00bf050900c5048e00bf03f400cc05890072058900680442006f05feffe2
06fb001904a600630509006f04b9006f04560031056c007204370094044a
ff9e05c800680542000c074700c5033400ad02f10019055000bf04ad00c5
02e4001904c1002d088200ad05e9ffa804f700c506380068063700680503
006f087b00690723006f056a0019050900c5051500bf044f00660413009d
04a700310438002502fe00450560001902fe0045050f0012069500b305da
00b90644003e05b600ad051cffdc0560000104d7005f0497007b0475005d
047500880419006304250075050f00aa050f00f903cc00a703aa003104d8
00c5024400de039100de05280094028800e10a2600bf0a4900bf0924006f
06ab00bf068700bf043e00c5081100bf07e900bf06f100c505850011046b
0067024effca0250ffcb0637006804ea006f058b00b304f700b9058b00b3
04f700b9058b00b304f700b9058b00b304f700b9058b00b304f700b90475
009105850011046b006705850011046b00670741001206cf006706710068
059d006f05c8006804fd006f053900bf04ad00c50637006804ea006f0637
006804ea006f0475005d04190050026fff67046b003104de006f04de00c5
050900c5041900620475006f0509006f0509006f04750091047500910650
008e03cf006f03cf007b0556007b04a0006f0328ffb704fd006f04fd006f
04b1006f045100000444003104f700b904f700c504f700c50315003102f7
00bf0347007b040c002504250019026300c5054100c5077800b9077800b9
077800c50509ffc9051000c5050300c504ea006f067b006f0675006f0613
00630346002803460028036b0028034600c5034600c5034a00c5034a0028
046700c5046700c50413009d0366ffab0379ffdc0397ffab042bffd602fe
005002fe0045054d00250547005604c5002b0424000c062a000e042e000c
03e2000c0497007b0597007b04190050044a0038038b0056038b002b038b
003803e2006f054d006f043300c504a0006304bd006f04fe00c503e1ffd6
04ad002703b000c50509006f03aa004403aa002b0853006f07fa006f0960
006f06580045059f0045070a0045031100730311007301f8000c02130073
021e00250290002502ce007303ec001a02a7000e0250007b040c007b0288
00c8028800c8028800c8028200a702820082029c0056029c004a03370025
033700940337005d0337005d01ee00ad04ea018b04ea018b01ee00ad04ea
013404ea018b04ea018b034700c5034700c50250007b0250007b03c30094
03c3009403c3009403c300940217ff8603080000017a007302c300730364
006f029c003103800025038000250380002503800025038000250000fc4b
0000fcf80000fc2e0000fc3f0000fc700000fb170000fc3f0000fd290000
fc700000fd260000fca90000fc630000fc2e0000fd420000fc950000fb99
0000fc2e0000fc3f0000fd290000fd290000fd290000ff3c0000fca70000
fc9b0000fc7c0000fd5a0000fe140000fe5e0000fd020000fc7c0000fc7c
0000fc7c0000fc7c0000fe2c0000fe2c0000fd290000fc700000fca90000
fd290000fd3b0000fd0d0000fd420000fc7c0000fbdc0000fc2e0000fc2e
0000fc3f0000fc3f0000fc3f0000fc4b0000fb170000fb170000fb860000
fb860000fb170000fb160000fb720000fd170000fc7c0000fc7c0000fbdc
0000fc860000fd290000fb170000fb170000fe2c0001fc020000fd7f029a
0094029a009404ea0222028800e104ea021304ea00ea05850011052f000c
06b9000c032a000c06e7000c068c000c06fb000c02f1ff9e05850011049a
00bf041300bf059a0031045600bf04d6005f05e100bf06380068024e00be
053900bf0534001306e400bf05e900bf04de00250637006806130050046c
00bf04bf003e050f0012051b001a05a3003e0502001005db000c065c004a
024e000b051b001a05bc00840438006f04fa008702f100c504de00b905bc
008404d200c50493000604b9006f0438006f0516002b04fa008704ea0088
02f100c5045d00c504c1002d050e00c50464000004a0fff504ea006f04f7
00c504a7006f0563006f0450002804de00b9062b006f046300070650005d
072e006f02f1000c04de00b904ea006f04de00b9072e006f0425006f04fd
006f05170004068d000c0517000406cc0063071500120560006f044a00bf
0444006305030000050f001904630044045d005604d200a00419006f0456
00bf065c000c041300bf04d20069044f0064024e00be024e000b027dff49
07db001f07bd00bf0619001304be00bf0522004a05e200bf0585001104a7
00bf049a00bf041300bf0619004a045600bf068900380453004105ed00bf
05ee00bf04be00bf059d001f06e400bf05e100bf0637006805e100bf046c
00bf05890068050f00120522004a058b003e05020010062600bf05090050
079d00bf07e100bf056c0013066f00bf048e00bf04d2005607b900bf04f6
0019046b006704c5006f043300c503f400c50560004a0475006f05d20031
03d80056050300c5050300c5044c00c504b3002505cf00c5050300c504ea
006f050300c5050900c50419006f03f4000c0435000c0675007b04e80058
055900c50431005006bf00c5071600c5047c001305c900c5040d00cc0412
0056068300c5041500250475006f04f7000003f400c50412006f0414009d
025000c50250000c026fff670669002506b900c504f70000044c00c50435
000c050300c5054100000469001906710038059c0033041300bf03f400c5
0482001903f40031050300bf045d00c506fc0038064400310453004103d8
0056051c00bf048800c505cd00bf055600c504dd0013044c000005890000
04bb000c062600bf054800c506c600bf057900c5083200bf071000c50631
006f04f7006f058900680419006f050f001203f4000c04fc001103e2000c
04fc001103e2000c054d0010050b005806fe000c058b000c054d0050047b
00500509005004310050050900bf043100c506dd003005c2001906dd0030
05c20019024e00be0689003805d2003104cc00bf044a00c505e100bf04fe
00c505090050043100500000025d0000010600000133000001300000025d
000001b1000001b1000001de000001dc0000ff8700000106000001d00000
0299035e0063000001de020600ad000004810000003e01ff006305290075
04800025036a00190402000c05ae004a028f000c028a001305b2004a0522
006f028a002b0439001f049300250444006305b400500547005d027e000c
034e00250551001304ceffe2043100250494003103e300060499001f0554
004a0414003805bb0075058d001904ed000c04ee002b04cb002b0238007b
03d3007b0400000008000000040000000800000002ab0000020000000155
0000050f0000028800000100000000720000000000000000000000000000
0000000000000000029a006f029a006f050f00f70800006304a0014d0400
0056028800c802fd006f02d900c502ab00f3055500f3029a00de00000000
0000000000000000000000000000000000000000000000000ad8000c029a
00940456009406120094029a0063045600630612006302d2001905c80096
042500de036000250400005604b9000c03b80019075400ad029a006f0000
fd970360006803600060036000b90360007303600098036000780360006e
0360006a0360006a0360006a01ce006301ce003e03110073036000680360
0103036000950360009e03600060036000b9036000730360009803600078
0360006e0360006a0360006a0360006a01ce006301ce003e0591006305a6
0000057e006f050f00f7077800c5068a004a0a8d00ca081d00bf085e0031
087c00de060000130600001305e7008807610063052e006f060000130600
0013050900ad04d20056063e0063063000220630002208f8003105240018
070900ea05a2008805a200620566ffc305a10097064b002504b9000007d5
003e068e00ea07bc00bf06d8006305cd003105a300ea073b008807810031
07450077064100ea050f00bf050f00bf0675007b0bd800c5053a00240528
006f041900560702009a0702009a04a800300335007b053900bf05850011
06650025056d003306d4006103e7006f04940042069f0025054f00de0859
00630497006f056900760555008403b4004904dc0047078400de043d0128
078400de043d012809a300de043e012805f600de05f600de05f500de05f5
00de078400de078400de065c00de065c00de078400de043e0128078400de
043e0128078400de078400de078400de043e011c078400de043e011c043e
0094078400de078400de078400de078400de09bc00de09a300de054900de
057e00de057e0128057e00de057e0128057e00de078400de07dd00de07dd
00de078400de078400de078400de078400de078400de078400de03780128
03780128078400de078400de0378012803780128078400de062b01280784
00de078400de062b0128078400de062b0128078400de078400de078400de
09a300de078400de078400de062c0128078400de062c0128078400de09a3
00de062c0128068100de068100de068100de068100de078400de078400de
09a400de09a400de043e011c043e011c078400de043e0128078400de043e
0128078400de078400de078400de062c0128078400de062c0128062c0128
071700de05bc00de054f00de054f00de07cf00de072200de065c00de065c
00de055100de065c00de065c00de055100de065c00de076c00de065c00de
065c00de043200de065c0108047c00de067500b1067500b1078500de065c
00de065c00de065c00de065c00de02fd014d040c00de04a0014d05b000de
065c00de065c00de065c00de065c00de06d800de090f00de04ea00de0722
00de095900de04ea00de04ea00de04ea00de065c00de065c00de035f014d
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065d00ad03f3014d065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de08f200de08f200de046f00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00c5065c00c5065c00c5065c00c5065c00c5065c
00c5065c00c5065c00c5065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de04a0012804a00128065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de078400de078400de065c
00de065c00de050300de065c00b0065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de0391014d065c
00fb065c00de07fb00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de0b8800de0b8800de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de065c00de
065c00de065c00de065c02cc065c00de065c00de065c00de065c00de043e
018b043e00c5043e018b043e00c5065c00de065c00de080000880800007b
0800006f08000088080000880800007b0800002508000088080001b30800
019a080001b5071d0111080001c008000163080001550800017e08000094
08000094080000940800009408000094080000880800006f080000880800
006f0800017e0800007b08000088080001c0080001550800017e0800018c
080001630800009408000111028800000800019a08000000080000000800
03b60800039d0800004a0800004a080003b60800039d0800004a0800004a
080003b60800039d080003b6080003b60800039d0800039d080000000800
00000800000008000000080003b6080003b60800039d0800039d08000000
080000000800000008000000080003b6080003b60800039d0800039d0800
039d0800039d0800039d0800039d08000000080000000800000008000000
080000000800000008000000080000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
080000000800000008000000080000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
0800000008000000080000000800000008000000080000000800004a0800
004a080003b60800039d08000000080003220800039d0800032208000322
080000000800000008000000080003220800032208000322080000000800
000008000000080003b60800032208000322080000000800000008000000
080000000800000008000000080000000800000008000000080000000800
000008000000080003b60800000008000000080003b60800ffcd0800ffcd
0800ffcd08000000080003b608000400080003b6080000000800039d0800
04000800039d080000000800039d080000000800039d0800000008000000
080000000800000008000000080000000800000008000000080000000800
000008000000080000000800000008000000080000000800040008000000
08000000080000000800000008000700065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de065c00de065c00de040c00de
040c00de065c00de065c00de040c00de040c00de065c00de065c00de065c
00de065c00de046800de046800de065c00de065c00de0468010c0468010c
071400de071400de065c00de065c00de046800de046800de065c00de065c
00de0468010c0468010c071400de071400de065c00de065c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de065c
00de065c00de065c00de065c00de065c00de040c00de040c00de08000000
08000000080000000800000004bc00de04bc00de04bc00de04bc00de0800
010008000100065c00de065c00de065c00de065c00de047c00de065c00de
065c00de065c00de065c00de065c00de065c00de065c00de065c00de051b
018b051c01aa051b010f072000bf0509006f0444ffcb0250ffcb06eb0012
02feffde044f00640413009d050f001202fe004504fd006f050f002e054d
006f0800000008000000080000000000018a05280050052e005002ca0050
05850011046b00670741001206cf00670637006804ea006f06d80002062a
000c06d80002062a000c06d80002062a000c04fc0011042e001006690063
06690063066900630669006306bf007b0360014d0360000006bf005606bf
00560606000606bf00c506bf002506bf007f06bf007b06bf007b06bf007b
050f0076050f003600000000051000620a2600bf0a4900bf0924006f0000
000000000064000000640000006400000064000000640000006400000064
000000640000019400000194000001940000019400000194000001940000
019400000194000001c2000001c2000001c20000027c000002ba00000378
00000452000004f00000059600000596000006060000074c0000074c0000
074c0000074c0000074c0000074c0000074c0000074c0000074c0000074c
0000074c0000074c000007fa00000854000008a800000954000009ac0000
09d8000009d8000009d800000a0a00000ade00000b6600000b6600000bf0
00000bf000000bf000000cba00000d0800000d0800000d0800000d080000
0d0800000db400000db400000db400000db400000db400000db400000db4
00000db400000ea800000f6400000ff6000010b000001190000011900000
128200001282000012c0000012c00000135c000013840000142e000014bc
0000156c00001626000016260000169000001754000017d40000185a0000
18da000019fe000019fe00001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a9800001a9800001a9800001a9800001a9800001a980000
1a9800001a9800001a9800001a9800001a9800001a9800001a9800001a98
00001a9800001a980001000006f3032000c8005a00050002001000160096
00000784065f000300010000000c00960001000000000000005a00000001
0000000000030018005a0001000000000004001800720001000000000006
0018008a0001000000000007003900a2000300010409000000b400db0003
0001040900010030018f0003000104090002000e01bf0003000104090003
003001cd0003000104090004003001fd00030001040900060030022d0003
0001040900070072025d436f7079726967687420a9203139393320426967
656c6f77202620486f6c6d657320496e632e20416c6c2072696768747320
72657365727665642e205061742e204465732e203238392c3432302e2050
6174732e2050656e642e47574141574c2b4c756369646153616e73556e69
636f646547574141574c2b4c756369646153616e73556e69636f64654757
4141574c2b4c756369646153616e73556e69636f64654c75636964612069
73206120726567697374657265642074726164656d61726b206f66204269
67656c6f77202620486f6c6d657320496e632e0043006f00700079007200
69006700680074002000a900200031003900390033002000420069006700
65006c006f00770020002600200048006f006c006d006500730020004900
6e0063002e00200041006c006c0020007200690067006800740073002000
720065007300650072007600650064002e0020005000610074002e002000
4400650073002e0020003200380039002c003400320030002e0020005000
6100740073002e002000500065006e0064002e0047005700410041005700
4c002b004c0075006300690064006100530061006e00730055006e006900
63006f006400650052006500670075006c00610072004700570041004100
57004c002b004c0075006300690064006100530061006e00730055006e00
690063006f0064006500470057004100410057004c002b004c0075006300
690064006100530061006e00730055006e00690063006f00640065004700
57004100410057004c002b004c0075006300690064006100530061006e00
730055006e00690063006f00640065004c00750063006900640061002000
690073002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00660020004200
6900670065006c006f00770020002600200048006f006c006d0065007300
200049006e0063002e00000040ffaf8c2511807f19117f7e21117e422311
454223114442231143422311404223113f42271142412311c041d041e041
f0410495b12511bf2c2811c02c2811c3c43111c2c42611c1c42611c4c52c
1127281b1128291911292c28112a2c28112d2e31112c2e26112b2e261136
342c1135342c1133342c1131323111303227112f321e1132343011505d18
115f5416115e5444115d541e115c540e115b5431115a5412115954091158
540c1157540c11565444115554721153480f1152480f1151480b1150480d
114f483c114e4819114d4827114c4822114b4819114a48801149484f110b
220b23028314831502001400151014101520142015e014e0150809001440
80001502083b183b19026348734802090356135623563356405650560639
15562556355645565556635673560703491349a349036349734902092355
3355435553550439334843480203481348a348036348734802220820081e
081c081a08180816081408120810080e080c080a08080806080408020800
080046460000000050011db0324b5258b0801d594bb0c063004b6220b0f6
5323b8010a515ab005234201b0124b004b5442b9000107c0858d16161070
3eb1060645b00860442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18b148
484569b0408b44b154544569b0408b447374755e735e7374755e735e7373
5e735e7374732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00
b0024568b06d4568b0408b60b0202344b0064568b06e456860b0222344b0
004568b0704568b0408b60b06f2344012b2b2b2b2b2b2b2b2b2b2b2b2b2b
b02c4b5258b0c5b0c04459b0234b5258b0c5b0804459b0194b5258b0c5b0
4044592b2b2b2b2b2b2b00732b2b2b2b2b2b2b2b2b2b00>
[6809 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3508 68 <00020067ffe704390456001d00270080405e0c03001205131c0310122a03
251234124712550750217f078f07bc0bc112d804d107d012d121e804e207
e312e22117203c0002080e430f0c410802110717401c0b2643020b8f2901
0e09001e320f0e001a021a0e7f1501152332100501052f5deddd5d39c45d
fd393c2f5d003fed3fed3f1239edd4ed2f1239ed3130015d250623222635
342421333534232207353633321615111433323717062322031127220615
1416333202f5b1a487b2012b01182ec599b5c7b0b5ac680d190e43518a43
3fa4c964487b8aa3a981b2bf83bd60a351a5acfe14a9046d20010e011902
7a654762>PBAAAA+LucidaSansUnicode AddT42Char 
1 4272 72 <0002006fffe703e6045700110016008b4071240e330e440e400f43165209
6816900f9b16a10fac16b003b507b20ebb16c203c407c50ec916d009d60e
d014d816e109e60ee114e816f8161c0d41121541120208071142000f4102
0b10186f187f188f1804133211200c400c6f0c7f0c8f0c9f0caf0cbf0ccf
0c090c12340d33100501052f5dededdd5dc4ed5d003fedd4ed3f1239ed2f
ed3130015d250623220035340033321211072112213237012110232203e1
c68df1fed2010bd0c5d701fd532b01507bb3fd6001dfe2e3233c013ffef7
013cfee7fefe3cfe7d4201d5012f>PBAAAA+LucidaSansUnicode AddT42Char 
1 4800 78 <000100c500000485062b000a006840462005250631053606420542064207
520554066206730683069106ab04b506c506f00611060506073208080906
05c50403040609030a050406020008070a0804040308030932002fed32dc
11392f003f3c3c3f3f3c1239393987052efdc0872efd08c03130015d3311
331101330901230111c5c501ccd4fe490212fcfe01062bfc04020ffe05fd
bd022dfdd300>PBAAAA+LucidaSansUnicode AddT42Char 
1 4996 80 <000100c5000006bf0457001b0057403b0406040a1406140a2606260a3606
360a450a09114409071844070300050701060e1500080f1d101d2f1d030c
320e07133215031a321000800002002f5ded32d4ed32d4ed5d003f3c3c3f
3f123939ed3fed3130005d33113315363332173633321615112311342322
071123113423220711c5c590e2da4f8ce08f9fc69399a8c69695aa043ecc
e4e4e5a998fcea02f7bad9fd2802f7bbdafd2800>PBAAAA+LucidaSansUnicode AddT42Char 
1 0 0 <0002010000000500050000030007003b402100020107050006075c000409
5c07010d0008030205060704005106020d5100040d2b2b11123911391239
003f2b2b113911391112393130015d211121112521112101000400fc4003
80fc800500fb00400480>PBAAAA+LucidaSansUnicode AddT42Char 
PBAAAA+LucidaSansUnicode /CharStrings get begin
/a 68 def
/e 72 def
/k 78 def
/m 80 def
end
PBAAAA+LucidaSansUnicode /Encoding get
dup 97 /a put
dup 101 /e put
dup 107 /k put
dup 109 /m put
pop
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode /PBAAAA+LucidaSansUnicode findfont ct_VMDictPut
/SVAWOS+LucidaSansUnicode*1 
[97{/.notdef}rp /a 3{/.notdef}rp /e 5{/.notdef}rp /k /.notdef /m 
146{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
2.57084 7.91113 mo
(make)
[5.64003 3.36001 3.48 0 ]xsh
grestore
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 404 16 <00010094021f040c029a00030014400a013e00000320030203002f2f5d00
2ffd313013352115940378021f7b7b00>SVAWOS+LucidaSansUnicode AddT42Char 
1 450 19 <00020082ffdb048e05ed000b0013006840572a0d2a0f2611261338013805
3707370b990299049608960a940d940f9b119b13a50eaa12b50eba12e401
e405eb07eb0bf401f405fb07fb0b1c104106050c41000d0e3420097f099f
09bf090409123400031003400303032f5deddd5ded003fed3fed3130015d
05220011100033320011100027201110212011100288e9fee3011de9ea01
1cfee4ea0135fecbfecc2501ab015e015e01abfe56fea1fea2fe55940275
0275fd8bfd8b>SVAWOS+LucidaSansUnicode AddT42Char 
1 636 20 <0001012e000002de05d50005001f4012023e030404000c02053210003f00
ff0003002f5dfdcd003f3fd4ed31302111233525110218ea01b005347c25
fa2b>SVAWOS+LucidaSansUnicode AddT42Char 
1 698 21 <000100aa0000042205ed0019006d4050dc0fe50ff50f03281259076a076a
10790276108802851093059616c902cb13db12d016e510f610100b7e0c09
411106000e0501177e000c180b0634180b1140175017d017e017f0170517
7f018f0102012f5dcd5ddd3939ed2f2f003fed323f123939eddced313000
5d015d33353625373635342623220735363332161514060f0106072115aa
56010671da958399d1c5c3d0fb7fad4ced250283adc9ed65c5c27c8e77ae
5de0b985ce9341c9b7ad>SVAWOS+LucidaSansUnicode AddT42Char 
1 1106 23 <000200690000048205c8000a000d00654044790d890d990deb0dfa0d0506
0b160b240b350b430b540b660ba30bb40bc40bd40be50bf60b0d0d0bc203
040303060b43090101000404000c0d0d040130070609100301032f5ddd3c
c4fd3c392f003f3f12392f3cfd3c392f8705fd04c43130015d005d211121
35013311331523110121110303fd66029ab9c6c6fd6e01e601a3950390fc
7ca1fe5d02440292>SVAWOS+LucidaSansUnicode AddT42Char 
1 1264 24 <000100f9ffdb041c05c800170058403e2b083f0437124f04461255125014
8b119a11a612b915c504c614df110e094110017e000341100c160d0f7e0c
04102f0b0e06340b2f1301133f01400102012f5ddd5d39edc42fed003fed
3f1239edd4ed2fed3130015d173516333236353426232207112115211120
001514042122f9938592a7ecdf343902edfdc0011d0140feddff007206b0
3bac97a2ab0702d0acfe7afefae8d8f5>SVAWOS+LucidaSansUnicode AddT42Char 
1 1430 26 <000100de0000049405c8000a003d402869036f047f04760988038f049c03
9f040808047f0604000c0a3603040004311f00010008100501052f5ddd39
5ded2f1239ed003f3ffd3c3130015d213e01370121352115000301341d6b
880194fd0603b6fdc744adfcdc028ab9b9fcb9fe3800>SVAWOS+LucidaSansUnicode AddT42Char 
1 1868 39 <000200bf0000059605c8000c001800544044020400050609020a10041505
1509100a27044a10491452045505540a7a098a0994049305a404c808d605
15184201020d420008123610072007a007c607f00705070d34002feddd5d
ed003fed3fed3130015d3311213204171611100706042325212037361110
272e012b01bf01ecdc010f639db864fef9c5fee3010d012078817f4dd6d7
ad05c86275bafed0fea9d575669d9ba501160105955b4300>SVAWOS+LucidaSansUnicode AddT42Char 
1 2132 41 <000100bf000003fa05c80009002a40180842050442050001020008060616
062606030602050934002fed32dd395d003f3f1239ed2fed313033112115
211121152111bf033bfd970206fdfa05c89dfe109bfd6000>SVAWOS+LucidaSansUnicode AddT42Char 
1 2216 42 <00010068ffdb051705ed00170051403b0f030f071f031f0744125c035b07
7403740785038507b509b7120d0b800a0d4216020803134202090b163410
1740177f17c617041710360f0501052f5deddd5dedc4003fed3f1239edd4
ed3130015d25042320001110002132171524232200111000213237113305
17fef3c8fe9ffe87017f015bdff4fecea3f0fef7011c0100697ad1284d01
9101780172019743c268febbfed8fedbfeba2501e200>SVAWOS+LucidaSansUnicode AddT42Char 
1 2520 47 <000100bf0000042b05c800050015400a010203420008040334002fedcd00
3fed3f3130331133112115bfd2029a05c8fad59d>SVAWOS+LucidaSansUnicode AddT42Char 
1 2570 48 <000100bf0000062605c8000c009a406a070214022502370248095a0a6804
79048b049b0ab80ac80a0c440359087508790b8408890ba503b90bc90bd4
03e403f4030c03020304c508080908c5040403090203310a0b0a660b010b
3102020303080b0302090a0a00040202070008090a020304050b0832060b
c5002feddded111739003f3c3f3c12392f3c12173987042efd5d87052efd
c0c087042efd87052efd08c03130005d015d331121090121112311012301
11bf0123019a01a60104c4fe68cbfe7405c8fb870479fa3804b4fbaf0454
fb49>SVAWOS+LucidaSansUnicode AddT42Char 
1 2918 51 <000200bf0000044805c8000c00150040402c060515052f0f3c0f4f0f5a13
82059605a605b708fb130b0d420b15420b00010200086f17011136070d0b
34002fed32dded5d003f3f1239ed2fed3130015d33112132161716151400
212319013332363534262b01bf0193aebd3c4ffec0fee45d55bbcca1ba81
05c839485fa4ecfef4fdb402ebac9e847200>SVAWOS+LucidaSansUnicode AddT42Char 
1 3056 54 <00010064ffdb03e905ed002300614045071a171a6920740e7417850e8617
07390b341d451d58085c0b941aab080701800003420b081a1d0410220913
7f121542100318330d130635130d1f200130014001600104012f5ddd3939
ed2f2fed003fedd4ed3f121739edd4ed5d3130005d373516333236353426
2f012e0135343633321715262322061514161f011e01151404232264faa2
7b97638566bd9bf8c0abbeea736d8e688a6ac098fee4eb961cd074836957
7a4b3b6cbf7eacdd39c05c74584a724f3c6dc288c1ea>SVAWOS+LucidaSansUnicode AddT42Char 
1 3258 55 <00010012000004fe05c80007002940190601420302000810056f09020506
341f0201020f01100102012f5dc45dfdc45d003f3ffd3c31302111213521
152111021ffdf304ecfdf3052b9d9dfad500>SVAWOS+LucidaSansUnicode AddT42Char 
1 4086 71 <0002006fffe70444062b000e00180068404f241734124512451559046804
9b089813ad08a813b904bf10c302c618da15ef10ff10f81312167e0b0109
030b0008114109070c006f1a010b1801326f0e8f0ebf0ed00ef00e050e14
340f06100602062f5deddd5dfd3c3c5d003f3fed3f3f123939ed3130015d
21350623220235101233321711331103262322061510333237037e78f2c4
e1ffd0c17fc6c699898794fca49dcce5011ef8010f014a940269f9d5033b
87e2cffe83b3>SVAWOS+LucidaSansUnicode AddT42Char 
1 4956 79 <000100c50000018a062b0003000fb6010000080332002fed003f3f313033
113311c5c5062bf9d500>SVAWOS+LucidaSansUnicode AddT42Char 
1 5308 82 <0002006fffe7047b0456000b001700584046420e4d104d144216980e9710
97149816a90ea610a614a916f90ef710f714f91610124106070c41000b6f
198f19020f3400092009300940099f09bf09060915340f03100302032f5d
eddd5ded5d003fed3fed3130005d05220011100033320011100027323635
34262322061514160275effee90117efef0117fee9ef93a2a29393a1a119
0132010601060131fecffefafefafece94dcc8c8dbdbc8c8dc00>SVAWOS+LucidaSansUnicode AddT42Char 
1 5484 83 <000200c5fe75049a0456000e00180068404f341340134815570667069c0a
9913a90aa913b606b70fc603c618d615e40ff20ffc131111410d03050b0b
167e05070106000e6f1a0114346f088f08bf08d008f0080508030f0d3210
007000800003002f5ded3232dd5ded5d003f3f3fed3f123939ed3130005d
13113315363332121510022322271901163332363510232207c5c579f2c4
e1ffd0c180988a8894fca59dfe7505c9cce4fee2f8fef2feb594fdfa028e
88e3ce017eb3>SVAWOS+LucidaSansUnicode AddT42Char 
1 5972 87 <00010045ffe702ae05160014003f402828043904b411c511dc03ed03060f
06410c0b09061241020b0f1601140c0f32140e096005700502052f5d3ccd
39fd3c2f5d003fed3fc43cfd3c3130015d21062322263511233533353715
211521111433323702a95b4396a88888c5011cfee4b8273819ac99027e94
c513d894fda6d50d>SVAWOS+LucidaSansUnicode AddT42Char 
1 6654 92 <00010010fe750422043e0007006b404b480059008d000305041604250435
0465047504890184049504a404b604c304d704e104f5040f010102040403
0005c5060706040332010203050603020600070e01081f09010104070306
022fdd17395d003f3f3c3f173c8705fdc0872efdc008c008c03130005d01
5d01130133090133010104b0fe5cd50137014cbafdaffe75018b043efcce
0332fa37>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/hyphen 16 def
/zero 19 def
/one 20 def
/two 21 def
/four 23 def
/five 24 def
/seven 26 def
/D 39 def
/F 41 def
/G 42 def
/L 47 def
/M 48 def
/P 51 def
/S 54 def
/T 55 def
/d 71 def
/l 79 def
/o 82 def
/p 83 def
/t 87 def
/y 92 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 100 /d put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 
/five /.notdef /seven 12{/.notdef}rp /D /.notdef /F /G 
4{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 
12{/.notdef}rp /a 2{/.notdef}rp /d /e 5{/.notdef}rp /k /l 
/m /.notdef /o /p 3{/.notdef}rp /t 4{/.notdef}rp /y 
134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
2.57084 15.7111 mo
(type)
[2.27996 3.12002 3.71999 0 ]xsh
2.57084 23.5111 mo
(model)
[5.64003 3.71999 3.71999 3.36004 0 ]xsh
342.771 23.5111 mo
(MS-151)
[5.15994 3.24002 3.47998 3.84 3.84003 0 ]xsh
381.171 23.5111 mo
(MS-111)
[5.15994 3.24002 3.47998 3.84 3.84003 0 ]xsh
420.171 23.5111 mo
(STG74L)
[3.24002 3.84 4.32007 3.84003 3.84 0 ]xsh
458.211 23.5111 mo
(STD720)
[3.24002 3.84 4.43997 3.84003 3.84003 0 ]xsh
2.57084 31.5511 mo
(FS)
[3.23997 0 ]xsh
50.4508 31.5511 mo
(kPa)
[3.48 3.35996 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Consolas Initial
ct_T42Dict begin
-0.43 -0.301 0.676 1.008
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Consolas
Type42DictBegin
[<00010000000c000c000c000c4f532f324958d8bf000000cc000000606376
7420e245c84c0000012c000005126670676d01980ece0000064000000917
676c7966ff43a638000080680000079668656164e8d572d100000f580000
00366868656109480af700000f9000000024686d74784468e0b700000fb4
000029fa6c6f63610041200c000039b000002ac06d617870178f1a310000
6470000000206e616d657448dfc7000064900000038770726570bd99a16d
000068180000184e67646972000000000000000000000000000304660190
00050008059a05330000011f059a0533000003d1006602000809020b0609
020204030204e10002ff4000fcff00000009000000004d53202000400000
feff05f1fdf1015e075c02026000019fdfd7000003ec051b000000200003
0000076c0337fe5c0000000000000000000000000000005200660073008a
009600a600d501080133014d0073008500a000ae00c100ca00f00106011d
014c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000051b00120000ffeefe7ffffbff2905f2fee5fe5c
0617ff0605d7ff1403ec00120000ffee0585000cfe66fff6fe7ffed9ff29
04c3fe5cff000666ff29fff002400008051b00120000ffee047b0012ff29
fff80566058505a805d10337fe2900000000079e00000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000004d0052005f00650066006a0066006c0070006a
005c005d005e00640069007000710073007400760079007a007b007d006e
0077007b007e0082008300860088006e007300770079007a007b007f0081
008300870089008b008c008d008e008f00810082008500870088008b008d
008e008f0089008d008f007f0081008200830085008600870089008a008b
008c008d008e008f00910093009600980099009a009b0090009100920093
009400950096009700980099009a009b009c009d00910093009400950096
009700980099009a009c0090009100920093009400950096009700980099
009a009b009c009d009e009f00a000a100a200a400a600a800aa00ae009e
009f00a000a200a400a600a800aa00ab00ac00af00b1009e00a200a600a8
00ae00d500d500e100fe00fb00fc00ef00f10108010a0112011a0133013d
014d014e0065006800730074005c005e006e0075006f0076007300900091
007f00800085008a008b007d00870088007f008600880089008b00900091
00920081008400850086008700880089008a008c008d008e008f00910092
009400950098009e00a400a600930099009c009d00a000a100a200a300a4
00a600940095009600980099009a009b009c009d009e009f00a000a300a4
00a500a6009400950096009700980099009a009b009c009d009e009f00a0
00a200a300a400a500a600a900ab00b000b200b300b400b600b700ac00ae
00af00b200b400b500ac00a700a800a900aa00ab00ac00ad00ae00b000b1
00b200b300b400b500b600b700a800aa00ab00ac00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ba00bb00bc00bd00c100b800b900bc
00b800b900ba00bb00bc00bd00be00c400b800b900ba00bc00bd00be00c1
00c300c400c500c600c700cc00cd00d500d700c700c800cb00d100d200d3
00d500d700d900e200ee00fa00df00e700ef00dd00e100e500e600e800eb
00ec00ee00ef00f000f100f600fc00fc00fe00fc01060108010a012d0112
0119011d012501330139014c000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0096000000000000000000000000000000000000026201cc02f8fdfe075c
000000000000000005850593033d024c0000fff0005c005c008efe600000
000c0630060b05fa05ef000b0535000a051b02cefff601d306e400090614
0415fff60057006200004047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2c4b5458381b2121592d2cb002435458b0462b1b21212121592d2cb002
435458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb0
02435458b0492b1b212121592d2c208a08234b538a4b515a5823381b2121
592d2c0020b200400325b0062649618b3812342d2c014623466023466123
201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353
583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042
b123018851b1400188535a58b910000020885458b202010243604259b124
01885158b920000040885458b2020202436042b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b202100243604259b94000020063b80400885458b202400243
604259595959592d2c451868234b51582320452064b04050587c59688a60
59442d2cb00016b00225b0022501b001233e00b002233eb10102060cb00a
236542b00b234201b001233f00b002233fb10102060cb006236542b00723
42b00116012d2c20b82000628a6023622d2cb0072558001b0159b0042510
b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58b0092b
5920b005254ab0042547b004254760b0062547b0806361b00225b0005558
b00325b00725496359b0082558001b0159b00425b0062549b009255cb009
255a58b0092b59b0072546b0806361b0032520b0005558631b2159612320
b0005558b080631b21b08059b0592bb006255c586959b00425202010b000
48233ab0062658001b0159b0052658b003252f598a12233221212d2cb006
25b00a2587b00625b009254ab0005358b00625b00a251bb00925b0072559
b00225b00225070cb005256323b00625636020b94000040063535821b004
26b00426b00a1bb94000040063655158b0042665b0042665b00a1bb00426
b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb0
0525b0052507595920b0005558b00525b0052587b00725b007250bb00925
10b00b25b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b
254923b00625b0062587b00a2510b00b25c15920b00051b800522378b001
61b00225b00725b0072507b00a25b00d254961b08062b00525b005250bb0
0a252338b00625b0062587b00825b008250bb00a2510b00b25c4b00625b0
062507b00925b00c2549b0032554b8ffa723792121212121212121212121
212d2c23b0005458b9400000001bb900004000598ab0005458b940000000
1bb90000400059b05b2b2d2c08b0005458b9400000001bb900004000590d
b05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d
2cb00426b00426080db00426b00426080db05b2b2d2c204569442d000001
0000000551ec05528ee45f0f3cf50009080000000000bbe31b2a00000000
cbdabb11fc8bfd95056b08170000000800020001000000000001000005f1
fdf1015e0466fc8bfe51056b000100000000000000000000000000000a4e
046600580466000000000000046600000466000a0466009e0466005c0466
006d046600c9046600cd046600420466006f046600ac046600b60466009c
046600e90466003104660077046600390466009e04660039046600aa0466
006f046600560466006d046600040466002d04660012046600000466006f
046600000466000004660000046600000466000004660000046600000466
0000046600000466000a0466ffd50466ffd50466003d0466003d0466003d
0466003d0466005c0466ffd9046600000466000004660000046600000466
00000466000004660000046600000466000004660000046600c90466003d
0466003d0466003d04660042046600000466001f04660000046600000466
00000466000004660000046600000466000004660000046600ac0466006f
046600000466009c046600000466ff0c046600e90466002d046600c20466
000004660000046600000466007704660077046600000466000004660000
0466000004660000046600000466000004660000046600390466ff9c0466
001f0466009e0466ffd90466ffd9046600aa046600000466000004660000
0466006f0466006f04660000046600560466005604660000046600000466
00000466000004660000046600000466000004660000046600000466006d
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660085046600a00466009e0466006d
04660075046600000466005e046600a0046600ac04660083046600b60466
00ac0466005a046600a00466005c046600a00466006d046600c9046600b6
0466003f046600a00466004204660025046600460466003b046600a40466
000004660000046600000466000004660000046600000466000004660000
04660000046600850466001f0466000004660029046600290466003d0466
00290466009e0466fff20466006404660062046600000466000004660000
046600000466000004660000046600000466000004660075046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600ac0466
00ac0466006a0466008304660000046600b6046600b6046600290466ff73
046600ac046600ac04660070046600000466000004660000046600a00466
0000046600a0046600000466000004660000046600000466000004660000
04660000046600000466005c0466ffb004660027046600a0046600000466
0000046600c9046600000466000004660000046600b6046600b604660093
046601210466ff4a0466003f0466003f0466000004660000046600000466
00000466000004660000046600000466000004660000046600a004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466005004660050046600890466000004660000
046600000466000004660000046600000466000004660089046600890466
008904660000046600000466000004660000046600000466000004660000
046600890466008904660048046600480466000004660135046600520466
ff070466013504660050046600e604660089046600520466ff9d04660089
04660089046600080466005e04660000046600000466005e046600c90466
000004660000046600c90466006204660000046600000466006204660039
046600390466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
00000466000004660000046601b4046602ac046601b00466000004660000
046600ee046600fa0466019a046601850466003b04660108046601080466
01ac046601b2046601b20466012f046600cb046600cb046600c404660196
046600ee0466006804660039046600ee0466003904660120046601590466
0120046601590466008f0466009c0466008f0466009c04660073046601e1
04660085046600850466fffc0466fffc0466fffc046601020466018d0466
018d0466012c046601040466012c04660104046601590466012004660159
04660120046600a2046600e5046600a2046600e5046600a4046600b40466
00b40466008d0466006d0466000a0466009e046600e904660037046600c9
0466006f0466006f04660032046600ac0466009c04660004046600310466
0077046600ae04660039046600750466009e0466006f0466005604660000
04660000046600120466003f0466002b0466000a0466ff960466ff6d0466
ff81046600000466ffaa0466ff3e046600000466ffbf04660050046600a0
046600620466003f0466006d046600810466009e04660089046600620466
007304660089046600b604660042046600a004660046046600910466005c
0466002b046600a00466005c0466009e0466003f0466008a046600290466
002904660037046600560466002704660000046600290466002904660000
046600000466000004660000046600000466000004660000046600000466
00000466ff6d046600000466018d0466018d046600fa046600e3046600dd
0466000a0466009e0466009e046600e90466000c046600c90466fff60466
006d04660077046600000466009c0466001b046600310466006f04660039
046600750466009e0466005c046600560466003904660000046600120466
007f04660065046600540466004a04660023046600520466009e04660083
046600540466005e04660000046600e9046600040466005a0466006f0466
000004660000046600ac04660000046600b604660000046600000466fff2
0466005204660004046600000466007b0466000404660039046600040466
00850466007d046600a0046600f204660017046600750466fffe04660085
046600ae04660000046600b60466002104660031046600a00466005c0466
00a0046600a00466009e0466005e0466003b046600290466004604660098
046600870466005a0466004c0466002304660052046600a60466009c0466
00540466005604660000046600f2046600000466009e046600b604660000
04660000046600ac04660000046600830466000004660000046600000466
005a0466000004660000046600a0046600230466005c046600420466006d
04660000046600000466007904660040046601e1046600a0046600000466
01c10466010204660009046600040466000c0466000c0466006a0466000a
0466001904660056046600330466006f0466007d0466007d0466005c0466
002b04660037046600e1046600dd046600250466002b0466005804660058
046600580466008704660093046600a40466002b046600b20466007b0466
007504660077046600640466005804660058046600580466008704660093
046600a40466002b046600b20466007b0466007504660077046600640466
00cd046600e3046600f604660112046600d304660125046600ee04660100
046600fc046600e9046600a6046600a6046600a604660158046600ee0466
00cd046600e3046600f604660112046600d304660125046600ee04660100
046600fc046600e9046600a6046600a6046600a604660158046600ee0466
00cd046600e3046600f604660112046600d304660125046600ee04660100
046600fc046600e904660014046600140466001404660014046600140466
000004660054046600850466006804660093046600540466008504660085
0466007f04660089046600d1046600850466008504660075046600d50466
003d0466000c046600710466007b0466003d046600370466002b046600a0
04660029046600750466005204660028046601b0046601b0046601180466
01180466fff80466fff80466011804660118046600c9046600c90466013b
046601290466011a0466011a0466013b04660129046600c9046600c90466
01ae0466000a0466000a0466000a0466fff80466000a0466000a04660000
0466000a0466000a0466000a0466000a04660000046600c9046600c90466
0000046600c90466fff8046600c9046600c904660000046600ac046600ac
0466003904660039046600390466fff80466003904660039046600000466
003904660000046600000466003904660000046600390466006d0466006d
0466006c0466ffbf0466ffcf0466006c0466ffbb0466006c046600000466
00000466008504660085046600850466fff8046600850466008504660000
046600850466008504660085046600850466000004660075046600750466
0000046600750466fff8046600750466007504660000046600ac046600ac
0466005c0466005c0466005c0466fff80466005c0466005c046600000466
00480466ffed04660000046600480466000004660048046600a0046600a0
0466006d0466ffa60466ffc90466006d0466ffb10466006d0466003b0466
00000466003b046600000466006204660038046600000466001404660014
046600140466001404660111046600c40466005c0466006a046600440466
009b0466007204660085046601db0466007b0466002e0466004e0466000e
046600640466001f046600210466002404660029046600a8046600140466
003e0466002b046600690466010804660000046600120466000004660000
046600000466000004660111046600cb046600cb046600fb046600fb0466
003204660032046600a8046600a8046600a8046600a80466001404660014
0466000a0466003204660032046600000466000004660000046602330466
0000046600000466000004660000046601e80466000004660000046601e8
0466000004660000046601e80466000004660000046601e8046600000466
000004660000046601e80466000004660000046601e80466000004660000
046601e80466015204660000046600000466015204660000046600000466
015204660000046600000466015204660000046600000466000004660152
046600000466000004660152046600000466000004660152046600320466
00770466007704660077046600560466003f046600ac046600f704660155
04660123046601370466016c0466016c0466010b04660130046601550466
014f0466015f0466018e0466010d04660132046601100466015504660110
0466015f0466012d046601280466012f046600fa0466010b046600fb0466
00f804660132046600020466000204660000046600000466000004660000
0466000004660000046600cf046600cf0466000004660000046600000466
0000046601b3046601b3046601b3046601b30466008e0466ff7204660160
046601600466017604660176046601d00466016004660160046601600466
01600466017304660173046600ec0466016e046601f1046600f1046600f1
04660000046600000466000004660000046600000466012d046600000466
00000466000004660000046600f2046600f204660085046600850466002a
0466002a0466ffa60466ffa6046601d0046600f10466016d046600f30466
017104660171046601b1046601b104660000046600000466008e04660000
0466ff7204660000046600f1046600f10466000004660000046601760466
00ca046600ca046600c9046600c90466000004660000046600460466017a
04660000046601a7046601a70466000004660000046600cf046600cf0466
0171046601a7046601a7046600e204660000046600000466000004660000
0466016c046600de04660176046601760466000304660003046600030466
002704660027046600270466004004660040046600030466000304660006
0466014b0466014b0466013c0466013c04660157046601570466012e0466
012e04660151046601510466015704660157046601450466014504660151
046601510466011d0466011d0466014b0466014b0466013b0466013b0466
0121046601210466011e0466011e04660008046600080466000204660002
046601dd046600000466008d0466008d0466008d0466008d046600b40466
00b4046600b4046600b4046600230466002304660024046600240466014b
0466000004660000046600e2046600000466009e04660020046600830466
005c04660000046600000466005a046600b60466003b0466006d0466ffcb
0466004204660004046601bb046600ac0466009c0466005a0466ffc80466
0039046600660466ffeb046600aa046600830466006f0466000604660056
0466002b0466006d046600140466006f046600a7046600a4046600300466
004f0466004f0466007d0466007d0466003c0466003c0466000004660000
046600000466000004660000046600000466000004660000046600000466
00000466ffd5046600420466001e0466fff204660039046600020466fff7
0466004f0466004f046600000466005a0466006704660032046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600a70466000004660077046600680466
006f04660000046600c90466000004660000046600000466000004660000
0466ffa60466ffbd046600300466ffd0046601220466fffe046600000466
00040466ffa6046600b604660039046600000466ffff0466000a04660000
0466009e0466000004660000046600000466006d046600000466006d0466
000004660000046600000466000004660000046600000466000004660032
046600000466006f04660000046600340466000004660000046600000466
00000466009c04660000046600e904660028046600320466003204660000
046600000466003104660000046600770466000004660000046600000466
00000466000004660000046600000466000004660000046600aa04660000
04660000046600000466006f046600000466000004660000046600000466
005604660000046600000466006d04660000046600000466ffff04660000
0466000004660004046600000466002d0466000004660000046600000466
00000466006f04660000046600130466ff190466ffbd046600aa0466006f
0466009c0466006f04660083046600b8046600b404660000046600a00466
00200466009e0466006d0466006d0466002b0466005a046600a0046600b6
046600ac0466004a04660089046600420466008904660064046600a00466
00cb0466003f0466003f0466003b046600a4046600a40466009e04660096
0466002c0466002a0466003c046600000466000004660000046600000466
000004660000046600000466000004660000046600000466007604660000
04660000046600000466000004660000046600320466005c0466000c0466
00000466ffcf0466ffcf0466002c0466ffaf046600340466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046600000466000004660000046600bb046600000466
006d046600680466009f0466000004660075046600000466000004660000
0466000004660000046600cd046600a00466003f0466003c0466003c0466
004e046600b6046600a40466012f0466002a046600830466004804660083
046600480466006d046600270466004904660027046600440466001e0466
00490466009304660093046601e10466013e046600d1046601ac04660085
04660046046600a004660000046600000466ffbb0466006d046600000466
006d04660000046600000466000004660028046600250466000004660000
0466005004660050046600000466004d046600a004660000046600610466
000004660000046600000466000004660000046600000466000004660000
04660000046600b604660000046600ac04660135046600890466ffe40466
001f0466ffee046600190466001904660019046600160466001604660016
04660000046600000466005a04660000046600a004660000046600000466
000004660000046600000466000004660000046600000466000004660000
04660000046600000466009d0466005e0466009d04660062046600000466
000004660000046600000466feef0466ff780466feef0466000004660000
046600b60466000004660000046600000466ff820466003f046600000466
0000046600a0046600000466000004660000046600000466000004660042
046600000466002504660000046600000466000004660000046600a40466
0000046600000466000004660000046600000466002404660050046600ac
04660053046600890466002a0466002a046600a0046600b6046600a40466
0065046600ba046600be046600d204660043046600850466006d046600a0
046600a0046600ba0466009e0466006d0466006d04660076046600760466
004104660081046600850466008504660065046600830466006d0466006d
0466009e0466004204660079046600a0046600a0046600a0046600ac0466
008904660089046600ac046600890466008904660089046600b604660017
04660027046600cd0466ffff0466005a0466005a0466005a0466ffba0466
00a0046600a00466005c0466005c04660043046600290466005e0466005e
0466005e046600c9046600c9046600c904660061046600aa046600aa0466
00b60466007b0466007b0466007b046600370466009d0466003f04660000
046600490466008404660042046600250466003b04660045046600a40466
00a4046600bb046600740466012204660122046601220466009e04660039
046600ab046600650466009e046600a0046600330466003f046600a00466
006d0466008f046601220466002c0466002c0466002c0466001f0466001f
0466001f0466000d0466001904660037046600a6046600a60466ffc10466
ffc1046600360466fff60466001f046600470466007d046600aa04660048
046600d2046600a3046600ac046600f7046600c004660039046600310466
00ae046600480466007d0466003f0466003f0466ffdd046600270466008b
0466003f0466003f046600a20466006b0466006b04660077046600910466
0034046600340466004d0466004204660025046600a404660085046600b6
0466005a046600e60466003104660098046600d2046600670466000d0466
00ce046600890466011a046600b00466011a0466013804660136046600dc
046600ff0466012c04660123046601160466015b046600cf046601060466
0108046600d6046601060466012804660128046600f404660102046600cd
04660114046601140466010e046600cc046601290466010e0466010e0466
01070466012a0466012a0466011b0466013904660140046600e90466011e
0466010304660127046600f4046600f404660129046600c50466011e0466
00fa046600e9046600eb046600f80466011b046600fc04660107046600da
046600df0466012c0466014a0466011e046600eb0466011b046600fc0466
0129046600da046600df046600460466fecb0466006d0466ffc204660008
046600080466feca0466ff110466fef3046600240466ffa70466001f0466
005e046601040466005e0466000a046600ac046600890466ffb60466000f
0466000f046600a00466006d0466000004660018046600b6046600ac0466
005a046600a0046600a004660081046600b60466007b0466004204660046
046600a4046600850466006d0466006d0466007504660085046600850466
0076046600ac046600ba0466007b046600a0046600850466012004660127
04660119046601150466012a04660107046601070466011b046601340466
01310466012104660139046601390466010004660137046601180466015f
046600e9046600e9046600a7046601340466011004660105046600e30466
013304660118046600cc046600d0046600fb0466011004660110046600da
0466012d0466012d0466012d0466014f0466010704660117046601170466
012e046601100466010c046600bc0466010b046600a6046600d504660153
0466009104660196046600ee04660172046601d0046601d00466012f0466
015904660089046600d10466000204660002046601f10466000004660000
046601f1046600000466000004660000046601ae046601ae046601d00466
01d0046601600466016004660160046601600466015804660171046600da
0466013d0466012d046600e9046601540466014104660141046601410466
014104660141046600960466009604660096046600960466004304660043
04660043046600430466004304660043046600430466002f0466002f0466
002f0466002f0466002f0466002f04660025046600250466002504660025
046600250466001a0466001a0466001a0466001a0466001a0466001a0466
004204660042046600420466004204660042046600420466009604660096
046600960466009604660042046600420466004204660042046600420466
0042046600420466002f0466002f0466002f0466002f0466002f0466002f
0466002f0466002f0466002f0466002f0466002f04660026046600260466
002604660026046600260466002604660042046600420466004204660042
046600420466004204660096046600960466009604660096046600420466
004204660042046600420466004204660042046600260466002604660026
046600260466002604660026046600230466002304660023046600230466
0023046600230466002f0466002f0466002f0466002f0466002f0466002f
0466004b0466004b0466004b0466004b0466004b0466004b046600960466
009604660096046600960466004204660042046600420466004204660042
046600420466001a0466001a0466001a0466001a0466001a0466001a0466
002404660024046600240466002404660024046600240466002f0466002f
0466002f0466002f0466002f0466002f0466004e0466004e0466004e0466
004e0466004e0466004e0466009604660096046600960466009604660140
046601400466000004660000046600390466016404660164046601a70466
01a70466016e046600000466001804660000046600000466019a04660176
0466017604660176046601760466001e0466001e04660148046600000466
000004660000046600000466003c0466003c046601140466010e04660103
046600ec0466010e04660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601b3046601b30466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466017304660173046600390466005c046600830466005c0466
0083046600530466fd1304660000046600cd04660039046600460466005a
046600460466005c0466009e0466006c0466009e0466009c0466000c0466
00320466ffa6046600a0046600010466009e046600ba0466006f0466ff96
04660043046600d70466005c04660075046600870466003b0466009e0466
00830466ffba046600320466fe6c0466fe120466fdcc0466fe640466fe60
0466fdf70466fdcb0466fe5f0466fe720466fe6804660000046600000466
000a0466fe6c0466fe120466fdcc0466fe6e0466fe600466fdf70466fdcb
0466fe5f0466fdbe0466fd3f0466fd370466fdba0466fd370466fd360466
fdb30466fdd60466fd780466fcdd0466fcdd0466fd770466fd790466fcdd
0466fcdd0466fd770466fd4f0466fd720466006f0466fd780466fcdd0466
fcdd0466fd770466fd790466fcdd0466fcdd0466fd770466fda90466fd2c
0466fd360466fda90466fda90466fd2c0466fd360466fda80466fd910466
fde604660000046600000466fda90466fd4f0466fceb0466fd9f0466fd4f
0466fceb0466fdd50466fd8b0466fd930466fd360466fc8b0466fcd20466
fd2c0466fd070466fd6104660000046600000466fd9f0466fd540466fceb
0466fd9e0466fd9f0466fd540466fceb0466fd9e0466fdc70466fd760466
002b0466fd9f0466fd540466fceb0466fd9e0466fd9f0466fd540466fceb
0466fd9e0466ffcf046600000466ffd9046600000466ffcf046600000466
ffd904660000046600000466000004660000046600000466000004660050
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600270466000004660000
04660014046600000466001f046600190466000004660000046600000466
000004660000046600000466000004660000046600000466ffda04660000
046600890466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
ffff046600580466ffd30466000004660000046600000466000004660000
04660000046600000466000004660000046600000466ffe3046600000466
0000046600000466000004660000046600000466ffed0466000004660000
04660000046600000466000004660000046600320466ffcf046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046600270466ffd90466000004660027046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
04660000046600000466000004660000046601b4046601210466008b0466
00100466009e046600100466009e0466fff60466006d0466009c0466009c
04660024046600230466006f0466006f04660064046600390466005c0466
00560466000004660000046600120466001e04660065046600650466006e
0466ffe70466ffe7046600ac0466fff60466009c0466001b0466006f0466
006f046600650466003b04660000046600000466ffd5046600000466003b
046600000466fff604660000046600a70466000004660000046600000466
0039046600000466000004660000046600000466000004660000046600e9
046600000466001004660012046600120466005a046600530466002b0466
008f0466ffe80466006f04660042046600560466006d0466001b046600ae
04660023046600a004660042046600a60466fffe04660085046600b60466
00b60466001604660023046600a0046600a0046600640466005c0466009e
0466005e0466004204660042046600460466002b04660087046600870466
009f0466fff10466fff10466fffe046600b604660021046600a0046600a0
0466008704660031046600ac04660000046600580466001f046600000466
0076046600000466fffe04660000046600bb046600000466000004660000
0466005c046600000466000404660000046600000466003b046600290466
00f2046600000466004204660046046600460466006d0466005f0466003e
046600930466fff8046600a00466009e0466005404660085046600210466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000000ffdc0000ff25046600850466
00850466013e046600000466019604660039046601530466005304660012
04660002046600a304660031046600520466005c0466002b046600000466
004604660000046600580466000004660056046600000466002d04660000
0466004204660032046600320466005c0466000504660000046600140466
00140466001404660014046600140466001404660014046600140466005a
0466006c04660086046600840466001e04660043046600590466005a0466
006c0466004e046600be0466001e0466007d0466006e0466000004660000
04660000046601c4046601c4046601c4046601c404660000046600000466
003604660009046600000466000004660046046600540466000a04660050
0466fff60466004b0466003c0466003f046600000466004a046600390466
0046046600000466005c046600520466005604660028046600320466fffe
0466004b0466007804660056046600000466005d0466005c046600520466
00000466009e046600630466008e0466ff72046600000466000004660000
046600000466000004660000046600000466ff99046600000466019c0466
01bc0466018f046600000466009e0000ffdc0000fe510466000004660185
046600000466012c046600140466005b046601110466007a046601380466
00000466fffe046600000466fffe0000000004660155013e010f01550155
0155019c019c000000000000000000000000000000000000000000000000
01ea017a00000000000000f2ffa6002a00f2000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000089008900ac0089008900890089000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000008b
00560080002e000000000000000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f6000000f60000
00f6000000f6000000f6000000f6000000f6000000f6000000f6000000f6
000000f6000000f6000000f6000000f6000000f6000000f60000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000014e0000014e0000014e0000014e0000014e0000014e0000
014e0000014e0000014e0000014e0000014e0000014e0000014e0000014e
0000014e0000022a0000022a0000022a0000029200000330000004200000
04a200000548000006200000066800000668000006680000066800000668
000006680000066800000668000006680000066800000668000006680000
066800000668000006680000066800000668000006680000066800000668
000006680000066800000668000006680000066800000668000006680000
066800000668000006680000066800000668000006680000066800000668
000006680000066800000668000006680000066800000668000006680000
066800000668000006680000066800000668000006680000066800000668
000006680000066800000668000006680000066800000668000006680000
066800000668000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
079600000796000007960000079600000796000007960000079600000796
000007960000079600000796000007960000079600000796000007960000
0796000100000aaf013b004e0076000700020010002f006500000c12184e
000300010000000e00ae0000000300000000006400000000000300000007
007800640001000000000000003200dc0001000000000003000f010e0001
000000000004000f011d0001000000000006000f012c0001000000000007
003c013b0003000104090000006401770003000104090001001e01db0003
000104090002000e01f90003000104090003001e02070003000104090004
001e02250003000104090006001e024300030001040900070078026100a9
002000320030003100320020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e0043006f006e0073006f006c00610073002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002ea92032303132204d6963726f736f667420436f72706f
726174696f6e2e20416c6c205269676874732052657365727665642e4359
415853542b436f6e736f6c61734359415853542b436f6e736f6c61734359
415853542b436f6e736f6c6173436f6e736f6c6173206973206120747261
64656d61726b206f6620746865204d6963726f736f66742067726f757020
6f6620636f6d70616e6965732e00a9002000320030003100320020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e00430059004100
5800530054002b0043006f006e0073006f006c0061007300520065006700
75006c00610072004300590041005800530054002b0043006f006e007300
6f006c00610073004300590041005800530054002b0043006f006e007300
6f006c00610073004300590041005800530054002b0043006f006e007300
6f006c006100730043006f006e0073006f006c0061007300200069007300
200061002000740072006100640065006d00610072006b0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
670072006f007500700020006f006600200063006f006d00700061006e00
6900650073002e0000>
<b900200203b40918014a20b80202b40918014a20b80201b40918014a20b8
0200b40918014a20b801ffb40918014a20b801feb40918014a20b801fdb4
0918014a20b801fbb40918014a20b801fab40918014a20b801f9b4091801
4a20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20b8
01f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2b4
0918014a20b801f1b40918014a20b801f0b40918014a20b801efb4091801
4a20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b8
01ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8b4
0918014a20b801e7b40918014a20b801e6b40918014a20b801e5b4091801
4a20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b8
01e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801deb4
0918014a20b801ddb40918014a20b801dcb40918014a20b801dbb4091801
4a20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20b8
01d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4b4
0918014a20b801d3b40918014a20b801d2b40918014a20b801d1b4091801
4a20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20b8
01cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801cab4
0918014a20b801c9b40918014a20b801c8b40918014a20b801c7b4091801
4a20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20b8
01c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0b4
0918014a20b801bfb40918014a20b801beb40918014a20b801bdb4091801
4a20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20b8
01b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6b4
0918014a20b801b5b40918014a20b801b4b40918014a20b801b3b4091801
4a20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20b8
01afb40918014a20b801adb40918014a20b801acb40918014a20b801abb4
0918014a20b801aab40918014a20b801a9b40918014a20b801a8b4091801
4a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a20b8
01a4b40918014a20b801a2b40918014a20b801a1b40918014a20b801a0b4
0918014a20b8019fb40918014a20b8019db40918014a20b8019cb4091801
4a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a20b8
0198b40918014a20b80197b40918014a20b80196b40918014a20b80195b4
0918014a20b80194b40918014a20b80193b40918014a20b80192b4091801
4a20b80191b40918014a20b80190b40918014a20b8018fb40918014a20b8
018eb40918014a20b8018db40918014a20b8018ab40918014a20b80189b4
0918014a20b80188b40918014a20b80187b40918014a20b80186b4091801
4a20b80185b40918014a20b80184b40918014a20b80183b40918014a20b8
0181b40918014a20b8017fb40918014a20b8017eb40918014a20b8017db4
0918014a20b8017cb40918014a20b8017bb40918014a20b80179b4091801
4a20b80178b40918014a20b80177b40918014a20b80176b40918014a20b8
0174b40918014a20b80173b40918014a20b80172b40918014a20b8016fb4
0918014a20b8016eb40918014a20b8016db40918014a20b8016cb4091801
4a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a20b8
0168b40918014a20b80167b40918014a20b80166b40918014a20b80165b4
0918014a20b80164b40918014a20b80163b40918014a20b80162b4091801
4a20b80161b40918014a20b80160b40918014a20b8015fb40918014a20b8
015eb40918014a20b8015db40918014a20b8015cb40918014a20b8015bb4
0918014a20b80159b40918014a20b80158b40918014a20b80157b4091801
4a20b80156b40918014a20b80155b40918014a20b80154b40918014a20b8
0152b40918014a20b80151b40918014a20b80150b40918014a20b8014fb4
0918014a20b8014eb40918014a20b8014db40918014a20b8014ab4091801
4a20b80149b40918014a20b80146b40918014a20b80142b40918014a20b8
0141b40918014a20b80140b40918014a20b8013fb40918014a20b8013db4
0918014a20b8013bb40918014a20b80139b40918014a20b80138b4091801
4a20b80137b40918014a20b80136b40918014a20b80135b40918014a20b8
0134b40918014a20b80133b40918014a20b80132b40918014a20b80131b4
0918014a20b80130b40918014a20b8012fb40918014a20b8012eb3091801
4a41370286006402850055000002850001028300640284005500d0028400
01002f0284006f028400af0284000300000282000100f002820001002f02
8200af0282000200af0281000100700281000102800064027f0055005002
7f0080027f00020010027f0040027f0070027f0003027db2644155b8027e
b241ff1fb9027b027cb2641f0f412c027c003f027c006f027c000300af02
7c00df027c00020010027c0001005f027a00df027a0002005f027900df02
79000200ef02780001009002780001006f02780001001002780001027600
640277005500100277002002774075027201411f6f03411f6e02411f692d
6855672d6655652d6455632d6255613260552f603f60025f325e551f5abf
5a02705ae05a02562d55553f5501542d53553f5301c053019f53019f5301
522d5155502d4f55704f012f4f019f4801704801c048016f480140480146
2d4555442d4355422d415540b8026eb2090f46b9026c026bb2321f40b802
6bb2090f46b9ffc00266b3090c46d0bb0273000100400271b331374640b8
0271b21c2146b80203b21e221fb80202b21e221fb80201b21d281fb80200
b21d281fb801ffb21d281fb801feb21d281fb801fdb21d281fb801fcb21d
281fb801fbb21c2b1fb801fab21c2b1fb801f9b21c2b1fb801f8b21c2b1f
b801f7b21c2b1fb801f6b21c2b1fb801f5b21c2b1fb801f4b21b2f1fb801
f3b21b2f1fb801f2b21b2f1fb801f1b21b2f1fb801f0b21b2f1fb801efb2
1b2f1fb801eeb21b2f1fb801edb21b2f1fb801ecb21b2f1fb801ebb21b2f
1fb801eab21b2f1fb801e9b21b2f1fb801e8b21b2f1fb801e7b21b2f1fb8
01e6b21b2f1fb801e5b21b2f1fb801e4b21b2f1fb801e3b21b2f1fb801e2
b21a381fb801e1b21a381fb801e0b21a381fb801dfb21a381fb801deb21a
381fb801ddb21a381fb801dcb21a381fb801dbb21a381fb801dab21a381f
b801d9b21a381fb801d8b21a381fb801d7b21a381fb801d6b21a381fb801
d5b21a381fb801d4b21a381fb801d3b2193b1fb801d2b2193b1fb801d1b2
193b1fb801d0b2193b1fb801cfb2193b1fb801ceb2193b1fb801cdb2193b
1fb801ccb2193b1fb801cbb2193b1fb801cab2193b1fb801c9b2193b1fb8
01c8b2193b1fb801c7b2193b1fb801c6b2193b1fb801c5b2193b1fb801c4
b2193b1fb801c3b2193b1fb801c2b2193b1fb801c1b2193b1fb801c0b219
3b1fb801bfb2193b1fb801beb2193b1fb801bdb2193b1fb801bcb2193b1f
b801bbb2193b1fb801bab2193b1fb801b9b2193b1fb801b8b218411fb801
b7b218411fb801b6b218411fb801b5b218411fb801b4b218411fb801b3b2
18411fb801b2b218411fb801b1b218411fb801b0b218411fb801afb21841
1fb801aeb218411fb801adb218411fb801acb218411fb801abb218411fb8
01aab218411fb801a9b218411fb801a8b218411fb801a7b218411fb801a6
b218411fb801a5b218411fb801a4b218411fb801a3b218411fb801a2b218
411fb801a1b218411fb801a0b218411fb8019fb218411fb8019eb218411f
b8019db218411fb8019cb218411fb8019bb218411fb8019ab218411fb801
99b218411fb80198b218411fb80197b218411fb80196b218411fb80195b2
18411fb80194b218411fb80193b218411fb80192b218411fb80191b21841
1fb80190b218411fb8018fb218411fb8018eb218411fb8018db218411fb8
018cb218411fb8018bb218411fb8018ab217471fb80189b217471fb80188
b217471fb80187b217471fb80186b217471fb80185b217471fb80184b217
471fb80183b217471fb80182b217471fb80181b217471fb80180b217471f
b8017fb217471fb8017eb217471fb8017db217471fb8017cb217471fb801
7bb217471fb8017ab217471fb80179b217471fb80178b217471fb80177b2
17471fb80176b217471fb80175b217471fb80174b217471fb80173b21747
1fb80172b217471fb80171b217471fb80170b217471fb8016fb217471fb8
016eb217471fb8016db217471fb8016cb217471fb8016bb217471fb8016a
b217471fb80169b217471fb80168b217471fb80167b217471fb80166b217
471fb80165b217471fb80164b217471fb80163b217471fb80162b217471f
b80161b217471fb80160b217471fb8015fb217471fb8015eb217471fb801
5db217471fb8015cb217471fb8015bb217471fb8015ab217471fb80159b2
17471fb80158b216551fb80157b216551fb80156b216551fb80155b21655
1fb80154b216551fb80153b216551fb80152b216551fb80151b216551fb8
0150b216551fb8014fb216551fb8014eb216551fb8014db216551fb8014c
b216551fb8014bb216551fb8014ab216551fb80149b216551fb80148b216
551fb80147b216551fb80146b216551fb80145b216551fb80144b216551f
b80143b216551fb80142b216551fb80141b216551fb80140b216551fb801
3fb216551fb8013eb216551fb8013db216551fb8013cb216551fb8013bb2
16551fb8013ab216551fb80139b216551fb80138b215621fb80137b21562
1fb80136b215621fb80135b215621fb80134b215621fb80133b215501fb8
0132b215501fb80131b215621fb80130b215621fb8012fb215621fb8012e
b215621fb8012db214221fb8012cb214221fb8012bb213251fb8012ab213
251fb80129b2122b1fb80128b2122b1fb80127b2122b1fb80126b2122b1f
b80125b2122b1fb80124b2122b1fb80123b2122b1fb80122b2122b1fb801
21b2122b1fb80120b211351fb8011fb211351fb8011eb211351fb8011db2
10441fb8011cb210441fb8011bb210441fb8011ab210441fb80119b21044
1fb80118b210441fb80117b210441fb80116b210441fb80115b210441fb8
0114b210441fb80113b210441fb80112b210441fb80111b210441fb80110
b210441fb8010fb210441fb8010eb210441fb8010db210441fb8010cb20f
4b1fb8010bb20f4b1fb8010ab20f4b1fb80109b20f4b1fb80108b20f4b1f
b80107b20f4b1fb80106b20f4b1fb80105b20f4b1fb80104b20f4b1fb801
03b20f4b1fb80102b20f4b1fb80101b20f4b1fb8010040ff0f4b1fff0f4b
1ffe0f4b1ffd0f4b1ffc0f4b1ffb0f4b1ffa0f4b1ff90f4b1ff80f4b1ff7
0f4b1ff60f4b1ff50f4b1ff40f4b1ff30f4b1ff20f4b1ff10f4b1ff00f4b
1fef0f4b1fee0f4b1fed0f4b1fec0f4b1feb0f4b1fea0f4b1fe90f4b1fe8
0f4b1fe70f4b1fe60f4b1fe50f4b1fe40f4b1fe30f4b1fe20f4b1fe10f4b
1fe00f4b1fdf0f4b1fde0f4b1fdd0f4b1fdc0f4b1fdb0f4b1fda0f4b1fd9
0f4b1fd80f4b1fd70f4b1fd60f4b1fd50e521fd40e521fd30e521fd20e52
1fd10e521fd00e521fcf0e521fce0e521fcd0e521fcc0e521fcb0e521fca
0e521fc90e521fc80e521fc70e521fc60e521fc50e521fc40e521fc30e52
1fc20e521fc10e521f4098c00e521fbf0e521fbe0e521fbd0e521fbc0e52
1fbb0e521fba0e521fb90e521fb80e521fb70e521fb60e521fb50e521fb4
0e521fb30e521fb20e521fb10d621fb00d621faf0d621fae0d621fad0d62
1fac0d621fab0d501faa0d621fa90d621fa80d621fa70d621fa60d621fa5
0d621fa40d621fa30d621fa20d621fa10d621fa00d621f9f0d621f9e0d62
1f9d0d621f9c0d621f9b0d621fb8028840730d211f9a0c6f1f990c6f1f98
0c6f1f970c6f1f960c6f1f950c6f1f940c6f1f930c6f1f920c6f1f910c6f
1f900c6f1f8f0c6f1f8e0b8a1f8d0b8a1f8c0b8a1f101a01701a801a0270
198019022f183f184f18031f172f173f17039f17af170240171b1f467014
8014d014e01404801301a01001b8ffc0b3102c3046b8ffc04022101f2246
700f01bf0f018f0e9f0eaf0e03af0ebf0e02bf0ecf0edf0e03400e3e4246
b80100b316010501b80190b154532b2b4bb807ff524bb008505bb00188b0
2553b00188b040515ab00688b000555a5b58b101018e59b101024354b011
4b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0805358b0
401d594bb0ff5358b0001db1160042592b73747573752b2b737373012b73
7574737374002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b732b2b
2b2b2b2b2b737373747473732b2b737474752b742b73742b732b2b2b2b2b
2b2b2b732b7373737373737373742b2b2b73742b737373737473732b732b
b1000243545841ff0203006402020064020100640200006401ff006401fe
006401fd006401fb006401fa006401f9006401f8006401f7006401f60064
01f5006401f4006401f3006401f2006401f1006401f0006401ef006401ee
006401ed006401ec006401eb006401ea006401e9006401e8006401e70064
01e6006401e5006401e4006401e3006401e2006401e1006401e0006401df
006401de006401dd006401dc006401db006401da006401d9006401d80064
01d7006401d6006401d5006401d4006401d3006401d2006401d1006401d0
006401cf006401ce006401cd006401cc006401cb006401ca006401c90064
01c8006401c7006401c6006401c5006401c4006401c3006401c2006401c1
006401c0006401bf006401be006401bd006401bc006401bb006401ba0064
01b9006401b8006401b7006401b6006401b5006401b4006401b3006401b2
006401b1006401b0006401af006401ad006401ac006401ab006401aa0064
01a9006401a8006401a7006401a6006401a5006401a4006401a2006401a1
006401a00064019f0064019d0064019c0064019b0064019a006401990064
019800640197006401960064019500640194006401930064019200640191
006401900064018f0064018e0064018d0064018a00640189006401880064
018700640186006401850064018400640183006401810064017f0064017e
0064017d0064017c417d0064017b00640179006401780064017700640176
0064017400640173006401720064016f0064016e0064016d0064016c0064
016b0064016a006401690064016800640167006401660064016500640164
006401630064016200640161006401600064015f0064015e0064015d0064
015c0064015b006401590064015800640157006401560064015500640154
0064015200640151006401500064014f0064014e0064014d0064014a0064
0149006401460064014200640141006401400064013f0064013d0064013b
006401390064013800640137006401360064013500640134006401330064
013200640131006401300064012f0064012e00642b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18000000>
[1943 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 246 348 <00010185ffee02d1013b00130016bc00050203000f0000012cb10a52003f
ed012fe1313001321e0215140e0223222e0235343e02022b223d2d1a1a2d
3d22233c2d1a1a2d3c013b1a2e3d23223c2d1a1a2d3c22233d2e1a00>HIBBAA+Consolas AddT42Char 
2 334 613 <00030058ffee040e052d00130021002f004ab11822b8018db20a2600b801
8db3140a3017bb011b00260025011c40111822141826182618052bee0f63
1dee0565003fed3fed1239392f2f12393910ed10ed0110d6d4e13310e132
313001140e0223222e0235343e0233321e0207342627011e0333323e0225
141617012e0323220e02040e3c7ab57a69ac7a423d79b67969ac7a42b005
03fdd70f2e415335446f4e2afdaa010302290f2e405233446f4e2a028d96
f7b1614fa4feae96f8b1614fa5feb4224320fe6534583f234282c18b1f3e
1d019933543d224283c1>HIBBAA+Consolas AddT42Char 
2 554 616 <00010087000003e50521000a0039b306010a09b801be400b0703030b0c06
ed05050104b8011cb308620903b8011ab10164003fed323fed12392fed11
1201392f33e1c4ddc63130212135211105272533112103e5fccb0150fec7
4001a09a0124a203baaa94dbfb81>HIBBAA+Consolas AddT42Char 
2 658 617 <00010093000003f0052d00200039b9000801bcb519111911201fb801e340
0c0121100df304080014630220b8011bb10064003fed323f123939fdc601
10d6e1cd39392f2fe13130212135013e0335342e02232206072736363332
1e0215140e0207072103f0fca3015253683a141a36563c538839604ac180
578f683928517b54ed027b9c01505278635833305742264a3b734e5e3462
8e594b807f8851e7>HIBBAA+Consolas AddT42Char 
2 816 618 <000100a4ffee03d7052d0036005ab9001e0192400d2f32172f24172f2f17
24030900b80191401d1109373218c71137af170117172a3725f12421f02a
6308f4090cf00565003ffdd6ed3ffdd6ed1112392f5d1239ed390110d6d6
e11117392f2f2f11123910e1313001140e022322262735161633323e0235
342e0223233533323e0235342623220607353e0333321e02151406071e03
03d7468cd48d4e7c363e8a48628b58283057794895973b614525807c428c
50224d4d4c23689e6a36736433634f31018d569771410a089c0b0c23425e
3b3650361b8f1f3a553669601a1a980c130d072d54784b70982d08304b66
>HIBBAA+Consolas AddT42Char 
2 1186 620 <000100b2ffee03cf051b00210041b9001c015db6171a171a170b00b801bb
400d130b2216ee1c1c221bf118620ab80119b40b0ef00565003ffdd6ed3f
ed12392fed0110d6d6e11139392f2f10e1313001140e0223222e02273516
1633323e023534262323112115211133321e0203cf5493c8741d43423f19
368b4750805a30afa4f802c0fde4725eb28b5501a261a07340030506049e
0d0c2647653f7a6f029c98fe9122558f>HIBBAA+Consolas AddT42Char 
2 1352 621 <0002007bffee0400051b002100350040b11a2cb80190b40a12120a00b801
914015220a362ced1a27c61d1d36190513f1126231c70565003fed3fed12
3912392feddded0110d6d4e111392f10e132313001140e0223222e023534
3e0433331523220e020707363633321e0207342e0223220e0207141e0233
323e0204004178a9676ca6703a1a3c6495ca85818c75ac743e08043fa560
63956332b61d3e5f42264e4b441c24476844395f4527019e5a9e7543458f
da9564bca68a6337983866905929252d3a6790613c6143250e19201281ad
682c25486700>HIBBAA+Consolas AddT42Char 
2 0 0 <000400580000040e051b00030007001f0031005cb900230199b22d0f0db8
0134b41010081a07be0132000200130140000800010133401004020d9810
102819991a069703410f20b8011db42804960143003ffddefdce3ffddeed
12392fed012fdde1d6e110f1c611392fe1c5d4e131300111211101112111
01140e0223072327333235342e0223233533321e0201321615140e022322
2e0235343e02040efc4a0358fd04026b2042674804640672902a4c6b4023
2969996531feb825310d172012121f170e0e171f051bfae5051bfb410462
fb9e02e82d5541279efc832d48331b64335167fdeb3325121f170e0e171f
121220180e00>HIBBAA+Consolas AddT42Char 
HIBBAA+Consolas /CharStrings get begin
/period 348 def
/zero 613 def
/one 616 def
/two 617 def
/three 618 def
/five 620 def
/six 621 def
end
HIBBAA+Consolas /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
pop
end
%ADOEndSubsetFont
/SVAWOT+Consolas /HIBBAA+Consolas findfont ct_VMDictPut
/SVAWOT+Consolas*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef 
/five /six 201{/.notdef}rp]
SVAWOT+Consolas nf
SVAWOT+Consolas*1 [6 0 0 -6 0 0 ]msf
99.8908 31.1911 mo
(5)sh
135.051 31.1911 mo
(10)
[3.24002 0 ]xsh
173.451 31.1911 mo
(20)
[3.24002 0 ]xsh
211.851 31.1911 mo
(10)
[3.24002 0 ]xsh
250.251 31.1911 mo
(16)
[3.24002 0 ]xsh
288.651 31.1911 mo
(10)
[3.24002 0 ]xsh
327.051 31.1911 mo
(16)
[3.24002 0 ]xsh
368.691 31.1911 mo
(5)sh
397.371 31.1911 mo
(1.25)
[3.24002 3.24002 3.24002 0 ]xsh
442.251 31.1911 mo
(35)
[3.24002 0 ]xsh
480.651 31.1911 mo
(20)
[3.23999 0 ]xsh
gsave
1.61084 41.1511 mo
27.2918 41.1511 li
27.2918 33.8311 li
1.61084 33.8311 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 5670 85 <000100c50000031d0456000d00394025030313032303b603c603050a7e03
000507010600080f0f1f0f02030c326f080108800001002f5dcd5dfd3c5d
003f3f3f1239fd3130005d3311331536333217152623220711c5c575df1e
213327bb7e043ecce405b811defd3400>SVAWOS+LucidaSansUnicode AddT42Char 
1 6234 89 <0001001200000418043e00060056403c0503140325033503450365038403
a503b403c503d403e403f4030d03020304c5050506030230010002040503
01060600081f088b00020003060305012fdd17395d003f3c3f173c8705fd
c0872efd08c03130005d2101330901330101a6fe6cc5013c014db8fe5304
3efcb3034dfbc200>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/r 85 def
/v 89 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 114 /r put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 
/five /.notdef /seven 12{/.notdef}rp /D /.notdef /F /G 
4{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 
12{/.notdef}rp /a 2{/.notdef}rp /d /e 5{/.notdef}rp /k /l 
/m /.notdef /o /p /.notdef /r /.notdef /t 
/.notdef /v 2{/.notdef}rp /y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
2.57084 39.8311 mo
(overload)
[3.71999 3.12003 3.36004 2.39998 1.68001 3.71999 3.36001 0 ]xsh
grestore
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if

1 0 3 <> SVAWOS+LucidaSansUnicode AddT42Char 
1 100 8 <0005000cffdb054d05ed0003000f001b002700330093406d480147035801
5703690166037a01780275038b0186039d0198029303ac01a40310020103
009a2eaa2e022e391622262202229528a528022839181c281c021c089410
a4100210391904290402049a16aa16021639170a270a020a02312d1f2b2d
00030201042507132d0d192d072fedddfd10dd1739edddfd003f5ded5ddd
5dfd5d3f5ded5ddd5dfd5d2f3c2f3c3130015d1701330113222635343633
321615140627323635342623220615141601222635343633321615140627
323635342623220615141618048e9afb739491aaaa9190aaaa904c5a5a4c
4d5a5a031891a9a99191aaaa914d5a5a4d4c5a5a250612f9ee0309c8aaab
c7c7abaac863937c7d93937d7c93fcb9c8aaaac8c8aaaac863927d7d9393
7d7d9200>SVAWOS+LucidaSansUnicode AddT42Char 
1 3752 69 <000200c5ffe7049a062b000e00180068404f3c124a124a1556066606930a
9513a40aa713b706b310cd04cc17d715e210f010f613111141030d050b0b
0008167e050701006f1a0114346f088f08bf08d008f00805080d030f3210
007000800003002f5ded3232dd5ded5d003f3fed3f3f123939ed3130015d
17113311363332121510022322270713163332363510232207c5c579f2c4
e1ffd0c1801818988a8894fca59d0c0637fd47e4fee2f8fef2feb5948701
0f88e3ce017eb300>SVAWOS+LucidaSansUnicode AddT42Char 
1 5776 86 <0001009dffe703770456002100614044061b44185f0759085a1b690a631b
a61ed50cd61ae40ce61afa090d017e0003410809191a040e200b12431114
410e07602380230217310b120632120b9f1d011d100101012f5ddd5d3939
ed2f2fed5d003fedd4ed3f121739edd4ed3130005d37351633323635342f
012635343633321f01152623220615141f011e0115140623229dc18f5570
9d73ffc9af5b8629a5625667905fa186e2b08726b5605c456542316ac78e
a31908a4314b3f593d284497718fb800>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/space 3 def
/percent 8 def
/b 69 def
/s 86 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 32 /space put
dup 37 /percent put
dup 98 /b put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven 12{/.notdef}rp 
/D /.notdef /F /G 4{/.notdef}rp /L /M 2{/.notdef}rp 
/P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /.notdef 
/d /e 5{/.notdef}rp /k /l /m /.notdef /o 
/p /.notdef /r /s /t /.notdef /v 2{/.notdef}rp 
/y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
29.2108 39.8311 mo
(rel)
[2.39998 3.36004 0 ]xsh
50.4508 39.8311 mo
(% FS)
[3.96 1.91996 3.23997 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOT+Consolas gcheck setglobal} if
2 1640 681 <00050014fff204520593000300170027003b004b0053410b0028015f003c
0044015f00320004015f00180020015f401c0e01020003023fb23747b22d
5223b2091bb213540353025101510053003f3f3f3f3fedd4ed3fedd4ed01
2f2f3311332fe1d4e12fe1d4e131300101230101140e0223222e0235343e
0233321e0207342623220e0215141633323e0201140e0223222e0235343e
0233321e0207342623220e0215141633323e020452fc66a40398fe912647
653e3d6145252647653e3d6145259340391d2d1f1040391d2d1f10029827
47653e3d6145252647653e3d6245259341391d2d1f1040391d2d20100585
fa7b0585fee8416f512f264b6e48406f522e264a6e4d58541a2e3f255854
1a2e3ffcde416e522e264a6f48406f522e264b6e4c58541a2e3f2558541a
2e3f>SVAWOT+Consolas AddT42Char 
2 1568 622 <00010075000003e9051b00060021b70302010100040003b8011ab4056202
0164003f333fed32012fc43911333231300101230121352103e9fddcc702
39fd3e03740479fb870479a2>SVAWOT+Consolas AddT42Char 
SVAWOT+Consolas /CharStrings get begin
/percent 681 def
/seven 622 def
end
SVAWOT+Consolas /Encoding get
dup 37 /percent put
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOT+Consolas*1 
[37{/.notdef}rp /percent 8{/.notdef}rp /period /.notdef /zero /one /two 
/three /.notdef /five /six /seven 200{/.notdef}rp]
SVAWOT+Consolas nf
SVAWOT+Consolas*1 [6 0 0 -6 0 0 ]msf
80.4508 39.4711 mo
(300.00%)
[3.24002 3.24001 3.24002 3.24002 3.24002 3.24001 0 ]xsh
118.851 39.4711 mo
(300.00%)
[3.24002 3.24002 3.24001 3.24001 3.24002 3.24002 0 ]xsh
157.251 39.4711 mo
(300.00%)
[3.24002 3.24002 3.24002 3.24001 3.24002 3.24002 0 ]xsh
198.891 39.4711 mo
(70.00%)
[3.24002 3.24002 3.24001 3.24002 3.24002 0 ]xsh
237.291 39.4711 mo
(70.00%)
[3.24002 3.24002 3.24002 3.24002 3.24002 0 ]xsh
422.811 39.4711 mo
(1000.00%)
[3.24002 3.24002 3.24002 3.24002 3.24002 3.23999 3.24002 0 ]xsh
461.211 39.4711 mo
(1000.00%)
[3.24002 3.24002 3.24002 3.24002 3.24002 3.24002 3.23999 0 ]xsh
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
29.2108 48.1111 mo
(abs)
[3.36001 3.71999 0 ]xsh
50.4508 48.1111 mo
(kPa)
[3.48 3.35996 0 ]xsh
SVAWOT+Consolas*1 [6 0 0 -6 0 0 ]msf
96.6508 47.7512 mo
(15)
[3.24002 0 ]xsh
135.051 47.7512 mo
(30)
[3.24002 0 ]xsh
173.451 47.7512 mo
(60)
[3.24002 0 ]xsh
215.091 47.7512 mo
(7)sh
243.771 47.7512 mo
(11.2)
[3.24002 3.24002 3.24002 0 ]xsh
439.011 47.7512 mo
(350)
[3.24002 3.24002 0 ]xsh
477.411 47.7512 mo
(200)
[3.24002 3.23999 0 ]xsh
gsave
1.61084 57.7111 mo
27.2918 57.7111 li
27.2918 50.3911 li
1.61084 50.3911 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 3940 70 <0001006fffe703b70456001500474032230e2312320e3212400e40129b03
9d07c303090b440a0d4108071545001342020b0b00152015301503151036
0f05100502052f5deddd5dc4003fedd4ed3fedd4ed3130015d2506232200
351000213217152623220615141633323703b7bf8bdcfede011f01017f9d
a76998b6bc98878f213a0146f80109012823a531e3bdb7e24500>SVAWOS+LucidaSansUnicode AddT42Char 
1 6100 88 <000100b9ffe70431043e0011004a40340402050d1f04290438049701960d
a601a30d090f010307060c45030b0008801301010e321f117f118f110311
09321006800602062f5deddd5dfd3c5d003f3fed3f12393c3130015d2135
06232226351133111416333237113311036c9de08ea8c54753b4a0c5cce5
b398030cfd347a67ed02c0fbc200>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/c 70 def
/u 88 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 99 /c put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven 12{/.notdef}rp 
/D /.notdef /F /G 4{/.notdef}rp /L /M 2{/.notdef}rp 
/P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c 
/d /e 5{/.notdef}rp /k /l /m /.notdef /o 
/p /.notdef /r /s /t /u /v 2{/.notdef}rp 
/y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
2.57084 56.3912 mo
(accuracy)
[3.36001 3.11996 3.11996 3.72001 2.39998 3.36001 3.11996 0 ]xsh
grestore
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
29.2108 56.3912 mo
(rel)
[2.39998 3.36004 0 ]xsh
50.4508 56.3912 mo
(% FS)
[3.96 1.91996 3.23997 0 ]xsh
SVAWOT+Consolas*1 [6 0 0 -6 0 0 ]msf
86.9308 56.0312 mo
(0.50%)
[3.24002 3.24001 3.24001 3.24002 0 ]xsh
125.331 56.0312 mo
(0.50%)
[3.24001 3.24002 3.24001 3.24002 0 ]xsh
163.731 56.0312 mo
(0.50%)
[3.24002 3.24002 3.24001 3.24002 0 ]xsh
202.131 56.0312 mo
(2.50%)
[3.24002 3.24002 3.24001 3.24002 0 ]xsh
240.531 56.0312 mo
(2.50%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
278.931 56.0312 mo
(1.50%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
317.331 56.0312 mo
(1.50%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
355.731 56.0312 mo
(1.00%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
394.131 56.0312 mo
(1.00%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
432.531 56.0312 mo
(0.07%)
[3.24002 3.24002 3.24002 3.24002 0 ]xsh
470.931 56.0312 mo
(0.07%)
[3.24002 3.24002 3.23999 3.24005 0 ]xsh
gsave
1.61084 66.9512 mo
488.931 66.9512 li
488.931 2.15118 li
1.61084 2.15118 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
29.2109 64.671 mo
(abs)
[3.36001 3.71999 0 ]xsh
50.4509 64.671 mo
(kPa)
[3.48 3.35996 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOT+Consolas gcheck setglobal} if
2 1056 619 <0002002b00000431051b000a000d004440090c06070b06050b0902b8018e
40150d03030005060d0d09f2040b080000030708620364003f3f3312392f
123933ed321133012fc4392f33e132331133113311333130012311231121
35013311330101210431dfb2fd8b022dfadffe6ffe3901c70121fedf0121
990361fc9f02b9fd4700>SVAWOT+Consolas AddT42Char 
SVAWOT+Consolas /CharStrings get begin
/four 619 def
end
SVAWOT+Consolas /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOT+Consolas*1 
[37{/.notdef}rp /percent 8{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven 200{/.notdef}rp]
SVAWOT+Consolas nf
SVAWOT+Consolas*1 [6 0 0 -6 0 0 ]msf
86.9309 64.311 mo
(0.025)
[3.24002 3.24001 3.24002 3.24002 0 ]xsh
128.571 64.311 mo
(0.05)
[3.24002 3.24002 3.24001 0 ]xsh
170.211 64.3112 mo
(0.1)
[3.24002 3.24002 0 ]xsh
205.371 64.3112 mo
(0.25)
[3.24002 3.24002 3.24001 0 ]xsh
247.011 64.3112 mo
(0.4)
[3.24002 3.24002 0 ]xsh
282.171 64.3112 mo
(0.15)
[3.24002 3.24002 3.24002 0 ]xsh
320.571 64.3112 mo
(0.24)
[3.24002 3.24002 3.24002 0 ]xsh
358.971 64.3112 mo
(0.05)
[3.24002 3.24002 3.24002 0 ]xsh
390.891 64.3112 mo
(0.0125)
[3.24002 3.24002 3.24002 3.24002 3.24002 0 ]xsh
426.051 64.3112 mo
(0.02275)
[3.24002 3.24002 3.24002 3.24002 3.24002 3.23999 0 ]xsh
470.931 64.3112 mo
(0.013)
[3.24002 3.24002 3.24002 3.23999 0 ]xsh
grestore
gsave
411.651 9.47113 mo
488.452 9.47113 li
488.452 2.15112 li
411.651 2.15112 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 2388 43 <000100bf0000052305c8000b002a40160a42030300050102080008040934
6f070107030a34002fed32dd5ded32003f3c3f3c12392fed313033113311
2111331123112111bfd202c0d2d2fd4005c8fd900270fa3802bbfd45>SVAWOS+LucidaSansUnicode AddT42Char 
1 5166 81 <000100c50000043d045600110053403e0403041016031507161026073607
96039310a603a210d60ce50c0d0e450300050701060a00088013010b321f
087f088f08030803103210007000800003002f5ded32dd5ded5d003f3c3f
3f1239ed31305d331133153633321615112311342623220711c5c59ce28e
a7c54752b5a0043ecce4b397fcf402cc7967edfd4100>SVAWOS+LucidaSansUnicode AddT42Char 
1 6362 90 <0001000c0000061c043e000c00e540b12909260c37054a0a450c62058800
860586099602a702ae04a90bb602ba04b505b807c205d709d80be706e907
e509e70b18060304060f0b100310061f0b190c200320062a0b3003300645
066f0b7c0bf402fc0b110302030b0c0bc30b0a030404320506300a06070b
0a0607c4080809030230000103060b030002040507080501060c0a090300
087f0e010a321f092f097f0903090c3200000904050b0500081f01200840
0850086f017f010708100101012f5ddd5d17392fed2f5ded5d003f173c3f
173c1217398705fdc0872efdc087082efd05d001fd8708ed8708d0313000
5d015d210133130133130133012303010143fec9c1ee0101c5e10111a9fe
9ec6e6fefc043efcb70349fcb70349fbc20349fcb700>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/H 43 def
/n 81 def
/w 90 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 72 /H put
dup 110 /n put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven 12{/.notdef}rp 
/D /.notdef /F /G /H 3{/.notdef}rp /L /M 
2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b 
/c /d /e 5{/.notdef}rp /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
435.651 7.43115 mo
(Honeywell)
[4.44 3.72 3.72 3.36005 3.12003 4.67996 3.36005 1.67941 0 ]xsh
grestore
gsave
411.651 17.2711 mo
488.452 17.2711 li
488.452 9.47113 li
411.651 9.47113 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
434.931 15.2311 mo
(transducer)
[2.27997 2.39996 3.36002 3.72 2.99997 3.72 3.72 3.11996 3.36005 0 ]xsh
grestore
gsave
66.0508 9.47113 mo
181.251 9.47113 li
181.251 2.15112 li
66.0508 2.15112 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 2476 44 <000100be0000019005c800030014400a0102000803347f0001002f5ded00
3f3f313033113311bed205c8fa38>SVAWOS+LucidaSansUnicode AddT42Char 
1 2782 49 <000100bf0000052a05c80009005c403f0307082708570867087708870897
080608340202030334070708030800040202070008c402cb07d402db07e4
02eb07f402fb070803c507020608c5100001002f5deddd3939ed5d003f3c
3f3c123939872efd872eed5d87c0313033113301113311230111bfce02e9
b4cdfd1605c8fb890477fa380477fb89>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/I 44 def
/N 49 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 73 /I put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven 12{/.notdef}rp 
/D /.notdef /F /G /H /I 2{/.notdef}rp /L 
/M /N /.notdef /P 2{/.notdef}rp /S /T 12{/.notdef}rp 
/a /b /c /d /e 5{/.notdef}rp /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
116.211 7.43115 mo
(MIND)
[5.15996 1.67996 4.43999 0 ]xsh
grestore
gsave
66.0508 25.0712 mo
181.251 25.0712 li
181.251 17.2722 li
66.0508 17.2722 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 1542 27 <000300b1ffdb048f05ee0014001f002c00bc409a030717071c0b1c16111f
2a0c2f2b2f2c3a0b3f2b4b0b4e2b541f54255b275d2ca007a10cac14a315
a619a91ba41fab20a821b508b41fc608c31fcf2bcf2cd30edc12d528d92c
e20ce50eeb11e328f40af50cf40ff911f7282c6c007c007b208c008b209d
009e20dd00de20ed00ed20fc00fc200d1a410b1520001006052641100d17
30090b150d1d3020002903293309030d23321013d01302132f5deddd3939
ed2f123939ed1139392fed003fed3f1239393939ed5d3130015d012e0135
34363332161514050411140423222435102536353426232206151416170e
011514163332363534262701d77a5ff6c6b7e3feec014ffee8dcdcfef202
21cf8b706d887b167755a48681a365910326559267a8d2b28ed7b1a4fefd
b9ebddb4010aee88a7596d6b555384ec5c89667f9d866b567756>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/eight 27 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven /eight 
11{/.notdef}rp /D /.notdef /F /G /H /I 2{/.notdef}rp 
/L /M /N /.notdef /P 2{/.notdef}rp /S /T 
12{/.notdef}rp /a /b /c /d /e 5{/.notdef}rp /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /.notdef /y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
118.371 23.0311 mo
(820)
[3.84003 3.84001 0 ]xsh
grestore
gsave
66.0508 17.2711 mo
181.251 17.2711 li
181.251 9.47113 li
66.0508 9.47113 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
108.531 15.2311 mo
(transducer)
[2.27995 2.39998 3.36002 3.72002 2.99997 3.71999 3.72001 3.11995 3.36005 0 ]xsh
grestore
gsave
181.251 25.0712 mo
258.052 25.0712 li
258.052 17.2722 li
181.251 17.2722 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 2042 40 <000100bf0000042505c8000b002b40170842050442050001020942000806
030a050934000001002f5ded32dd3939003fed3f1239ed2fed3130331121
152111211521112115bf033bfd970205fdfb029405c89dfe259bfde89d00
>SVAWOS+LucidaSansUnicode AddT42Char 
1 3336 60 <00010011000004e205c80008007c405a56035905660376038703a603b603
c603d7030924043504450455046404730482049104a304b404c204d601d2
04e704f7040f04030405c506070604033301020401070003050603020200
08100601060407345f0101011f0201022f5dd45dfd39c45d003f3f173c12
3939398705fdc08710fd08c03130005d015d21110133090133011101fffe
12f00180019ec3fdef026a035efd64029cfca6fd9200>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/E 40 def
/Y 60 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 69 /E put
dup 89 /Y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /.notdef /four /five /.notdef /seven /eight 
11{/.notdef}rp /D /E /F /G /H /I 2{/.notdef}rp 
/L /M /N /.notdef /P 2{/.notdef}rp /S /T 
4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 
5{/.notdef}rp /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
210.891 23.0311 mo
(YE150)
[3.72 3.24005 3.84003 3.84003 0 ]xsh
grestore
gsave
334.851 9.47113 mo
411.651 9.47113 li
411.651 2.15112 li
334.851 2.15112 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
364.731 7.43115 mo
(Dwyer)
[4.43997 4.67996 3.12003 3.36005 0 ]xsh
grestore
gsave
334.851 17.2711 mo
411.651 17.2711 li
411.651 9.47113 li
334.851 9.47113 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
358.131 15.2311 mo
(transducer)
[2.27997 2.39996 3.36002 3.72 2.99997 3.72 3.72 3.11996 3.36005 0 ]xsh
grestore
gsave
181.251 9.47113 mo
334.851 9.47113 li
334.851 2.15112 li
181.251 2.15112 li
cp
clp
%ADOBeginSubsetFont: SVAWOU+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (SVAWOU+SimSun-GBK-EUC-H)
%%Title: (SVAWOU+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /SVAWOU+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -145 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28762 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
1082 <001C60D8A8C9B5EE310273E1573AA355DCB8529A6C957310591FFD1DC8
7195C071BC1C231666A7AB95B224D334385FB2DC936C59DA4F66B5664E265BFC
A04C2E11AC6436D46CED938B8FD3> |
9127 <001C60D8A8C9B5EE31021FABA1486D959D49306B1D5AE4BD77CBC966BA
68A44B395EFF1A24B422619DEB8D1D6CCBD3EA27E068142ECFE7EA38AC8FB90B
C7143E83D99150AAE6710E16E530D43D762A9BB047A87667B79E08F43C1DE650
B9FFEB10A81782CF6B6A7AA972DDC292169152BA5A8ACC28CFE94C47F64B6FAF
9527C22F337DCDA52A3DDB0AE0CE5C01FCE0AFF0B886B20DC3EB2FD035A574F4
58A659DD5FA11AC8752DE580C5AF51728A00399D6D9BA15A2D3E6878C2900AE8
64F1A102128ECDF187A0F2F8C290C0566F95AE6844C7E7B6DD3B251D5D3A1E18
6D41274A3D0BCFB780D8ACC3DB56556C9F83E51D19F9C58DB8D82BB8FEC9EBCD
CA794C81254D589E73AD4E895C91874DD83C630CB1E76C414FE4AC76B1D300CA
90426BE8288EE7E18099E07905665CCD1DFEE45DEF7ECD7CEF84E9B3978148E8
4FB8C14597757539543C2AD2034AB0474DF6287FF085B392502B4EFB6B47BDD2
A59987BE436AC88F9D414D4DBD9FA7892D03D2F22CED908030D9D4C02965B284
DB613E40F2355897A0D9D8550080F5A3A63FCBB37EDBB158788F9BDC5A4FB064
DB618BC8100E42B8798EDFE8CE4BE1CB0DAF2DC39FAFE3788619353F6A> |
14362 <001C60D8A8C9B5EE310352EEAD1E97EB40DC3A96BC1C4C36379167EAC
CDFB2BC5C2D5615636186B2BD29A44709D2BB97181EEB8D2F5E6BDBFECCA11FD
71F9DD997ED17736AF9FE0DD2F79C2950CE8CEF87D664E1E7B724ECABEE3BFD2
BE9EBC25E2BD753ACC1A0F3F484B27501BB1B0C9BE3AAD3007D093964CDC64D5
DFC1F8C56B48F0012EBF2904B8BE129> |
1306 <001C60D8A8C9B5EE3102A95AAC0F6FB39FE1CC6C777DF49EEDCF45CE0E
5FA99A4B462803C1935595D95C2C58E7AC532DED40572DF1C9158DEC865A3B9D
F184DCC19414EE64176A3D80B1604811344E8FDE5C532BF62B9ADCC56680976E
CEB14C7496F517BBFD1AA1D76CF0C0F407EE157A13736AD37B4F5FEC6AACBEB0
52D468FD51697BA58D9B93732456EF8A67D722B6E9BD33253000BDF3D13BA5D9
9BDA9A53EAC5E8CDE318CD398759B2327AB5AAA361A27F9DA077C9A5BCF2CD4D
1D60D70F877143C22A0997DBA3F2990ACAB0C069919CCCAD4104D9C2E1815F9F
CB5437B39DFB7AAE40E5EB90640E8BC5C6A75F556CEC2971A9254ED2D500F78A
FAF69247> |
3339 <001C60D8A8C9B5EE31030C5C0358A99E2D58EB7DA87D33FCC3CCC88444
C654DC2155AA69F8AAB35C662FA5A04F20AEE7CDFF20DEE6D3B4AC0372264447
E1817B6BAA05237AF978D85F131A7A2EF5D0684348D8708D0BB027E7FAE50CEA
8CFD474EAC755CA65D8AAC99CB82A77B24D99251AC0566878DA520124B339D5F
89A17A7B9C850C86EE21DF799DB595C581095472F3C2BDF40DCC8F6C7CBD964B
329D73A33D633375D3455FD5D437> |
2482 <001C60D8A8C9B5EE313061465C98C192CFA854D57086AFE9E2CAE875D1
25A9188B9BC39AF0D7553B9AF076DAE355B8AB25D0EF9F032F19AD470E3F2928
08B1B7683671C5F6> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /SVAWOU+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/SVAWOU+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/SVAWOU+SimSun-GBK-EUC-H-Identity-H findfont [6 0 0 -6 0 0 ]msf
240.531 7.91113 mo
(\004:#\2478\032\005\032\015\013\011\262)sh
grestore
gsave
258.051 17.2711 mo
334.851 17.2711 li
334.851 9.47113 li
258.051 9.47113 li
cp
clp
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
281.331 15.2311 mo
(transducer)
[2.27997 2.39996 3.36002 3.72 2.99997 3.72 3.72 3.11996 3.36005 0 ]xsh
grestore
gsave
258.051 25.0712 mo
334.851 25.0712 li
334.851 17.2722 li
258.051 17.2722 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 888 22 <000100d0ffdb042f05ed001f0077405a071617163f1a4f1a5e04561a6a04
661a770e7416860e83169716a807a716b907b616c716c61ac71cd61ad61c
e60ce618e71cf60cf718f71d1c19083f0b017f0003410b141e0d117e120f
41140509110d32170634110919031b002fdd1739edd4ed2f2f003feddced
3f1239eddced2fed393130015d3735163332363510212335372011342122
073536333216151005041114042322d0d3798fb1fe4b4e45019afef092b2
afa2ddecfecb0166feecf1890bb854a484013885010121e353ac3bb0a7fe
fb6f53fecbd1ee00>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/three 22 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /three /four /five /.notdef /seven /eight 
11{/.notdef}rp /D /E /F /G /H /I 2{/.notdef}rp 
/L /M /N /.notdef /P 2{/.notdef}rp /S /T 
4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 
5{/.notdef}rp /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
285.651 23.0311 mo
(YSG-03)
[3.72 3.24002 4.32004 3.47998 3.84 0 ]xsh
grestore
gsave
181.251 17.2711 mo
258.052 17.2711 li
258.052 9.47113 li
181.251 9.47113 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+LucidaSansUnicode AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SVAWOS+LucidaSansUnicode gcheck setglobal} if
1 4496 74 <0002006ffe5d04440456001a0024007d405f2224331f4017421f44225a0a
5518690a9c0e991fad0ea820b904ba22c507c20ad60ed61fda22ef1df910
ff1d160145000341190f237e06110f091e410f0712066f260100111b0632
006f148f14bf14d014f014051421340f0c100c300c030c2f5deddd5d39fd
3c3c2f5d003f3fed2f123939ed3fedd4ed3130015d133716332011350e01
23220235340033321735331114060706212201112623220615103332c917
aba7014c33bd74c5e60106d0b683c6354981feeebc02078299889afbabfe
97ab510161ab6c78011bf2f80138947cfceafff54e89031b01c387dac1fe
9e00>SVAWOS+LucidaSansUnicode AddT42Char 
1 4738 76 <000200c50000018a05c800030007001a400d048005020106000807023204
002f3cfd3c003f3f3fed31303311331103353315c5c5c5c5043efbc20503
c5c5>SVAWOS+LucidaSansUnicode AddT42Char 
SVAWOS+LucidaSansUnicode /CharStrings get begin
/g 74 def
/i 76 def
end
SVAWOS+LucidaSansUnicode /Encoding get
dup 103 /g put
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SVAWOS+LucidaSansUnicode*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen 2{/.notdef}rp /zero 
/one /two /three /four /five /.notdef /seven /eight 
11{/.notdef}rp /D /E /F /G /H /I 2{/.notdef}rp 
/L /M /N /.notdef /P 2{/.notdef}rp /S /T 
4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 134{/.notdef}rp]
SVAWOS+LucidaSansUnicode nf
SVAWOS+LucidaSansUnicode*1 [6 0 0 -6 0 0 ]msf
206.811 15.2311 mo
(dial gage)
[3.71999 1.68001 3.36002 1.68001 1.91997 3.71996 3.36002 3.71994 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/SVAWOU+SimSun-GBK-EUC-H-Identity-H uf
/SVAWOU+SimSun-GBK-EUC-H /CIDFont ur
/SVAWOT+Consolas*1 uf
/SVAWOT+Consolas uf
/HIBBAA+Consolas uf
/SVAWOS+LucidaSansUnicode*1 uf
/SVAWOS+LucidaSansUnicode uf
/PBAAAA+LucidaSansUnicode uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
