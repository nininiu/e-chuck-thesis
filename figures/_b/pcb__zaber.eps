%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R8431.tmp.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/06/16, 23:33:31
%%BoundingBox: 0 0 444 565
%%HiResBoundingBox: 0 0 443.7715 564.3332
%%CropBox: 0 0 443.7715 564.3332
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1194 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-06-16T23:33:20+08:00"
   xmp:CreateDate="2014-06-16T23:33:20+08:00"
   xmp:MetadataDate="2014-06-16T23:33:20+08:00"
   xmp:CreatorTool="Altium Designer Release 10"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f07d4bfa-87c2-4cf9-b5e4-8aba338b7409"
   xmpMM:InstanceID="uuid:44e1fb41-7635-4e41-b002-0a9fc4f9493e"
   pdf:Producer="llPDFLib 3.x">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">No Title</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">None</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Windows 9x/NT/2000/XP User</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -564.333 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 564.333 li
443.771 564.333 li
443.771 0 li
cp
clp
gsave
-.888977 564.985 mo
444.111 564.985 li
444.111 -.0146484 li
-.888977 -.0146484 li
cp
clp
3.96358 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
26.6778 416.118 mo
26.6778 123.995 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.609674 1 .135897 .0332647 cmyk
@
417.094 416.118 mo
417.094 123.995 li
@
124.282 513.492 mo
319.49 513.492 li
@
124.282 27.1151 mo
319.49 27.1151 li
@
26.6778 123.995 mo
124.282 27.1151 li
@
26.6778 416.118 mo
124.282 513.492 li
@
319.49 27.1151 mo
417.094 123.995 li
@
319.49 513.492 mo
417.094 416.118 li
@
1.98183 lw
124.282 347.907 mo
124.282 328.629 li
.873014 .24213 1 .129183 cmyk
@
114.868 338.021 mo
134.191 338.021 li
@
148.559 231.255 mo
148.559 211.978 li
@
197.608 231.255 mo
197.608 211.978 li
@
187.699 221.369 mo
207.518 221.369 li
@
246.163 231.255 mo
246.163 211.978 li
@
236.749 221.369 mo
256.072 221.369 li
@
92.0775 398.818 mo
92.0775 277.718 li
@
156.486 398.818 mo
156.486 277.718 li
@
198.599 178.861 mo
198.599 157.112 li
@
186.709 258.935 mo
186.709 183.804 li
@
245.172 178.861 mo
245.172 157.112 li
@
257.063 258.935 mo
257.063 183.804 li
@
284.313 412.164 mo
284.313 322.698 li
@
334.849 412.164 mo
334.849 322.698 li
@
309.581 377.069 mo
309.581 357.792 li
@
123.291 266.349 mo
123.291 176.884 li
@
174.322 266.349 mo
174.322 176.884 li
@
172.341 264.372 mo
172.341 178.861 li
@
220.895 264.372 mo
220.895 178.861 li
@
271.431 264.372 mo
271.431 178.861 li
@
92.0775 398.818 mo
156.486 398.818 li
@
92.0775 277.718 mo
156.486 277.718 li
@
123.291 266.349 mo
174.322 266.349 li
@
172.341 264.372 mo
222.877 264.372 li
@
139.145 221.369 mo
158.468 221.369 li
@
221.886 231.255 mo
221.886 211.978 li
@
211.977 221.369 mo
231.795 221.369 li
@
123.291 176.884 mo
174.322 176.884 li
@
212.472 167.987 mo
231.299 167.987 li
@
172.341 178.861 mo
222.877 178.861 li
@
284.313 412.164 mo
334.849 412.164 li
@
300.167 367.678 mo
319.49 367.678 li
@
284.313 322.698 mo
334.849 322.698 li
@
221.886 177.378 mo
221.886 158.595 li
@
222.877 264.372 mo
222.877 178.861 li
@
220.895 264.372 mo
271.431 264.372 li
@
186.709 258.935 mo
257.063 258.935 li
@
198.599 178.861 mo
245.172 178.861 li
@
220.895 178.861 mo
271.431 178.861 li
@
186.709 183.804 mo
257.063 183.804 li
@
198.599 157.112 mo
245.172 157.112 li
@
232.29 200.115 mo
260.531 200.115 li
.609674 1 .135897 .0332647 cmyk
@
97.0319 383.989 mo
97.0319 292.547 li
@
135.182 243.118 mo
135.182 200.115 li
@
151.532 383.989 mo
151.532 292.547 li
@
162.432 243.118 mo
162.432 200.115 li
@
205.536 177.378 mo
205.536 158.595 li
@
211.481 243.118 mo
211.481 200.115 li
@
191.663 242.129 mo
191.663 201.104 li
@
238.731 177.378 mo
238.731 158.595 li
@
232.29 243.118 mo
260.531 243.118 li
@
260.531 243.118 mo
260.531 200.115 li
@
232.29 243.118 mo
232.29 200.115 li
@
252.108 242.129 mo
252.108 201.104 li
@
296.203 388.932 mo
296.203 345.929 li
@
323.453 388.932 mo
323.453 345.929 li
@
97.0319 383.989 mo
151.532 383.989 li
@
97.0319 292.547 mo
151.532 292.547 li
@
135.182 200.115 mo
162.432 200.115 li
@
205.536 177.378 mo
238.731 177.378 li
@
183.24 200.115 mo
211.481 200.115 li
@
205.536 158.595 mo
238.731 158.595 li
@
296.203 388.932 mo
323.453 388.932 li
@
296.203 345.929 mo
323.453 345.929 li
@
135.182 243.118 mo
162.432 243.118 li
@
183.24 243.118 mo
211.481 243.118 li
@
183.24 243.118 mo
183.24 200.115 li
@
191.663 201.104 mo
252.108 201.104 li
@
191.663 242.129 mo
252.108 242.129 li
@
97.032 292.547 mo
151.532 292.547 li
151.532 304.904 li
97.032 304.904 li
cp
ef
75.7275 270.304 mo
75.7275 172.929 li
@
368.044 270.304 mo
368.044 172.929 li
@
221.886 561.932 mo
221.886 2.4007 li
@
173.331 367.678 mo
270.44 367.678 li
@
173.331 75.555 mo
270.44 75.555 li
@
26.6778 416.118 mo
417.094 416.118 li
@
2.4007 221.369 mo
441.371 221.369 li
@
412.139 158.101 mo
412.139 414.141 li
317.508 508.55 li
126.264 508.55 li
31.6324 414.141 li
31.6324 158.101 li
65.8185 123.995 li
377.953 123.995 li
cp
251.117 172.435 mo
247.154 173.424 li
244.181 175.401 li
241.704 178.861 li
241.208 182.815 li
231.299 184.298 li
230.804 184.298 li
230.804 213.955 li
250.126 213.955 li
250.126 193.195 li
251.117 192.701 li
255.081 191.712 li
258.549 189.735 li
260.531 186.275 li
261.522 182.815 li
260.531 178.861 li
258.549 175.401 li
255.081 173.424 li
cp
192.654 172.435 mo
188.69 173.424 li
185.718 175.401 li
183.241 178.861 li
182.745 182.815 li
183.241 186.275 li
185.718 189.735 li
188.69 191.712 li
192.654 192.701 li
193.645 193.195 li
193.645 213.955 li
212.968 213.955 li
212.968 184.298 li
212.472 184.298 li
202.563 182.815 li
202.068 178.861 li
199.59 175.401 li
196.618 173.424 li
cp
231.795 229.278 mo
224.858 229.278 li
224.858 241.141 li
231.795 241.141 li
cp
218.913 229.278 mo
211.977 229.278 li
211.977 241.141 li
218.913 241.141 li
cp
368.044 186.769 mo
361.603 187.264 li
354.667 189.241 li
348.721 192.701 li
343.767 196.655 li
339.308 202.092 li
335.84 208.024 li
333.858 214.944 li
333.362 221.369 li
333.858 228.289 li
335.84 234.715 li
339.308 240.647 li
343.767 246.084 li
348.721 250.532 li
354.667 253.498 li
361.603 255.475 li
368.044 256.464 li
374.98 255.475 li
381.421 253.498 li
387.366 250.532 li
392.816 246.084 li
397.276 240.647 li
400.248 234.715 li
402.23 228.289 li
403.221 221.369 li
402.23 214.944 li
400.248 208.024 li
397.276 202.092 li
392.816 196.655 li
387.366 192.701 li
381.421 189.241 li
374.98 187.264 li
cp
75.7275 186.769 mo
68.7912 187.264 li
62.3504 189.241 li
56.405 192.701 li
50.955 196.655 li
46.4959 202.092 li
43.5232 208.024 li
41.5414 214.944 li
40.5505 221.369 li
41.5414 228.289 li
43.5232 234.715 li
46.4959 240.647 li
50.955 246.084 li
56.405 250.532 li
62.3504 253.498 li
68.7912 255.475 li
75.7275 256.464 li
82.6639 255.475 li
89.1047 253.498 li
95.0502 250.532 li
100.5 246.084 li
104.464 240.647 li
107.932 234.715 li
109.914 228.289 li
110.409 221.369 li
109.914 214.944 li
107.932 208.024 li
104.464 202.092 li
100.5 196.655 li
95.0502 192.701 li
89.1047 189.241 li
82.6639 187.264 li
cp
231.795 247.072 mo
224.858 247.072 li
224.858 258.441 li
231.795 258.441 li
cp
218.913 247.072 mo
211.977 247.072 li
211.977 258.441 li
218.913 258.441 li
cp
221.886 332.584 mo
214.949 333.572 li
208.508 335.549 li
202.563 338.515 li
197.113 342.964 li
193.15 347.907 li
189.681 354.332 li
187.7 360.758 li
187.204 367.678 li
187.7 374.104 li
189.681 380.529 li
193.15 386.955 li
197.113 391.898 li
202.563 396.347 li
208.508 399.807 li
214.949 401.784 li
221.886 402.278 li
228.822 401.784 li
235.263 399.807 li
241.208 396.347 li
246.658 391.898 li
251.117 386.955 li
254.09 380.529 li
256.072 374.104 li
256.567 367.678 li
256.072 360.758 li
254.09 354.332 li
251.117 347.907 li
246.658 342.964 li
241.208 338.515 li
235.263 335.549 li
228.822 333.572 li
cp
190.672 447.258 mo
155.495 447.258 li
155.495 482.352 li
190.672 482.352 li
cp
272.422 447.258 mo
267.467 447.752 li
263.504 449.235 li
259.54 452.201 li
257.063 455.661 li
255.081 460.109 li
254.585 464.558 li
255.081 469.501 li
257.063 473.455 li
259.54 477.41 li
263.504 479.881 li
267.467 481.858 li
272.422 482.352 li
276.881 481.858 li
281.34 479.881 li
284.808 477.41 li
287.781 473.455 li
289.267 469.501 li
289.763 464.558 li
289.267 460.109 li
287.781 455.661 li
284.808 452.201 li
281.34 449.235 li
276.881 447.752 li
cp
222.877 447.258 mo
217.922 447.752 li
213.958 449.235 li
209.995 452.201 li
207.518 455.661 li
205.536 460.109 li
205.04 464.558 li
205.536 469.501 li
207.518 473.455 li
209.995 477.41 li
213.958 479.881 li
217.922 481.858 li
222.877 482.352 li
227.336 481.858 li
231.795 479.881 li
235.263 477.41 li
238.236 473.455 li
239.722 469.501 li
240.217 464.558 li
239.722 460.109 li
238.236 455.661 li
235.263 452.201 li
231.795 449.235 li
227.336 447.752 li
cp
.883665 .769161 0 0 cmyk
f
5.94541 lw
192.654 182.815 mo
203.554 193.195 li
@
240.217 193.195 mo
251.117 182.815 li
@
258.054 183.062 mo
258.054 187.021 254.837 190.229 250.87 190.229 cv
246.902 190.229 243.686 187.021 243.686 183.062 cv
243.686 179.104 246.902 175.895 250.87 175.895 cv
254.837 175.895 258.054 179.104 258.054 183.062 cv
.516442 .431464 .431464 .0754406 cmyk
f
199.59 183.062 mo
199.59 187.021 196.374 190.229 192.406 190.229 cv
188.439 190.229 185.222 187.021 185.222 183.062 cv
185.222 179.104 188.439 175.895 192.406 175.895 cv
196.374 175.895 199.59 179.104 199.59 183.062 cv
f
275.394 348.154 mo
275.394 351.02 273.065 353.344 270.192 353.344 cv
267.319 353.344 264.99 351.02 264.99 348.154 cv
264.99 345.287 267.319 342.964 270.192 342.964 cv
273.065 342.964 275.394 345.287 275.394 348.154 cv
f
275.394 387.202 mo
275.394 390.069 273.065 392.392 270.192 392.392 cv
267.319 392.392 264.99 390.069 264.99 387.202 cv
264.99 384.336 267.319 382.012 270.192 382.012 cv
273.065 382.012 275.394 384.336 275.394 387.202 cv
f
275.394 309.105 mo
275.394 311.972 273.065 314.295 270.192 314.295 cv
267.319 314.295 264.99 311.972 264.99 309.105 cv
264.99 306.239 267.319 303.915 270.192 303.915 cv
273.065 303.915 275.394 306.239 275.394 309.105 cv
f
226.84 309.105 mo
226.84 311.972 224.511 314.295 221.638 314.295 cv
218.765 314.295 216.436 311.972 216.436 309.105 cv
216.436 306.239 218.765 303.915 221.638 303.915 cv
224.511 303.915 226.84 306.239 226.84 309.105 cv
f
178.286 270.551 mo
178.286 273.417 175.957 275.741 173.084 275.741 cv
170.211 275.741 167.882 273.417 167.882 270.551 cv
167.882 267.684 170.211 265.361 173.084 265.361 cv
175.957 265.361 178.286 267.684 178.286 270.551 cv
f
275.394 270.551 mo
275.394 273.417 273.065 275.741 270.192 275.741 cv
267.319 275.741 264.99 273.417 264.99 270.551 cv
264.99 267.684 267.319 265.361 270.192 265.361 cv
273.065 265.361 275.394 267.684 275.394 270.551 cv
f
226.84 270.551 mo
226.84 273.417 224.511 275.741 221.638 275.741 cv
218.765 275.741 216.436 273.417 216.436 270.551 cv
216.436 267.684 218.765 265.361 221.638 265.361 cv
224.511 265.361 226.84 267.684 226.84 270.551 cv
f
314.535 426.251 mo
314.535 429.117 312.206 431.441 309.333 431.441 cv
306.46 431.441 304.131 429.117 304.131 426.251 cv
304.131 423.385 306.46 421.061 309.333 421.061 cv
312.206 421.061 314.535 423.385 314.535 426.251 cv
f
314.535 493.968 mo
314.535 496.834 312.206 499.158 309.333 499.158 cv
306.46 499.158 304.131 496.834 304.131 493.968 cv
304.131 491.102 306.46 488.778 309.333 488.778 cv
312.206 488.778 314.535 491.102 314.535 493.968 cv
f
343.767 464.805 mo
343.767 467.672 341.438 469.995 338.565 469.995 cv
335.691 469.995 333.362 467.672 333.362 464.805 cv
333.362 461.939 335.691 459.615 338.565 459.615 cv
341.438 459.615 343.767 461.939 343.767 464.805 cv
f
402.23 397.088 mo
402.23 399.954 399.901 402.278 397.028 402.278 cv
394.155 402.278 391.826 399.954 391.826 397.088 cv
391.826 394.222 394.155 391.898 397.028 391.898 cv
399.901 391.898 402.23 394.222 402.23 397.088 cv
f
372.998 397.088 mo
372.998 399.954 370.669 402.278 367.796 402.278 cv
364.923 402.278 362.594 399.954 362.594 397.088 cv
362.594 394.222 364.923 391.898 367.796 391.898 cv
370.669 391.898 372.998 394.222 372.998 397.088 cv
f
372.998 358.039 mo
372.998 360.906 370.669 363.229 367.796 363.229 cv
364.923 363.229 362.594 360.906 362.594 358.039 cv
362.594 355.173 364.923 352.849 367.796 352.849 cv
370.669 352.849 372.998 355.173 372.998 358.039 cv
f
402.23 358.039 mo
402.23 360.906 399.901 363.229 397.028 363.229 cv
394.155 363.229 391.826 360.906 391.826 358.039 cv
391.826 355.173 394.155 352.849 397.028 352.849 cv
399.901 352.849 402.23 355.173 402.23 358.039 cv
f
372.998 318.991 mo
372.998 321.857 370.669 324.181 367.796 324.181 cv
364.923 324.181 362.594 321.857 362.594 318.991 cv
362.594 316.125 364.923 313.801 367.796 313.801 cv
370.669 313.801 372.998 316.125 372.998 318.991 cv
f
402.23 318.991 mo
402.23 321.857 399.901 324.181 397.028 324.181 cv
394.155 324.181 391.826 321.857 391.826 318.991 cv
391.826 316.125 394.155 313.801 397.028 313.801 cv
399.901 313.801 402.23 316.125 402.23 318.991 cv
f
372.998 279.942 mo
372.998 282.809 370.669 285.132 367.796 285.132 cv
364.923 285.132 362.594 282.809 362.594 279.942 cv
362.594 277.076 364.923 274.752 367.796 274.752 cv
370.669 274.752 372.998 277.076 372.998 279.942 cv
f
402.23 279.942 mo
402.23 282.809 399.901 285.132 397.028 285.132 cv
394.155 285.132 391.826 282.809 391.826 279.942 cv
391.826 277.076 394.155 274.752 397.028 274.752 cv
399.901 274.752 402.23 277.076 402.23 279.942 cv
f
372.998 163.291 mo
372.998 166.157 370.669 168.481 367.796 168.481 cv
364.923 168.481 362.594 166.157 362.594 163.291 cv
362.594 160.424 364.923 158.101 367.796 158.101 cv
370.669 158.101 372.998 160.424 372.998 163.291 cv
f
324.444 163.291 mo
324.444 166.157 322.115 168.481 319.242 168.481 cv
316.369 168.481 314.04 166.157 314.04 163.291 cv
314.04 160.424 316.369 158.101 319.242 158.101 cv
322.115 158.101 324.444 160.424 324.444 163.291 cv
f
324.444 192.454 mo
324.444 195.32 322.115 197.644 319.242 197.644 cv
316.369 197.644 314.04 195.32 314.04 192.454 cv
314.04 189.587 316.369 187.264 319.242 187.264 cv
322.115 187.264 324.444 189.587 324.444 192.454 cv
f
295.213 192.454 mo
295.213 195.32 292.883 197.644 290.01 197.644 cv
287.137 197.644 284.808 195.32 284.808 192.454 cv
284.808 189.587 287.137 187.264 290.01 187.264 cv
292.883 187.264 295.213 189.587 295.213 192.454 cv
f
256.072 144.014 mo
256.072 146.88 253.743 149.204 250.87 149.204 cv
247.997 149.204 245.667 146.88 245.667 144.014 cv
245.667 141.147 247.997 138.824 250.87 138.824 cv
253.743 138.824 256.072 141.147 256.072 144.014 cv
f
197.609 144.014 mo
197.609 146.88 195.279 149.204 192.406 149.204 cv
189.533 149.204 187.204 146.88 187.204 144.014 cv
187.204 141.147 189.533 138.824 192.406 138.824 cv
195.279 138.824 197.609 141.147 197.609 144.014 cv
f
119.823 192.454 mo
119.823 195.32 117.494 197.644 114.62 197.644 cv
111.747 197.644 109.418 195.32 109.418 192.454 cv
109.418 189.587 111.747 187.264 114.62 187.264 cv
117.494 187.264 119.823 189.587 119.823 192.454 cv
f
119.823 250.779 mo
119.823 253.646 117.494 255.969 114.62 255.969 cv
111.747 255.969 109.418 253.646 109.418 250.779 cv
109.418 247.913 111.747 245.589 114.62 245.589 cv
117.494 245.589 119.823 247.913 119.823 250.779 cv
f
314.535 307.128 mo
314.535 309.994 312.206 312.318 309.333 312.318 cv
306.46 312.318 304.131 309.994 304.131 307.128 cv
304.131 304.262 306.46 301.938 309.333 301.938 cv
312.206 301.938 314.535 304.262 314.535 307.128 cv
f
295.213 241.388 mo
295.213 244.254 292.883 246.578 290.01 246.578 cv
287.137 246.578 284.808 244.254 284.808 241.388 cv
284.808 238.522 287.137 236.198 290.01 236.198 cv
292.883 236.198 295.213 238.522 295.213 241.388 cv
f
80.6821 435.642 mo
80.6821 438.509 78.3529 440.832 75.4798 440.832 cv
72.6067 440.832 70.2776 438.509 70.2776 435.642 cv
70.2776 432.776 72.6067 430.452 75.4798 430.452 cv
78.3529 430.452 80.6821 432.776 80.6821 435.642 cv
f
109.914 435.642 mo
109.914 438.509 107.585 440.832 104.711 440.832 cv
101.838 440.832 99.5092 438.509 99.5092 435.642 cv
99.5092 432.776 101.838 430.452 104.711 430.452 cv
107.585 430.452 109.914 432.776 109.914 435.642 cv
f
109.914 464.805 mo
109.914 467.672 107.585 469.995 104.711 469.995 cv
101.838 469.995 99.5092 467.672 99.5092 464.805 cv
99.5092 461.939 101.838 459.615 104.711 459.615 cv
107.585 459.615 109.914 461.939 109.914 464.805 cv
f
139.145 464.805 mo
139.145 467.672 136.816 469.995 133.943 469.995 cv
131.07 469.995 128.741 467.672 128.741 464.805 cv
128.741 461.939 131.07 459.615 133.943 459.615 cv
136.816 459.615 139.145 461.939 139.145 464.805 cv
f
139.145 493.968 mo
139.145 496.834 136.816 499.158 133.943 499.158 cv
131.07 499.158 128.741 496.834 128.741 493.968 cv
128.741 491.102 131.07 488.778 133.943 488.778 cv
136.816 488.778 139.145 491.102 139.145 493.968 cv
f
226.84 499.9 mo
226.84 502.766 224.511 505.09 221.638 505.09 cv
218.765 505.09 216.436 502.766 216.436 499.9 cv
216.436 497.033 218.765 494.71 221.638 494.71 cv
224.511 494.71 226.84 497.033 226.84 499.9 cv
f
295.213 163.291 mo
295.213 166.157 292.883 168.481 290.01 168.481 cv
287.137 168.481 284.808 166.157 284.808 163.291 cv
284.808 160.424 287.137 158.101 290.01 158.101 cv
292.883 158.101 295.213 160.424 295.213 163.291 cv
f
158.468 163.291 mo
158.468 166.157 156.139 168.481 153.266 168.481 cv
150.393 168.481 148.063 166.157 148.063 163.291 cv
148.063 160.424 150.393 158.101 153.266 158.101 cv
156.139 158.101 158.468 160.424 158.468 163.291 cv
f
119.823 163.291 mo
119.823 166.157 117.494 168.481 114.62 168.481 cv
111.747 168.481 109.418 166.157 109.418 163.291 cv
109.418 160.424 111.747 158.101 114.62 158.101 cv
117.494 158.101 119.823 160.424 119.823 163.291 cv
f
402.23 163.291 mo
402.23 166.157 399.901 168.481 397.028 168.481 cv
394.155 168.481 391.826 166.157 391.826 163.291 cv
391.826 160.424 394.155 158.101 397.028 158.101 cv
399.901 158.101 402.23 160.424 402.23 163.291 cv
f
51.4504 163.291 mo
51.4504 166.157 49.1213 168.481 46.2482 168.481 cv
43.3751 168.481 41.046 166.157 41.046 163.291 cv
41.046 160.424 43.3751 158.101 46.2482 158.101 cv
49.1213 158.101 51.4504 160.424 51.4504 163.291 cv
f
80.6821 163.291 mo
80.6821 166.157 78.3529 168.481 75.4798 168.481 cv
72.6067 168.481 70.2776 166.157 70.2776 163.291 cv
70.2776 160.424 72.6067 158.101 75.4798 158.101 cv
78.3529 158.101 80.6821 160.424 80.6821 163.291 cv
f
51.4504 183.062 mo
51.4504 185.929 49.1213 188.252 46.2482 188.252 cv
43.3751 188.252 41.046 185.929 41.046 183.062 cv
41.046 180.196 43.3751 177.872 46.2482 177.872 cv
49.1213 177.872 51.4504 180.196 51.4504 183.062 cv
f
402.23 260.665 mo
402.23 263.531 399.901 265.855 397.028 265.855 cv
394.155 265.855 391.826 263.531 391.826 260.665 cv
391.826 257.799 394.155 255.475 397.028 255.475 cv
399.901 255.475 402.23 257.799 402.23 260.665 cv
f
402.23 183.062 mo
402.23 185.929 399.901 188.252 397.028 188.252 cv
394.155 188.252 391.826 185.929 391.826 183.062 cv
391.826 180.196 394.155 177.872 397.028 177.872 cv
399.901 177.872 402.23 180.196 402.23 183.062 cv
f
51.4504 260.665 mo
51.4504 263.531 49.1213 265.855 46.2482 265.855 cv
43.3751 265.855 41.046 263.531 41.046 260.665 cv
41.046 257.799 43.3751 255.475 46.2482 255.475 cv
49.1213 255.475 51.4504 257.799 51.4504 260.665 cv
f
51.4504 279.942 mo
51.4504 282.809 49.1213 285.132 46.2482 285.132 cv
43.3751 285.132 41.046 282.809 41.046 279.942 cv
41.046 277.076 43.3751 274.752 46.2482 274.752 cv
49.1213 274.752 51.4504 277.076 51.4504 279.942 cv
f
80.6821 279.942 mo
80.6821 282.809 78.3529 285.132 75.4798 285.132 cv
72.6067 285.132 70.2776 282.809 70.2776 279.942 cv
70.2776 277.076 72.6067 274.752 75.4798 274.752 cv
78.3529 274.752 80.6821 277.076 80.6821 279.942 cv
f
80.6821 318.991 mo
80.6821 321.857 78.3529 324.181 75.4798 324.181 cv
72.6067 324.181 70.2776 321.857 70.2776 318.991 cv
70.2776 316.125 72.6067 313.801 75.4798 313.801 cv
78.3529 313.801 80.6821 316.125 80.6821 318.991 cv
f
51.4504 318.991 mo
51.4504 321.857 49.1213 324.181 46.2482 324.181 cv
43.3751 324.181 41.046 321.857 41.046 318.991 cv
41.046 316.125 43.3751 313.801 46.2482 313.801 cv
49.1213 313.801 51.4504 316.125 51.4504 318.991 cv
f
51.4504 397.088 mo
51.4504 399.954 49.1213 402.278 46.2482 402.278 cv
43.3751 402.278 41.046 399.954 41.046 397.088 cv
41.046 394.222 43.3751 391.898 46.2482 391.898 cv
49.1213 391.898 51.4504 394.222 51.4504 397.088 cv
f
51.4504 358.039 mo
51.4504 360.906 49.1213 363.229 46.2482 363.229 cv
43.3751 363.229 41.046 360.906 41.046 358.039 cv
41.046 355.173 43.3751 352.849 46.2482 352.849 cv
49.1213 352.849 51.4504 355.173 51.4504 358.039 cv
f
80.6821 358.039 mo
80.6821 360.906 78.3529 363.229 75.4798 363.229 cv
72.6067 363.229 70.2776 360.906 70.2776 358.039 cv
70.2776 355.173 72.6067 352.849 75.4798 352.849 cv
78.3529 352.849 80.6821 355.173 80.6821 358.039 cv
f
80.6821 397.088 mo
80.6821 399.954 78.3529 402.278 75.4798 402.278 cv
72.6067 402.278 70.2776 399.954 70.2776 397.088 cv
70.2776 394.222 72.6067 391.898 75.4798 391.898 cv
78.3529 391.898 80.6821 394.222 80.6821 397.088 cv
f
178.286 387.202 mo
178.286 390.069 175.957 392.392 173.084 392.392 cv
170.211 392.392 167.882 390.069 167.882 387.202 cv
167.882 384.336 170.211 382.012 173.084 382.012 cv
175.957 382.012 178.286 384.336 178.286 387.202 cv
f
178.286 309.105 mo
178.286 311.972 175.957 314.295 173.084 314.295 cv
170.211 314.295 167.882 311.972 167.882 309.105 cv
167.882 306.239 170.211 303.915 173.084 303.915 cv
175.957 303.915 178.286 306.239 178.286 309.105 cv
f
178.286 348.154 mo
178.286 351.02 175.957 353.344 173.084 353.344 cv
170.211 353.344 167.882 351.02 167.882 348.154 cv
167.882 345.287 170.211 342.964 173.084 342.964 cv
175.957 342.964 178.286 345.287 178.286 348.154 cv
f
226.84 221.617 mo
226.84 224.483 224.511 226.807 221.638 226.807 cv
218.765 226.807 216.436 224.483 216.436 221.617 cv
216.436 218.75 218.765 216.427 221.638 216.427 cv
224.511 216.427 226.84 218.75 226.84 221.617 cv
f
314.535 270.551 mo
314.535 273.417 312.206 275.741 309.333 275.741 cv
306.46 275.741 304.131 273.417 304.131 270.551 cv
304.131 267.684 306.46 265.361 309.333 265.361 cv
312.206 265.361 314.535 267.684 314.535 270.551 cv
f
372.998 435.642 mo
372.998 438.509 370.669 440.832 367.796 440.832 cv
364.923 440.832 362.594 438.509 362.594 435.642 cv
362.594 432.776 364.923 430.452 367.796 430.452 cv
370.669 430.452 372.998 432.776 372.998 435.642 cv
f
252.108 474.691 mo
252.108 477.557 249.779 479.881 246.906 479.881 cv
244.033 479.881 241.704 477.557 241.704 474.691 cv
241.704 471.825 244.033 469.501 246.906 469.501 cv
249.779 469.501 252.108 471.825 252.108 474.691 cv
f
203.554 474.691 mo
203.554 477.557 201.225 479.881 198.352 479.881 cv
195.479 479.881 193.15 477.557 193.15 474.691 cv
193.15 471.825 195.479 469.501 198.352 469.501 cv
201.225 469.501 203.554 471.825 203.554 474.691 cv
f
158.468 450.224 mo
158.468 479.387 li
187.7 479.387 li
187.7 450.224 li
cp
ef
29.2316 lw
222.877 464.558 mo
222.877 464.558 li
@
272.422 464.558 mo
272.422 464.558 li
@
210.49 210.989 mo
210.49 187.264 li
197.113 187.264 li
197.113 210.989 li
cp
.883665 .769161 0 0 cmyk
ef
246.658 210.989 mo
246.658 187.264 li
233.281 187.264 li
233.281 210.989 li
cp
ef
228.822 255.969 mo
228.822 232.738 li
214.949 232.738 li
214.949 255.969 li
cp
ef
412.139 158.101 mo
412.139 414.141 li
317.508 508.55 li
126.264 508.55 li
31.6324 414.141 li
31.6324 158.101 li
65.8185 123.995 li
377.953 123.995 li
cp
216.931 156.124 mo
197.609 156.124 li
197.609 168.975 li
194.14 172.929 li
192.654 172.435 li
188.69 173.424 li
185.718 175.401 li
183.241 178.861 li
182.745 182.815 li
182.745 183.309 li
181.259 185.287 li
178.781 185.287 li
178.781 196.161 li
167.386 196.161 li
167.386 183.309 li
130.227 183.309 li
130.227 220.381 li
130.227 222.358 li
130.227 259.429 li
142.613 259.429 li
142.613 272.281 li
140.136 274.752 li
101.986 274.752 li
101.986 323.687 li
147.073 323.687 li
147.073 285.627 li
153.018 279.201 li
154.504 277.224 li
155 275.247 li
155 259.429 li
167.386 259.429 li
167.386 222.358 li
167.386 220.381 li
167.386 208.024 li
178.781 208.024 li
178.781 220.381 li
178.781 222.358 li
178.781 237.187 li
215.94 237.187 li
215.94 222.358 li
215.94 220.381 li
215.94 185.287 li
204.049 185.287 li
202.563 183.309 li
202.563 182.815 li
202.563 181.332 li
204.049 179.849 li
216.931 179.849 li
cp
368.044 186.769 mo
361.603 187.264 li
354.667 189.241 li
348.721 192.701 li
343.767 196.655 li
339.308 202.092 li
335.84 208.024 li
333.858 214.944 li
333.362 221.369 li
333.858 228.289 li
335.84 234.715 li
339.308 240.647 li
343.767 246.084 li
348.721 250.532 li
354.667 253.498 li
361.603 255.475 li
368.044 256.464 li
374.98 255.475 li
381.421 253.498 li
387.366 250.532 li
392.816 246.084 li
397.276 240.647 li
400.248 234.715 li
402.23 228.289 li
403.221 221.369 li
402.23 214.944 li
400.248 208.024 li
397.276 202.092 li
392.816 196.655 li
387.366 192.701 li
381.421 189.241 li
374.98 187.264 li
cp
75.7275 186.769 mo
68.7912 187.264 li
62.3504 189.241 li
56.405 192.701 li
50.955 196.655 li
46.4959 202.092 li
43.5232 208.024 li
41.5414 214.944 li
40.5505 221.369 li
41.5414 228.289 li
43.5232 234.715 li
46.4959 240.647 li
50.955 246.084 li
56.405 250.532 li
62.3504 253.498 li
68.7912 255.475 li
75.7275 256.464 li
82.6639 255.475 li
89.1047 253.498 li
95.0502 250.532 li
100.5 246.084 li
104.464 240.647 li
107.932 234.715 li
109.914 228.289 li
110.409 221.369 li
109.914 214.944 li
107.932 208.024 li
104.464 202.092 li
100.5 196.655 li
95.0502 192.701 li
89.1047 189.241 li
82.6639 187.264 li
cp
264.99 243.118 mo
249.136 243.118 li
249.136 257.452 li
264.99 257.452 li
cp
243.19 243.118 mo
227.831 243.118 li
227.831 257.452 li
243.19 257.452 li
cp
215.94 243.118 mo
200.581 243.118 li
200.581 257.452 li
215.94 257.452 li
cp
194.636 243.118 mo
178.781 243.118 li
178.781 257.452 li
194.636 257.452 li
cp
328.408 329.618 mo
312.553 329.618 li
312.553 344.941 li
328.408 344.941 li
cp
306.608 329.618 mo
291.249 329.618 li
291.249 344.941 li
306.608 344.941 li
cp
328.408 350.872 mo
291.249 350.872 li
291.249 366.689 li
291.249 368.172 li
291.249 396.841 li
235.758 452.201 li
235.263 452.201 li
231.795 449.235 li
227.336 447.752 li
222.877 447.258 li
217.922 447.752 li
213.958 449.235 li
209.995 452.201 li
207.518 455.661 li
205.536 460.109 li
205.04 464.558 li
205.536 469.501 li
207.518 473.455 li
209.995 477.41 li
213.958 479.881 li
217.922 481.858 li
222.877 482.352 li
227.336 481.858 li
231.795 479.881 li
235.263 477.41 li
238.236 473.455 li
239.722 469.501 li
240.217 464.558 li
299.672 405.244 li
328.408 405.244 li
328.408 368.172 li
328.408 366.689 li
cp
221.886 332.584 mo
214.949 333.572 li
208.508 335.549 li
202.563 338.515 li
197.113 342.964 li
193.15 347.907 li
189.681 354.332 li
187.7 360.758 li
187.204 367.678 li
187.7 374.104 li
189.681 380.529 li
193.15 386.955 li
197.113 391.898 li
202.563 396.347 li
208.508 399.807 li
214.949 401.784 li
221.886 402.278 li
228.822 401.784 li
235.263 399.807 li
241.208 396.347 li
246.658 391.898 li
251.117 386.955 li
254.09 380.529 li
256.072 374.104 li
256.567 367.678 li
256.072 360.758 li
254.09 354.332 li
251.117 347.907 li
246.658 342.964 li
241.208 338.515 li
235.263 335.549 li
228.822 333.572 li
cp
246.163 156.124 mo
226.84 156.124 li
226.84 179.849 li
239.722 179.849 li
241.208 181.827 li
241.208 182.815 li
241.208 183.309 li
239.722 185.287 li
227.831 185.287 li
227.831 220.381 li
227.831 222.358 li
227.831 237.187 li
264.99 237.187 li
264.99 222.358 li
264.99 220.381 li
264.99 209.012 li
268.954 209.012 li
342.776 282.167 li
342.776 413.647 li
297.194 458.627 li
288.772 458.627 li
287.781 455.661 li
284.808 452.201 li
281.34 449.235 li
276.881 447.752 li
272.422 447.258 li
267.467 447.752 li
263.504 449.235 li
259.54 452.201 li
257.063 455.661 li
255.081 460.109 li
254.585 464.558 li
255.081 469.501 li
257.063 473.455 li
259.54 477.41 li
263.504 479.881 li
267.467 481.858 li
272.422 482.352 li
276.881 481.858 li
281.34 479.881 li
284.808 477.41 li
287.781 473.455 li
288.772 470.984 li
300.167 470.984 li
302.149 470.49 li
304.131 469.007 li
353.18 420.567 li
353.676 419.084 li
354.171 418.589 li
354.667 416.118 li
354.667 279.695 li
354.171 277.718 li
353.18 275.741 li
275.89 198.632 li
273.908 197.644 li
271.431 197.149 li
264.99 197.149 li
264.99 185.287 li
262.513 185.287 li
261.026 183.309 li
261.522 182.815 li
260.531 178.861 li
258.549 175.401 li
255.081 173.424 li
251.117 172.435 li
250.126 172.929 li
246.163 168.975 li
cp
147.073 352.849 mo
101.986 352.849 li
101.986 401.784 li
118.336 401.784 li
118.336 416.118 li
118.832 418.589 li
120.318 420.567 li
155.495 455.661 li
155.495 482.352 li
190.672 482.352 li
190.672 447.258 li
163.918 447.258 li
130.227 413.647 li
130.227 401.784 li
147.073 401.784 li
cp
0 .993988 1 0 cmyk
f
5.94541 lw
192.654 198.138 mo
192.654 182.815 li
@
192.654 182.815 mo
207.518 167.987 li
@
251.117 198.138 mo
251.117 182.815 li
@
236.749 167.987 mo
251.117 182.815 li
@
124.282 416.118 mo
124.282 377.069 li
@
148.559 241.141 mo
148.559 241.141 li
@
196.618 202.092 mo
197.608 203.081 li
@
4.95453 lw
244.181 203.081 mo
246.163 203.081 li
@
5.94541 lw
348.721 416.118 mo
348.721 279.695 li
@
148.559 275.247 mo
148.559 241.141 li
@
222.877 464.558 mo
231.795 464.558 li
@
272.422 464.558 mo
300.167 464.558 li
@
124.282 299.467 mo
148.559 275.247 li
@
148.559 202.092 mo
196.618 202.092 li
@
246.163 203.081 mo
271.431 203.081 li
@
124.282 416.118 mo
173.331 464.558 li
@
300.167 464.558 mo
348.721 416.118 li
@
271.431 203.081 mo
348.721 279.695 li
@
231.795 464.558 mo
309.581 386.955 li
@
258.054 183.062 mo
258.054 187.021 254.837 190.229 250.87 190.229 cv
246.902 190.229 243.686 187.021 243.686 183.062 cv
243.686 179.104 246.902 175.895 250.87 175.895 cv
254.837 175.895 258.054 179.104 258.054 183.062 cv
.516442 .431464 .431464 .0754406 cmyk
f
199.59 183.062 mo
199.59 187.021 196.374 190.229 192.406 190.229 cv
188.439 190.229 185.222 187.021 185.222 183.062 cv
185.222 179.104 188.439 175.895 192.406 175.895 cv
196.374 175.895 199.59 179.104 199.59 183.062 cv
f
275.394 348.154 mo
275.394 351.02 273.065 353.344 270.192 353.344 cv
267.319 353.344 264.99 351.02 264.99 348.154 cv
264.99 345.287 267.319 342.964 270.192 342.964 cv
273.065 342.964 275.394 345.287 275.394 348.154 cv
f
275.394 387.202 mo
275.394 390.069 273.065 392.392 270.192 392.392 cv
267.319 392.392 264.99 390.069 264.99 387.202 cv
264.99 384.336 267.319 382.012 270.192 382.012 cv
273.065 382.012 275.394 384.336 275.394 387.202 cv
f
275.394 309.105 mo
275.394 311.972 273.065 314.295 270.192 314.295 cv
267.319 314.295 264.99 311.972 264.99 309.105 cv
264.99 306.239 267.319 303.915 270.192 303.915 cv
273.065 303.915 275.394 306.239 275.394 309.105 cv
f
226.84 309.105 mo
226.84 311.972 224.511 314.295 221.638 314.295 cv
218.765 314.295 216.436 311.972 216.436 309.105 cv
216.436 306.239 218.765 303.915 221.638 303.915 cv
224.511 303.915 226.84 306.239 226.84 309.105 cv
f
178.286 270.551 mo
178.286 273.417 175.957 275.741 173.084 275.741 cv
170.211 275.741 167.882 273.417 167.882 270.551 cv
167.882 267.684 170.211 265.361 173.084 265.361 cv
175.957 265.361 178.286 267.684 178.286 270.551 cv
f
275.394 270.551 mo
275.394 273.417 273.065 275.741 270.192 275.741 cv
267.319 275.741 264.99 273.417 264.99 270.551 cv
264.99 267.684 267.319 265.361 270.192 265.361 cv
273.065 265.361 275.394 267.684 275.394 270.551 cv
f
226.84 270.551 mo
226.84 273.417 224.511 275.741 221.638 275.741 cv
218.765 275.741 216.436 273.417 216.436 270.551 cv
216.436 267.684 218.765 265.361 221.638 265.361 cv
224.511 265.361 226.84 267.684 226.84 270.551 cv
f
314.535 426.251 mo
314.535 429.117 312.206 431.441 309.333 431.441 cv
306.46 431.441 304.131 429.117 304.131 426.251 cv
304.131 423.385 306.46 421.061 309.333 421.061 cv
312.206 421.061 314.535 423.385 314.535 426.251 cv
f
314.535 493.968 mo
314.535 496.834 312.206 499.158 309.333 499.158 cv
306.46 499.158 304.131 496.834 304.131 493.968 cv
304.131 491.102 306.46 488.778 309.333 488.778 cv
312.206 488.778 314.535 491.102 314.535 493.968 cv
f
343.767 464.805 mo
343.767 467.672 341.438 469.995 338.565 469.995 cv
335.691 469.995 333.362 467.672 333.362 464.805 cv
333.362 461.939 335.691 459.615 338.565 459.615 cv
341.438 459.615 343.767 461.939 343.767 464.805 cv
f
402.23 397.088 mo
402.23 399.954 399.901 402.278 397.028 402.278 cv
394.155 402.278 391.826 399.954 391.826 397.088 cv
391.826 394.222 394.155 391.898 397.028 391.898 cv
399.901 391.898 402.23 394.222 402.23 397.088 cv
f
372.998 397.088 mo
372.998 399.954 370.669 402.278 367.796 402.278 cv
364.923 402.278 362.594 399.954 362.594 397.088 cv
362.594 394.222 364.923 391.898 367.796 391.898 cv
370.669 391.898 372.998 394.222 372.998 397.088 cv
f
372.998 358.039 mo
372.998 360.906 370.669 363.229 367.796 363.229 cv
364.923 363.229 362.594 360.906 362.594 358.039 cv
362.594 355.173 364.923 352.849 367.796 352.849 cv
370.669 352.849 372.998 355.173 372.998 358.039 cv
f
402.23 358.039 mo
402.23 360.906 399.901 363.229 397.028 363.229 cv
394.155 363.229 391.826 360.906 391.826 358.039 cv
391.826 355.173 394.155 352.849 397.028 352.849 cv
399.901 352.849 402.23 355.173 402.23 358.039 cv
f
372.998 318.991 mo
372.998 321.857 370.669 324.181 367.796 324.181 cv
364.923 324.181 362.594 321.857 362.594 318.991 cv
362.594 316.125 364.923 313.801 367.796 313.801 cv
370.669 313.801 372.998 316.125 372.998 318.991 cv
f
402.23 318.991 mo
402.23 321.857 399.901 324.181 397.028 324.181 cv
394.155 324.181 391.826 321.857 391.826 318.991 cv
391.826 316.125 394.155 313.801 397.028 313.801 cv
399.901 313.801 402.23 316.125 402.23 318.991 cv
f
372.998 279.942 mo
372.998 282.809 370.669 285.132 367.796 285.132 cv
364.923 285.132 362.594 282.809 362.594 279.942 cv
362.594 277.076 364.923 274.752 367.796 274.752 cv
370.669 274.752 372.998 277.076 372.998 279.942 cv
f
402.23 279.942 mo
402.23 282.809 399.901 285.132 397.028 285.132 cv
394.155 285.132 391.826 282.809 391.826 279.942 cv
391.826 277.076 394.155 274.752 397.028 274.752 cv
399.901 274.752 402.23 277.076 402.23 279.942 cv
f
372.998 163.291 mo
372.998 166.157 370.669 168.481 367.796 168.481 cv
364.923 168.481 362.594 166.157 362.594 163.291 cv
362.594 160.424 364.923 158.101 367.796 158.101 cv
370.669 158.101 372.998 160.424 372.998 163.291 cv
f
324.444 163.291 mo
324.444 166.157 322.115 168.481 319.242 168.481 cv
316.369 168.481 314.04 166.157 314.04 163.291 cv
314.04 160.424 316.369 158.101 319.242 158.101 cv
322.115 158.101 324.444 160.424 324.444 163.291 cv
f
324.444 192.454 mo
324.444 195.32 322.115 197.644 319.242 197.644 cv
316.369 197.644 314.04 195.32 314.04 192.454 cv
314.04 189.587 316.369 187.264 319.242 187.264 cv
322.115 187.264 324.444 189.587 324.444 192.454 cv
f
295.213 192.454 mo
295.213 195.32 292.883 197.644 290.01 197.644 cv
287.137 197.644 284.808 195.32 284.808 192.454 cv
284.808 189.587 287.137 187.264 290.01 187.264 cv
292.883 187.264 295.213 189.587 295.213 192.454 cv
f
256.072 144.014 mo
256.072 146.88 253.743 149.204 250.87 149.204 cv
247.997 149.204 245.667 146.88 245.667 144.014 cv
245.667 141.147 247.997 138.824 250.87 138.824 cv
253.743 138.824 256.072 141.147 256.072 144.014 cv
f
197.609 144.014 mo
197.609 146.88 195.279 149.204 192.406 149.204 cv
189.533 149.204 187.204 146.88 187.204 144.014 cv
187.204 141.147 189.533 138.824 192.406 138.824 cv
195.279 138.824 197.609 141.147 197.609 144.014 cv
f
119.823 192.454 mo
119.823 195.32 117.494 197.644 114.62 197.644 cv
111.747 197.644 109.418 195.32 109.418 192.454 cv
109.418 189.587 111.747 187.264 114.62 187.264 cv
117.494 187.264 119.823 189.587 119.823 192.454 cv
f
119.823 250.779 mo
119.823 253.646 117.494 255.969 114.62 255.969 cv
111.747 255.969 109.418 253.646 109.418 250.779 cv
109.418 247.913 111.747 245.589 114.62 245.589 cv
117.494 245.589 119.823 247.913 119.823 250.779 cv
f
314.535 307.128 mo
314.535 309.994 312.206 312.318 309.333 312.318 cv
306.46 312.318 304.131 309.994 304.131 307.128 cv
304.131 304.262 306.46 301.938 309.333 301.938 cv
312.206 301.938 314.535 304.262 314.535 307.128 cv
f
295.213 241.388 mo
295.213 244.254 292.883 246.578 290.01 246.578 cv
287.137 246.578 284.808 244.254 284.808 241.388 cv
284.808 238.522 287.137 236.198 290.01 236.198 cv
292.883 236.198 295.213 238.522 295.213 241.388 cv
f
80.6821 435.642 mo
80.6821 438.509 78.3529 440.832 75.4798 440.832 cv
72.6067 440.832 70.2776 438.509 70.2776 435.642 cv
70.2776 432.776 72.6067 430.452 75.4798 430.452 cv
78.3529 430.452 80.6821 432.776 80.6821 435.642 cv
f
109.914 435.642 mo
109.914 438.509 107.585 440.832 104.711 440.832 cv
101.838 440.832 99.5092 438.509 99.5092 435.642 cv
99.5092 432.776 101.838 430.452 104.711 430.452 cv
107.585 430.452 109.914 432.776 109.914 435.642 cv
f
109.914 464.805 mo
109.914 467.672 107.585 469.995 104.711 469.995 cv
101.838 469.995 99.5092 467.672 99.5092 464.805 cv
99.5092 461.939 101.838 459.615 104.711 459.615 cv
107.585 459.615 109.914 461.939 109.914 464.805 cv
f
139.145 464.805 mo
139.145 467.672 136.816 469.995 133.943 469.995 cv
131.07 469.995 128.741 467.672 128.741 464.805 cv
128.741 461.939 131.07 459.615 133.943 459.615 cv
136.816 459.615 139.145 461.939 139.145 464.805 cv
f
139.145 493.968 mo
139.145 496.834 136.816 499.158 133.943 499.158 cv
131.07 499.158 128.741 496.834 128.741 493.968 cv
128.741 491.102 131.07 488.778 133.943 488.778 cv
136.816 488.778 139.145 491.102 139.145 493.968 cv
f
226.84 499.9 mo
226.84 502.766 224.511 505.09 221.638 505.09 cv
218.765 505.09 216.436 502.766 216.436 499.9 cv
216.436 497.033 218.765 494.71 221.638 494.71 cv
224.511 494.71 226.84 497.033 226.84 499.9 cv
f
295.213 163.291 mo
295.213 166.157 292.883 168.481 290.01 168.481 cv
287.137 168.481 284.808 166.157 284.808 163.291 cv
284.808 160.424 287.137 158.101 290.01 158.101 cv
292.883 158.101 295.213 160.424 295.213 163.291 cv
f
158.468 163.291 mo
158.468 166.157 156.139 168.481 153.266 168.481 cv
150.393 168.481 148.063 166.157 148.063 163.291 cv
148.063 160.424 150.393 158.101 153.266 158.101 cv
156.139 158.101 158.468 160.424 158.468 163.291 cv
f
119.823 163.291 mo
119.823 166.157 117.494 168.481 114.62 168.481 cv
111.747 168.481 109.418 166.157 109.418 163.291 cv
109.418 160.424 111.747 158.101 114.62 158.101 cv
117.494 158.101 119.823 160.424 119.823 163.291 cv
f
402.23 163.291 mo
402.23 166.157 399.901 168.481 397.028 168.481 cv
394.155 168.481 391.826 166.157 391.826 163.291 cv
391.826 160.424 394.155 158.101 397.028 158.101 cv
399.901 158.101 402.23 160.424 402.23 163.291 cv
f
51.4504 163.291 mo
51.4504 166.157 49.1213 168.481 46.2482 168.481 cv
43.3751 168.481 41.046 166.157 41.046 163.291 cv
41.046 160.424 43.3751 158.101 46.2482 158.101 cv
49.1213 158.101 51.4504 160.424 51.4504 163.291 cv
f
80.6821 163.291 mo
80.6821 166.157 78.3529 168.481 75.4798 168.481 cv
72.6067 168.481 70.2776 166.157 70.2776 163.291 cv
70.2776 160.424 72.6067 158.101 75.4798 158.101 cv
78.3529 158.101 80.6821 160.424 80.6821 163.291 cv
f
51.4504 183.062 mo
51.4504 185.929 49.1213 188.252 46.2482 188.252 cv
43.3751 188.252 41.046 185.929 41.046 183.062 cv
41.046 180.196 43.3751 177.872 46.2482 177.872 cv
49.1213 177.872 51.4504 180.196 51.4504 183.062 cv
f
402.23 260.665 mo
402.23 263.531 399.901 265.855 397.028 265.855 cv
394.155 265.855 391.826 263.531 391.826 260.665 cv
391.826 257.799 394.155 255.475 397.028 255.475 cv
399.901 255.475 402.23 257.799 402.23 260.665 cv
f
402.23 183.062 mo
402.23 185.929 399.901 188.252 397.028 188.252 cv
394.155 188.252 391.826 185.929 391.826 183.062 cv
391.826 180.196 394.155 177.872 397.028 177.872 cv
399.901 177.872 402.23 180.196 402.23 183.062 cv
f
51.4504 260.665 mo
51.4504 263.531 49.1213 265.855 46.2482 265.855 cv
43.3751 265.855 41.046 263.531 41.046 260.665 cv
41.046 257.799 43.3751 255.475 46.2482 255.475 cv
49.1213 255.475 51.4504 257.799 51.4504 260.665 cv
f
51.4504 279.942 mo
51.4504 282.809 49.1213 285.132 46.2482 285.132 cv
43.3751 285.132 41.046 282.809 41.046 279.942 cv
41.046 277.076 43.3751 274.752 46.2482 274.752 cv
49.1213 274.752 51.4504 277.076 51.4504 279.942 cv
f
80.6821 279.942 mo
80.6821 282.809 78.3529 285.132 75.4798 285.132 cv
72.6067 285.132 70.2776 282.809 70.2776 279.942 cv
70.2776 277.076 72.6067 274.752 75.4798 274.752 cv
78.3529 274.752 80.6821 277.076 80.6821 279.942 cv
f
80.6821 318.991 mo
80.6821 321.857 78.3529 324.181 75.4798 324.181 cv
72.6067 324.181 70.2776 321.857 70.2776 318.991 cv
70.2776 316.125 72.6067 313.801 75.4798 313.801 cv
78.3529 313.801 80.6821 316.125 80.6821 318.991 cv
f
51.4504 318.991 mo
51.4504 321.857 49.1213 324.181 46.2482 324.181 cv
43.3751 324.181 41.046 321.857 41.046 318.991 cv
41.046 316.125 43.3751 313.801 46.2482 313.801 cv
49.1213 313.801 51.4504 316.125 51.4504 318.991 cv
f
51.4504 397.088 mo
51.4504 399.954 49.1213 402.278 46.2482 402.278 cv
43.3751 402.278 41.046 399.954 41.046 397.088 cv
41.046 394.222 43.3751 391.898 46.2482 391.898 cv
49.1213 391.898 51.4504 394.222 51.4504 397.088 cv
f
51.4504 358.039 mo
51.4504 360.906 49.1213 363.229 46.2482 363.229 cv
43.3751 363.229 41.046 360.906 41.046 358.039 cv
41.046 355.173 43.3751 352.849 46.2482 352.849 cv
49.1213 352.849 51.4504 355.173 51.4504 358.039 cv
f
80.6821 358.039 mo
80.6821 360.906 78.3529 363.229 75.4798 363.229 cv
72.6067 363.229 70.2776 360.906 70.2776 358.039 cv
70.2776 355.173 72.6067 352.849 75.4798 352.849 cv
78.3529 352.849 80.6821 355.173 80.6821 358.039 cv
f
80.6821 397.088 mo
80.6821 399.954 78.3529 402.278 75.4798 402.278 cv
72.6067 402.278 70.2776 399.954 70.2776 397.088 cv
70.2776 394.222 72.6067 391.898 75.4798 391.898 cv
78.3529 391.898 80.6821 394.222 80.6821 397.088 cv
f
178.286 387.202 mo
178.286 390.069 175.957 392.392 173.084 392.392 cv
170.211 392.392 167.882 390.069 167.882 387.202 cv
167.882 384.336 170.211 382.012 173.084 382.012 cv
175.957 382.012 178.286 384.336 178.286 387.202 cv
f
178.286 309.105 mo
178.286 311.972 175.957 314.295 173.084 314.295 cv
170.211 314.295 167.882 311.972 167.882 309.105 cv
167.882 306.239 170.211 303.915 173.084 303.915 cv
175.957 303.915 178.286 306.239 178.286 309.105 cv
f
178.286 348.154 mo
178.286 351.02 175.957 353.344 173.084 353.344 cv
170.211 353.344 167.882 351.02 167.882 348.154 cv
167.882 345.287 170.211 342.964 173.084 342.964 cv
175.957 342.964 178.286 345.287 178.286 348.154 cv
f
226.84 221.617 mo
226.84 224.483 224.511 226.807 221.638 226.807 cv
218.765 226.807 216.436 224.483 216.436 221.617 cv
216.436 218.75 218.765 216.427 221.638 216.427 cv
224.511 216.427 226.84 218.75 226.84 221.617 cv
f
314.535 270.551 mo
314.535 273.417 312.206 275.741 309.333 275.741 cv
306.46 275.741 304.131 273.417 304.131 270.551 cv
304.131 267.684 306.46 265.361 309.333 265.361 cv
312.206 265.361 314.535 267.684 314.535 270.551 cv
f
372.998 435.642 mo
372.998 438.509 370.669 440.832 367.796 440.832 cv
364.923 440.832 362.594 438.509 362.594 435.642 cv
362.594 432.776 364.923 430.452 367.796 430.452 cv
370.669 430.452 372.998 432.776 372.998 435.642 cv
f
252.108 474.691 mo
252.108 477.557 249.779 479.881 246.906 479.881 cv
244.033 479.881 241.704 477.557 241.704 474.691 cv
241.704 471.825 244.033 469.501 246.906 469.501 cv
249.779 469.501 252.108 471.825 252.108 474.691 cv
f
203.554 474.691 mo
203.554 477.557 201.225 479.881 198.352 479.881 cv
195.479 479.881 193.15 477.557 193.15 474.691 cv
193.15 471.825 195.479 469.501 198.352 469.501 cv
201.225 469.501 203.554 471.825 203.554 474.691 cv
f
158.468 450.224 mo
158.468 479.387 li
187.7 479.387 li
187.7 450.224 li
cp
ef
29.2316 lw
222.877 464.558 mo
222.877 464.558 li
@
272.422 464.558 mo
272.422 464.558 li
@
214.454 159.089 mo
200.581 159.089 li
200.581 176.389 li
214.454 176.389 li
cp
0 .993988 1 0 cmyk
ef
243.686 159.089 mo
229.813 159.089 li
229.813 176.389 li
243.686 176.389 li
cp
ef
230.804 188.252 mo
230.804 217.415 li
262.017 217.415 li
262.017 188.252 li
cp
ef
230.804 225.324 mo
230.804 254.487 li
262.017 254.487 li
262.017 225.324 li
cp
ef
104.959 277.718 mo
104.959 320.721 li
144.1 320.721 li
144.1 277.718 li
cp
ef
104.959 355.815 mo
104.959 398.818 li
144.1 398.818 li
144.1 355.815 li
cp
ef
163.918 256.958 mo
163.918 225.818 li
132.704 225.818 li
132.704 256.958 li
cp
ef
163.918 217.909 mo
163.918 186.769 li
132.704 186.769 li
132.704 217.909 li
cp
ef
181.754 188.252 mo
181.754 217.415 li
212.968 217.415 li
212.968 188.252 li
cp
ef
181.754 225.324 mo
181.754 254.487 li
212.968 254.487 li
212.968 225.324 li
cp
ef
324.94 402.772 mo
324.94 371.632 li
293.726 371.632 li
293.726 402.772 li
cp
ef
324.94 363.229 mo
324.94 332.089 li
293.726 332.089 li
293.726 363.229 li
cp
ef
1.98183 lw
75.7275 270.304 mo
75.7275 260.418 li
.275517 .158297 .678767 0 cmyk
@
75.7275 182.815 mo
75.7275 172.929 li
@
114.868 221.369 mo
124.282 221.369 li
@
319.49 221.369 mo
329.399 221.369 li
@
368.044 270.304 mo
368.044 260.418 li
@
368.044 180.838 mo
368.044 172.929 li
@
368.044 182.815 mo
368.044 180.838 li
@
3.96358 lw
191.663 242.129 mo
191.663 220.381 li
@
191.663 242.129 mo
207.518 242.129 li
@
252.108 242.129 mo
252.108 220.381 li
@
236.749 242.129 mo
252.108 242.129 li
@
1.98183 lw
173.331 367.678 mo
182.745 367.678 li
@
173.331 75.555 mo
182.745 75.555 li
@
261.026 367.678 mo
270.44 367.678 li
@
261.026 75.555 mo
270.44 75.555 li
@
221.886 328.629 mo
221.886 318.744 li
@
221.886 123.995 mo
221.886 114.604 li
@
221.886 279.695 mo
221.886 163.044 li
@
163.422 221.369 mo
280.349 221.369 li
@
145.091 222.852 mo
145.091 222.852 li
145.091 223.347 li
145.091 223.841 li
145.091 224.335 li
145.586 224.829 li
145.586 225.324 li
145.586 225.818 li
145.586 226.312 li
146.082 226.807 li
146.082 227.301 li
146.577 227.795 li
147.073 227.795 li
147.073 228.289 li
147.568 228.289 li
147.568 228.784 li
148.063 228.784 li
148.559 228.784 li
149.054 229.278 li
149.55 229.278 li
150.045 229.278 li
150.541 229.278 li
151.036 229.772 li
151.532 229.772 li
152.027 229.772 li
152.523 229.278 li
153.018 229.278 li
153.513 229.278 li
154.009 229.278 li
154.504 229.278 li
154.504 228.784 li
155 228.784 li
155.495 228.784 li
155.495 228.289 li
155.991 228.289 li
155.991 227.795 li
156.486 227.795 li
156.486 227.301 li
156.982 227.301 li
156.982 226.807 li
156.982 226.312 li
156.982 225.818 li
157.477 225.818 li
157.477 225.324 li
157.477 224.829 li
157.477 224.335 li
157.477 223.841 li
157.477 223.347 li
157.477 212.472 li
154.504 212.472 li
154.504 223.347 li
154.504 223.841 li
154.504 224.335 li
154.009 224.829 li
154.009 225.324 li
154.009 225.818 li
153.513 225.818 li
153.513 226.312 li
153.018 226.312 li
152.523 226.807 li
152.027 226.807 li
151.532 226.807 li
151.036 226.807 li
150.541 226.807 li
150.045 226.807 li
149.55 226.807 li
149.55 226.312 li
149.054 226.312 li
149.054 225.818 li
148.559 225.324 li
148.559 224.829 li
148.559 224.335 li
148.559 223.841 li
148.559 223.347 li
148.559 212.472 li
145.091 212.472 li
cp
f
142.118 229.278 mo
142.118 226.312 li
137.659 226.312 li
137.659 215.438 li
141.623 217.415 li
142.613 214.944 li
137.164 212.472 li
134.686 212.472 li
134.686 226.312 li
130.723 226.312 li
130.723 229.278 li
cp
f
343.767 435.89 mo
343.767 435.89 li
343.271 435.89 li
342.776 435.89 li
342.28 435.89 li
341.785 436.384 li
341.289 436.384 li
340.794 436.384 li
340.794 436.878 li
340.299 436.878 li
340.299 437.372 li
339.803 437.372 li
339.803 437.867 li
339.308 437.867 li
339.308 438.361 li
339.308 438.855 li
338.812 439.349 li
338.812 439.844 li
338.812 440.338 li
338.812 440.832 li
338.812 441.821 li
338.812 442.315 li
338.812 442.81 li
338.812 443.798 li
339.308 444.292 li
339.308 444.787 li
339.803 445.281 li
342.776 445.281 li
342.28 445.281 li
342.28 444.787 li
342.28 444.292 li
341.785 444.292 li
341.785 443.798 li
341.785 443.304 li
341.785 442.81 li
341.289 442.81 li
341.289 442.315 li
341.289 441.821 li
341.289 441.327 li
341.289 440.832 li
341.785 440.832 li
341.785 440.338 li
341.785 439.844 li
342.28 439.844 li
342.776 439.349 li
343.271 439.349 li
343.767 438.855 li
344.262 438.855 li
353.18 438.855 li
353.18 445.281 li
356.153 445.281 li
356.153 435.89 li
cp
f
338.812 430.452 mo
356.153 430.452 li
356.153 426.992 li
341.785 426.992 li
341.785 420.072 li
338.812 420.072 li
cp
f
339.803 405.244 mo
339.803 405.244 li
339.308 405.244 li
339.308 405.738 li
339.308 406.232 li
339.308 406.727 li
338.812 407.715 li
338.812 408.209 li
338.812 408.704 li
338.812 409.198 li
338.812 409.692 li
338.812 410.187 li
338.812 410.681 li
338.812 411.175 li
338.812 411.669 li
339.308 412.164 li
339.308 412.658 li
339.308 413.152 li
339.803 413.647 li
339.803 414.141 li
340.299 414.635 li
340.299 415.129 li
340.794 415.129 li
341.289 415.624 li
341.785 415.624 li
341.785 416.118 li
342.28 416.118 li
342.776 416.612 li
343.271 416.612 li
343.767 416.612 li
344.262 417.107 li
344.758 417.107 li
345.253 417.107 li
345.749 417.107 li
346.244 417.107 li
347.235 417.107 li
347.73 417.107 li
348.226 417.107 li
349.217 417.107 li
349.712 417.107 li
350.208 417.107 li
351.198 416.612 li
351.694 416.612 li
352.189 416.118 li
352.685 415.624 li
353.18 415.624 li
353.676 415.129 li
354.171 415.129 li
354.171 414.635 li
354.667 414.635 li
354.667 414.141 li
355.162 413.647 li
355.162 413.152 li
355.658 412.658 li
355.658 412.164 li
355.658 411.669 li
356.153 411.175 li
356.153 410.681 li
356.153 410.187 li
356.153 409.198 li
356.153 408.704 li
356.153 408.209 li
356.153 407.715 li
356.153 407.221 li
356.153 406.727 li
355.658 406.232 li
355.658 405.738 li
355.658 405.244 li
352.189 405.244 li
352.685 405.244 li
352.685 405.738 li
352.685 406.232 li
352.685 406.727 li
353.18 407.221 li
353.18 407.715 li
353.18 408.209 li
353.18 408.704 li
353.18 409.198 li
353.18 409.692 li
353.18 410.187 li
353.18 410.681 li
352.685 411.175 li
352.685 411.669 li
352.189 412.164 li
352.189 412.658 li
351.694 412.658 li
351.198 412.658 li
351.198 413.152 li
350.703 413.152 li
350.208 413.152 li
349.712 413.647 li
349.217 413.647 li
348.721 413.647 li
348.226 413.647 li
347.73 413.647 li
347.235 413.647 li
346.739 413.647 li
346.244 413.647 li
345.749 413.647 li
344.758 413.647 li
344.758 413.152 li
344.262 413.152 li
343.767 413.152 li
343.271 412.658 li
342.776 412.658 li
342.776 412.164 li
342.28 411.669 li
341.785 411.175 li
341.785 410.681 li
341.785 410.187 li
341.785 409.692 li
341.785 409.198 li
341.785 408.704 li
341.785 408.209 li
341.785 407.715 li
341.785 407.221 li
341.785 406.727 li
342.28 406.727 li
342.28 406.232 li
342.28 405.738 li
342.776 405.244 li
cp
f
343.767 391.898 mo
343.767 391.898 li
343.271 391.898 li
342.776 391.898 li
342.28 392.392 li
341.785 392.392 li
341.289 392.392 li
340.794 392.887 li
340.299 393.381 li
339.803 393.381 li
339.803 393.875 li
339.308 394.369 li
339.308 394.864 li
339.308 395.358 li
338.812 395.358 li
338.812 395.852 li
338.812 396.347 li
338.812 396.841 li
338.812 397.335 li
338.812 397.829 li
338.812 398.324 li
338.812 398.818 li
338.812 399.807 li
338.812 400.301 li
339.308 400.301 li
339.308 400.795 li
339.803 401.289 li
342.776 401.289 li
342.28 401.289 li
342.28 400.795 li
342.28 400.301 li
341.785 400.301 li
341.785 399.807 li
341.785 399.312 li
341.289 398.818 li
341.289 398.324 li
341.289 397.829 li
341.289 397.335 li
341.289 396.841 li
341.785 396.841 li
341.785 396.347 li
341.785 395.852 li
342.28 395.852 li
342.776 395.852 li
342.776 395.358 li
343.271 395.358 li
343.767 395.358 li
344.262 395.358 li
353.18 395.358 li
353.18 401.289 li
356.153 401.289 li
356.153 391.898 li
cp
f
338.812 386.461 mo
356.153 386.461 li
356.153 383.495 li
341.785 383.495 li
341.785 376.081 li
338.812 376.081 li
cp
f
339.803 361.252 mo
339.803 361.252 li
339.308 361.747 li
339.308 362.241 li
339.308 362.735 li
338.812 363.724 li
338.812 364.218 li
338.812 364.712 li
338.812 365.207 li
338.812 365.701 li
338.812 366.195 li
338.812 366.689 li
338.812 367.184 li
338.812 368.172 li
339.308 368.667 li
339.308 369.161 li
339.308 369.655 li
339.803 370.149 li
340.299 370.644 li
340.299 371.138 li
340.794 371.632 li
341.289 371.632 li
341.785 372.127 li
342.28 372.621 li
342.776 372.621 li
343.271 373.115 li
343.767 373.115 li
344.262 373.115 li
344.758 373.115 li
345.253 373.115 li
345.749 373.115 li
346.244 373.609 li
347.235 373.609 li
347.73 373.609 li
348.226 373.115 li
349.217 373.115 li
349.712 373.115 li
350.208 373.115 li
351.198 373.115 li
351.198 372.621 li
351.694 372.621 li
352.189 372.621 li
352.189 372.127 li
352.685 372.127 li
353.18 371.632 li
353.676 371.138 li
354.171 371.138 li
354.667 370.644 li
354.667 370.149 li
355.162 369.655 li
355.162 369.161 li
355.658 368.667 li
355.658 368.172 li
355.658 367.678 li
356.153 367.184 li
356.153 366.689 li
356.153 366.195 li
356.153 365.701 li
356.153 365.207 li
356.153 364.712 li
356.153 364.218 li
356.153 363.724 li
356.153 363.229 li
356.153 362.735 li
355.658 362.735 li
355.658 362.241 li
355.658 361.747 li
355.658 361.252 li
352.189 361.252 li
352.685 361.252 li
352.685 361.747 li
352.685 362.241 li
352.685 362.735 li
353.18 363.724 li
353.18 364.218 li
353.18 364.712 li
353.18 365.207 li
353.18 365.701 li
353.18 366.195 li
353.18 366.689 li
353.18 367.184 li
352.685 367.184 li
352.685 367.678 li
352.189 368.172 li
352.189 368.667 li
351.694 368.667 li
351.694 369.161 li
351.198 369.161 li
350.703 369.161 li
350.703 369.655 li
350.208 369.655 li
349.712 369.655 li
349.217 369.655 li
348.721 369.655 li
348.226 369.655 li
347.73 369.655 li
347.235 369.655 li
346.739 369.655 li
346.244 369.655 li
345.749 369.655 li
344.758 369.655 li
344.262 369.655 li
344.262 369.161 li
343.767 369.161 li
343.271 369.161 li
343.271 368.667 li
342.776 368.667 li
342.776 368.172 li
342.28 368.172 li
342.28 367.678 li
341.785 367.184 li
341.785 366.689 li
341.785 366.195 li
341.785 365.701 li
341.785 365.207 li
341.785 364.712 li
341.785 364.218 li
341.785 363.724 li
341.785 363.229 li
342.28 362.735 li
342.28 362.241 li
342.28 361.747 li
342.776 361.252 li
cp
f
343.767 347.907 mo
343.767 347.907 li
343.271 347.907 li
342.776 348.401 li
342.28 348.401 li
341.785 348.401 li
341.289 348.401 li
341.289 348.895 li
340.794 348.895 li
340.299 349.389 li
339.803 349.884 li
339.308 350.378 li
339.308 350.872 li
339.308 351.367 li
338.812 351.367 li
338.812 351.861 li
338.812 352.355 li
338.812 352.849 li
338.812 353.344 li
338.812 353.838 li
338.812 354.332 li
338.812 354.827 li
338.812 355.321 li
338.812 355.815 li
338.812 356.309 li
339.308 356.309 li
339.308 356.804 li
339.308 357.298 li
339.803 357.792 li
342.776 357.792 li
342.28 357.298 li
342.28 356.804 li
341.785 356.804 li
341.785 356.309 li
341.785 355.815 li
341.785 355.321 li
341.289 354.827 li
341.289 354.332 li
341.289 353.838 li
341.289 353.344 li
341.289 352.849 li
341.785 352.849 li
341.785 352.355 li
342.28 352.355 li
342.28 351.861 li
342.776 351.861 li
342.776 351.367 li
343.271 351.367 li
343.767 351.367 li
344.262 351.367 li
353.18 351.367 li
353.18 357.298 li
356.153 357.298 li
356.153 347.907 li
cp
f
338.812 342.469 mo
356.153 342.469 li
356.153 339.504 li
341.785 339.504 li
341.785 332.089 li
338.812 332.089 li
cp
f
339.803 317.755 mo
339.803 317.755 li
339.308 317.755 li
339.308 318.249 li
339.308 318.744 li
339.308 319.238 li
338.812 319.732 li
338.812 320.227 li
338.812 320.721 li
338.812 321.215 li
338.812 321.709 li
338.812 322.204 li
338.812 322.698 li
338.812 323.192 li
338.812 323.687 li
338.812 324.181 li
339.308 324.675 li
339.308 325.169 li
339.308 325.664 li
339.803 326.158 li
339.803 326.652 li
340.299 326.652 li
340.299 327.147 li
340.794 327.641 li
341.289 327.641 li
341.289 328.135 li
341.785 328.135 li
341.785 328.629 li
342.28 328.629 li
342.776 328.629 li
343.271 329.124 li
343.767 329.124 li
344.262 329.124 li
344.758 329.124 li
345.253 329.618 li
345.749 329.618 li
346.244 329.618 li
347.235 329.618 li
347.73 329.618 li
348.226 329.618 li
349.217 329.618 li
349.712 329.124 li
350.208 329.124 li
351.198 329.124 li
351.694 328.629 li
352.189 328.629 li
352.685 328.135 li
353.18 327.641 li
353.676 327.641 li
354.171 327.147 li
354.667 326.652 li
355.162 326.158 li
355.162 325.664 li
355.658 325.169 li
355.658 324.675 li
355.658 324.181 li
356.153 323.687 li
356.153 323.192 li
356.153 322.204 li
356.153 321.709 li
356.153 321.215 li
356.153 320.721 li
356.153 320.227 li
356.153 319.732 li
356.153 319.238 li
355.658 318.744 li
355.658 318.249 li
355.658 317.755 li
352.189 317.755 li
352.685 317.755 li
352.685 318.249 li
352.685 318.744 li
353.18 319.732 li
353.18 320.227 li
353.18 320.721 li
353.18 321.709 li
353.18 322.204 li
353.18 322.698 li
353.18 323.192 li
352.685 323.687 li
352.685 324.181 li
352.189 324.181 li
352.189 324.675 li
351.694 325.169 li
351.198 325.169 li
350.703 325.664 li
350.208 325.664 li
349.712 325.664 li
349.217 325.664 li
349.217 326.158 li
348.721 326.158 li
348.226 326.158 li
347.73 326.158 li
347.235 326.158 li
346.739 326.158 li
346.244 326.158 li
345.749 326.158 li
344.758 325.664 li
344.262 325.664 li
343.767 325.169 li
343.271 325.169 li
342.776 324.675 li
342.776 324.181 li
342.28 324.181 li
342.28 323.687 li
341.785 323.687 li
341.785 323.192 li
341.785 322.698 li
341.785 322.204 li
341.785 321.709 li
341.785 321.215 li
341.785 320.721 li
341.785 320.227 li
341.785 319.732 li
341.785 319.238 li
342.28 318.744 li
342.28 318.249 li
342.28 317.755 li
342.776 317.755 li
cp
f
343.767 304.409 mo
343.767 304.409 li
343.271 304.409 li
342.776 304.409 li
342.28 304.409 li
341.785 304.904 li
341.289 304.904 li
340.794 304.904 li
340.794 305.398 li
340.299 305.398 li
340.299 305.892 li
339.803 305.892 li
339.803 306.387 li
339.308 306.387 li
339.308 306.881 li
339.308 307.375 li
338.812 307.869 li
338.812 308.364 li
338.812 308.858 li
338.812 309.352 li
338.812 309.847 li
338.812 310.341 li
338.812 310.835 li
338.812 311.329 li
338.812 312.318 li
339.308 312.812 li
339.308 313.307 li
339.803 313.801 li
342.776 313.801 li
342.28 313.801 li
342.28 313.307 li
342.28 312.812 li
341.785 312.812 li
341.785 312.318 li
341.785 311.824 li
341.785 311.329 li
341.289 311.329 li
341.289 310.835 li
341.289 310.341 li
341.289 309.847 li
341.289 309.352 li
341.785 308.858 li
341.785 308.364 li
342.28 308.364 li
342.776 307.869 li
343.271 307.869 li
343.767 307.375 li
344.262 307.375 li
353.18 307.375 li
353.18 313.801 li
356.153 313.801 li
356.153 304.409 li
cp
f
338.812 298.972 mo
356.153 298.972 li
356.153 295.512 li
341.785 295.512 li
341.785 288.592 li
338.812 288.592 li
cp
f
339.803 273.764 mo
339.803 273.764 li
339.308 273.764 li
339.308 274.258 li
339.308 274.752 li
339.308 275.247 li
338.812 276.235 li
338.812 276.729 li
338.812 277.224 li
338.812 277.718 li
338.812 278.212 li
338.812 278.707 li
338.812 279.201 li
338.812 279.695 li
338.812 280.189 li
339.308 280.684 li
339.308 281.178 li
339.308 281.672 li
339.803 282.167 li
339.803 282.661 li
340.299 283.155 li
340.299 283.649 li
340.794 283.649 li
341.289 284.144 li
341.785 284.144 li
341.785 284.638 li
342.28 284.638 li
342.776 285.132 li
343.271 285.132 li
343.767 285.132 li
344.262 285.627 li
344.758 285.627 li
345.253 285.627 li
345.749 285.627 li
346.244 285.627 li
347.235 285.627 li
347.73 285.627 li
348.226 285.627 li
349.217 285.627 li
349.712 285.627 li
350.208 285.627 li
351.198 285.132 li
351.694 285.132 li
352.189 284.638 li
352.685 284.144 li
353.18 284.144 li
353.676 283.649 li
354.171 283.649 li
354.171 283.155 li
354.667 283.155 li
354.667 282.661 li
355.162 282.167 li
355.162 281.672 li
355.658 281.178 li
355.658 280.684 li
355.658 280.189 li
356.153 279.695 li
356.153 279.201 li
356.153 278.707 li
356.153 277.718 li
356.153 277.224 li
356.153 276.729 li
356.153 276.235 li
356.153 275.741 li
356.153 275.247 li
355.658 274.752 li
355.658 274.258 li
355.658 273.764 li
352.189 273.764 li
352.685 273.764 li
352.685 274.258 li
352.685 274.752 li
352.685 275.247 li
353.18 275.741 li
353.18 276.235 li
353.18 276.729 li
353.18 277.224 li
353.18 277.718 li
353.18 278.212 li
353.18 278.707 li
353.18 279.201 li
352.685 279.695 li
352.685 280.189 li
352.189 280.684 li
352.189 281.178 li
351.694 281.178 li
351.198 281.178 li
351.198 281.672 li
350.703 281.672 li
350.208 281.672 li
349.712 282.167 li
349.217 282.167 li
348.721 282.167 li
348.226 282.167 li
347.73 282.167 li
347.235 282.167 li
346.739 282.167 li
346.244 282.167 li
345.749 282.167 li
344.758 282.167 li
344.758 281.672 li
344.262 281.672 li
343.767 281.672 li
343.271 281.178 li
342.776 281.178 li
342.776 280.684 li
342.28 280.189 li
341.785 279.695 li
341.785 279.201 li
341.785 278.707 li
341.785 278.212 li
341.785 277.718 li
341.785 277.224 li
341.785 276.729 li
341.785 276.235 li
341.785 275.741 li
341.785 275.247 li
342.28 275.247 li
342.28 274.752 li
342.28 274.258 li
342.776 273.764 li
cp
f
4.95453 lw
188.195 199.127 mo
188.195 197.762 187.086 196.655 185.718 196.655 cv
184.35 196.655 183.24 197.762 183.24 199.127 cv
183.24 200.491 184.35 201.598 185.718 201.598 cv
187.086 201.598 188.195 200.491 188.195 199.127 cv
@
5.94541 lw
270.44 221.369 mo
270.44 194.617 248.701 172.929 221.886 172.929 cv
195.07 172.929 173.331 194.617 173.331 221.369 cv
173.331 248.122 195.07 269.809 221.886 269.809 cv
248.701 269.809 270.44 248.122 270.44 221.369 cv
@
1.98183 lw
75.7275 270.304 mo
75.7275 260.418 li
.873014 .24213 1 .129183 cmyk
@
75.7275 182.815 mo
75.7275 172.929 li
@
114.868 221.369 mo
124.282 221.369 li
@
319.49 221.369 mo
329.399 221.369 li
@
368.044 270.304 mo
368.044 260.418 li
@
368.044 180.838 mo
368.044 172.929 li
@
368.044 182.815 mo
368.044 180.838 li
@
3.96358 lw
97.0319 383.989 mo
97.0319 292.547 li
@
148.559 489.272 mo
148.559 439.844 li
@
151.532 383.989 mo
151.532 292.547 li
@
297.194 489.272 mo
297.194 439.844 li
@
1.98183 lw
173.331 367.678 mo
182.745 367.678 li
@
5.94541 lw
97.0319 268.821 mo
151.532 268.821 li
@
3.96358 lw
217.922 174.906 mo
225.849 174.906 li
@
1.98183 lw
173.331 75.555 mo
182.745 75.555 li
@
261.026 367.678 mo
270.44 367.678 li
@
261.026 75.555 mo
270.44 75.555 li
@
221.886 328.629 mo
221.886 318.744 li
@
221.886 123.995 mo
221.886 114.604 li
@
3.96358 lw
217.922 161.067 mo
225.849 161.067 li
@
148.559 489.272 mo
297.194 489.272 li
@
148.559 439.844 mo
297.194 439.844 li
@
319.49 461.098 mo
319.49 461.098 li
319.49 461.592 li
319.49 462.087 li
319.49 462.581 li
318.994 463.075 li
318.994 463.57 li
318.994 464.064 li
318.499 464.064 li
318.499 464.558 li
318.003 465.052 li
318.003 465.547 li
317.508 465.547 li
317.012 466.041 li
316.517 466.041 li
316.021 466.535 li
315.526 466.535 li
315.031 467.03 li
314.535 467.03 li
313.544 467.03 li
313.049 467.03 li
312.553 467.03 li
311.067 467.03 li
311.067 472.467 li
307.599 472.467 li
307.599 455.661 li
312.553 455.661 li
313.049 455.661 li
313.544 455.661 li
314.04 455.661 li
314.535 455.661 li
315.031 455.661 li
315.526 456.155 li
316.021 456.155 li
316.517 456.155 li
317.012 456.65 li
317.508 456.65 li
317.508 457.144 li
318.003 457.144 li
318.003 457.638 li
318.499 457.638 li
318.499 458.132 li
318.994 458.132 li
318.994 458.627 li
318.994 459.121 li
319.49 459.121 li
319.49 459.615 li
319.49 460.109 li
319.49 460.604 li
319.49 461.098 li
cp
316.021 461.098 mo
316.021 461.098 li
316.021 460.604 li
316.021 460.109 li
316.021 459.615 li
315.526 459.121 li
315.031 459.121 li
315.031 458.627 li
314.535 458.627 li
314.04 458.627 li
313.544 458.132 li
313.049 458.132 li
312.553 458.132 li
311.067 458.132 li
311.067 464.558 li
312.553 464.558 li
313.049 464.558 li
313.544 464.558 li
314.04 464.064 li
314.535 464.064 li
315.031 464.064 li
315.526 463.57 li
315.526 463.075 li
316.021 462.581 li
316.021 462.087 li
316.021 461.592 li
316.021 461.098 li
cp
f
322.462 472.467 mo
322.462 469.501 li
326.921 469.501 li
326.921 458.627 li
322.958 461.098 li
321.967 458.132 li
327.417 455.661 li
330.39 455.661 li
330.39 469.501 li
333.858 469.501 li
333.858 472.467 li
cp
f
216.931 151.675 mo
214.454 146.238 li
214.454 145.744 li
213.958 145.744 li
213.958 145.249 li
213.463 144.755 li
212.968 144.755 li
212.472 144.261 li
211.977 144.261 li
211.481 144.261 li
211.481 151.675 li
208.013 151.675 li
208.013 134.375 li
212.968 134.375 li
213.463 134.375 li
213.958 134.375 li
214.454 134.375 li
214.949 134.375 li
215.94 134.869 li
216.436 134.869 li
216.931 134.869 li
216.931 135.364 li
217.427 135.364 li
217.922 135.364 li
217.922 135.858 li
218.418 136.352 li
218.913 136.847 li
218.913 137.341 li
218.913 137.835 li
219.408 137.835 li
219.408 138.329 li
219.408 138.824 li
219.408 139.318 li
219.408 139.812 li
219.408 140.307 li
218.913 140.801 li
218.913 141.295 li
218.418 141.789 li
218.418 142.284 li
217.922 142.284 li
217.922 142.778 li
217.427 142.778 li
216.931 142.778 li
216.931 143.272 li
216.436 143.272 li
215.445 143.272 li
215.94 143.272 li
215.94 143.767 li
216.436 143.767 li
216.931 144.261 li
216.931 144.755 li
217.427 144.755 li
217.427 145.249 li
217.922 145.744 li
220.399 151.675 li
cp
215.94 139.318 mo
215.94 139.318 li
215.94 138.824 li
215.94 138.329 li
215.445 138.329 li
215.445 137.835 li
214.949 137.835 li
214.949 137.341 li
214.454 137.341 li
213.958 137.341 li
213.463 137.341 li
212.968 137.341 li
211.481 137.341 li
211.481 141.789 li
212.968 141.789 li
213.463 141.789 li
213.958 141.789 li
214.454 141.789 li
214.949 141.295 li
215.445 141.295 li
215.445 140.801 li
215.94 140.307 li
215.94 139.812 li
215.94 139.318 li
cp
f
223.372 151.675 mo
223.372 148.709 li
227.336 148.709 li
227.336 137.835 li
223.867 139.812 li
222.877 137.341 li
228.327 134.375 li
230.804 134.375 li
230.804 148.709 li
234.272 148.709 li
234.272 151.675 li
cp
f
279.358 114.604 mo
275.89 114.604 li
270.44 101.258 li
274.404 101.258 li
276.881 108.672 li
277.872 111.144 li
278.367 108.672 li
281.34 101.258 li
284.808 101.258 li
cp
f
299.176 105.706 mo
299.176 106.201 li
299.176 106.695 li
298.681 107.189 li
298.681 107.684 li
298.681 108.178 li
298.681 109.167 li
298.681 109.661 li
298.681 110.155 li
298.185 110.155 li
298.185 110.649 li
298.185 111.144 li
297.69 111.638 li
297.69 112.132 li
297.194 112.627 li
296.699 112.627 li
296.699 113.121 li
296.203 113.615 li
295.708 113.615 li
295.708 114.109 li
295.213 114.109 li
294.717 114.109 li
294.222 114.604 li
293.726 114.604 li
293.231 114.604 li
292.735 114.604 li
292.24 114.604 li
291.744 114.604 li
291.249 114.604 li
290.754 114.604 li
290.258 114.604 li
289.763 114.109 li
289.267 114.109 li
288.772 114.109 li
288.772 113.615 li
288.276 113.615 li
287.781 113.121 li
287.285 112.627 li
287.285 112.132 li
286.79 112.132 li
286.79 111.638 li
286.79 111.144 li
286.294 110.649 li
286.294 110.155 li
286.294 109.661 li
285.799 109.167 li
285.799 108.672 li
285.799 108.178 li
285.799 107.684 li
285.799 106.695 li
285.799 106.201 li
285.799 105.706 li
285.799 105.212 li
285.799 104.718 li
285.799 104.224 li
285.799 103.729 li
285.799 103.235 li
286.294 102.246 li
286.294 101.752 li
286.294 101.258 li
286.79 100.764 li
286.79 100.269 li
287.285 100.269 li
287.285 99.775 li
287.781 99.2808 li
288.276 98.7865 li
288.772 98.2922 li
289.267 98.2922 li
289.763 97.798 li
290.258 97.798 li
290.258 97.3037 li
290.754 97.3037 li
291.249 97.3037 li
291.744 97.3037 li
292.735 97.3037 li
293.231 97.3037 li
293.726 97.3037 li
294.222 97.3037 li
294.717 97.798 li
295.213 97.798 li
295.708 97.798 li
295.708 98.2922 li
296.203 98.2922 li
296.699 98.7865 li
297.194 99.2808 li
297.194 99.775 li
297.69 100.269 li
298.185 100.764 li
298.185 101.258 li
298.681 101.752 li
298.681 102.246 li
298.681 102.741 li
298.681 103.235 li
298.681 103.729 li
298.681 104.224 li
299.176 105.212 li
299.176 105.706 li
cp
288.772 106.201 mo
288.772 106.201 li
288.772 106.695 li
295.213 102.246 li
295.213 101.752 li
294.717 101.258 li
294.222 100.764 li
294.222 100.269 li
293.726 100.269 li
293.231 100.269 li
293.231 99.775 li
292.735 99.775 li
292.24 99.775 li
291.744 99.775 li
291.249 99.775 li
291.249 100.269 li
290.754 100.269 li
290.258 100.764 li
290.258 101.258 li
289.763 101.258 li
289.763 101.752 li
289.763 102.246 li
289.267 102.246 li
289.267 102.741 li
289.267 103.235 li
289.267 103.729 li
289.267 104.224 li
288.772 104.718 li
288.772 105.212 li
288.772 106.201 li
cp
295.708 106.201 mo
295.708 106.201 li
295.708 105.706 li
295.708 105.212 li
289.267 109.661 li
289.267 110.155 li
289.763 110.155 li
289.763 110.649 li
290.258 111.144 li
290.754 111.638 li
291.249 111.638 li
291.249 112.132 li
291.744 112.132 li
292.24 112.132 li
292.735 112.132 li
293.231 112.132 li
293.726 111.638 li
294.222 111.638 li
294.222 111.144 li
294.717 111.144 li
294.717 110.649 li
295.213 110.155 li
295.213 109.661 li
295.213 109.167 li
295.708 108.672 li
295.708 108.178 li
295.708 107.684 li
295.708 107.189 li
295.708 106.695 li
295.708 106.201 li
cp
f
307.103 109.661 mo
307.103 109.661 li
307.599 109.661 li
308.094 109.661 li
308.094 110.155 li
308.59 110.155 li
308.59 110.649 li
309.085 110.649 li
309.085 111.144 li
309.085 111.638 li
309.581 111.638 li
309.581 112.132 li
309.581 112.627 li
309.581 113.121 li
309.085 113.121 li
309.085 113.615 li
308.59 114.109 li
308.094 114.604 li
307.599 114.604 li
307.103 114.604 li
306.608 114.604 li
306.112 114.604 li
305.617 114.604 li
305.122 114.109 li
305.122 113.615 li
304.626 113.615 li
304.626 113.121 li
304.626 112.627 li
304.626 112.132 li
304.626 111.638 li
304.626 111.144 li
305.122 110.649 li
305.122 110.155 li
305.617 110.155 li
306.112 109.661 li
306.608 109.661 li
307.103 109.661 li
cp
f
316.517 114.604 mo
316.517 111.638 li
320.481 111.638 li
320.481 100.764 li
317.012 102.741 li
316.021 100.269 li
320.976 97.3037 li
323.949 97.3037 li
323.949 111.638 li
327.417 111.638 li
327.417 114.604 li
cp
f
336.335 109.661 mo
336.335 109.661 li
336.83 109.661 li
337.326 109.661 li
337.326 110.155 li
337.821 110.155 li
337.821 110.649 li
338.317 110.649 li
338.317 111.144 li
338.812 111.144 li
338.812 111.638 li
338.812 112.132 li
338.812 112.627 li
338.812 113.121 li
338.317 113.121 li
338.317 113.615 li
337.821 114.109 li
337.326 114.604 li
336.83 114.604 li
336.335 114.604 li
335.84 114.604 li
335.344 114.604 li
334.849 114.604 li
334.849 114.109 li
334.353 114.109 li
334.353 113.615 li
333.858 113.615 li
333.858 113.121 li
333.858 112.627 li
333.858 112.132 li
333.858 111.638 li
333.858 111.144 li
334.353 110.649 li
334.353 110.155 li
334.849 110.155 li
335.344 109.661 li
335.84 109.661 li
336.335 109.661 li
cp
f
357.639 105.706 mo
357.639 106.201 li
357.639 106.695 li
357.639 107.189 li
357.639 107.684 li
357.144 108.178 li
357.144 109.167 li
357.144 109.661 li
357.144 110.155 li
356.648 110.649 li
356.648 111.144 li
356.153 111.638 li
356.153 112.132 li
355.658 112.627 li
355.162 112.627 li
355.162 113.121 li
354.667 113.615 li
354.171 114.109 li
353.676 114.109 li
353.18 114.109 li
352.685 114.604 li
352.189 114.604 li
351.694 114.604 li
351.198 114.604 li
350.703 114.604 li
350.208 114.604 li
349.712 114.604 li
349.217 114.604 li
348.721 114.604 li
348.226 114.109 li
347.73 114.109 li
347.235 114.109 li
347.235 113.615 li
346.739 113.615 li
346.244 113.121 li
346.244 112.627 li
345.749 112.627 li
345.749 112.132 li
345.253 111.638 li
345.253 111.144 li
344.758 110.649 li
344.758 110.155 li
344.758 109.661 li
344.758 109.167 li
344.758 108.672 li
344.262 108.178 li
344.262 107.684 li
344.262 106.695 li
344.262 106.201 li
344.262 105.706 li
344.262 105.212 li
344.262 104.718 li
344.262 104.224 li
344.262 103.729 li
344.758 103.235 li
344.758 102.246 li
344.758 101.752 li
345.253 101.258 li
345.253 100.764 li
345.253 100.269 li
345.749 100.269 li
346.244 99.775 li
346.244 99.2808 li
346.739 98.7865 li
347.235 98.7865 li
347.235 98.2922 li
347.73 98.2922 li
348.226 97.798 li
348.721 97.798 li
349.217 97.3037 li
349.712 97.3037 li
350.208 97.3037 li
350.703 97.3037 li
351.198 97.3037 li
351.694 97.3037 li
352.189 97.3037 li
352.685 97.3037 li
353.18 97.798 li
353.676 97.798 li
354.171 97.798 li
354.171 98.2922 li
354.667 98.2922 li
355.162 98.7865 li
355.658 99.2808 li
356.153 99.775 li
356.153 100.269 li
356.648 100.269 li
356.648 100.764 li
356.648 101.258 li
357.144 101.752 li
357.144 102.246 li
357.144 102.741 li
357.144 103.235 li
357.639 103.729 li
357.639 104.224 li
357.639 105.212 li
357.639 105.706 li
cp
347.73 106.201 mo
347.73 106.201 li
347.73 106.695 li
353.676 102.246 li
353.676 101.752 li
353.18 101.258 li
353.18 100.764 li
352.685 100.269 li
352.189 100.269 li
351.694 100.269 li
351.694 99.775 li
351.198 99.775 li
350.703 99.775 li
350.208 99.775 li
349.712 100.269 li
349.217 100.269 li
349.217 100.764 li
348.721 100.764 li
348.721 101.258 li
348.226 101.258 li
348.226 101.752 li
348.226 102.246 li
347.73 102.741 li
347.73 103.235 li
347.73 103.729 li
347.73 104.224 li
347.73 104.718 li
347.73 105.212 li
347.73 106.201 li
cp
354.171 106.201 mo
354.171 106.201 li
354.171 105.706 li
354.171 105.212 li
348.226 109.661 li
348.226 110.155 li
348.226 110.649 li
348.721 111.144 li
349.217 111.638 li
349.712 111.638 li
349.712 112.132 li
350.208 112.132 li
350.703 112.132 li
351.198 112.132 li
351.694 112.132 li
352.189 112.132 li
352.189 111.638 li
352.685 111.638 li
352.685 111.144 li
353.18 111.144 li
353.18 110.649 li
353.676 110.649 li
353.676 110.155 li
353.676 109.661 li
354.171 109.167 li
354.171 108.672 li
354.171 108.178 li
354.171 107.684 li
354.171 107.189 li
354.171 106.695 li
354.171 106.201 li
cp
f
122.3 180.838 mo
122.3 163.538 li
125.768 163.538 li
125.768 177.872 li
132.704 177.872 li
132.704 180.838 li
cp
f
136.668 180.838 mo
136.668 177.872 li
140.632 177.872 li
140.632 166.998 li
137.164 168.975 li
136.173 166.504 li
141.623 163.538 li
144.1 163.538 li
144.1 177.872 li
147.568 177.872 li
147.568 180.838 li
cp
f
175.313 170.458 mo
175.313 170.458 li
174.818 170.458 li
174.322 170.458 li
173.827 170.458 li
173.331 170.952 li
172.836 170.952 li
172.341 170.952 li
171.845 170.952 li
171.35 170.952 li
170.854 170.952 li
170.359 170.952 li
169.863 170.952 li
169.368 170.952 li
168.872 170.952 li
168.377 170.952 li
167.882 170.458 li
167.386 170.458 li
166.891 170.458 li
166.395 169.964 li
165.9 169.469 li
165.404 168.975 li
164.909 168.481 li
164.413 167.987 li
164.413 167.492 li
163.918 166.998 li
163.918 166.504 li
163.918 166.009 li
163.422 165.515 li
163.422 165.021 li
163.422 164.032 li
163.422 163.538 li
163.422 162.549 li
163.422 162.055 li
163.422 161.561 li
163.422 160.572 li
163.422 160.078 li
163.918 159.584 li
163.918 159.089 li
163.918 158.595 li
163.918 158.101 li
164.413 158.101 li
164.413 157.607 li
164.909 157.112 li
164.909 156.618 li
165.404 156.124 li
165.404 155.629 li
165.9 155.629 li
166.395 155.629 li
166.395 155.135 li
166.891 154.641 li
167.386 154.641 li
167.882 154.147 li
168.377 154.147 li
168.872 154.147 li
169.368 154.147 li
169.863 153.652 li
170.359 153.652 li
171.35 153.652 li
171.845 153.652 li
172.341 153.652 li
172.836 153.652 li
173.331 153.652 li
173.827 153.652 li
173.827 154.147 li
174.322 154.147 li
174.818 154.147 li
175.313 154.147 li
175.313 157.607 li
174.818 157.112 li
174.322 157.112 li
173.827 157.112 li
173.331 156.618 li
172.836 156.618 li
172.341 156.618 li
171.845 156.618 li
171.35 156.618 li
170.854 156.618 li
170.359 156.618 li
169.863 156.618 li
169.368 157.112 li
168.872 157.112 li
168.872 157.607 li
168.377 157.607 li
168.377 158.101 li
167.882 158.101 li
167.882 158.595 li
167.386 159.089 li
167.386 159.584 li
167.386 160.078 li
166.891 160.078 li
166.891 160.572 li
166.891 161.067 li
166.891 161.561 li
166.891 162.055 li
166.891 162.549 li
166.891 163.044 li
166.891 163.538 li
166.891 164.032 li
167.386 165.021 li
167.386 165.515 li
167.386 166.009 li
167.882 166.009 li
167.882 166.504 li
167.882 166.998 li
168.377 166.998 li
168.377 167.492 li
168.872 167.492 li
169.368 167.987 li
169.863 167.987 li
170.359 167.987 li
170.854 167.987 li
171.35 168.481 li
171.845 168.481 li
171.845 167.987 li
172.341 167.987 li
172.836 167.987 li
173.331 167.987 li
173.827 167.987 li
174.322 167.492 li
174.818 167.492 li
175.313 167.492 li
cp
f
178.781 170.952 mo
178.781 167.987 li
183.241 167.987 li
183.241 157.112 li
179.277 159.089 li
178.286 156.618 li
183.736 153.652 li
186.709 153.652 li
186.709 167.987 li
190.177 167.987 li
190.177 170.952 li
cp
f
332.867 375.092 mo
332.867 358.287 li
336.335 358.287 li
336.335 372.621 li
343.767 372.621 li
343.767 375.092 li
cp
f
346.739 375.092 mo
346.739 373.115 li
350.703 368.667 li
351.198 368.667 li
351.694 368.172 li
351.694 367.678 li
352.189 367.678 li
352.189 367.184 li
352.685 367.184 li
352.685 366.689 li
353.18 366.689 li
353.18 366.195 li
353.676 365.701 li
353.676 365.207 li
354.171 364.712 li
354.171 364.218 li
354.171 363.724 li
354.171 363.229 li
354.171 362.735 li
354.171 362.241 li
353.676 361.747 li
353.676 361.252 li
353.18 361.252 li
352.685 361.252 li
352.685 360.758 li
352.189 360.758 li
351.694 360.758 li
351.198 360.758 li
350.703 360.758 li
350.208 361.252 li
349.712 361.252 li
349.712 361.747 li
349.217 361.747 li
348.721 362.241 li
348.226 362.241 li
346.739 360.264 li
347.235 359.769 li
347.73 359.275 li
348.226 359.275 li
348.721 358.781 li
349.217 358.781 li
349.712 358.781 li
349.712 358.287 li
350.208 358.287 li
350.703 358.287 li
351.198 358.287 li
351.694 357.792 li
352.189 357.792 li
352.685 357.792 li
353.18 357.792 li
353.18 358.287 li
353.676 358.287 li
354.171 358.287 li
354.667 358.287 li
355.162 358.781 li
355.658 358.781 li
356.153 359.275 li
356.648 359.769 li
357.144 360.264 li
357.144 360.758 li
357.639 361.252 li
357.639 361.747 li
357.639 362.241 li
357.639 362.735 li
357.639 363.229 li
357.639 363.724 li
357.639 364.218 li
357.639 364.712 li
357.639 365.207 li
357.144 365.207 li
357.144 365.701 li
357.144 366.195 li
356.648 366.689 li
356.153 367.184 li
356.153 367.678 li
355.658 367.678 li
355.162 368.172 li
355.162 368.667 li
354.667 368.667 li
354.667 369.161 li
354.171 369.161 li
354.171 369.655 li
353.676 370.149 li
351.198 372.127 li
358.135 372.127 li
358.135 375.092 li
cp
f
264.99 170.458 mo
264.99 170.458 li
264.495 170.458 li
263.999 170.458 li
263.504 170.458 li
263.008 170.952 li
262.513 170.952 li
262.017 170.952 li
261.522 170.952 li
261.026 170.952 li
260.531 170.952 li
260.035 170.952 li
259.54 170.952 li
259.045 170.952 li
258.549 170.952 li
258.054 170.952 li
257.558 170.458 li
257.063 170.458 li
256.567 170.458 li
256.072 169.964 li
256.072 169.469 li
255.576 169.469 li
255.081 168.975 li
254.585 168.481 li
254.09 167.987 li
254.09 167.492 li
253.595 166.998 li
253.595 166.504 li
253.595 166.009 li
253.595 165.515 li
253.099 165.021 li
253.099 164.032 li
253.099 163.538 li
253.099 162.549 li
253.099 162.055 li
253.099 161.561 li
253.099 160.572 li
253.595 160.078 li
253.595 159.584 li
253.595 159.089 li
253.595 158.595 li
254.09 158.101 li
254.09 157.607 li
254.585 157.112 li
255.081 156.618 li
255.081 156.124 li
255.576 155.629 li
256.072 155.629 li
256.072 155.135 li
256.567 154.641 li
257.063 154.641 li
257.558 154.147 li
258.054 154.147 li
258.549 154.147 li
259.045 154.147 li
259.54 153.652 li
260.035 153.652 li
261.026 153.652 li
261.522 153.652 li
262.017 153.652 li
262.513 153.652 li
263.008 153.652 li
263.504 153.652 li
263.504 154.147 li
263.999 154.147 li
264.495 154.147 li
264.99 154.147 li
264.99 157.607 li
264.495 157.112 li
263.999 157.112 li
263.504 157.112 li
263.008 156.618 li
262.513 156.618 li
262.017 156.618 li
261.026 156.618 li
260.531 156.618 li
260.035 156.618 li
259.54 156.618 li
259.045 157.112 li
258.549 157.112 li
258.549 157.607 li
258.054 157.607 li
258.054 158.101 li
257.558 158.101 li
257.558 158.595 li
257.063 159.089 li
257.063 159.584 li
257.063 160.078 li
257.063 160.572 li
256.567 160.572 li
256.567 161.067 li
256.567 161.561 li
256.567 162.055 li
256.567 162.549 li
256.567 163.044 li
256.567 163.538 li
256.567 164.032 li
257.063 165.021 li
257.063 165.515 li
257.063 166.009 li
257.558 166.009 li
257.558 166.504 li
257.558 166.998 li
258.054 166.998 li
258.549 167.492 li
259.045 167.492 li
259.045 167.987 li
259.54 167.987 li
260.035 167.987 li
260.531 167.987 li
261.026 168.481 li
261.522 168.481 li
262.017 167.987 li
262.513 167.987 li
263.008 167.987 li
263.504 167.987 li
263.999 167.987 li
263.999 167.492 li
264.495 167.492 li
264.99 167.492 li
cp
f
268.458 170.952 mo
268.458 168.481 li
272.422 164.527 li
272.917 164.032 li
273.413 163.538 li
273.413 163.044 li
273.908 163.044 li
274.404 162.549 li
274.404 162.055 li
274.899 162.055 li
274.899 161.561 li
275.394 161.067 li
275.394 160.572 li
275.89 160.078 li
275.89 159.584 li
275.89 159.089 li
275.89 158.595 li
275.89 158.101 li
275.89 157.607 li
275.394 157.607 li
275.394 157.112 li
274.899 157.112 li
274.899 156.618 li
274.404 156.618 li
273.908 156.618 li
273.413 156.618 li
272.917 156.618 li
272.422 156.618 li
271.926 156.618 li
271.431 157.112 li
270.935 157.112 li
270.935 157.607 li
270.44 157.607 li
269.944 158.101 li
268.458 156.124 li
268.458 155.629 li
268.954 155.629 li
268.954 155.135 li
269.449 155.135 li
269.944 154.641 li
270.44 154.641 li
270.935 154.147 li
271.431 154.147 li
271.926 153.652 li
272.422 153.652 li
273.413 153.652 li
273.908 153.652 li
274.404 153.652 li
274.899 153.652 li
275.394 153.652 li
275.89 154.147 li
276.385 154.147 li
276.881 154.147 li
276.881 154.641 li
277.376 154.641 li
277.872 155.135 li
278.367 155.629 li
278.367 156.124 li
278.863 156.124 li
278.863 156.618 li
278.863 157.112 li
279.358 157.607 li
279.358 158.101 li
279.358 158.595 li
279.358 159.089 li
279.358 159.584 li
279.358 160.078 li
278.863 160.572 li
278.863 161.067 li
278.863 161.561 li
278.367 161.561 li
278.367 162.055 li
278.367 162.549 li
277.872 162.549 li
277.872 163.044 li
277.376 163.538 li
276.881 164.032 li
276.385 164.527 li
275.89 165.021 li
275.394 165.515 li
272.917 167.987 li
279.854 167.987 li
279.854 170.952 li
cp
f
153.513 427.981 mo
149.054 427.981 li
144.1 410.681 li
147.568 410.681 li
150.541 421.061 li
151.532 424.521 li
152.027 421.061 li
155 410.681 li
158.468 410.681 li
cp
f
171.35 426.992 mo
171.35 426.992 li
171.35 427.487 li
170.854 427.487 li
170.359 427.487 li
169.368 427.981 li
168.872 427.981 li
168.377 427.981 li
167.882 427.981 li
167.386 427.981 li
166.891 427.981 li
166.395 427.981 li
165.9 427.981 li
165.404 427.981 li
164.909 427.981 li
164.413 427.487 li
163.918 427.487 li
163.422 427.487 li
162.927 426.992 li
162.432 426.498 li
161.936 426.498 li
161.441 426.004 li
161.441 425.509 li
160.945 425.015 li
160.945 424.521 li
160.45 424.521 li
160.45 424.027 li
159.954 423.038 li
159.954 422.544 li
159.954 422.049 li
159.954 421.555 li
159.459 421.061 li
159.459 420.072 li
159.459 419.578 li
159.459 419.084 li
159.459 418.589 li
159.459 418.095 li
159.954 417.601 li
159.954 417.107 li
159.954 416.612 li
159.954 415.624 li
160.45 415.624 li
160.45 415.129 li
160.45 414.635 li
160.945 414.141 li
160.945 413.647 li
161.441 413.152 li
161.936 412.658 li
162.432 412.164 li
162.927 412.164 li
163.422 411.669 li
164.413 411.175 li
164.909 411.175 li
164.909 410.681 li
165.404 410.681 li
165.9 410.681 li
166.891 410.681 li
167.386 410.681 li
167.882 410.681 li
168.377 410.681 li
168.872 410.681 li
169.368 410.681 li
169.863 410.681 li
170.359 410.681 li
170.854 410.681 li
170.854 411.175 li
171.35 411.175 li
171.35 414.141 li
170.854 414.141 li
170.359 414.141 li
170.359 413.647 li
169.368 413.647 li
168.872 413.647 li
168.377 413.647 li
167.882 413.152 li
167.386 413.152 li
167.386 413.647 li
166.891 413.647 li
166.395 413.647 li
165.9 413.647 li
165.404 413.647 li
165.404 414.141 li
164.909 414.141 li
164.413 414.635 li
164.413 415.129 li
163.918 415.129 li
163.918 415.624 li
163.918 416.118 li
163.422 416.118 li
163.422 416.612 li
163.422 417.107 li
163.422 417.601 li
163.422 418.095 li
162.927 418.589 li
162.927 419.084 li
162.927 419.578 li
162.927 420.072 li
163.422 420.567 li
163.422 421.061 li
163.422 421.555 li
163.422 422.049 li
163.422 422.544 li
163.918 422.544 li
163.918 423.038 li
163.918 423.532 li
164.413 423.532 li
164.413 424.027 li
164.909 424.027 li
164.909 424.521 li
165.404 424.521 li
165.9 425.015 li
166.395 425.015 li
166.891 425.015 li
167.386 425.015 li
167.882 425.015 li
168.377 425.015 li
168.872 425.015 li
169.368 425.015 li
169.863 425.015 li
169.863 424.521 li
170.359 424.521 li
170.854 424.521 li
171.35 424.027 li
cp
f
186.213 426.992 mo
186.213 426.992 li
185.718 427.487 li
185.222 427.487 li
184.727 427.487 li
184.231 427.981 li
183.736 427.981 li
183.241 427.981 li
182.745 427.981 li
182.25 427.981 li
181.754 427.981 li
181.259 427.981 li
180.763 427.981 li
180.268 427.981 li
179.772 427.981 li
179.277 427.487 li
178.781 427.487 li
178.286 427.487 li
177.791 426.992 li
177.295 426.992 li
176.8 426.498 li
176.304 426.004 li
175.809 425.509 li
175.809 425.015 li
175.313 424.521 li
174.818 424.027 li
174.818 423.038 li
174.818 422.544 li
174.322 422.049 li
174.322 421.555 li
174.322 421.061 li
174.322 420.072 li
174.322 419.578 li
174.322 419.084 li
174.322 418.589 li
174.322 418.095 li
174.322 417.601 li
174.322 417.107 li
174.818 416.612 li
174.818 415.624 li
174.818 415.129 li
175.313 414.635 li
175.313 414.141 li
175.809 413.647 li
175.809 413.152 li
176.304 413.152 li
176.304 412.658 li
176.8 412.658 li
176.8 412.164 li
177.295 412.164 li
177.791 411.669 li
178.286 411.669 li
178.781 411.175 li
179.277 411.175 li
179.772 410.681 li
180.268 410.681 li
180.763 410.681 li
181.259 410.681 li
182.25 410.681 li
182.745 410.681 li
183.241 410.681 li
183.736 410.681 li
184.231 410.681 li
184.727 410.681 li
185.222 410.681 li
185.222 411.175 li
185.718 411.175 li
186.213 411.175 li
186.213 414.141 li
185.718 414.141 li
185.222 414.141 li
184.727 413.647 li
184.231 413.647 li
183.736 413.647 li
183.241 413.647 li
182.745 413.647 li
182.25 413.152 li
181.754 413.647 li
181.259 413.647 li
180.763 413.647 li
180.268 413.647 li
180.268 414.141 li
179.772 414.141 li
179.277 414.141 li
179.277 414.635 li
178.781 415.129 li
178.781 415.624 li
178.286 415.624 li
178.286 416.118 li
178.286 416.612 li
177.791 417.107 li
177.791 417.601 li
177.791 418.095 li
177.791 418.589 li
177.791 419.084 li
177.791 419.578 li
177.791 420.072 li
177.791 420.567 li
177.791 421.061 li
177.791 421.555 li
177.791 422.049 li
178.286 422.049 li
178.286 422.544 li
178.286 423.038 li
178.781 423.532 li
179.277 424.027 li
179.772 424.521 li
180.268 424.521 li
180.268 425.015 li
180.763 425.015 li
181.259 425.015 li
181.754 425.015 li
182.25 425.015 li
182.745 425.015 li
183.241 425.015 li
183.736 425.015 li
184.231 425.015 li
184.727 424.521 li
185.222 424.521 li
185.718 424.521 li
185.718 424.027 li
186.213 424.027 li
cp
f
209.995 420.567 mo
209.995 418.095 li
215.94 418.095 li
215.94 426.992 li
215.445 426.992 li
214.949 427.487 li
214.454 427.487 li
213.958 427.487 li
213.463 427.981 li
212.968 427.981 li
212.472 427.981 li
211.977 427.981 li
210.986 427.981 li
210.49 427.981 li
209.995 427.981 li
209.499 427.981 li
209.004 427.981 li
208.508 427.981 li
208.013 427.487 li
207.518 427.487 li
207.022 427.487 li
206.527 426.992 li
206.031 426.498 li
205.536 426.498 li
205.04 426.004 li
205.04 425.509 li
204.545 425.509 li
204.545 425.015 li
204.049 425.015 li
204.049 424.521 li
203.554 424.027 li
203.554 423.038 li
203.554 422.544 li
203.554 422.049 li
203.059 421.555 li
203.059 421.061 li
203.059 420.072 li
203.059 419.578 li
203.059 419.084 li
203.059 418.589 li
203.059 418.095 li
203.059 417.601 li
203.059 417.107 li
203.554 416.612 li
203.554 415.624 li
204.049 415.129 li
204.049 414.635 li
204.049 414.141 li
204.545 413.647 li
205.04 413.152 li
205.04 412.658 li
205.536 412.658 li
206.031 412.164 li
206.527 412.164 li
206.527 411.669 li
207.022 411.669 li
208.013 411.175 li
208.508 411.175 li
209.004 410.681 li
209.499 410.681 li
209.995 410.681 li
210.49 410.681 li
211.481 410.681 li
211.977 410.681 li
212.472 410.681 li
212.968 410.681 li
213.463 410.681 li
213.958 410.681 li
214.454 410.681 li
214.454 411.175 li
214.949 411.175 li
215.94 411.175 li
215.94 414.635 li
215.445 414.141 li
214.949 414.141 li
214.454 414.141 li
213.958 413.647 li
213.463 413.647 li
212.968 413.647 li
212.472 413.647 li
211.977 413.152 li
211.481 413.152 li
210.986 413.152 li
210.986 413.647 li
210.49 413.647 li
209.995 413.647 li
209.499 413.647 li
209.004 413.647 li
209.004 414.141 li
208.508 414.141 li
208.013 414.635 li
207.518 415.129 li
207.518 415.624 li
207.022 415.624 li
207.022 416.118 li
207.022 416.612 li
207.022 417.107 li
206.527 417.107 li
206.527 417.601 li
206.527 418.095 li
206.527 418.589 li
206.527 419.084 li
206.527 419.578 li
206.527 420.072 li
206.527 420.567 li
206.527 421.061 li
206.527 422.049 li
207.022 422.049 li
207.022 422.544 li
207.022 423.038 li
207.518 423.532 li
207.518 424.027 li
208.013 424.027 li
208.013 424.521 li
208.508 424.521 li
209.004 425.015 li
209.499 425.015 li
209.995 425.015 li
210.49 425.015 li
210.986 425.015 li
211.481 425.015 li
211.977 425.015 li
212.472 425.015 li
212.968 425.015 li
212.968 420.567 li
cp
f
226.84 427.981 mo
222.381 417.601 li
221.39 415.624 li
221.39 422.544 li
221.39 427.981 li
218.418 427.981 li
218.418 410.681 li
222.381 410.681 li
226.84 421.061 li
227.831 423.038 li
227.831 415.624 li
227.831 410.681 li
230.804 410.681 li
230.804 427.981 li
cp
f
245.667 419.084 mo
245.667 419.084 li
245.667 419.578 li
245.667 420.072 li
245.667 421.061 li
245.667 421.555 li
245.172 422.049 li
245.172 422.544 li
245.172 423.038 li
244.677 423.532 li
244.677 424.027 li
244.181 424.521 li
244.181 425.015 li
243.686 425.509 li
243.19 426.004 li
242.695 426.498 li
242.199 426.498 li
241.704 426.992 li
241.208 426.992 li
240.713 426.992 li
240.713 427.487 li
240.217 427.487 li
239.722 427.487 li
239.227 427.487 li
238.731 427.487 li
238.236 427.981 li
237.245 427.981 li
232.786 427.981 li
232.786 410.681 li
237.74 410.681 li
238.236 410.681 li
238.731 410.681 li
239.227 410.681 li
239.722 411.175 li
240.217 411.175 li
240.713 411.175 li
241.208 411.175 li
241.704 411.175 li
241.704 411.669 li
242.199 411.669 li
242.695 411.669 li
242.695 412.164 li
243.19 412.658 li
243.686 412.658 li
243.686 413.152 li
244.181 413.152 li
244.181 413.647 li
244.677 413.647 li
244.677 414.141 li
245.172 414.635 li
245.172 415.624 li
245.172 416.118 li
245.667 416.612 li
245.667 417.107 li
245.667 417.601 li
245.667 418.095 li
245.667 419.084 li
cp
242.199 419.084 mo
242.199 419.084 li
242.199 418.589 li
242.199 418.095 li
242.199 417.601 li
242.199 417.107 li
242.199 416.612 li
241.704 416.118 li
241.704 415.624 li
241.704 415.129 li
241.208 415.129 li
241.208 414.635 li
240.713 414.635 li
240.713 414.141 li
240.217 414.141 li
239.722 414.141 li
239.722 413.647 li
239.227 413.647 li
238.731 413.647 li
238.236 413.647 li
237.74 413.647 li
236.254 413.647 li
236.254 425.015 li
237.245 425.015 li
237.74 425.015 li
238.236 425.015 li
238.731 425.015 li
239.227 424.521 li
239.722 424.521 li
240.713 424.027 li
241.208 423.532 li
241.208 423.038 li
241.704 423.038 li
241.704 422.544 li
241.704 422.049 li
242.199 421.555 li
242.199 421.061 li
242.199 420.567 li
242.199 420.072 li
242.199 419.084 li
cp
f
275.394 419.084 mo
275.394 419.084 li
275.394 419.578 li
275.394 420.072 li
275.394 420.567 li
274.899 421.061 li
274.899 422.049 li
274.899 422.544 li
274.899 423.038 li
274.404 423.532 li
274.404 424.027 li
273.908 424.521 li
273.908 425.015 li
273.413 425.509 li
273.413 426.004 li
272.917 426.004 li
272.917 426.498 li
272.422 426.498 li
272.422 426.992 li
271.926 426.992 li
271.431 427.487 li
270.935 427.487 li
270.44 427.487 li
269.944 427.981 li
269.449 427.981 li
268.954 427.981 li
268.458 427.981 li
267.963 427.981 li
267.467 427.981 li
266.972 427.981 li
266.476 427.981 li
265.981 427.487 li
265.485 427.487 li
264.99 427.487 li
264.495 426.992 li
263.999 426.498 li
263.504 426.498 li
263.008 426.004 li
263.008 425.509 li
263.008 425.015 li
262.513 425.015 li
262.513 424.521 li
262.513 424.027 li
262.017 423.532 li
262.017 423.038 li
262.017 422.544 li
262.017 422.049 li
261.522 421.555 li
261.522 421.061 li
261.522 420.072 li
261.522 419.578 li
261.522 419.084 li
261.522 418.589 li
261.522 418.095 li
261.522 417.601 li
261.522 416.612 li
262.017 416.118 li
262.017 415.624 li
262.017 415.129 li
262.513 414.635 li
262.513 414.141 li
263.008 413.647 li
263.008 413.152 li
263.504 412.658 li
263.999 412.164 li
264.495 411.669 li
264.99 411.669 li
265.485 411.175 li
265.981 411.175 li
266.476 410.681 li
266.972 410.681 li
267.467 410.681 li
267.963 410.681 li
268.458 410.681 li
268.954 410.681 li
269.449 410.681 li
269.944 410.681 li
270.44 410.681 li
270.935 411.175 li
271.431 411.175 li
271.926 411.669 li
272.422 411.669 li
272.917 412.164 li
273.413 412.164 li
273.413 412.658 li
273.908 413.152 li
273.908 413.647 li
274.404 414.141 li
274.404 414.635 li
274.899 415.129 li
274.899 415.624 li
274.899 416.612 li
274.899 417.107 li
274.899 417.601 li
275.394 418.589 li
275.394 419.084 li
cp
271.926 419.578 mo
271.926 419.578 li
271.926 419.084 li
271.926 418.589 li
271.926 418.095 li
271.926 417.601 li
271.431 417.107 li
271.431 416.118 li
271.431 415.624 li
271.431 415.129 li
270.935 415.129 li
270.935 414.635 li
270.44 414.141 li
269.944 413.647 li
269.449 413.647 li
268.954 413.647 li
268.458 413.647 li
267.963 413.647 li
267.467 413.647 li
266.972 413.647 li
266.476 413.647 li
266.476 414.141 li
265.981 414.141 li
265.981 414.635 li
265.485 415.129 li
265.485 415.624 li
265.485 416.118 li
264.99 416.612 li
264.99 417.107 li
264.99 417.601 li
264.99 418.095 li
264.99 418.589 li
264.99 419.084 li
264.99 419.578 li
264.99 420.072 li
264.99 420.567 li
264.99 421.061 li
264.99 421.555 li
265.485 422.544 li
265.485 423.038 li
265.485 423.532 li
265.981 423.532 li
265.981 424.027 li
266.476 424.521 li
266.972 424.521 li
266.972 425.015 li
267.963 425.015 li
268.458 425.015 li
268.954 425.015 li
269.449 425.015 li
269.944 425.015 li
269.944 424.521 li
270.44 424.521 li
270.44 424.027 li
270.935 424.027 li
270.935 423.532 li
271.431 423.038 li
271.431 422.544 li
271.431 422.049 li
271.431 421.555 li
271.926 421.555 li
271.926 421.061 li
271.926 420.567 li
271.926 420.072 li
271.926 419.578 li
cp
f
289.267 421.555 mo
289.267 421.555 li
289.267 422.049 li
289.267 422.544 li
289.267 423.038 li
288.772 423.532 li
288.772 424.027 li
288.772 424.521 li
288.772 425.015 li
288.276 425.015 li
288.276 425.509 li
288.276 426.004 li
287.781 426.004 li
287.285 426.498 li
286.79 426.992 li
286.294 427.487 li
285.799 427.487 li
285.303 427.487 li
285.303 427.981 li
284.808 427.981 li
284.313 427.981 li
283.817 427.981 li
283.322 427.981 li
282.826 427.981 li
282.331 427.981 li
281.835 427.981 li
281.34 427.981 li
280.844 427.981 li
280.349 427.981 li
279.854 427.487 li
279.358 427.487 li
278.863 426.992 li
278.367 426.498 li
277.872 426.498 li
277.872 426.004 li
277.376 425.509 li
277.376 425.015 li
277.376 424.521 li
276.881 424.521 li
276.881 424.027 li
276.881 423.532 li
276.881 423.038 li
276.881 422.544 li
276.881 422.049 li
276.881 410.681 li
279.854 410.681 li
279.854 422.049 li
279.854 422.544 li
279.854 423.038 li
280.349 423.532 li
280.349 424.027 li
280.844 424.521 li
280.844 425.015 li
281.34 425.015 li
281.835 425.015 li
281.835 425.509 li
282.331 425.509 li
282.826 425.509 li
283.322 425.509 li
283.817 425.509 li
284.313 425.509 li
284.313 425.015 li
284.808 425.015 li
285.303 424.521 li
285.303 424.027 li
285.799 424.027 li
285.799 423.532 li
285.799 423.038 li
285.799 422.544 li
285.799 422.049 li
285.799 421.555 li
285.799 410.681 li
289.267 410.681 li
cp
f
299.176 413.647 mo
299.176 427.981 li
296.203 427.981 li
296.203 413.647 li
291.249 413.647 li
291.249 410.681 li
304.131 410.681 li
304.131 413.647 li
cp
f
69.7821 338.515 mo
69.7821 338.515 li
69.7821 339.009 li
69.7821 339.504 li
69.7821 339.998 li
69.7821 340.492 li
69.7821 341.481 li
69.2867 341.975 li
69.2867 342.469 li
69.2867 342.964 li
68.7912 343.458 li
68.7912 343.952 li
68.2958 344.447 li
67.8003 344.447 li
67.8003 344.941 li
67.3049 344.941 li
67.3049 345.435 li
66.8094 345.435 li
66.3139 345.929 li
65.8185 345.929 li
65.3231 346.424 li
64.8276 346.424 li
64.3322 346.918 li
63.3412 346.918 li
62.8458 346.918 li
62.3504 346.918 li
61.3595 346.918 li
56.9004 346.918 li
56.9004 330.112 li
62.3504 330.112 li
62.8458 330.112 li
63.3412 330.112 li
63.8367 330.112 li
64.3322 330.112 li
64.8276 330.607 li
65.3231 330.607 li
65.8185 330.607 li
66.3139 331.101 li
66.8094 331.101 li
67.3049 331.595 li
67.8003 331.595 li
67.8003 332.089 li
68.2958 332.089 li
68.2958 332.584 li
68.7912 333.078 li
68.7912 333.572 li
69.2867 334.067 li
69.2867 334.561 li
69.2867 335.055 li
69.7821 335.055 li
69.7821 335.549 li
69.7821 336.044 li
69.7821 337.032 li
69.7821 337.527 li
69.7821 338.515 li
cp
66.3139 338.515 mo
66.3139 338.515 li
66.3139 338.021 li
66.3139 337.527 li
66.3139 337.032 li
66.3139 336.044 li
66.3139 335.549 li
65.8185 335.055 li
65.8185 334.561 li
65.3231 334.067 li
64.8276 333.572 li
64.3322 333.078 li
63.8367 333.078 li
63.3412 333.078 li
62.8458 332.584 li
62.3504 332.584 li
61.8549 332.584 li
60.3685 332.584 li
60.3685 344.447 li
61.8549 344.447 li
62.3504 344.447 li
62.8458 343.952 li
63.3412 343.952 li
64.3322 343.952 li
64.8276 343.458 li
64.8276 342.964 li
65.3231 342.964 li
65.3231 342.469 li
65.8185 342.469 li
65.8185 341.975 li
65.8185 341.481 li
66.3139 341.481 li
66.3139 340.987 li
66.3139 340.492 li
66.3139 339.998 li
66.3139 339.504 li
66.3139 339.009 li
66.3139 338.515 li
cp
f
72.7548 346.918 mo
72.7548 343.952 li
76.7185 343.952 li
76.7185 333.572 li
73.2503 335.549 li
72.2594 332.584 li
77.7094 330.112 li
80.1866 330.112 li
80.1866 343.952 li
83.6548 343.952 li
83.6548 346.918 li
cp
f
75.7275 114.604 mo
75.7275 97.3037 li
78.7003 97.3037 li
78.7003 111.638 li
86.132 111.638 li
86.132 114.604 li
cp
f
98.5183 114.604 mo
98.0229 111.144 li
92.0775 111.144 li
91.0865 114.604 li
87.6183 114.604 li
92.5729 97.3037 li
97.032 97.3037 li
102.482 114.604 li
cp
95.0502 100.764 mo
92.5729 108.672 li
97.032 108.672 li
cp
f
115.364 113.615 mo
115.364 113.615 li
115.364 114.109 li
114.868 114.109 li
114.373 114.109 li
113.877 114.109 li
113.382 114.604 li
112.886 114.604 li
112.391 114.604 li
111.896 114.604 li
111.4 114.604 li
110.905 114.604 li
110.409 114.604 li
109.914 114.604 li
109.418 114.604 li
108.923 114.604 li
108.427 114.109 li
107.932 114.109 li
107.436 114.109 li
106.941 113.615 li
106.446 113.615 li
105.95 113.121 li
105.455 112.627 li
104.959 112.132 li
104.959 111.638 li
104.464 111.638 li
104.464 111.144 li
103.968 110.649 li
103.968 110.155 li
103.968 109.661 li
103.968 109.167 li
103.473 108.672 li
103.473 108.178 li
103.473 107.684 li
103.473 107.189 li
103.473 106.201 li
103.473 105.706 li
103.473 105.212 li
103.473 104.224 li
103.473 103.729 li
103.968 103.235 li
103.968 102.246 li
103.968 101.752 li
104.464 101.258 li
104.959 100.764 li
104.959 100.269 li
105.455 99.775 li
105.455 99.2808 li
105.95 99.2808 li
105.95 98.7865 li
106.446 98.7865 li
106.941 98.2922 li
107.436 98.2922 li
107.932 97.798 li
108.427 97.798 li
108.923 97.798 li
109.418 97.3037 li
109.914 97.3037 li
110.409 97.3037 li
111.4 97.3037 li
111.896 97.3037 li
112.391 97.3037 li
112.886 97.3037 li
113.382 97.3037 li
113.877 97.3037 li
114.373 97.798 li
114.868 97.798 li
115.364 97.798 li
115.364 101.258 li
115.364 100.764 li
114.868 100.764 li
114.373 100.764 li
113.877 100.764 li
113.382 100.269 li
112.886 100.269 li
112.391 100.269 li
111.896 100.269 li
111.4 100.269 li
110.905 100.269 li
110.409 100.269 li
109.914 100.269 li
109.418 100.764 li
108.923 100.764 li
108.427 101.258 li
107.932 101.752 li
107.932 102.246 li
107.436 102.246 li
107.436 102.741 li
107.436 103.235 li
106.941 103.729 li
106.941 104.224 li
106.941 104.718 li
106.941 105.212 li
106.941 105.706 li
106.941 106.201 li
106.941 106.695 li
106.941 107.189 li
106.941 107.684 li
107.436 108.672 li
107.436 109.167 li
107.436 109.661 li
107.932 110.155 li
107.932 110.649 li
108.427 110.649 li
108.427 111.144 li
108.923 111.144 li
109.418 111.638 li
109.914 111.638 li
110.409 111.638 li
110.905 111.638 li
111.4 111.638 li
111.896 111.638 li
112.391 111.638 li
112.886 111.638 li
113.382 111.638 li
113.877 111.638 li
113.877 111.144 li
114.373 111.144 li
114.868 111.144 li
115.364 110.649 li
cp
f
120.318 108.672 mo
120.318 106.201 li
128.245 106.201 li
128.245 108.672 li
cp
f
133.695 114.604 mo
133.695 111.638 li
138.154 111.638 li
138.154 100.764 li
134.191 102.741 li
133.2 100.269 li
138.65 97.3037 li
141.127 97.3037 li
141.127 111.638 li
145.091 111.638 li
145.091 114.604 li
cp
f
160.45 105.706 mo
160.45 106.201 li
160.45 106.695 li
159.954 106.695 li
159.954 107.189 li
159.954 107.684 li
159.954 108.178 li
159.954 109.167 li
159.954 109.661 li
159.459 109.661 li
159.459 110.155 li
159.459 110.649 li
159.459 111.144 li
158.963 111.638 li
158.963 112.132 li
158.468 112.627 li
157.972 112.627 li
157.972 113.121 li
157.477 113.615 li
156.982 113.615 li
156.486 114.109 li
155.991 114.109 li
155.495 114.604 li
155 114.604 li
154.504 114.604 li
154.009 114.604 li
153.513 114.604 li
153.018 114.604 li
152.523 114.604 li
152.027 114.604 li
151.532 114.604 li
151.036 114.604 li
151.036 114.109 li
150.541 114.109 li
150.045 114.109 li
149.55 113.615 li
149.054 113.121 li
148.559 112.627 li
148.559 112.132 li
148.063 112.132 li
148.063 111.638 li
148.063 111.144 li
147.568 110.649 li
147.568 110.155 li
147.568 109.661 li
147.073 109.661 li
147.073 109.167 li
147.073 108.672 li
147.073 108.178 li
147.073 107.684 li
147.073 106.695 li
147.073 106.201 li
147.073 105.706 li
147.073 105.212 li
147.073 104.718 li
147.073 104.224 li
147.073 103.729 li
147.073 103.235 li
147.568 102.246 li
147.568 101.752 li
147.568 101.258 li
148.063 100.764 li
148.063 100.269 li
148.559 100.269 li
148.559 99.775 li
149.054 99.2808 li
149.55 98.7865 li
150.045 98.2922 li
150.541 98.2922 li
151.036 97.798 li
151.532 97.798 li
151.532 97.3037 li
152.027 97.3037 li
152.523 97.3037 li
153.018 97.3037 li
154.009 97.3037 li
154.504 97.3037 li
155 97.3037 li
155.495 97.3037 li
155.991 97.798 li
156.486 97.798 li
156.982 97.798 li
156.982 98.2922 li
157.477 98.2922 li
157.477 98.7865 li
157.972 98.7865 li
158.468 99.2808 li
158.468 99.775 li
158.963 100.269 li
159.459 100.764 li
159.459 101.258 li
159.954 101.752 li
159.954 102.246 li
159.954 102.741 li
159.954 103.235 li
159.954 103.729 li
159.954 104.224 li
159.954 105.212 li
160.45 105.706 li
cp
150.045 106.201 mo
150.045 106.201 li
150.045 106.695 li
156.486 102.246 li
156.486 101.752 li
155.991 101.752 li
155.991 101.258 li
155.495 100.764 li
155.495 100.269 li
155 100.269 li
154.504 100.269 li
154.504 99.775 li
154.009 99.775 li
153.513 99.775 li
153.018 99.775 li
152.523 99.775 li
152.523 100.269 li
152.027 100.269 li
151.532 100.764 li
151.532 101.258 li
151.036 101.258 li
151.036 101.752 li
150.541 102.246 li
150.541 102.741 li
150.541 103.235 li
150.541 103.729 li
150.541 104.224 li
150.045 104.224 li
150.045 104.718 li
150.045 105.212 li
150.045 106.201 li
cp
156.982 106.201 mo
156.982 106.201 li
156.982 105.706 li
156.982 105.212 li
150.541 109.661 li
150.541 110.155 li
151.036 110.155 li
151.036 110.649 li
151.532 111.144 li
152.027 111.638 li
152.523 111.638 li
152.523 112.132 li
153.018 112.132 li
153.513 112.132 li
154.009 112.132 li
154.504 112.132 li
155 111.638 li
155.495 111.638 li
155.495 111.144 li
155.991 111.144 li
155.991 110.649 li
155.991 110.155 li
156.486 110.155 li
156.486 109.661 li
156.486 109.167 li
156.982 108.672 li
156.982 108.178 li
156.982 107.684 li
156.982 107.189 li
156.982 106.695 li
156.982 106.201 li
cp
f
171.845 114.604 mo
170.854 111.144 li
164.909 111.144 li
163.918 114.604 li
160.945 114.604 li
165.9 97.3037 li
170.359 97.3037 li
175.313 114.604 li
cp
167.882 100.764 mo
165.9 108.672 li
170.359 108.672 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
