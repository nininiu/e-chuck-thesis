%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPC639.tmp.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/06/13, 13:55:57
%%BoundingBox: 0 0 339 219
%%HiResBoundingBox: 0 0 339 218.8001
%%CropBox: 0 0 339 218.8001
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1043 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="MATLAB, The MathWorks, Inc. Version 8.2.0.701 (R2013b). Operating System: Microsoft Windows 8."
   xmp:ModifyDate="2014-06-13T13:55:26+08:00"
   xmp:CreateDate="2014-06-13T13:55:26+08:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmpMM:DocumentID="uuid:909a3242-63fe-4781-a8c6-138ff4ed7ac6"
   xmpMM:InstanceID="uuid:ca02e479-9435-4be8-9958-0a648ed61085">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">D:\my\mech\e-chuck (local)\_thesis\figures\data\tally.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -218.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 218.8 li
339 218.8 li
339 0 li
cp
clp
gsave
-14.34 -7.16 mo
360.66 -7.16 li
360.66 217.883 li
-14.34 217.883 li
cp
clp
361.017 -7.2 mo
-14.4 -7.2 li
-14.4 217.967 li
361.017 217.967 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
34.35 191.467 mo
325.183 191.467 li
325.183 9.717 li
34.35 9.717 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
34.35 191.467 mo
34.35 9.71701 li
325.183 9.71701 li
325.183 191.467 li
34.35 191.467 li
@
.333 lw
[.5 4 ] 0 dsh
47.6 191.467 mo
47.6 9.71701 li
47.6 9.71701 mo
47.6 9.71701 li
80.683 191.467 mo
80.683 9.71701 li
80.683 9.71701 mo
80.683 9.71701 li
113.683 191.467 mo
113.683 9.71701 li
113.683 9.71701 mo
113.683 9.71701 li
146.767 191.467 mo
146.767 9.71701 li
146.767 9.71701 mo
146.767 9.71701 li
179.85 191.467 mo
179.85 9.71701 li
179.85 9.71701 mo
179.85 9.71701 li
212.85 191.467 mo
212.85 9.71701 li
212.85 9.71701 mo
212.85 9.71701 li
245.933 191.467 mo
245.933 9.71701 li
245.933 9.71701 mo
245.933 9.71701 li
278.933 191.467 mo
278.933 9.71701 li
278.933 9.71701 mo
278.933 9.71701 li
312.017 191.467 mo
312.017 9.71701 li
312.017 9.71701 mo
312.017 9.71701 li
34.35 172.55 mo
325.183 172.55 li
325.183 172.55 mo
325.183 172.55 li
34.35 140.217 mo
325.183 140.217 li
325.183 140.217 mo
325.183 140.217 li
34.35 107.967 mo
325.183 107.967 li
325.183 107.967 mo
325.183 107.967 li
34.35 75.717 mo
325.183 75.717 li
325.183 75.717 mo
325.183 75.717 li
34.35 43.467 mo
325.183 43.467 li
325.183 43.467 mo
325.183 43.467 li
34.35 11.133 mo
325.183 11.133 li
325.183 11.133 mo
325.183 11.133 li
1 /0 /CSD get_res sepcs
1 sep
@
.5 lw
[] 0 dsh
34.35 9.71701 mo
325.183 9.71701 li
@
34.35 191.467 mo
325.183 191.467 li
325.183 9.71701 li
@
34.35 191.467 mo
34.35 9.71701 li
@
34.35 191.467 mo
325.183 191.467 li
@
34.35 191.467 mo
34.35 9.71701 li
@
47.6 191.467 mo
47.6 188.55 li
@
47.6 9.71701 mo
47.6 12.55 li
@
%ADOBeginSubsetFont: ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d83000000cc000000606376
7420aa86dc6e0000012c0000065a6670676dc9bcda0500000788000007c1
676c796637827f6d0000a2c0000943e068656164e1d9c23d00000f4c0000
003668686561129117b500000f8400000024686d7478c7e38a2800000fa8
00003e506c6f63614be73bb400004df800003e546d6178701502099e0000
8c4c000000206e616d6575858f9700008c6c00000a6a707265708d21ed41
000096d800000be767646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200014
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f900004046585756555441403f3e3d3c3b3a39383735343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b0
04262348482d2c452346236120b02661b004262348482d2c45234660b020
6120b04660b004262348482d2c4523462361b0206020b02661b02061b004
262348482d2c45234660b0406120b06660b004262348482d2c4523462361
b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320
b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920
b09051582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20
b0032545b019234445b01a23444565234520b00325606a20b00923422368
8a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b0
3f1b235961441cb114008a5279b31940201945208a54582321b03f1b2359
61442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d
2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d
2c4b525845441b2121592d2c0120b003252349b04060b0206320b0005258
23b002253823b002256538008a63381b212121212159012d2c4bb0645158
4569b00943608a103a1b212121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2b
b02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802232370
1020b802234520b0005058b00161593a2f182d2c21210c6423648bb84000
622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21
b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648b
b84000626023212d2cb4000100000015b00826b00826b00826b008260f10
161345683ab001162d2cb4000100000015b00826b00826b00826b008260f
1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b54
58381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54
b012435c5a58381b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549
b00425b00425496120b0005458212043b0005558b00325b00325b8ffc038
b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b00054
58b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121
212d2c462346608a8a462320468a608a61b8ff8062232010238ab902c202
c28a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b2020202436042b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b202100243604259b12601885158b94000020063b8
0400885458b202400243604259b94000040063b80800885458b202800243
604259b12801885158b94000080063b81000885458ba0002010000024360
42595959595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b21
212121592d2c20b0024354b00123b05f237821b1000243b056237921b002
4323b020205c58212121b100471c598a8a208a208a23b81000635658b810
00635658212121b1012c1c591b2159b08062205c58212121b1001b1c5923
b08062205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b00243
54b00123b07b237821b1000243b072237921b10002438ab020205c582121
21b0631c598a8a208a208a23b81000635658b81000635658b00426b0015b
b00426b00426b004261b21212121b13600231c591b2159b0042623b08062
205c588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59
b00426b00161b8ff981c23212d000000000100000006cf5c17932ef85f0f
3cf5081b080000000000a2e3272a00000000ccb58100faaffd67105e0851
00000009000100010000000000010000073efe4e00431000faaff9d2105e
000100000000000000000000000000000f94060001000000000002390000
02390000023900b002d7005e0473001504730049071d0077055600580187
005a02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba
0239000004730055047300df0473003c047300560473001a047300550473
004d047300610473005304730055023900b9023900aa04ac007004ac0072
04ac00700473005a081f006f0556fffd0556009605c7006605c7009e0556
00a204e300a80639006d05c700a4023900bf040000370556009604730096
06aa009805c7009c063900630556009e0639005805c700a10556005c04e3
003005c700a105560009078d0019055600090556000604e300290239008b
023900000239002703c100360473ffe102aa00590473004a047300860400
0050047300460473004b02390013047300420473008701c7008801c7ffa2
0400008801c7008306aa00870473008704730044047300870473004802aa
00850400003f02390024047300830400001a05c700060400000f04000021
0400002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c7
0068055600a205c7009c0639006305c700a10473004a0473004a0473004a
0473004a0473004a0473004a040000500473004b0473004b0473004b0473
004b023900bd023900230239ffe502390009047300870473004404730044
047300440473004404730044047300830473008304730083047300830473
0049033300800473006b0473001b0473005102cd006d044c000104e30099
05e5000305e50003080000e102aa00de02aa003d0464004e080000010639
005305b4009a0464004e0464004d0464004d0473fffd049c00a003f40038
05b4007a069600a1046400000231000002f6002f02ec002d0625007f071d
004404e3008104e3009e02aa00e804ac0072046400540473002e04640033
04e5001a047300860473008c080000ef0556fffd0556fffd063900630800
0081078d00520473fffc0800000002aa005302aa004701c7008001c7006c
0464004e03f4002f04000021055600060156fe390473ffe402aa005c02aa
005c040000170400001704730049023900b901c7006c02aa004708000025
0556fffd055600a20556fffd055600a2055600a20239008d0239ffe00239
00040239001506390063063900630639006305c700a105c700a105c700a1
023900c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa
006b02aa003a02aa004b02aa00280473000001c700030556005c0400003f
04e3002904000028021400bc05c7fffd0473004905560006040000210556
009e0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b
06ac006b06ac0021047300000639006d04730042023900b10556005c0400
003f05c700660400005005c700660400005004730046046bffe102aa00ee
0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd0556
00a20473004b055600a20473004b0473009601c700420473009602550088
0473009602ac008305c7009c0473008705c7009c04730087063900630473
004405c700a102aa008505c700a102aa003c0556005c0400003f04e30030
0239002404e300300300002305c700a10473008305c700a10473008304e3
00290400002804e3002904000028046800a4063900600662005504a00048
047400480391006204f000440329002e05300048046bffe1040000b002eb
005208c000330800004f040000990800004f040000990800004f04000098
0400009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d5
010505abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e
05abffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab
01c005ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c0
05abffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
02d605ab006605abffea05d5ffff04d500920800000007eb013007eb0120
07eb013007eb012004d500b204d5008004d5002a082b0198086b01b80755
0010060000f40600006f0440003a0540003704c0003f0415004004000025
0600005505e100bf038d008904d5ffd90180008002d50086071500610296
000f04d5009202d6008302d6008304d500b202d600700556fffd0473004a
05c700660400005005c7006604000050055600a20473004b055600a20473
004b055600a20473004b0639006d047300420639006d047300420639006d
0473004205c700a40473008705c7001f047300060239ffce0239ffce0239
ffe40239ffe40239fff60239fff50239004b01c700190400003701c7ffa2
0556009604000088040000860473009601c7fffa05c7009c0473008705c9
00a50473008b0639006304730044063900630473004405c700a102aa006b
0556005c0400003f04e300300239000c05c700a10473008305c700a10473
008305c700a10473008305c700a104730083078d001905c7000605560006
0400002101c700890556fffd0473004a08000001071d00440639005304e3
0081023900b9078d001905c70006078d001905c70006078d001905c70006
055600060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac
002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff
0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556
fffd055600960558fffe055600a204e3002905c700a4023900bf05560096
0558000b06aa009805c7009c0533006d0639006305c700a40556009e04f2
009404e30030055600060556000906af007f05fb00610239000405560006
04a00048039100620473008b01c7006b04600088049a008c040000190387
00480473008b0473005c01c700890400008604000018049c00a00400001a
0395005c04730044048d008303db0056046000880433001105b4007a063f
005701c7ffc9046000880473004804600088063f0057055700a206eb0032
045500a105c000640556005c023900bf02390004040000370875000d0815
00a406d5003104a900a10515000a05c000a00556fffd054000a705560096
045500a1056b0000055600a20763000704d5004e05c000a105c000a104a9
00a10540001206aa009805c700a40639006305c000a00556009e05c70066
04e300300515000a061500520556000905eb009f05550057075500a10780
00a106550000071500a8054000a505c00055081500a405c7001a0473004a
0495005b0440008802eb008804ab00000473004b055afffb03ab00320478
0087047800870380008604ab00180580008c046b00880473004404550088
047300870400005003aa0026040000210695004b0400000f0495008a042b
0045066b008d0695008d0500002805c0008b042b00840415003006000089
0455001f0473004b0473000002eb00890415004b0400003f01c700880239
000901c7ffa20740001306800083047300000380008604000021046b0088
03e900a1034a008808000041089500a00585002d000001010000001e0000
003100000031000001010000007e0000007e0000008c0000008c00000101
0000001000000101000001210310007d0000008c023300d20000030b0000
ff04023900b90481006904560032033100190411002d04d1009601f9009b
030f005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca
009b04cf005001f9009b02d2003c0498005a043c00190488006e045f0073
03b1001903d4000a0466009604130028058e00640524002803f2009b03f2
009b03f2009b01e3005a0356005a0686009b01f9ffac0413002804130028
03b4ff5703b4ff570448002d058e0064058e0064058e0064058e00640481
0069048100690481006904560032033100190411002d04d10096024b0000
034a000004b8008c024b00000413002803b0005003b4003c04cf005002d2
003c0498005a0488006e045f007303d4000a0466009604130028058e0064
0524002801f9009b0456003203b00050045f0073049b003c0000ffdc0000
ff250000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba
000000460000004600000046000000460000004800000046000000460000
00460435017c0435012e043500b7043500810435012c043500be043500af
043500810435009a043500db04350085028d00c1043500b3060001000600
010002420036060001000435009e04350098043500cb0600010006000100
060001000600010006000100000000460600010006000100060001000600
010006000100060001000600010006000100051bffba0600010006000100
0600010005b5003a05b5003a01f4ffba01f4ffba06000100060001000600
0100060001000481003604350036043dffba043dffba03e9004a03e9004a
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba051b003204b500240300fff706000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010000000030000000460000004600000040
0000004606000100060001000000ffdc0000fe510000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ffdc
0000ff160000ffdc0000ff200000ffdc0473004a08000000060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100028d007f028d005d0600010004ee
0015034d007901a8001301d6ffd701a8005601d600100375003203750032
01a8002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d6
001305b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3
005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a
00360435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027
064f00270224ffba021affba04a7004604a700460224ffba021affba04cf
002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba
02b4002302b400230327ffba0327ffba043500450435004501f4ffba01f4
ffba024200360300fff7039affba0327ffba0375003203750032051b0032
04b50024051b003204b5002401f4ffba01f4ffba045a003104ce0041045a
002604ce0039045a005304ce004a045a005304ce004a0600010006000100
000000460000004606000100060001000600010000000046000000460600
010006000100000000480000004606000100060001000600010000000046
000000460000004600000046000000400000003006000100000000460000
004606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100028d00ca028d00c7028d00c606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100060001000100ffba
0800ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000
fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd11
0000fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b
00a006ac006b06ac00190000feb60000fd730000fe080000fca60000fe53
0000fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000
fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc2
0000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000
fc900000fd150000fc2c0000fc130000fc120000fb960000fb9601c70088
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b055600a20473004b
055600a20473004b055600a20473004b055600a20473004b055600a20473
004b055600a20473004b0239006301c7001f023900ba01c7007c06390063
047300440639006304730044063900630473004406390063047300440639
0063047300440639006304730044063900630473004406dc0063053f0044
06dc0063053f004406dc0063053f004406dc0063053f004406dc0063053f
004405c700a10473008305c700a10473008306d500a1055b008306d500a1
055b008306d500a1055b008306d500a1055b008306d500a1055b00830556
000604000021055600060400002105560006040000210556fffd0473004a
0239ffe201c7ffb0063900630473004405c700a10473008305c700a10473
008305c700a10473008305c700a10473008305c700a1047300830000fefe
0000fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a9
00a10380008604a900a10380008605c700a4046b00880473fffd04000014
0473fffd04000014055600090400000f05550057042b0045055500a10473
00870605006304730055063900600473004405b5003a01f4ffba0224ffba
021affba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4
fff90227ffce0000000f0000fff502aa00a402aa00a40000001300000056
000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6
fff501a8009301d6001303750032037500320375003203750032051b0032
04b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b30032
02b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b3
003802b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327
ffba064f0027064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba04a70046
04a7004604a7004604a70046093e0032093e00320740ffba0740ffba067f
0014077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba04350045
0435004501f4ffba01f4ffba043500450435004504350045043500450435
00450435004501f4ffba01f4ffba04350045043500450481003604350036
043dffba043dffba024200360300fff7031a001a031a001a031a001a0375
003203750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba03750032
03750032051b003204b5002401f4ffba01f4ffba051b003204b50024067f
0045067f0045067f0045067f004501a800280000fe290000fea20000ff30
0000ff1d0000ff120000ff920000fe7e08fc003208ad00320000ffb50000
ffb60000feed0000ff640000fe7e0000ff9f018d000002f6fffd0000fe82
0000ff1004cd00320000ff580000ff580000ff640692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a0036
0435ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4
002f01f4003b01f4001201f400b101f4006d067f00140776001401f9009b
0000fed902bc000003f2009b045afff504cefff5045a005304ce004a045a
005304ce004a045a005304ce004a045a005304ce004a045a005304ce004a
045a005304ce004a04350071043500ad045a000f04ce000f047300140611
0014054000a7047300860540000a0473000a05c7005105c7006604000050
05c7fffd067a00140540004a04730046047400480556006e04d5005304e3
ffc40639006d04fe000f070c008701c700830239001f0556009604000088
01c7001504000018072000a405c7ffb80473008b0639006006f200630557
004406090014047300860556009e0556006b0400004f04f20094030b0044
0239002404e300140239002404e3003005fb006105c700a1062e00100400
002104e300290400002804e3002904e30031045c0044045c003f0473003c
0473005503ab003203e5002404730087021400bc034e00bc04ac00720239
00b00aaa009e09c7009e08640046087f009606aa0096039c008309c7009c
078e009c062b0087047300550556fffd0473004a0000fefe0556fffd0473
004a08000001071d00440639006d0473001a0639006d0473004205560096
040000880639006304730044063900630473004404e30029045c004c01c7
ffa20aaa009e09c7009e086400460639006d04730042084600a404f2009e
05c7009c047300870556fffd0473004a0556fffd0473004a055600a20473
004b055600a20473004b0239ff8a0239ff64023900040239fff606390063
04730044063900630473004405c700a102aaffcc05c700a102aa006805c7
00a10473007605c700a1047300830556005c0400003f04e3003002390024
045c0051037e001305c700a40473008705a600a404d6005e0486005e04e3
0029040000280556fffd0473004a055600a20473004b0639006304730044
0000fefd0639006304730044063900630473004406390063047300440556
000604000021047300570473004804730086047300860400001304000050
04730046047300460473005505e9005503ab004903ab0032050d0032040f
00440239ffb90473004204730042047800500402001904ef00190473008b
047300870473008701c7001901c7005702d90044029e0000026e001401c7
00830493008306aa008406aa008406aa00870473ffa60473008b046c0087
0473004406530044063f00570466004402aaffe402aaffe402aaffe402aa
008502aa008502aa008502aaffe40455008a0455008a0400003f01c7ffa2
0214ffb901c7ff7202cb00000239000f0239002404730019048c00540460
00880400001a05c7000604000018042800190400002804540028045c004c
045c0079040000240400005004000024040000500639006304400088040f
004904780050046b0088032e000004000008033b00880473004804000024
0400005007b7004607400046080b004605b30024036f002405c00024061c
0013054a0083050f008303e2001e0438006303110064031100640146ffce
01eb006401eb000001eb000002ea006403d90000029100000187005a02d7
005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca003202ca0032
04ac007004ac007004ac006504ac006502aa012102aa00de02aa005902aa
012102aa001d02aa005902aa00de023900b6023900b602aa00fb02aa00fb
02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb029400000142
006402b8003202a0000002ca003203100096031000960310009603100096
0310009602aa006202aa006202aa002802aa001d02aa0047045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000fec10000fec60000fdac0000fed8
0000ff920000fee90000ff4c0000fea00000fec40000ffce0000ff660000
fea00000fed80000fed80000ff970000ff980000ff990000fff40000ff42
0000ff420000ff440000ff5f0000fe870000ffec0000ffa60000ff510000
ff510000ff510000fec90000ff1c000000000000fee90000ff4c0000ff93
0000ff2a0000ff560000ffce0000fe870000febb0000fec40000fec40000
fed80000fed80000feb30000fec90000fdad0000fec80000feb30000fec9
0000fdad0000fe160000fee60000ffa60000fe870000ff440000feba0000
ff230000ff9a0000fdac0000fe88000000000000feb00000ff980000fe93
0000ffa60000fe870000fe1c0000ff660000ff440000feb00000feb00000
feb00000ff030000ff520000fd1f0000ff530000ff530000ff530000feb5
0000feb50000ffc30000feae0000fedc0000fec70000fec80000fedc0000
fe1e0000ff420000ff510000feb70000feb002aa00de02aa005902aa00fa
049a007004600000062e001407aa0000062e0014047b004c063f005704cf
0044063900630473004405c700700400005004e300a8033b008804ff0000
043c0032060d000a049d0042072000a406aa0084056500630473008b0564
00a40400000a0556006b0556006b04e0000504c5001905e5005f046e0044
03b600140347002804cf00440495005b0400005001c7ffa2063900600389
004d03890050055600a205c000a10473004b047800870ab4006d04fe0010
0639001404e70014079900bf05b500880558000104000006072e00bf0590
008806a10078057b007a086d00bf06f0008804d5006603ab001f065f0039
058200480639006004730044066d0009050c001a066d0009050c001a0898
0063072c004406aa002004e6001c0987006d06d000500000fe370ab4006d
04fe001005c7006604000050040700140000fea60000febc0000ff980000
ff980000fc2b0000fc4c05c000a10478008705400004042b00140556009e
04730087055d00a40464008804d5004e03ab003204a900040380000005ef
002904490028070900a4052f0088091800a006f600880606003e042b0023
05c700660400005004e3003003aa0026076700310587002605550057042b
004506e4000a0554000a06e4000a0554000a023900bf07630007055afffb
055700a1046800860540001204ab001805c700a4046b008805c700a4046b
008805550057042b004506aa00980580008c02aa002e0556fffd0473004a
0556fffd0473004a08000001071d0044055600a20473004b060500630473
005507630007055afffb04d5004e03ab003204d5004e045c004c05c000a1
0478008705c000a1047800870639006304730044063900600473004405c0
004a0415002b0515000a040000210515000a040000210515000a04000021
05550057042b0045071500a805c0008b0540004a0473004607bf004a0703
004607a6006606860053054d00660413005307c3001207470018084600a4
070700880639006d0478005005f90030055300260000ff430000fec90000
ff770000ffb00000ff470000ff560000ff740000fed70000feac00000000
0000ff520000ff56000000000000feac0000fd9a000000000000ff6a0000
ff7c0000ff690000ff560000feac0000ff7f0000ff560000fdef0000ff43
0000ff690000ff7c000000000000fdae0000ff8c000001020000fefe0000
fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd0473004a
05560096047300860556009604730086055600960473008605c700660400
005005c7009e0473004605c7009e0473004605c7009e0473004605c7009e
0473004605c7009e04730046055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b04e300a802390013
0639006d0473004205c700a40473008705c700a40473008705c700a40473
008705c700930473006805c700a4047300870239ffdf01c7ff9202390020
023900060556009604000088055600960400008805560096040000880473
009601c7007e0473009601c7ffb90473009601c7ffa50473009601c7ffa3
06aa009806aa008706aa009806aa008706aa009806aa008705c7009c0473
008705c7009c0473008705c7009c0473008705c7009c0473008706390063
047300440639006304730044063900630473004406390063047300440556
009e047300870556009e0473008705c700a102aa008505c700a102aa0085
05c700a102aa005e05c700a102aa00260556005c0400003f0556005c0400
003f0556005c0400003f0556005c0400003f0556005c0400003f04e30030
0239002404e300300239002404e300300239ffff04e300300239000e05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a104730083055600090400001a055600090400001a078d001905c7
0006078d001905c70006055600090400000f055600090400000f05560006
0400002104e300290400002804e300290400002804e30029040000280473
00870239000305c70006040000210473004a01c7008904a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a000480556fffd0556
fffd06820013068200130682001306820013068200560682005603910062
0391006203910062039100620391006203910062061e0000061e0000076c
0000076c0000076c0000076c00000473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff301c7008101c7008101c7ff9b
01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa203010000030100000491
00000491000004910000049100000491fff30491fff30473004404730044
04730044047300440473004404730044069d0000069d0000082d0000082d
000007c9000007c900000460008804600088046000880460008804600088
0460008804600088046000880682000007ae00000812000007ae0006063f
0057063f0057063f0057063f0057063f0057063f0057063f0057063f0057
065f0000065f000007ef000007ef0000078b0000078b0000078bffff078b
ffff04a0004804a0004803910062039100620473008b0473008b01c7ffe6
01c7006804730044047300440460008804600088063f0057063f005704a0
004804a0004804a0004804a0004804a0004804a0004804a0004804a00048
0556fffd0556fffd06820013068200130682001306820013068200560682
00560473008b0473008b0473008b0473008b0473008b0473008b0473008b
0473008b068f0000068f0000081f0000081f0000081f0000081f0000081f
fff3081ffff3063f0057063f0057063f0057063f0057063f0057063f0057
063f0057063f0057065f0000065f000007ef000007ef0000078b0000078b
0000078bffff078bffff04a0004804a0004804a0004804a0004804a00048
04a0004804a000480556fffd0556fffd0556fffd0556fffd0556fffd02aa
00e502aa00fd02aa00e502aa000602aa00060473008b0473008b0473008b
0473008b0473008b068200000682000006f3000006f3000005c700a402aa
001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca01c7ff93
01c7ff930239001a0239fff5036500000365000002aa001302aa001302aa
000604600088046000880460008804600088048d0083048d008304600088
04600088055600060556000606e6000007180000061e000002aaffea02aa
ffea02aa0059063f0057063f0057063f0057063f0057063f005707650000
069d000007270000065f000005fb006102aa00de02aa00e50473000d05c7
006605c7006606aa008705c70024095000a1078d00190556001f04e30030
080000290400003004c100660000ff530000ff530000ff530000ff5301c7
001901c7ffa2042b0005055600110574004602cbffa3057a008702f0ffc8
057f000a057f000a02aa008402aa008402aa00c902aa00c902aa00a002aa
005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a902aa00a9
02aa00a9032e001e032e001e02aa003a0000ff730000ffa50000fed80000
ff230000ff720000ff720000fee70000ffa50000ff530000ff530000ff53
0556009e0473008703f8001905fb0019071d004404400019040000500469
00870469001903eb008703ab003201c70088036100410400008803360010
0580008c04780087047300440400001304de004404de004404de000d078d
005003a800440473004404730044042b00840455001f0455001f03aa0026
0460008804c6004405de004404c600440400001a05c700060400002803ab
0032036b003f04db001f02eb00880400001a04550088042b008405b4007a
04ab001803a00000054f0000035100320351ffd103980032034800320348
003203f80032036e0032015600690284002d0366003202d0003204150032
03710032036f003204180032030f003203590032039c003203760031036f
003204fb000002fa003202fa00320304003204cc00320305006403050032
02f9003202f90032028c0032028c0032030400320142006402b600640495
0064030f00640305003202d5003203050032030500320306006401c20032
030f00640342003204950064029200000320000003150064029200000306
00320385003202bf00000142006401eb0064030f00640292000003150064
02920000030900320385003202bf0000077d00460a660046038300460a2f
00460541ffba01e9003c045a00110000ff0d0000ff350000fece0000feb7
0000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3005f03e9
004a03e9004a039affba0327ffba039affba0327ffba05ad0069053d002d
05fd009604dc005004e0003c05f6009b053f00280650002804ac00720000
fe3b0000fe660000fe660473fffc02aa005302d5ffce01a8ffba01a8ffba
01a8ffba01a8ffba0658001509c500470400000008000000040000000800
000002ab000002000000015500000473000002390000019a000000ab0000
0000000005e5000305c7006606aa00980580008c07440083071800460718
00480556fffd05c70066040000140473000a04e300300400004f04000028
04a5001d000001020000ff420000febf0000ff3a0000ff53048d000a05c7
005105c7006605c70051045500a102eb00880000ff430000ff040000ffac
02d200960000ff37021affba0250001e0000ff3a0000ff5b0000ff5f0000
ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff9601f4ff96
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba0481003604350036043dffba043dffba0481003604350036
043dffba043dffba02b3003202b3003202b3005f02b3005f03e9004a03e9
004a0692003e0692003e043fffba043fffba045a002a039a00360435ffba
0327ffba045a002a039a00360435ffba0327ffba045a002a039a00360435
ffba0327ffba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba02b40023
02b400230327ffba0327ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba
043500450435004501f4ffba01f4ffba040d0047040d004701a8ffba01a8
ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0473ff93047300460239ffbf06aaffd50473ffb70473ff9102aa
ffa402aaffa40400ffff0239ffb90400002804730089030b006404740048
0649002401c7001901c700190473001e0460001e048c000a047300860473
00460239001305b400420400008801c7fffc06aa00870473008b04730087
02aafffb0400003f0318ffa20400001a0400000f040000280473004a0473
0048047300460473004b03ab004903ab00320534005501c7008804000013
01c7ffa204730083045c004c0304006402d5003202c9003302fc0032028c
003201d5003201d500000304003203110064014200190142006401420064
01420019022a00000142006401420009023300640493006404930064030f
ffc9030f0064030e0064030500320300003202b800320142ffca01c20032
030f001d031a00320306006402d400640292000002de003202de003202de
003202f4003202ea00320000febc0000febc0000ff730000fea9023900b9
02fa003202f900320305003202a0000002f900320639006d0556fffd0473
000f05c7006602aa004104a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7ffab01c7
ff9b01c7ffbb01c7ff9b01c7ffbb04600088046000880460008804600088
0460008804600088046000880460008801c7ffab01c7ffab01c7ffbb01c7
ffbb04600088046000880460008804600088045a005304ce004a03a00013
0556001105c700290558000b055600a20473004b0400003301c7ffa205e6
00630473004805c7000002aa000f05560006040000210400001304000050
0400001301c700830455fffd02eb0001055600090400000f055600090400
000f04d5005303ab00490540001204ab00180000fec60000fed40000fec6
0000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b000a03eb
004c040000130473000a01c700150473fff40556001105c700a104730019
0239ff8b05c700a404730087055600960400008804e30029040000280400
003b049e00a403670088053000480000ff530000ffbc0000fefe0000fefe
0000fea40000fea401c7008805c900a505c7009c05c900a50000fecd0000
ff480000fec90000fece0000fec50000fed00000fed10000feee0000fed6
0000fedc0000fdd90639005804730048078d001905c70006059f00a40000
feb905dc006304c60009084c001906ba0006023900b9038000720187005a
0187005a0400009904000099023900b0023900b0023900b002aa00190000
00460000003b000000310000005600000044000000560000004a00000049
04e30030047300500473005c0312003f045000480446003d047300310450
003d047d00620427003f0473005604790054047300550319003b0473003c
047300560473003204730055047e0062042f004b04730053047b005505c5
006a05d3006305f800a6094a00a605f8009c0302003b054100a406390060
0472004601c7008903f80087020a00890473004e0250000e047800850473
005c0473005c0302003b020a008901c70088047100000489009804c3005c
04e70098046f009804080098052f005c04f0009801ea0098037300290489
009803bc009805c7009804ec00980531005c046d00980531005c04db0098
046d004a0410002904dd0091046800080659001e046f0008046c0008040e
001f0691000006aa005c03bc003805310031046f009804e7001404c30090
04710000047100000471000004710000047100000471000004c3005c046f
0098046f0098046f0098046f009801eafff401ea008e01eaffb601eaffda
04ec00980531005c0531005c0531005c0531005c0531005c04dd009104dd
009104dd009104dd0091046c000804710000047100000471000004c3005c
04c3005c04c3005c04c3005c04e7009804e70014046f0098046f0098046f
0098046f0098046f0098052f005c052f005c052f005c052f005c04f00098
04f2002e01eaff9601eaffbd01eaffd401ea003e01ea0087054300980373
00290489009803bc009803bc009803bc009803bc009804ec009804ec0098
04ec009804f500980531005c0531005c0531005c04db009804db009804db
0098046d004a046d004a046d004a046d004a046d004a0410002904100029
04100029040e002904dd009104dd009104dd009104dd009104dd009104dd
00910659001e0659001e0659001e0659001e046c0008046c0008046c0008
040e001f040e001f040e001f047100000691000005310031047100000489
009803ae009804710000046f0098040e001f04f000980531005c01ea0098
04890098045a000205c7009804ec0098042f004c0531005c04e60098046d
00980425006a04100029046c00080546004c046f00080543004c05310052
04710000046f009804f0009801ea008e0531005c046c00080531005201ea
ffda046c0008046f009805af002903ae009804c7005c046d004a01ea0098
01eaffda0373002906f4000f06b6009805da0029041600980463002304e6
009804710000048600980489009803ae00980469000f046f009806540023
041f004604e5009804e50098041600980469000f05c7009804f000980531
005c04e60098046d009804c3005c0410002904630023050d004c046f0008
04dc0098047d004c06280098061e0098057c003c05e700980455009804c6
004606af009804db00120323009802aa002202aa006b02aa001902aa0021
02aa001702aa002202aa002e02aa004902aa002a02aa003302aa002e02aa
003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305f800a605f800a605f800a605f800a605f8009c05f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c0302003b
0302003b0302003b0302003b030200320302003b0302003b0302003b0302
003b0416ffac0302003b0302003b0302003b020a0089020a004e02690089
02a50089020a00070302003b0302003b0302003b0302003b030200320302
003b0302003b0302003b054100a404720046047200460472004604720046
047200460472004604720046047200460472004601c7ffa703f80087020a
0089020a004e0269008902a50089020a00070250000e0250000e0300000e
0250000e0478008504780085047800850478008504a0005702aa001702aa
002202aa004902aa002a04ee001504ed009d04ed009d060b001a04d50085
05e3008502260099022600890226002c0226001e02260063022600300226
001b0226001d0226001d022600290226001e022600260226001d02260008
022600280c9600460e0c00460000ffba0ed200460000ff5b0000ff910000
ffb70000ff9b0481003604350036043dffba043dffba0481003604350036
043dffba043dffba0692003e0692003e043fffba043fffba03e9004a03e9
004a0481003604350036043dffba043dffba01a8ffc301d6ff5f01a8ffe9
01d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5002401f4
ffba01f4ffba051b003204b5002401f4ffba01f4ffba0375003203750032
0375003203750032067f0045067f0045067f0045067f0045048100360435
0036043dffba043dffba0692003e0692003e043fffba043fffba0692003e
0692003e043fffba043fffba04cf002d04cf002d0327ffba0327ffba04b4
ffe00500ffe00496ffe804e4ffe8075c003205da0032070e003205130039
0bb700000000fe2c0000fffc0000006b000000730000006b051b003204b5
002401f4ffba01f4ffba067f0014077600140327ffba041effba067f0014
077600140327ffba041effba051b003204b5002401f4ffba01f4ffba051b
003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba
0000fff5049e00a403cd000a04e3003003aa002605c000a104ac00870556
00960473005a0a6600440473007e0556001d07ae001206150018064e009e
05be008707a9000906da001f0556009604000086088c000d07130018090e
00a406ce008805c700a40455008805a300a2046f00870239001302390013
04740048062200bf032f000e04ba005c0474004905590014049b000a06aa
00980556fffd05dc00a50590004b02aaffe50473004403eb004c0146ffce
029200000556005c04e3002902390069063c00aa0b56ffc2084aff120b0c
00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a8003201a80046
01a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8004801a8
ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba01f4009e
01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199004602bf
003202bf00320473000f00>
<000000000000006c0000006c0000006c0000006c00000118000001c00000
0362000005e8000007900000097a000009c000000a4000000ae600000bc6
00000c2e00000ca600000cec00000d2800000d9800000fdc000010f40000
134e00001582000017b0000019d600001c1000001cbc00001fe20000228a
000022e6000023a400002426000024960000251c0000260e0000280e0000
2ab400002ce600002e4a00002fda000030c60000319c00003380000034cc
000036240000375a000039bc00003a6400003dda00003fe8000041860000
42e000004528000047e800004b9000004cb000004e1a0000507c000053b6
0000574e000059c400005b2600005b9000005bfa00005c5e00005ce60000
5d1a00005d960000611a00006360000065e80000682c00006a5200006bd0
00006e38000070240000723c000073e40000770a0000789200007c380000
7e440000807a00008286000084780000859c00008a1200008b9600008d7c
00008ffc000096360000988a00009b8e00009d8e00009e8c00009ed80000
9fda0000a07a0000a0c60000a0fa0000a1360000a1780000a1de0000a224
0000a2580000a28e0000a2c40000a3140000a3560000a3a80000a3e00000
a4320000a4680000a4a80000a4ea0000a5280000a5720000a5b20000a5e0
0000a6180000a6680000a69e0000a6de0000a7180000a75c0000a7a60000
a7e20000a8120000a8560000a88e0000a91e0000a9a40000abb20000ad46
0000aef60000af420000afd60000b1fa0000b44e0000b63e0000b72a0000
b7ac0000b8160000b9340000ba900000bcd80000be3a0000bec80000bf72
0000c0360000c17e0000c3280000c4160000c4dc0000c5400000c5ae0000
c6d80000c7fc0000c88c0000ca6e0000ccc80000d01a0000d1100000d1b6
0000d2060000d2bc0000d3dc0000d57a0000d6140000d6d80000d7980000
d8000000d83c0000d8940000d8e20000dafa0000dd400000dd780000ddaa
0000ded40000e0000000e0ae0000e1520000e1f40000e2c60000e31a0000
e3500000e3a80000e4fa0000e56c0000e5c60000e73e0000e8aa0000e98a
0000e9bc0000ea580000eb7c0000edf20000ee2c0000ee700000eeac0000
ef0e0000ef500000ef960000efe20000f0140000f0680000f0a60000f0d6
0000f1140000f15a0000f19c0000f1da0000f25c0000f2ca0000f3c80000
f4040000f4840000f4b80000f55a0000f5e20000f64e0000f6b00000f71c
0000f8080000f8fa0000f92e0000f9620000f9920000f9d60000fa4e0000
fbd00000fdea0000fe1c0000fe560000ff50000100de0001011400010278
000102f4000103d4000104ca0001065a000107c4000109b200010aae0001
0af400010b2800010b6a00010ba400010bf800010c4000010c8a00010cba
00010cea00010ed200010f1000010f3800010f6800010f9c00010fc20001
0fe80001102c000111e20001135c00011382000113a8000113ec0001141c
0001144c000114a20001158000011692000116dc000117140001176e0001
17ac000117e0000118100001184c0001188c000118ca0001190600011948
0001197e000119ba000119fa00011a2000011a4400011a9400011bf00001
1c4600011c7a00011cc800011d1400011d5600011d8e00011dc400011e0c
00011eae0001204a000122120001239400012586000126d80001285c0001
293e00012ad800012b4200012b6a00012c0800012e9a00012eda00012f1a
00012f5a00012f9800012ff600013054000130c2000130e2000131cc0001
326c000132a2000132f00001333a00013384000133a0000133bc000133dc
000133fc0001341c0001343c0001346200013488000134ae000134d40001
35040001352c0001355400013580000135ac000135e00001360a00013636
0001366c00013696000136c2000136f8000137220001374c000137800001
37b0000137e400013828000138580001388c000138ce0001390200013934
00013976000139aa000139da00013a1c00013a6000013aa600013b020001
3b1e00013b3a00013b5600013b7200013b8e00013cfc00013fa800014218
000142340001424e0001426a00014286000142a2000142be0001431a0001
4354000143be0001448800014528000145fe0001467e0001470600014776
0001480c0001486a000148b00001490e0001497000014a3200014af00001
4b1c00014b7800014bbc00014d2800014e1c00014e5c00014e7800014ea4
00014edc00014f2800014f6800014f9c00014fcc00014ffc0001502c0001
5070000150a0000150d0000151100001514000015170000151a0000151e0
000152100001524000015270000152960001549a000154ca000154fa0001
564a00015800000158300001585e0001588e000158bc000158ec0001591a
0001593e000159620001599200015b0200015b3a00015b6a00015cfc0001
5d2a00015d5800015d8600015dae00015f0c000160a4000160dc0001611c
0001615800016188000161b6000161d20001620200016232000163220001
648a000164ba000164f4000165340001656400016594000165d6000165fc
0001662200016662000166a2000166d200016712000167fc0001687c0001
696000016990000169c0000169f000016a2000016a5c00016a8e00016ac0
00016af000016b2000016b6600016b9800016bc800016bfe00016c700001
6ca400016e7200016f74000171040001733400017584000177160001777a
0001780400017814000178a200017aa000017bcc00017d3800017e280001
7fac000181c6000183f2000184e4000184f4000185040001861c0001862c
0001863c0001864c0001865c0001866c0001879e000187ae000187be0001
883200018842000189120001892200018a3400018a4400018a5400018a64
00018bc200018da000018de200018e1800018e4e00018e7e00018eae0001
8f0200018f2a000190b4000191fc00019350000194b80001963c000196a0
000198320001994e0001995e0001996e00019af400019b0400019c6a0001
9dc400019ef80001a0560001a1dc0001a3a20001a3e20001a41a0001a450
0001a4760001a4a60001a4cc0001a6420001a6720001a7a80001a7b80001
a7c80001a80a0001a81a0001a9ae0001ab5a0001ace40001ad0c0001ad3c
0001ae980001aea80001afe00001aff00001b08a0001b1ea0001b1fa0001
b4600001b5ea0001b7880001b7b80001b92e0001ba600001ba700001ba80
0001ba900001bb6a0001bb7a0001bb8a0001bb9a0001bc920001be0c0001
be1c0001bf440001c0780001c1ca0001c35e0001c47c0001c6080001c71a
0001c7500001c98c0001ca2c0001ca3c0001cbd20001cd740001cdf80001
cf7a0001cf8a0001d1f20001d3720001d4f20001d5220001d6c20001d848
0001da0c0001db380001db480001dc780001dc880001dc980001dd580001
dd680001df4e0001df5e0001e0940001e1a20001e34e0001e5040001e646
0001e7b60001e8fe0001e9500001eb320001ecae0001ecec0001ee920001
eeb60001eff60001f0060001f0160001f04e0001f05e0001f1ea0001f352
0001f4c60001f4ea0001f51a0001f6880001f73a0001f7f80001f8260001
f9dc0001fad40001fb620001fc880001fd360001fe0a0001fe540001fecc
0001ff8c0001ffb40001fff80002004e0002012a00020174000201a80002
01d0000201f80002022c00020270000202b4000202f200020430000204e8
000206080002067e0002074c0002079e00020830000208e0000209d40002
0a2800020abe00020b7c00020c6600020d1800020e3800020e8a00020f34
0002106a00021142000212280002132e00021414000214f6000215ea0002
16880002178e000218880002190000021978000219ee00021a2400021a80
00021b4800021bd400021c0c00021c5200021c8200021cec00021dac0002
1de000021e1000021e4400021e7400021ea400021ed400022074000220ac
000220ec000221240002215c000221f8000222f200022322000223c60002
23f40002243400022484000224b40002250000022698000227fe0002295e
000229a4000229f800022a3000022ba200022bd800022c6a00022ca80002
2cd600022d1400022e4400022e6c00022fa800023038000230e200023164
0002322000023338000234460002347a000235000002365c000236de0002
37240002382e000238760002397a000239f600023a4e00023ad200023bbc
00023cd200023dce00023e7800023f680002404400024128000242100002
42c000024342000245a0000245ca000245f4000246ac000246d600024818
0002491e00024a0800024a3200024a5c00024a8600024ab000024ada0002
4c5a00024c8400024cae00024cd800024d0200024d2c00024d5600024d80
00024daa00024dde00024e0800024e3200024e5c00024fd600024fe60002
5100000251100002513a000251640002518e000251b8000253620002557e
000256ac000256bc00025838000258480002598e00025b5a00025c600002
5de000025f80000261a4000262fe000264e0000266240002675200026840
0002686a00026894000268be000268e8000269120002693c000269660002
6990000269ba000269e400026a0e00026a3800026a6200026a8c00026ab6
00026cf200026e6e00026fb20002719a000272e20002730c000273360002
736600027396000273e60002743600027476000274e80002753c0002759a
000275f00002762600027668000276ae000276f800027728000277600002
7790000278c800027c0e00027c3800027c6200027c8c00027cb600027ce0
00027d0a00027d3400027d5e00027d8800027db200027ddc00027e060002
7e3000027e5a00027e8400027eae00027ed800027f0200027f2c00027f56
00027f8000027faa00027fd400027ffe00028028000280520002807c0002
80a6000281440002815a000281840002819c000281ac000281d800028204
00028342000284840002862a0002863a0002877c000288cc00028abc0002
8c9000028da800028db800028e4800028ed600028fd600028fe600029086
00029096000291ac000292fe0002942e0002943e0002950c0002951c0002
9692000296a2000297b6000297c6000298fa00029a9000029b4c00029b5c
00029c5a00029db400029e4000029e5000029f7a0002a1060002a1c20002
a1d20002a26e0002a27e0002a34c0002a35c0002a4340002a4440002a54c
0002a55c0002a7220002a7320002a88a0002a89a0002ab040002ab140002
ad0e0002ad1e0002ae880002ae980002af880002af980002b1300002b140
0002b25e0002b26e0002b3ae0002b3be0002b3ce0002b3de0002b5560002
b5660002b5760002b5860002b6d80002b8260002b8f40002b9d80002bb58
0002bcda0002bdda0002beee0002c0320002c0420002c1300002c20a0002
c3a60002c3b60002c4d40002c5da0002c7d80002c7e80002c7f80002c808
0002c9520002c9620002ca1a0002ca2a0002cb380002cb480002cc340002
cc440002cd620002cd720002ce100002ce200002ce300002cf1e0002d092
0002d1be0002d2b80002d2c80002d2d80002d2e80002d4860002d6400002
d70e0002d71e0002d7480002d7720002d9f80002dc5c0002dee00002e152
0002e3220002e4d80002e5020002e52c0002e53c0002e54c0002e5760002
e5a00002e5ca0002e5da0002e5ea0002e6140002e63e0002e64e0002e65e
0002e6880002e6b20002e6dc0002e6ec0002e6fc0002e70c0002e71c0002
e72c0002e73c0002e7660002e7760002e7860002e7b00002e7da0002e804
0002e82e0002e8580002e8820002e8ac0002e8d60002e9000002e92a0002
e9540002e97e0002e9a80002e9d20002e9fc0002ea260002ea500002ea7a
0002eaa40002eace0002eaf80002eb220002eb4c0002eb760002eba00002
ebca0002ebf40002ec1e0002ec480002ec720002ec9c0002ecc60002ecf0
0002ed1a0002ed440002ed6e0002ed980002edc20002edec0002ee160002
ee400002ee6a0002ee940002eebe0002eee80002ef120002ef3c0002ef66
0002ef900002efba0002efe40002f00e0002f0380002f0620002f1020002
f1460002f1bc0002f1e60002f2100002f23a0002f2640002f28e0002f2b8
0002f2e20002f30c0002f3360002f3600002f38a0002f3b40002f3de0002
f4080002f4320002f45c0002f4860002f4b00002f4da0002f5040002f52e
0002f5580002f5820002f5ac0002f5e00002f6140002f6480002f7da0002
f9760002fb120002fc9e0002fce40002fd2a0002fd980002fdf40002fe46
0002feb60002ff8e0003005a00030132000301fe0003029e000303b80003
046c000304ee0003054800030588000306a6000307f000030988000309e4
00030a4200030a9e00030afa00030bae00030c6400030d1000030dbc0003
0e6800030f2000030fd800031090000310a2000310b4000310c6000310d8
000310ea00031158000311c60003127e00031290000312a2000312b40003
12c4000312d6000312e8000312fa0003130c0003131e00031330000313de
0003148a00031538000315e40003167c000316b6000316e00003170a0003
175e000317b00003182c00031876000318f200031946000319ca00031a1c
00031a9200031aea00031b5000031ba600031c0000031c7e00031cca0003
1d2800031d8c00031dda00031e2800031e8000031ec800031ef200031f20
00031f4600031f7a00031faa00031fda0003202c0003209a000320f00003
2164000321b80003222c00032272000322da000323200003237c000323ac
000323e60003240c0003243c0003246200032488000324ba000324ea0003
253c000325a2000325f80003265e000326b20003272000032762000327c2
00032804000328500003288a000328c6000329000003293c000329700003
29a2000329d200032a0200032a2c00032a5200032a7c00032aaa00032ad4
00032b2000032b6400032b9a00032bd600032c0a00032c3800032c760003
2ca600032ce000032d0a00032d3800032d5e00032d8400032db000032e0c
00032e3c00032e6c00032e9c00032ed400032f0800032f3600032f660003
2f9600032fc600032ff60003302a00033080000330b40003311400033148
000331a0000331d400033230000332ce0003339c000334bc000335840003
3614000336aa0003389600033a9200033c0a00033d8600033f30000340e2
000341ca00034300000343f80003450a000346280003475e000348c80003
4a3600034bcc00034d4800034e5800034e6800034f94000350d0000351e6
0003536a00035444000354ba000355700003561600035786000357be0003
5838000358fa000359b400035a1c00035b2200035c5800035d2400035e82
00035efc00035f7600035ff0000360aa0003615e000361ba000362140003
625c000362cc0003634800036392000363cc0003641200036456000364a8
000364fa0003657c000365fe0003664000036680000366b6000366ec0003
671a000367480003677c000367b0000367f20003683400036870000368ac
000368e6000369200003695200036984000369b6000369e800036a220003
6a5c00036a9e00036ae000036b2200036b6400036bb200036c0000036c42
00036c8400036cc400036d0400036d3e00036d7800036dc400036e100003
6e4e00036e8e00036ed400036f1a00036f5600036fac00036fe800037024
00037064000370a4000370e00003711c0003715c0003719c000371e00003
72240003727800037306000373480003738a000373f20003745a0003748c
000374be000374f60003752e000375c40003765a000376a4000376ee0003
772a00037766000377bc000378120003785c000378a6000378fe00037956
00037996000379d600037a0e00037a4600037a9000037ada00037b180003
7b5600037b9800037bda00037c2e00037c8200037cc800037d0e00037d54
00037d9a00037df000037e4600037e9c00037ef200037f3e00037f8a0003
7fd600038022000380960003810a0003817e000381f2000382300003826e
000382ac000382ea0003832800038366000383aa000383ee0003843a0003
8486000384e60003853200038570000385be000386ce0003871e0003876e
000387a6000387de000388340003888a000388fe00038962000389a40003
89e600038a3c00038a8a00038ad600038b2200038b6200038ba200038bea
00038c3200038c9e00038cf800038d3000038d6800038da800038de80003
8eb800038fb40003907400039162000391b80003920e00039260000392b4
000393180003937c000393d2000394280003949e00039514000395560003
9598000395da0003961c0003965e000396a0000396f60003974c0003979e
000397f20003987a000398fc0003999c00039a3e00039a7c00039aba0003
9af800039b3400039b7200039bb000039bee00039c2a00039d0e00039dfa
00039f100003a02c0003a0f60003a1c00003a2ba0003a3b40003a4b20003
a5b00003a6ce0003a7ec0003a9120003aa380003ab3a0003ac3c0003acce
0003ad600003ad9e0003addc0003ae360003ae900003aec80003af000003
b0100003b0200003b0680003b0b00003b1080003b1600003b1920003b1c4
0003b2060003b2480003b2820003b2bc0003b3000003b3440003b3bc0003
b4360003b4c60003b50a0003b54a0003b5cc0003b64e0003b7a60003b7b6
0003b8040003b8520003b88e0003b8ca0003b9100003b9560003b9a40003
b9f20003ba420003ba920003baee0003bb4a0003bcc00003be280003be60
0003be9a0003bee60003bf320003bf840003bfd60003c0280003c07e0003
c0ba0003c0f60003c14c0003c1a00003c2d80003c3780003c3c60003c406
0003c4400003c5d60003c85a0003c91e0003cab40003cc120003cce00003
ce860003d0da0003d3120003d3580003d38a0003d4340003d5580003d57c
0003d6160003d7220003d8320003d9420003da500003dbd60003dc080003
dcaa0003dcd20003dd340003dd960003ddf80003de5a0003de980003ded6
0003df100003df4a0003df760003dfc20003dffc0003e0360003e1920003
e2e60003e2f60003e3b40003e4ea0003e5480003e6600003e7ee0003e894
0003e9da0003ea180003ea560003ea940003eae80003eb100003eb6a0003
ebce0003ec160003ec780003ecd80003ed4a0003edc60003ee420003eec4
0003ef500003efdc0003f0660003f0e60003f1200003f15c0003f2c00003
f38a0003f3ba0003f3ea0003f5220003f6720003f6820003f7700003f844
0003f93c0003fa320003fbb40003fd0e0003fd1e0003fe360003fee20004
00240004017a000401d600040334000403c200040568000406da000407ee
000408260004088a00040a3a00040ba400040c0600040d6e00040e740004
0f2a00040fd6000410fe000411ec000412cc0004140c0004153800041652
000417c20004193c0004194c00041a2c00041b2200041bd200041cce0004
1d7a00041e8400041f70000420380004215c000422600004238e000424cc
000426380004276e0004290200042aaa00042ba200042cb600042de80004
2eda00042f1200042f68000430160004302600043088000430e40004314a
00043196000431d60004320e0004323a00043268000432a2000433d80004
340c000434900004354600043576000435fa0004362a00043662000437fa
00043986000439d000043a0a00043a6000043aac00043ad200043af80004
3b3a00043b7c00043bbe00043bee00043c2600043c5c00043c9200043cd4
00043d0400043d3400043e2a00043f2e00043f6200043f9a00043fe00004
4014000440440004407c000440b0000440e400044114000441440004417a
000441b0000441e0000442100004424400044278000442a8000442d80004
43120004434600044378000443aa000443de000444120004444200044472
000444a0000444ce000445dc000447480004487c000449b0000449e00004
4a1a00044ab400044c1e00044d7a00044e3e00044f5200044f8200044fb6
000450ae0004525e000452b60004532e0004546a000454a80004551a0004
554a0004557a000455b40004563c0004566c0004569c0004582e00045978
00045a8400045b9200045cbe00045e1400045f70000460d00004620a0004
637c000464dc000464ec000466a2000467ca00046864000469ec000469fc
00046af800046c7e00046dd600046e8800046f58000470640004710e0004
715c000471ac0004725c000473020004737e000474ce000475c2000476b8
000477c40004789c0004797600047a0a00047b1c00047cac00047dca0004
7ec000047f6a00048014000480de000481860004825c000482d800048336
00048498000485cc000487680004882a0004892a00048a0400048b420004
8bee00048cb800048da800048e7600048f520004907e000491b6000492a6
0004934400049436000495a6000496f00004995c00049a2e00049ae20004
9bb000049ca400049de200049df200049f260004a0380004a0480004a154
0004a2840004a2d80004a44c0004a5740004a6880004a83a0004aa4e0004
ace20004ae9c0004afc80004b1a80004b36a0004b4fc0004b5c80004b764
0004b7da0004b8880004b9640004b9f00004ba920004bb340004bc180004
bd500004bfac0004c0f40004c1040004c1140004c1760004c1d40004c236
0004c2d40004c36c0004c4700004c55e0004c56e0004c57e0004c6180004
c6b20004c6ee0004c76a0004c7de0004c8340004c8680004c8ee0004c97a
0004c9f20004ca500004caea0004cb7c0004cbfc0004cc7e0004cd120004
cd460004cda80004ce5a0004d0200004d0580004d2340004d3480004d358
0004d38e0004d3d20004d4160004d45a0004d4900004d4c20004d5040004
d5a00004d5f60004d69c0004d7140004d79a0004d80a0004d86c0004d8f2
0004d9520004d9bc0004da300004daa00004dafe0004dba40004dc3c0004
dca80004dd380004dd960004de040004deac0004df580004dfee0004e058
0004e0da0004e13e0004e1ea0004e2a20004e34e0004e3dc0004e4380004
e4a40004e4fa0004e57c0004e5fa0004e6800004e70c0004e7660004e7d2
0004e8420004e8b20004e9220004e9a60004ea360004ea9c0004eb160004
eb920004ec0a0004ecb00004ed4c0004eddc0004ee3a0004eed80004ef54
0004efe60004f0880004f1320004f1ca0004f2260004f27c0004f2e40004
f38a0004f4320004f4fc0004f5a20004f6040004f65c0004f6bc0004f74a
0004f7d00004f85e0004f8be0004f9220004f98c0004f9f40004fa5c0004
fada0004fb620004fbf60004fc620004fcca0004fd2e0004fdd60004fe90
0004ff3e0004ffcc0005002a0005009600050106000501ac000502560005
0318000503ba0005041e000504ae00050520000505b00005062e000506aa
00050716000507a4000508000005085e000508e400050960000509c80005
0a2c00050a8000050aee00050b5600050bd400050c4a00050cc400050d44
00050da000050e0600050e6a00050f0a00050fac00051062000511120005
116e000511e600051244000512ce00051366000513f60005145c000514ba
00051548000515ba0005164e000516e600051756000517c60005183e0005
189c000518fc00051976000519d000051a3000051a8a00051ae600051b4e
00051bdc00051c1200051c4a00051cd600051d0000051d4200051dd60005
1ec400051f5400051f8a00051fda0005204c000520f80005218a000521e2
0005223c00052294000522ee00052372000523f80005249c000525440005
2582000525f2000526860005271e000527b40005285e00052890000528e0
000529340005297a00052a1e00052aa800052b2e00052b8e00052bd20005
2c2000052cc000052d5000052df000052e9600052f3c0005300000053032
0005305c000530e200053192000531c4000531ec000532ba000533180005
33b200053400000534660005350e0005357c000535e20005366e000536e0
000537560005380a00053864000538d40005391000053962000539e80005
3a4800053aec00053bcc00053cf400053e8400053ee000053f360005425c
000542f6000543520005439a000545080005465a000546a0000547ae0005
48460005495400054a5e00054b0000054be800054c7a00054d1600054e08
00054f0800054f840005500a0005505200055182000552be000553a20005
53f200055426000555140005563c000557d60005590600055a1c00055ae0
00055bfc00055c6a00055cfe00055e5000055f0600056070000561a00005
62d2000563fe000564aa00056570000566420005679c0005691c00056a4c
00056b6800056d2200056e7400056f600005703c000570fe000572780005
73c8000573d8000573e8000573f8000574b000057566000575a2000575d8
0005761000057646000577da000579ee00057ad800057bee00057d660005
7ed400057f8e00058050000581340005822e000583cc000585200005870e
000588d400058ab000058c4800058d3000058e0c00058f54000590d60005
91be000592d80005931a00059364000594c200059640000597b2000598aa
00059a8a00059c4a00059cce00059cfe00059d4a00059e1200059ee20005
a0760005a0fe0005a1660005a1b80005a20a0005a3bc0005a5ec0005a722
0005a9040005a9e00005aafa0005aca60005aeb20005afb40005b0a00005
b2920005b49a0005b6060005b78a0005b8ea0005ba580005bae60005bb76
0005bc900005bd9c0005bf440005c09e0005c28e0005c4580005c4ec0005
c5880005c61e0005c6a60005c78c0005c8640005c9fe0005cb900005cd1e
0005ce420005ce520005ce820005ceb20005d02c0005d1ce0005d2780005
d35a0005d41a0005d4c40005d55e0005d6400005d6fe0005d7da0005d9a4
0005dade0005db6a0005db9a0005dbca0005dbfe0005dc320005dc420005
dc520005dc820005dcb20005dce60005dd1a0005dd4e0005dd820005ddb6
0005ddea0005df640005df740005dfa40005dfd40005e00c0005e0400005
e0740005e0a80005e0dc0005e1100005e1440005e17c0005e1b20005e1e2
0005e2220005e25a0005e2a20005e2e80005e31c0005e3500005e38a0005
e3c20005e4620005e4720005e5c40005e78c0005e9320005eadc0005ec28
0005ed3e0005ee4c0005ef620005f05c0005f1440005f2660005f3620005
f43a0005f52a0005f5e60005f6980005f7620005f7d40005f87a0005f90a
0005f96e0005fa7c0005fae20005fb900005fc860005fcee0005fd560005
fe060005ffe0000600e400060164000601a20006024e000602dc000603c4
0006045c000604c2000605c0000606820006073c0006077a0006080a0006
090c000609a0000609e400060b0200060c2c00060e0e00060fd000061106
00061234000613340006135c00061384000613ba000613ec000614180006
14400006146800061496000614f4000615620006159a000615d200061602
000616280006165c00061692000616b8000616de0006170c0006173a0006
1766000617dc00061804000618660006188c000618b2000618d8000618fe
0006192e0006195e0006198e000619c8000619f800061a2e00061a5e0006
1a9000061ab600061adc00061b1000061b4600061b7600061ba600061bcc
00061bf200061c1800061c4600061c7a00061d0000061d4400061d7e0006
1db200061df600061e3000061e6a00061e9000061eba00061f0600061f48
00061f6e00061f9c00061fc200061fe8000620280006205a0006208a0006
20ba000620e00006210600062136000621660006218c000621b2000621d8
000621fe000622240006224a00062272000622fa00062324000623980006
23c0000624360006245e000624c0000624f200062524000625540006258c
000625be000625ec000626260006264e000626ae000626f0000627200006
274c0006277c000627ac000627d4000627fc0006282400062886000628ae
0006290c0006295000062994000629c4000629fa00062a2000062a480006
2a6e00062a9600062abc00062ae400062b0c00062b3600062b5c00062b82
00062ba800062bda00062c0200062c8800062cb200062d1c00062d4c0006
2d7c00062da200062dc800062e2000062e5000062e8c00062eb600062ee6
00062f1600062f4a00062f7e00062fae00062fee00063028000630700006
3096000630bc000630e2000631080006312e0006316e000631ae000631ea
0006321a0006324a0006327a000632aa000632e20006331a0006335a0006
339a000633d40006340e0006344a00063488000634d20006351c00063562
000635a8000635ea0006362c0006365c0006368c000636c0000636f40006
372e00063768000637b40006380000063858000638b00006390800063966
00063996000639c6000639fc00063a3200063a6800063aa400063ad80006
3b0c00063b6000063bb400063c0800063c5c00063cb000063d0400063d5c
00063db400063de200063e1000063e4200063e7400063eba00063f000006
3f3200063f6400063fb60006400e0006405200064096000640da0006411e
00064172000641c6000641f6000642260006425c00064292000642d00006
43160006436a000643b40006440600064458000644b80006451800064548
0006457a000645b4000645ee0006464000064694000646de000647260006
4768000647d2000648200006486c0006489e000648d00006490400064938
0006496e000649a4000649e200064a1800064a4a00064a8600064adc0006
4b3200064b9000064bee00064c4400064c9a00064cce00064cfe00064d42
00064d7800064da800064dec00064e2a00064e6200064e9a00064ed00006
4f0c00064f3c00064f7800064fb800064ffe0006504800065094000650e0
000651360006518c000651da0006522800065276000652c6000653220006
537e000653d60006542e00065482000654d6000655180006555a000655a2
000655ea0006563200065680000656c4000657080006576e000657d40006
583a000658a0000659060006596c000659d600065a4000065a8800065ad0
00065b1800065b6000065bac00065bf800065c4c00065c9800065cdc0006
5d2a00065d9200065dfa00065e6a00065eda00065f4200065faa00065fea
00066028000660720006609c000660e20006611a00066168000661980006
61c800066204000662380006625e000662b2000662f0000663440006642a
0006655200066594000665ba000666100006664000066682000666ca0006
671800066762000667b2000667d8000668c0000669a400066af600066b24
00066b5200066be600066c6c00066c9a00066d2400066d5400066d840006
6dd200066e2000066f0400066fe00006712400067154000671840006721a
000672a2000672d20006730200067332000673c2000673f2000674220006
7474000674bc00067512000675a800067640000676b40006770600067730
00067786000677ba000678040006783c0006788c000678ca000679160006
793c000679b800067a0a00067b1c00067d2600067eda0006805c000681ce
00068470000687400006890000068a4600068ca000068de200068ff80006
904a0006909a000690f000069146000691a8000692300006947e00069622
0006982e0006994a00069afe00069c8000069d4000069e2200069e8a0006
9eec00069f6200069fca0006a0760006a0e60006a1760006a28a0006a34e
0006a39a0006a4300006a4dc0006a5800006a62a0006a6740006a6b60006
a72c0006a7940006a8240006a8d20006a93c0006a9a00006aa060006aac0
0006ab560006abb40006abde0006ac080006ac180006ac280006acea0006
adee0006aff80006b14e0006b15e0006b20e0006b2f20006b3520006b362
0006b3be0006b41c0006b53c0006b62a0006b63a0006b64a0006b65a0006
b66a0006b7500006b8500006ba280006bbe40006bcea0006bd640006bdde
0006be900006bea00006bfae0006bfbe0006bfce0006c0900006c1c40006
c2b00006c2c00006c2d00006c2e00006c4460006c5b20006c6de0006c6ee
0006c6fe0006c70e0006c71e0006c8000006c8100006c9720006ca7c0006
cb7a0006ccb20006cd840006ce020006ce800006cfa00006d01c0006d068
0006d0f40006d2080006d25c0006d39e0006d45e0006d52a0006d6200006
d72a0006d7dc0006d9420006d9a80006da6c0006dc6e0006ddfc0006df7a
0006e0aa0006e35c0006e49e0006e5cc0006e7440006e8bc0006ea3c0006
ebca0006ed7c0006edea0006ef4e0006f0860006f18a0006f2c00006f3f2
0006f4c20006f5920006f6ee0006f7c80006f8680006f96c0006fa960006
fb940006fd140006fe7e0006ffbc000701340007028000070362000703ca
0007046c0007050c0007060a00070772000708ac00070a4000070b8a0007
0c6e00070cd600070ddc00070e7c00070f3a00070fe800071028000711d4
000712a60007136c00071494000716340007174000071798000719300007
19be000719d000071a0000071a3000071a6800071aa000071ad600071b12
00071b4800071b8400071cf200071d3c00071dd600071e6e00071ee80007
1f6c00071fd20007207e000720ca000721ea000722a000072376000723ae
000723ec000724600007255a000726780007277a000727bc000728280007
2896000728a6000728b6000728c6000728d6000728e6000728f600072906
000729160007292600072936000729460007294600072aca00072ada0007
2bb400072c7a00072db000072fa6000731a8000733a4000735da000737da
000738460007395800073aea00073c4200073cf400073d3800073dd60007
3f0600073f5600073fec0007412800074138000742ee0007442200074472
000744c80007458a000745ce0007461000074696000746f4000747e60007
4874000748aa000749240007499c000749ec00074af800074bee00074c98
00074cc200074cec00074d1600074d4000074d8000074dc000074df80007
4e3000074e7a00074ec400074f0400074f4400074f8e00074fd800075018
00075058000750b20007510c0007514600075180000751c4000752080007
524c00075290000752e40007533800075384000753d00007540e00075452
000754a2000754f20007554c000755aa000755d4000755fe000756980007
573200075776000757ba000758d0000758e00007592800075970000759c2
00075a1400075a7e00075ad200075b1e00075b7c00075c0600075c6a0007
5cae00075cf800075d6000075daa00075dea00075e3200075e6e00075eaa
00075ee600075f2000075f6200075fa400075fe4000760240007606e0007
60b80007610e00076166000761b4000762020007624400076292000762d4
0007631e00076360000763a4000764000007645c000764a8000764f40007
653e00076588000765c60007660400076682000767000007673a00076774
0007680e000768a80007697c00076a5000076aac00076b0800076b7c0007
6bf000076d4e00076d5e00076e4800076e5800076e8e00076ec400076efe
00076f3800076f7400076fb000076ff60007703c000771a2000773580007
74a400077662000777d80007798000077ab000077bb600077dd400077f18
000780ae00078236000782b4000783f80007860000078694000787280007
887c000789a600078b2000078c6000078dcc00078eba0007908400079218
0007929a000793cc000794b60007961e00079700000798b6000799a80007
9b0a00079c4600079d3a00079efe0007a0860007a22a0007a38e0007a52a
0007a6e80007a86e0007a90a0007aa7e0007ab700007ac580007add80007
af2a0007b04a0007b1e20007b3b80007b5460007b5f00007b6a60007b858
0007b8fc0007b98a0007b9d60007ba220007ba9a0007bb780007bbf20007
bc940007bce80007be4c0007bf780007c08a0007c18c0007c2540007c3c8
0007c5080007c72e0007c7d80007c9020007ca060007cba60007cc920007
cd8c0007ce8a0007cf700007d08a0007d2440007d3f20007d5600007d5d8
0007d64c0007d76a0007d7ee0007d8f00007da7c0007dbf40007dd2a0007
de340007dfaa0007e1520007e3440007e5320007e6f80007e76c0007e81c
0007e8d20007e9820007ea400007eb3a0007ec3e0007ed380007ee440007
eecc0007ef5a0007efe20007f0760007f1520007f2480007f32c0007f422
0007f4b60007f5720007f6060007f6c40007f7b40007f8bc0007f9ba0007
face0007fbf00007fd040007fe440007ff7e000800a0000801b4000802f8
0008044c0008066000080812000808c6000809e200080ab800080bea0008
0cc800080e5c00080f1600080fb2000810a40008118c00081278000812f6
000813f00008152e0008165a0008168e000816d2000816e2000817820008
18240008191a00081a0600081ae000081bb800081d1600081e7600081f14
00081faa00081fe80008202800082066000820a600082100000821580008
21b200082216000822a20008249e000824ee0008261a000826a000082720
000827fa000828d2000829d600082bc200082cda00082d4a00082dda0008
2e9c00082f6e00082fda00083058000831ac000831f2000832380008331c
00083358000833b6000833f4000834260008346a000834ac000834dc0008
35b60008367e00083762000837de0008382c000838b60008398c00083a04
00083abe00083b7000083bba00083c8e00083d4000083d9800083da80008
3db800083dc800083dd800083f0a00083f1c00083ffe000840a4000841ae
000842ba000842fe0008434200084376000843aa000843fa0008444a0008
449c000844ee0008454000084596000846a4000847cc0008494c00084aea
00084caa00084d9c00084eae00084ffa0008505200085136000851e00008
52320008534e000854c0000855420008562a0008573a000857b0000858e4
000859ee000859fe00085a1000085a2000085a3000085a4000085a500008
5a6000085a7000085a8000085a9000085bd200085cf000085d7e00085e78
00085f0600085f5e000860160008618200086266000862ae000863380008
63a6000864a8000864f4000865bc000866c2000867c8000868200008688e
0008689e0008699e00086a8400086b6800086bf200086c7000086cd20008
6db200086e1000086e4200086eaa00086f5800086fa00008709200087130
000872060008729a0008741e000874de00087640000876840008773a0008
77f6000879b000087aa000087b1e00087bb200087c6600087d8200087e0a
00087f9a0008802a000880de000882100008824000088270000882a00008
82d000088304000883360008835c0008838c000883bc000883ec00088420
0008844e0008847c000884aa000884dc0008850c0008853c0008856c0008
859c000885cc00088600000886300008866000088690000886c4000886f4
00088724000887540008877a000887aa000887da0008880a0008883a0008
886a0008887a000888aa000888da0008890a000889300008896000088990
000889c0000889e600088a1600088a4600088ae000088b0e00088b3c0008
8b6a00088b8e00088bbc00088be200088c1200088c3800088c6600088c8c
00088cb200088cd800088d0800088d2e00088d5e00088e3200088e620008
8e9200088ec600088ef600088f1c00088f4c00088f7c00088fac00088fd2
00089002000890280008904e00089074000890a400089112000891420008
9172000891a2000891d60008920a000892300008926000089290000892c0
000892f4000893240008935800089388000893b8000893e8000894180008
946000089490000894c0000894d0000894e00008951e000895c4000895d4
000895e4000895f4000896ea000896fa0008970a00089798000897a80008
97b80008982e0008983e0008988800089898000899480008995800089968
00089a6000089a7000089b3200089c3e00089c6e00089c9e00089cce0008
9cfc00089d2c00089d5c00089d8c00089dbe00089df200089e2600089ef0
00089f2000089ff80008a0080008a0180008a04a0008a05a0008a13a0008
a1f40008a2880008a2b80008a2e80008a3480008a3580008a3f20008a402
0008a4120008a4c00008a4d00008a6860008a79c0008a8420008a8720008
a99a0008aa1a0008aa2a0008aa3a0008aa4a0008aa940008aaa40008aab4
0008aac40008ab780008ac800008ac900008acfa0008ad760008add20008
ae440008aed60008af840008b0120008b0f20008b1d60008b2a20008b2f6
0008b3140008b3300008b34c0008b3680008b3860008b3a20008b3c00008
b3dc0008b3fc0008b41a0008b4380008b4560008b4740008b4a40008b4d4
0008b5040008b5340008b5680008b59c0008b5cc0008b5fc0008b6220008
b6780008b6880008b6b80008b6e80008b7180008b74c0008b77c0008b7ac
0008b7dc0008b8020008b8320008b8420008b8760008b8a60008b8d60008
b8fc0008b92c0008b95c0008b98c0008b9c00008b9f00008ba200008ba50
0008ba840008bab80008bade0008bb0e0008bb3e0008bb6e0008bba20008
bbd20008bc020008bc280008bc580008bc680008bc980008bccc0008bcdc
0008bd100008bd400008bd640008bd900008bdb60008be6c0008be9c0008
becc0008befc0008bf300008bf600008bf900008bfb60008bfe60008c00c
0008c03c0008c06c0008c09c0008c0cc0008c1000008c1340008c1640008
c1940008c1ba0008c21e0008c2440008c2740008c2980008c2c40008c2ea
0008c2fa0008c31e0008c3420008c36e0008c3e00008c4100008c4400008
c4740008c4a40008c6400008c65e0008c67a0008c6960008c6b60008c90a
0008ca480008cb7e0008cd540008ce520008cf860008cfdc0008d0600008
d11e0008d1f60008d2a40008d3320008d3f80008d4720008d5080008d5ae
0008d6720008d7340008d7d40008d8b20008d9740008d9dc0008db3e0008
db700008dc2e0008dd0a0008dda80008de620008df1a0008df520008df8a
0008dfcc0008e00e0008e06e0008e0e00008e14c0008e1b80008e2060008
e2540008e2a60008e2f80008e3460008e3940008e3c40008e3f40008e424
0008e4540008e4820008e4ae0008e4da0008e5080008e5340008e5600008
e58e0008e5bc0008e5e80008e6140008e6400008e66c0008e6a00008e6f0
0008e7540008e7b80008e7e60008e8140008e8400008e86c0008e8980008
e8c60008e8f20008e9200008e94c0008e9780008e9b60008e9f40008ea26
0008ea580008ea8a0008eabc0008eaee0008eb200008eb520008eb840008
ebba0008ebf00008ec2c0008ec680008ec960008ecc40008ecf00008ed1c
0008eee40008f5a40008fd44000900a6000903660009047a0009052c0009
05760009063e00090686000906da0009071c0009074e00090780000907bc
000907f80009083400090870000908b2000908f400090936000909760009
09a2000909ce000909fa00090a2600090a5c00090a9200090ac800090afe
00090b3200090b6600090b9a00090bce00090be000090c2600090c9a0009
0cf800090d8e00090d9e00090e4400090f1e000910160009118600091236
000914c0000915b2000916a200091776000918700009197c00091ad20009
1bc800091cba00091da600091e9600091f6c00092048000920a2000920fc
000921820009220e000922c000092352000924c20009250e0009257e0009
2690000927b80009289e0009299600092a5600092b0a00092bda00092d1a
00092d9e00092eb000092f1600092f7a00092fce0009313a000931da0009
31fe000935920009399400093cce00093eb0000940200009403800094050
000940680009408000094098000940aa000940c2000940d40009413a0009
414a0009415c00094174000941860009419e000941ae000941c4000941d6
000941ee00094200000942180009422a0009423c0009424e000942600009
4272000942ac000942be000942d0000942e0000942f2000943e000010000
0f9402b5003c00ca000700020010002f0059000004bc05ec000500020000
003a02be0000000300000000006a00000000000300000001000a006a0000
000300000002000e00ec0000000300000003004400ce0000000300000004
000a006a0000000300000005001801120000000300000006000e012a0000
0003000000070064006a00000003000000080030000e0000000300000009
008a0138000000030000000d029801c200010000000000000035045a0001
0000000000010005048f0001000000000002000704cf0001000000000003
002204c000010000000000040005048f0001000000000005000c04e20001
000000000006000704ee00010000000000070031048f0001000000000008
001804610001000000000009004504f5000100000000000d014c053a0003
000104030002000c06860003000104050002001006960003000104060002
000c06a60003000104070002001006b20003000104080002001006c20003
000104090000006a00000003000104090001000a006a0003000104090002
000e00ec0003000104090003004400ce0003000104090004000a006a0003
000104090005001801120003000104090006000e012a0003000104090007
006206d200030001040900080030000e0003000104090009008a01380003
00010409000d029801c200030001040a0002000c068600030001040b0002
0010073400030001040c0002000c068600030001040e0002000c07440003
000104100002000e07540003000104130002001207620003000104140002
000c06860003000104150002001006860003000104160002000c06860003
000104190002000e077400030001041b00020010074400030001041d0002
000c068600030001041f0002000c06860003000104240002000e07820003
0001042a0002000e079000030001042d0002000e079e00030001080a0002
000c06860003000108160002000c0686000300010c0a0002000c06860003
00010c0c0002000c068600a9002000320030003100320020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00410072
00690061006c002000200069007300200061002000740072006100640065
006d00610072006b0020006f006600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e004d006f006e006f0074007900700065003a004100720069
0061006c00200052006500670075006c0061007200200028004d00690063
0072006f0073006f00660074002900560065007200730069006f006e0020
0036002e003800310041007200690061006c004d0054004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d00200052006f0062
0069006e0020004e006900630068006f006c00610073002c002000500061
0074007200690063006900610020005300610075006e0064006500720073
002000310039003800320059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002ea9203230313220546865204d6f6e6f74
79706520436f72706f726174696f6e2e20416c6c20526967687473205265
7365727665642e417269616c20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f
747970653a417269616c20526567756c617220284d6963726f736f667429
56657273696f6e20362e3831417269616c4d544d6f6e6f74797065205479
70652044726177696e67204f6666696365202d20526f62696e204e696368
6f6c61732c205061747269636961205361756e646572732031393832596f
75206d617920757365207468697320666f6e74206173207065726d697474
6564206279207468652045554c4120666f72207468652070726f64756374
20696e207768696368207468697320666f6e7420697320696e636c756465
6420746f20646973706c617920616e64207072696e7420636f6e74656e74
2e20596f75206d6179206f6e6c792028692920656d626564207468697320
666f6e7420696e20636f6e74656e74206173207065726d69747465642062
792074686520656d62656464696e67207265737472696374696f6e732069
6e636c7564656420696e207468697320666f6e743b20616e642028696929
2074656d706f726172696c7920646f776e6c6f6164207468697320666f6e
7420746f2061207072696e746572206f72206f74686572206f7574707574
2064657669636520746f2068656c70207072696e7420636f6e74656e742e
004e006f0072006d0061006c006e0079006f00620079010d0065006a006e
00e9006e006f0072006d0061006c005300740061006e0064006100720064
039a03b103bd03bf03bd03b903ba03ac0041007200690061006c00200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e004e006f0072
006d00610061006c0069004e006f0072006d00e1006c006e0065004e006f
0072006d0061006c0065005300740061006e00640061006100720064041e
0431044b0447043d044b0439004e0061007600610064006e006f00740068
01b001a10300006e00670041007200720075006e007400610000410c0054
032c032c032c0222001d001f032b032a003c001f032ab2061d1fb80328b3
26181fd0bc032900e0032900020329b22b1d1fb90327031db23b1f40b803
23b31215320f412d03200001002f0320000100200320006f032000af0320
00bf03200004005f031e00010010031e007f031e0080031e00af031e00bf
031e00d0031e00060000031e0010031e0020031e006f031e009f031e00e0
031e0006031d031cb2201f1041270319007f03190002000f031700ef0317
00ff03170003001f0317002f0317004f0317005f0317008f0317009f0317
0006000f0317005f0317006f0317007f031700bf031700f0031700060040
0317b2923340b80317b28b3340b80317b36a6c3240b80317b2613340b803
17b35c5d3240b80317b357593240b80317b34d513240b80317b344493240
b80317b23a3340b80317b331343240b80317b32e423240b80317b3272c32
40b80317b312253280b80317b30a0d32c04116031600d003160002007003
16000102c4000f0101001f00a0031500b0031500020306000f0101001f00
400312b32426329fbf03040001030203010064001fffc00301b20d113241
0a02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e2
00af02e200bf02e2000302e202e202e102e1007f02e00001001002e0003f
02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02de
02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd
000702dd02dd001002dc0001000002dc0001001002dc003f02dc000202dc
02dc001002db000102db02db000f02da000102da02daffc002d3b2373932
b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc0
02d3b2121632b802d2b2f9291fb90326031cb23b1f40bb0322003e003303
22b225311fb80318b23c691fb802e3b3202b1fa0413002d400b002d40002
000002d4001002d4002002d4005002d4006002d4007002d40006006002d6
007002d6008002d6009002d600a002d600b002d60006000002d6001002d6
002002ca002002cc002002d6003002d6004002d6005002d6000802d0b220
2b1fb802cfb226421f411602ce02c70017001f02cd02c80017001f02cc02
c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f0041
0b02c6000002c7001002c6001002c7002f02c5000502c1b324121fff4111
02bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf0006
02bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a600a2
0800406a1f4026434932402043493240263a3d3240203a3d329f209f2602
4026969932402096993240268e923240208e92324026848c324020848c32
40267a813240207a813240266c763240206c76324026646a324020646a32
40265a5f3240205a5f3240264f543240204f5432b8029eb724271f374f6b
0120410f0277003002770040027700500277000402770277027700f90400
001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a2018065
01807e01808101803c01805e01802b01801c01801e0180400180bb013800
0100800140b40180400180bb013800010080013940180180ca0180ad0180
73018026018025018024018020013740b80221b2493340b80221b2453340
b80221b341423240b80221b33d3e320f410f0221003f0221007f02210003
00bf022100cf022100ff0221000300400221b320223240b80221b3191e32
40b80222b32a3f3240b80221b32e3a326f414a02c3007f02c3008f02c300
df02c30004002f02c3006002c300cf02c30003000f02c3003f02c3005f02
c300c002c300ef02c300ff02c3000600df02220001008f02220001000f02
22002f0222003f0222005f0222007f022200ef0222000600bf022100ef02
210002006f0221007f022100af02210003000f0221002f0221003f022100
4f0221000402c302c30222022202210221401d101c102b1048038f1c010f
1e014f1eff1e023700161600000012110811b8010db6f70df8f70d000941
09028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f
41150197001e0401001f013900260125001f013800730401001f0135001c
0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e
0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802
abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c
381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb8
0401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c62
1f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f
2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168
402c07960758074f07360732072c0721071f071d071b071408120810080e
080c080a080808060804080208000814b8ffe0402b000001001406100000
010006040000010004100000010010020000010002000000010000020108
02004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a515a
b005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b1
01018e59b0382bb00288b801005458b801ffb101018e851bb0124358b900
010111858d1bb900010128858d5959001816763f183f123e113946443e11
3946443e113946443e113946443e11394660443e11394660442b2b2b2b2b
2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59
b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f04544
5958b9033e01f2455258b901f2033e4459594bb8015653205c58b9002001
f14544b9002601f145445958b9081e0020455258b90020081e4459594bb8
019a53205c58b9002501f24544b9002401f245445958b909090025455258
b9002509094459594bb8040153205c58b173244544b1242445445958b917
200073455258b9007317204459594bb8040153205c58b1ca254544b12525
45445958b9168000ca455258b900ca16804459594bb03e53205c58b11c1c
4544b11e1c45445958b9011a001c455258b9001c011a4459594bb0565320
5c58b11c1c4544b12f1c45445958b90189001c455258b9001c0189445959
4bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258b900
1c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c456523
456023456560234560b08b766818b080622020b163594565234520b00326
6062636820b003266165b059236544b063234420b13b5c4565234520b003
266062636820b003266165b05c236544b03b2344b1005c455458b15c4065
44b23b403b4523614459b347503437456523456023456560234560b08976
6818b080622020b134504565234520b003266062636820b003266165b050
236544b034234420b147374565234520b003266062636820b003266165b0
37236544b0472344b10037455458b137406544b24740474523614459004b
5342014b5058b108004259435c58b108004259b3020b0a124358601b2159
421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d
2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b7475
737500184569444569444569447373737374757374752b2b2b2b74752b2b
2b2b2b737373737373737373737373737373737373737373737373732b2b
2b45b0406144737400004bb02a534bb03f515a58b1070745b04060445900
4bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a
58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc06044
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58
b9008002bbb301401e017400735903b01e4b5402b0124b545ab012435c5a
58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373
732b2b2b2b2b002b2b2b2b2b2b0045694473456944734569447374754569
44734569444569444569447374456944456944732b2b2b2b2b732b002b73
2b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b
2b742b002b2b2b00184569442b0000>
[16361 15965 16021 16121 16017 15797 16293 16081 16341 16277 15185 16121 16081
16333 16373 16381 16165 15633 15249 16377 16069 15453 13473 16005 16293 15809
16257 16205 16181 16369 15797 16321 16189 15493 16357 15633 16109 16053 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3308 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>ArialMT AddT42Char 
2 4060 20 <000100df000002fb05c0000a00ecb30a0c0c0cb80140b456000c0c0cb801
40b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db80140b456
00080d0db8014040215603400d11346b047f028f02990804ac0401090006
0502030905010c0201ca0a00b8ffc0400a21233430000120000100b8ffe0
b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d025500b8ff
f040190f0f065500100c0c065500100d0d0655001a0c05400d0f3405b8ff
c0400e212334300501200540050205190bba013c018500182b4e10e45d71
2b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f17390111393130015d
005d2b012b2b2b2b2b2b212311060607353636373302fbb441d35497e22f
74047b3e7c1fae47ca5f>ArialMT AddT42Char 
2 7356 27 <00030053ffe7041905c00017002300300293b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b404d351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
120c001e18000c1b1e2ea02e012e12211e0605281e120d1e4110fff4000c
000c01400056001efff2000b000b01400056001efff8000d000d0140b656
1e73bf09010941120267002bfff4000c000c01400056002bfff2000b000b
01400056002bfff8000d000d01404011562b730f40202334300f01000f10
0f020fb80191b432180c0c0cb80140b456180e0b0bb80140b45618080d0d
b80140b6561873b0030103b80267b3240c0c0cb80140b456240e0b0bb801
40b45624080d0db80140b356247315b8ffc0400e21233420154015021590
31c78b182b10f65d2bed2b2b2bf45ded2b2b2b10f45d712bed2b2b2bf45d
ed2b2b2b003fed3fed12395d2fed393901111239393130b00243b0405058
b90022ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0b1292001
383838383838383859015d72710071595901262635343633321615140607
161615140023220035343613141633323635342623220603141616333236
353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef69162866b6885
896667883a49905381a8ad827fa7031b29986aa0dadfa06697292cc488bc
ff000101c08fc101546884835f638784fcff4d904fa68082aaa8>ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/period 17 def
/one 20 def
/eight 27 def
end
ArialMT /Encoding get
dup 46 /period put
dup 49 /one put
dup 56 /eight put
pop
end
%ADOEndSubsetFont
/QBWUKK+ArialMT /ArialMT findfont ct_VMDictPut
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 6{/.notdef}rp /eight 199{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
40.6833 203.55 mo
(1.8)
[5.56 2.78 0 ]xsh
80.683 191.467 mo
80.683 188.55 li
@
80.683 9.717 mo
80.683 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 8162 28 <00020055ffe7041905c0001e002a0223b10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40473a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a29640602281e4f0e5f0e020e0e1c221e140501d350000100b80268
b4041e1c0d1f4127fff4000c000c01400056001ffff2000b000b01400056
001ffff8000d000d01400056001f0139000bfff4000c000c01400056000b
fff6000b000b01400056000bfff8000d000d01400056000b013840111840
212334301801001810180218902c01b80138b500b5250c0c0cb80140b456
250e0b0bb80140b45625080d0db80140b356257311b8ffc0400e21233420
1140110211902bc78b182b10f65d2bed2b2b2bf4ed10f65d712bed2b2b2b
ed2b2b2b003fedfd5de43fed12392f5ded3130b00243b0405058bb0027ff
e00023ffe0b321200620013838383859005d71015d59591337161633323e
023534270606232202353400333216121110020623222601342623220615
141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7af1a2ac
da02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8df0110
9afee3fef2fee7feb3aebf03349bb6c49c8cafaf>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/nine 28 def
end
QBWUKK+ArialMT /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 6{/.notdef}rp /eight /nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
73.7667 203.55 mo
(1.9)
[5.56 2.78 0 ]xsh
113.683 191.467 mo
113.683 188.55 li
@
113.683 9.717 mo
113.683 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 4340 21 <0001003c0000040705c0001e01f7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40473b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a081c1a03
0102081a1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb
b301020c0a4110fff4000c000c01400056000afff2000b000b0140005600
0afff8000d000d0140400d560a7317d30000014021233401bb0281002000
100138400c11b53f025f026f027f020402ba0224001f018fb18b182b10f6
5df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de411121739011112
1739870e2e2b0e7d10c4011112393130b00243b040505840091b101c101d
101e1006befff00007ffe00008fff00009fff00038383838013838383859
005d015d7259592515212637363637363635342623220607273636333216
15140606070606070407fc37021725a39aefa8997b829c01b913f8d1d3f6
48a7c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9eaad58aabca488
6131>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/two 21 def
end
QBWUKK+ArialMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 5{/.notdef}rp /eight /nine 
198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
110.933 203.55 mo
(2)sh
146.767 191.467 mo
146.767 188.55 li
@
146.767 9.717 mo
146.767 12.55 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
139.85 203.55 mo
(2.1)
[5.56 2.78 0 ]xsh
179.85 191.467 mo
179.85 188.55 li
@
179.85 9.717 mo
179.85 12.55 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
172.933 203.55 mo
(2.2)
[5.56 2.78 0 ]xsh
212.85 191.467 mo
212.85 188.55 li
@
212.85 9.717 mo
212.85 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 4942 22 <00010056ffe6041605c0002b01b2b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4030050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a0b0c0d0e040701230d0c01
b802a4b340000100bb01180029000d0135b40c0c150418ba02a400190268
4009151e1c05041e290d124110fff4000c000c014000560012fff2000b00
0b014000560012fff8000d000d014040115612735f206f200220180d0d06
552080074110fff4000c000c014000560007fff2000b000b014000560007
fff8000d000d014040115607732640212334302601002610260226b8fff4
b70d0d065526902d18b80138b219d301ba01380000ffc0400b2123342000
40000200902cb80192b18b182b10f65d2bedf4ed10f62b5d712bed2b2b2b
f42b5ded2b2b2b003fed3fedfde41112392fed10fd5de411123901111217
393130b00243b0405058b2052003b8ffe001383859015d005d0171591337
161633323635342623220737163332363534262322060727363633321616
15140607161615140023222656b41f956b7fafa27d334c14120b73b8866a
698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca1149e
02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e600>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/three 22 def
end
QBWUKK+ArialMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two /three 4{/.notdef}rp /eight 
/nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
205.933 203.55 mo
(2.3)
[5.56 2.78 0 ]xsh
245.933 191.467 mo
245.933 188.55 li
@
245.933 9.717 mo
245.933 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 5506 23 <0002001a0000041005ba000a000d01f3bc000cfffa000c000c0140b4560d
060c0cb80140b456050c0c0cb80140b456060c0c0cb80140b456090c0c0c
b80140b4560a0c0c0cb80140b456050e0b0bb80140b456060e0b0bb80140
b456090e0b0bb80140b4560a0e0b0bb80140b45607080c0cb80140b45608
080c0cb80140b45607080b0bb80140b45608080b0bb80140b45607080d0d
b80140b45608080d0db80140b45605080d0db80140b45606080d0db80140
b45609080d0db80140b4560a080d0db8014040375612580c680c9a0ca90c
c90c054c034c0d94040312010208000c060307050a0b0307000c0c0d0dca
030414030304030d00020c0d040703bb02bb0008000201a0400a00040400
0c0c00ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6
b40d0d02550ab8ffeeb40d0d06550ab80137400d07402223340780213507
900f02b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ff
e4b60d0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b
2b3c10e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c4
0f0f0f313001435c58b9000dffdeb212390db8ffd4400b333903222d3903
041d1d3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c
221c390c402d392b2b2b2b2b59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b002b21112135013311331523110311010296fd84029d93c6c6b4fe
35015fa503b6fc4aa5fea102040295fd6b00>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/four 23 def
end
QBWUKK+ArialMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four 3{/.notdef}rp 
/eight /nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
239.017 203.55 mo
(2.4)
[5.55998 2.78003 0 ]xsh
278.933 191.467 mo
278.933 188.55 li
@
278.933 9.717 mo
278.933 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 6064 24 <00010055ffe7042105a6001e01c3b3130c0c0cb80140b456120c0c0cb801
40b456130c0b0bb80140b456120c0b0bb80140b456130c0d0db80140b456
120c0d0db901400056b10202435458b90001ffc0400d0d0d0255011c0e0a
1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f0f025518
b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc410c42b31
301b4034120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713c30cd60c
db1b080913180e2a1a03130a15121313ca0e0f140e13140e0f0db802a440
130e0a1e15400ea00e020e0e0f40150115151c12b802bbb70f0401d34000
0100b801184011041e1c0d115f106f107f108f10041080074110fff4000c
000c014000560007fff2000b000b014000560007fff8000d000d01404011
5607731840212334301801001810180218b8fff4b70d0d065518902012bc
0135000f0195000d0138b20eb501ba01380000ffc0400b21233420004000
0200901fb80192b18b182b10f65d2bedf4edf4ed10f62b5d712bed2b2b2b
f45d3c003fedfd5de43fed12392f5d11392f5d10ed10e487082e2b057d10
c4001112393130b00243b0405058b4093005300bbaffe00003ffe0013838
38385901715d2b2b592b2b2b2b2b2b133716163332363534262322060727
1321152103363332001514070623222655bd15996c82b4ad8c578c28a98e
02d9fdb74f8491c00108748df4c8fd0180108a8bc4a29ab24f3f1602f1ac
fe765cfef6d1c791b2e0>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/five 24 def
end
QBWUKK+ArialMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 
2{/.notdef}rp /eight /nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
272.017 203.55 mo
(2.5)
[5.56 2.78 0 ]xsh
312.017 191.467 mo
312.017 188.55 li
@
312.017 9.717 mo
312.017 12.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 6614 25 <0002004dffe7041505c0001d002a01b2b10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0401b0d0d06552120
0d0d0655281e400d500d020d0d141b01d35f000100b802684009051e1b05
221e140d01b80138b200b5254110fff4000c000c014000560025fff2000b
000b014000560025fff8000d000d01404011562573104021233430100100
1010100210b8fff0b70c0c065510902c0ab80138b31e0c0c0cb80140b456
1e0e0b0bb80140b4561e080d0dbb01400056001e0139400d3f175f176f17
7f170417100b0bb80140b45617100c0db80140400e5617160c0c06551716
0d0d065517b80224b32bc78b182b10f62b2b2b2b5ded2b2b2bed10f62b5d
712bed2b2b2bf4ed003fed3fedfd5de41112392f5ded3130b00243b04050
58b90007ffe0b42720232021b8ffe00138383838592b2b2b2b015d005d59
010726272623220706060736363332121514060623220011103736333216
0114161633323635342623220603fbb3182c496b564155620241bc67b4fd
77d084e1fee49d89e8adddfd374f8e4e72a4a27b7aaa04530e6a304d303e
eedc6360fef7d28aed7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf00
>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/six 25 def
end
QBWUKK+ArialMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 
/six /.notdef /eight /nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
305.1 203.55 mo
(2.6)
[5.56 2.78 0 ]xsh
34.35 172.55 mo
37.267 172.55 li
@
325.183 172.55 mo
322.35 172.55 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if
2 3480 19 <00020055ffe7041105c00010001d01ddb10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e04068702
880b880fc90e0509070b180245134c154a19431b54135c155c19521b6b07
6b0b63136c156b19601b79027706760b7a0f870698079610c918da02d606
d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c014000560017fff2
000b000b014000560017fff8000d000d0140401156177309402123343009
01000910090209410afff4000b000b014000560009ffe8000d000d0140b7
5609901f110c0c0cb80140b456110e0b0bb80140b45611080d0db80140b3
56117300b8ffc0400c2123342000400002000c0c0cb80140b45600080b0b
b80140b45600080d0db80140b65600901ec78b182b10f62b2b2b5d2bed2b
2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db00243b040
5058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0000fffe0
003838383838013838385959591310123633321616121510020623222726
13101633323611102623220706556bd3a076b274426ad3a1d47991b9a97c
7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b7019dfe97
eff00168016aee698600>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/zero 19 def
end
QBWUKK+ArialMT /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /.notdef /eight /nine 198{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
17.6833 176.217 mo
(0.6)
[5.56 2.78 0 ]xsh
34.35 140.217 mo
37.267 140.217 li
@
325.183 140.217 mo
322.35 140.217 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
17.6833 143.883 mo
(0.8)
[5.56 2.78 0 ]xsh
34.35 107.967 mo
37.267 107.967 li
@
325.183 107.967 mo
322.35 107.967 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
26.0167 111.633 mo
(1)sh
34.35 75.717 mo
37.267 75.717 li
@
325.183 75.717 mo
322.35 75.717 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
17.6833 79.3833 mo
(1.2)
[5.56 2.78 0 ]xsh
34.35 43.467 mo
37.267 43.467 li
@
325.183 43.467 mo
322.35 43.467 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
17.6833 47.1333 mo
(1.4)
[5.56 2.78 0 ]xsh
34.35 11.133 mo
37.267 11.133 li
@
325.183 11.133 mo
322.35 11.133 li
@
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
17.6833 14.8 mo
(1.6)
[5.56 2.78 0 ]xsh
34.35 9.71701 mo
325.183 9.71701 li
@
34.35 191.467 mo
325.183 191.467 li
325.183 9.71701 li
@
34.35 191.467 mo
34.35 9.71701 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QBWUKK+ArialMT gcheck setglobal} if

2 0 3 <> QBWUKK+ArialMT AddT42Char 
2 3368 18 <00010000ffe7023905d300030053b90003ffdeb2143902b8ffde40201439
97030102039f03af0302037600011400000102010003000a03e80002e801
b801a9b5000004b37a182b103c10f4ed10ed003f3c3f3c87052e2b5d7d10
c43130015d2b2b1501330101a990fe581905ecfa1400>QBWUKK+ArialMT AddT42Char 
3 414 51 <0002009e000004fd05ba000d00180107401e65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e0201020008124110fffe000c000c01400056
0012fff2000b000b014000560012fff8000d000d0140b356122608bbfff6
000d000d0140400e56080a0d0d025508100b0b065508b8fff440120c0c06
55081a201a01201a011a180d020c0cb80140b4560d0e0b0bb80140b4560d
0a0c0db80140400e560d200120000100201010025500b8fff6b40f0f0255
00b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b065500b8fffab4
0c0c065500b8fff0400a0d0d0655005d193b5c182b10f62b2b2b2b2b2b2b
5d3cfd2b2b2b3c4e10715df62b2b2b2b4ded2b2b2b003f3f3cfd3c12392f
3cfd3c3130015d005d33112132171e021514022121111121323635342627
2623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe8905ba0e12
65b66dbbfefdfdac03018c7f5c83150d>QBWUKK+ArialMT AddT42Char 
3 3634 57 <000100090000054605ba000a022db3052c0b0bb80140b45606180b0bb801
40b45604180b0b411f014000560008fffe000c000c014000560008fffa00
0c000c014000560000fff4000b000b014000560007fff2000b000b014000
560008fff2000b000b0140b456030e0b0bb80140b456020e0b0b410d0140
00560009ffea000d000d014000560008ffea000d000d0140b4560a140d0d
be014000560000ffe6000d000d0140b45601240d0db80140b45602240d0d
b80140b4560a1a0c0cbe014000560000ffe6000c000c0140b45601240c0c
b80140b45602240c0cb901400056b1020243545840120501000802010200
080a00050908050102052fddcd10ddcd113333003f3f3f11123931301b40
242f05012a002803250a2f0c300c600c89088909900cc00cf00c0b200c50
0c0204020b0802b10602435458b709010c0b00080102003f3f0111123939
1b40240a0909200805140808050001012002051402020509010205e9200a
000809650801650208b8ffc0400b2839500801800890080208b80101400d
024028395f02018f029f020202b8010140112005500502300560059005c0
05f0050505b80288b30b60a8182b1910f45d71e45d712be45d712b1810ed
10ed003f3c1a19ed183f3c87052e2b7d10c4872e182b7d10c4014bb00b53
4bb014515ab00243b040505a58b2000f0ab8fff1b2091201b8fff1b20814
02b8ffee38383838383859014bb028534bb036515a58b90000ffc0385959
3130015d715d005d59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b
2b21013301161736370133010241fdc8d2017d2e1f222d018cc6fdc205ba
fbd7807078780429fa46>QBWUKK+ArialMT AddT42Char 
3 7598 68 <0002004affe8041c043e0028003702de402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030ebbfffa
000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8fff4401410
1006550e0c0d0d06550e060f0f06550e260d0db80140b4560e180c0cb801
40b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a42551895
141c1c0700b8fff440110c0c06550045270a321c030b29611061004110ff
f6000b000b014000560000fff8000c000c014000560000fffc000d000d01
40400b5600060d0d025500252124b8ffecb41010025524b8ffec400b0d0d
025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b065524b8ffdc
400b1010065524060f0f065524b8fffcb40c0c065524b8025b400e274000
26102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e025526bb
fff4000d000d0140b356263139b8ffc0400d1e23343039c03902a0390139
17b8fff4b71010065517080c0cb80140400956172518222f080d0db80140
b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf06021f06
3f060206140b0bb80140b45606140d0db80140b45606080c0cb80140402e
56060e0f0f0255060c0d0d025506180c0c0255060c0b0b0255060c0b0b06
55060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b2b2b5d71
ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b2b3cfd2b
2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b2b2b2b5d
71ed711112391112393901111217393130005d2b2b2b2b01715d2b2b0071
250606232226353436363736373637363534272623220607273e02333216
161716151514161723260306070e02151416333236373635033c64b96aaf
bc477348356bda67013345887f791db0186ed08988aa5010091722bc1c17
62c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e2d3d59
7118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f3d7700
>QBWUKK+ArialMT AddT42Char 
3 13308 78 <00010088000003f805ba000b02efb3030e0b0b4113014000560009fff200
0b000b014000560008fff2000b000b014000560004fff2000b000b0140b4
56070c0c0cb80140b456060c0c0cb80140b456050c0c0cb80140401c5606
0c0d0d0655070656065a09030f0df305f60603090c1010025506b8fff4b4
0c0c02550ab8fff4b40c0c025509b8fff4b40c0c025503b8ffe840100d0d
06555503770a0212062013213408b8fff0b312273409b8fff0b412273412
05b8fff0b312213409b8fff0408412273406040405040637094704052506
2d0a580a7703750ada03e30607a60601230626072508390638093f0d4f0d
59045906580759097d0479059909c606d204d606e406e907f706f9081512
0a0a05030304020606070909080a0a050908082507061407070603040425
050a1405050a0a09060304080102000405060708080b0b000a04b8010f40
0905040c0c0655052208b8010f401520073f070207100c0c0655071a900d
010d0b0e0b0bb80140b4560b080d0db80140b4560b0c0c0cb80140b7560b
2500020e0b0bb80140b45602080d0db80140b456020c0c0cb80140400e56
022501019000013f004f000200b8fffe40310e0e025500100d0d02550010
0c0c0255000a0b0b025500120b0b065500120c0c065500080d0d06550019
0c0de1214766182b2b4ef42b2b2b2b2b2b2b5d713c4d10ed2b2b2b10ed2b
2b2b4e1071f62b5d4dedf42bed003f3c103c103c3f3c3f3c11173987052e
2b047d10c487052e182b0e7d10c40710083c083c0310083c083cb1060243
5458400d4b09011f0984030209180d1134002b5d7159313001435c58400a
092c1d3909081d1d3c06b8ffdeb21d3906b8ffd4b2203906b8ffd4b12139
2b2b2b2b2b595d00715d0171002b2b435c58b90006ffc0b2213903b8ffc0
b2163903b8ffdeb2103906b8ffdeb2103903b8ffdeb20c3903b8ffdeb10b
392b2b2b2b2b2b59012b2b2b435c584012dd040108141639090814143c09
0814143c06b8fff6b2183906b8ffecb11b392b2b2b2b2b015d59005d2b2b
2b2b2b015d712b2b2b2b2b2b002b2b33113311013301012301071188b401
aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f7afe5b00>QBWUKK+ArialMT AddT42Char 
4 566 83 <00020087fe690421043e0012001e01aa40740c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e194110fff2000b000b014000560019fff4
000c000c014000560019fff8000d000d0140401c561924d00a01100a400a
600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02550a180d
0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f0655
0ab8ffe8400f0c0c06550a74011333023312080d0db80140b456120e0b0b
b80140b456120c0c0cb8014040195612250000c001019001a001b001f001
041f013f014f010301b8fffc401d0e0e025501100d0d025501100c0c0255
01100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40160f0f06
55010c0c0c065501120d0d065501191f473718012b4e10f42b2b2b2b2b2b
2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d71ed2b2b
2b003f3fed3f3fed113912393130005d015d717200711311331536363332
161615140206232226271103141633323635342623220687a43a926888d0
6a75df7b5a8f2e11a67678aba77473b1fe6905bd8a51518cff98a3fefb8b
4c3afdfb03a4cdc4cbd5cbcad700>QBWUKK+ArialMT AddT42Char 
4 3896 89 <0001001a000003e80426000a024dbc0008fff2000b000b0140b456020e0b
0b410d014000560000ffea000d000d014000560008ffea000d000d0140b4
5602160d0d410d014000560000fff4000c000c014000560008fff0000c00
0c0140b45602100c0cb901400056b1020243545840170508000a08060106
0a0005090805010205240f0f0255052f2bddcd10ddcd113333003f3f3f12
3931301bb7350501002211390ab8ffde400d11390916121c340816121c34
02b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400281e2134
0ab8ffe8400922253400162225340ab8ffda407e282e340020282e340f0c
29002809260a3900350a4800470a56015602590858096601660269086909
78007701770279087809770a870187028603890788088a099d009809910a
ac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a2c0a0005
0a1800160a2800260a370a4f00400a09054012163405400b0d34b1060243
5458400905010008060106000ab8fff4400f0d0d06550a000c0d0d065500
050908b8fff440120d0d0655080501020c0d0d06550205050c0b1112392f
dd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a0708082509
0a1409090a0003020225010014010100050a0a000a09080802020106070a
09030001052f0c010c22084040400980090209b8011bb5400580050205b8
011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ede45d1112
3939123939003f3c103c103c3f3c113987052e2b877dc4872e182b877dc4
593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59012b2b2b2b2b
2b2b2b210133131617363713330101aefe6cbee4251f182becb9fe6e0426
fd84676f54760288fbda>QBWUKK+ArialMT AddT42Char 
QBWUKK+ArialMT /CharStrings get begin
/space 3 def
/slash 18 def
/P 51 def
/V 57 def
/a 68 def
/k 78 def
/p 83 def
/v 89 def
end
QBWUKK+ArialMT /Encoding get
dup 32 /space put
dup 47 /slash put
dup 80 /P put
dup 86 /V put
dup 97 /a put
dup 107 /k put
dup 112 /p put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QBWUKK+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two 
/three /four /five /six /.notdef /eight /nine 22{/.notdef}rp 
/P 5{/.notdef}rp /V 10{/.notdef}rp /a 9{/.notdef}rp /k 4{/.notdef}rp 
/p 5{/.notdef}rp /v 137{/.notdef}rp]
QBWUKK+ArialMT nf
QBWUKK+ArialMT*1 [10 0 0 -10 0 0 ]msf
167.183 215.467 mo
(v / kV)
[5 2.78 2.78 2.78 5 0 ]xsh
QBWUKK+ArialMT*1 [0 -10 -10 0 0 0 ]msf
10.85 115.967 mo
(p / kPa)
[-5.56 -2.78 -2.78 -2.78 -5 -6.67007 0 ]ysh
51.14 183.1 mo
51.14 185.032 49.572 186.6 47.64 186.6 cv
45.708 186.6 44.14 185.032 44.14 183.1 cv
44.14 181.168 45.708 179.6 47.64 179.6 cv
49.572 179.6 51.14 181.168 51.14 183.1 cv
f
117.2 149.8 mo
117.2 151.732 115.632 153.3 113.7 153.3 cv
111.768 153.3 110.2 151.732 110.2 149.8 cv
110.2 147.868 111.768 146.3 113.7 146.3 cv
115.632 146.3 117.2 147.868 117.2 149.8 cv
f
183.38 116.5 mo
183.38 118.432 181.812 120 179.88 120 cv
177.948 120 176.38 118.432 176.38 116.5 cv
176.38 114.568 177.948 113 179.88 113 cv
181.812 113 183.38 114.568 183.38 116.5 cv
f
249.44 70.72 mo
249.44 72.652 247.872 74.22 245.94 74.22 cv
244.008 74.22 242.44 72.652 242.44 70.72 cv
242.44 68.788 244.008 67.22 245.94 67.22 cv
247.872 67.22 249.44 68.788 249.44 70.72 cv
f
315.5 17.98 mo
315.5 19.912 313.932 21.48 312 21.48 cv
310.068 21.48 308.5 19.912 308.5 17.98 cv
308.5 16.048 310.068 14.48 312 14.48 cv
313.932 14.48 315.5 16.048 315.5 17.98 cv
f
51.14 183.1 mo
51.14 185.032 49.572 186.6 47.64 186.6 cv
45.708 186.6 44.14 185.032 44.14 183.1 cv
44.14 181.168 45.708 179.6 47.64 179.6 cv
49.572 179.6 51.14 181.168 51.14 183.1 cv
@
117.2 149.8 mo
117.2 151.732 115.632 153.3 113.7 153.3 cv
111.768 153.3 110.2 151.732 110.2 149.8 cv
110.2 147.868 111.768 146.3 113.7 146.3 cv
115.632 146.3 117.2 147.868 117.2 149.8 cv
@
183.38 116.5 mo
183.38 118.432 181.812 120 179.88 120 cv
177.948 120 176.38 118.432 176.38 116.5 cv
176.38 114.568 177.948 113 179.88 113 cv
181.812 113 183.38 114.568 183.38 116.5 cv
@
249.44 70.72 mo
249.44 72.652 247.872 74.22 245.94 74.22 cv
244.008 74.22 242.44 72.652 242.44 70.72 cv
242.44 68.788 244.008 67.22 245.94 67.22 cv
247.872 67.22 249.44 68.788 249.44 70.72 cv
@
315.5 17.98 mo
315.5 19.912 313.932 21.48 312 21.48 cv
310.068 21.48 308.5 19.912 308.5 17.98 cv
308.5 16.048 310.068 14.48 312 14.48 cv
313.932 14.48 315.5 16.048 315.5 17.98 cv
@
gsave
34.35 191.55 mo
325.35 191.55 li
325.35 9.633 li
34.35 9.633 li
cp
clp
1.5 lw
34.35 188.217 mo
35.35 187.884 li
141.31 148.304 236.317 83.916 321.267 9.96701 cv
321.683 9.63402 li
.896239 .59588 .00106813 0 cmyk
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QBWUKK+ArialMT*1 uf
/QBWUKK+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
