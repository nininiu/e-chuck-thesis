%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP7A5.tmp.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/06/12, 23:46:41
%%BoundingBox: 0 0 407 498
%%HiResBoundingBox: 0 0 406.8001 497.8000
%%CropBox: 0 0 406.8001 497.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1048 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-06-12T23:44:50+08:00"
   xmp:CreatorTool="MATLAB, The MathWorks, Inc. Version 8.2.0.701 (R2013b). Operating System: Microsoft Windows 8."
   xmp:ModifyDate="2014-06-12T23:44:50+08:00"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmpMM:DocumentID="uuid:bf60bd5b-a7c2-49f6-ad10-54b5479494e0"
   xmpMM:InstanceID="uuid:1e54101f-cf81-4516-a3d4-b41dbc0cbe8e">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">D:\my\mech\e-chuck (local)\_thesis\figures\exp\fp__2200__5.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -497.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 497.8 li
406.8 497.8 li
406.8 0 li
cp
clp
gsave
-14.4 -14.4 mo
435.6 -14.4 li
435.6 525.85 li
-14.4 525.85 li
cp
clp
436.1 -14.4 mo
-14.4 -14.4 li
-14.4 525.933 li
436.1 525.933 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
44.183 466.433 mo
393.266 466.433 li
393.266 26.1 li
44.183 26.1 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
44.183 466.433 mo
44.183 26.1 li
393.266 26.1 li
393.266 466.433 li
44.183 466.433 li
@
44.183 26.1 mo
393.266 26.1 li
1 /0 /CSD get_res sepcs
1 sep
@
44.183 466.433 mo
393.266 466.433 li
393.266 26.1 li
@
44.183 466.433 mo
44.183 26.1 li
@
44.183 466.433 mo
393.266 466.433 li
@
44.183 466.433 mo
44.183 26.1 li
@
56.433 466.433 mo
56.433 462.016 li
@
56.433 26.1 mo
56.433 30.433 li
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 50 /two put
def
/FontBBox {-665 -325 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/AWRLKA+ArialMT /ArialMT findfont ct_VMDictPut
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
49.5167 478.517 mo
(0.2)
[5.56 2.78 0 ]xsh
106.767 466.433 mo
106.767 462.016 li
@
106.767 26.1 mo
106.767 30.433 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
203{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
99.85 478.517 mo
(0.4)
[5.56 2.78 0 ]xsh
157.1 466.433 mo
157.1 462.016 li
@
157.1 26.1 mo
157.1 30.433 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six 201{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
150.183 478.517 mo
(0.6)
[5.56 2.78 0 ]xsh
207.433 466.433 mo
207.433 462.016 li
@
207.433 26.1 mo
207.433 30.433 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
200.517 478.517 mo
(0.8)
[5.56 2.78 0 ]xsh
257.767 466.433 mo
257.767 462.016 li
@
257.767 26.1 mo
257.767 30.433 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
255.017 478.517 mo
(1)sh
308.1 466.433 mo
308.1 462.016 li
@
308.1 26.1 mo
308.1 30.433 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
301.183 478.517 mo
(1.2)
[5.56 2.78 0 ]xsh
358.433 466.433 mo
358.433 462.016 li
@
358.433 26.1 mo
358.433 30.433 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
351.517 478.517 mo
(1.4)
[5.56 2.78 0 ]xsh
44.183 437.767 mo
48.516 437.767 li
@
393.266 437.767 mo
388.849 437.767 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
35.7667 441.433 mo
(6)sh
44.183 394.433 mo
48.516 394.433 li
@
393.266 394.433 mo
388.849 394.433 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001B
CD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB
63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF20
0B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC4
9372EF96DD9EB13A793559C13CFDFE477> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /.notdef /eight 199{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.4333 398.1 mo
(6.5)
[5.56 2.78 0 ]xsh
44.183 351.1 mo
48.516 351.1 li
@
393.266 351.1 mo
388.849 351.1 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031
CB3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0
F55546101EE3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /seven /eight 199{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
35.7667 354.767 mo
(7)sh
44.183 307.767 mo
48.516 307.767 li
@
393.266 307.767 mo
388.849 307.767 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.4333 311.433 mo
(7.5)
[5.56 2.78 0 ]xsh
44.183 264.517 mo
48.516 264.517 li
@
393.266 264.517 mo
388.849 264.517 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
35.7667 268.183 mo
(8)sh
44.183 221.183 mo
48.516 221.183 li
@
393.266 221.183 mo
388.849 221.183 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.4333 224.85 mo
(8.5)
[5.56 2.78 0 ]xsh
44.183 177.85 mo
48.516 177.85 li
@
393.266 177.85 mo
388.849 177.85 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6
DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435
C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D
5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807
E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3
072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA
27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E
17188994F16> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /seven /eight /nine 198{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
35.7667 181.517 mo
(9)sh
44.183 134.517 mo
48.516 134.517 li
@
393.266 134.517 mo
388.849 134.517 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.4333 138.183 mo
(9.5)
[5.56 2.78 0 ]xsh
44.183 91.267 mo
48.516 91.267 li
@
393.266 91.267 mo
388.849 91.267 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
30.1833 94.9334 mo
(10)
[5.56 0 ]xsh
44.183 47.933 mo
48.516 47.933 li
@
393.266 47.933 mo
388.849 47.933 li
@
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
21.85 51.6 mo
(10.5)
[5.56 5.56 2.78 0 ]xsh
44.183 26.1 mo
393.266 26.1 li
@
44.183 466.433 mo
393.266 466.433 li
393.266 26.1 li
@
44.183 466.433 mo
44.183 26.1 li
@
gsave
44.183 466.517 mo
393.35 466.517 li
393.35 26.1 li
44.183 26.1 li
cp
clp
379.85 43.683 mo
380.267 43.683 li
379.85 43.683 li
380.267 43.683 li
380.683 42.85 li
381.183 42.85 li
381.017 42.1 li
380.933 41.35 li
380.85 41.35 li
381.017 41.35 li
380.433 41.35 li
380.6 41.35 li
380.433 41.35 li
381.433 41.35 li
381.683 42.1 li
381.85 42.85 li
382.183 42.85 li
382.6 43.683 li
382.683 43.683 li
382.1 42.85 li
381.267 42.85 li
381.35 42.85 li
381.933 42.1 li
382.183 42.1 li
381.933 42.1 li
381.85 41.35 li
381.433 41.35 li
380.767 40.516 li
379.85 40.516 li
379.933 39.766 li
380.017 39.766 li
380.35 39.016 li
381.35 39.016 li
381.517 38.183 li
381.933 39.016 li
382.183 39.016 li
382.1 39.766 li
382.267 40.516 li
382.35 40.516 li
382.35 41.35 li
382.267 40.516 li
382.35 40.516 li
381.85 40.516 li
382.1 40.516 li
382.1 41.35 li
382.183 41.35 li
382.433 42.1 li
382.767 42.1 li
383.1 41.35 li
382.767 41.35 li
382.6 40.516 li
382.017 40.516 li
381.933 39.766 li
381.6 39.766 li
381.767 40.516 li
381.85 40.516 li
382.35 39.766 li
382.767 39.766 li
382.767 39.016 li
382.6 39.016 li
382.683 39.766 li
382.6 39.766 li
382.767 40.516 li
382.85 40.516 li
382.767 40.516 li
382.517 39.766 li
382.433 39.016 li
382.267 39.016 li
382.517 38.183 li
383.017 38.183 li
382.933 38.183 li
383.183 38.183 li
383.183 39.016 li
383.267 39.016 li
383.267 39.766 li
382.6 39.766 li
382.683 39.766 li
383.017 39.016 li
384.267 39.016 li
384.6 39.766 li
384.933 39.766 li
384.933 39.016 li
385.267 39.016 li
385.183 38.183 li
385.017 38.183 li
385.183 38.183 li
385.183 37.433 li
384.85 37.433 li
384.767 36.683 li
384.6 36.683 li
385.1 36.683 li
384.35 36.683 li
384.35 35.85 li
384.433 35.1 li
384.85 35.1 li
385.183 35.85 li
385.017 35.85 li
384.85 36.683 li
385.267 36.683 li
385.6 37.433 li
386.767 37.433 li
386.35 36.683 li
385.767 36.683 li
385.933 35.85 li
386.933 35.85 li
387.1 35.1 li
387.267 35.1 li
387.017 35.1 li
386.933 34.35 li
386.35 34.35 li
386.683 34.35 li
386.35 34.35 li
386.517 34.35 li
386.267 34.35 li
386.35 33.516 li
386.267 33.516 li
386.85 33.516 li
386.683 34.35 li
386.183 34.35 li
386.267 34.35 li
386.183 34.35 li
386.267 35.1 li
386.933 35.1 li
387.017 34.35 li
386.6 34.35 li
386.85 33.516 li
386.933 33.516 li
387.017 32.766 li
387.017 31.933 li
386.933 31.933 li
387.017 31.933 li
386.933 31.933 li
387.6 32.766 li
387.767 32.766 li
387.267 32.766 li
387.183 33.516 li
387.1 33.516 li
387.1 34.35 li
387.017 34.35 li
386.933 35.1 li
386.683 35.85 li
387.183 36.683 li
386.85 36.683 li
386.767 35.85 li
386.683 35.1 li
386.85 34.35 li
386.933 33.516 li
387.267 32.766 li
387.683 32.766 li
387.267 32.766 li
387.1 33.516 li
386.933 34.35 li
386.85 34.35 li
386.85 35.1 li
386.517 35.1 li
387.6 35.1 li
386.183 35.1 li
386.267 35.1 li
386.267 34.35 li
385.433 34.35 li
385.517 34.35 li
385.433 34.35 li
385.6 34.35 li
385.6 35.85 li
385.1 35.85 li
385.1 35.1 li
385.017 35.1 li
385.267 34.35 li
385.183 34.35 li
385.933 33.516 li
385.6 33.516 li
385.6 32.766 li
386.1 32.766 li
386.017 32.766 li
386.183 32.766 li
385.433 32.766 li
387.267 32.766 li
387.267 33.516 li
387.683 33.516 li
387.35 34.35 li
387.1 34.35 li
387.35 34.35 li
387.433 33.516 li
387.767 33.516 li
387.683 32.766 li
387.683 31.933 li
387.517 31.933 li
388.1 31.183 li
390.35 31.183 li
390.433 30.433 li
390.767 30.433 li
390.767 29.6 li
390.85 29.6 li
390.933 28.85 li
390.433 28.85 li
390.6 28.85 li
390.517 28.85 li
390.933 28.85 li
390.85 28.85 li
391.017 28.1 li
390.933 28.1 li
390.683 27.266 li
390.767 27.266 li
391.183 26.516 li
390.683 26.516 li
390.767 26.516 li
390.767 27.266 li
391.183 27.266 li
391.35 28.1 li
393.35 28.1 li
.883665 .769161 0 0 cmyk
@
grestore
374.267 49.1 mo
374.267 48.35 li
374.6 48.35 li
374.517 48.35 li
374.767 48.35 li
374.684 48.35 li
375.1 48.35 li
375.017 47.6 li
374.934 47.6 li
374.934 46.017 li
375.35 46.017 li
374.517 46.017 li
374.934 46.017 li
375.267 46.767 li
375.184 46.767 li
375.017 47.6 li
375.017 48.35 li
374.85 48.35 li
374.934 49.1 li
375.1 49.1 li
375.184 48.35 li
375.267 48.35 li
375.184 48.35 li
374.934 47.6 li
375.017 47.6 li
374.85 46.767 li
375.017 46.767 li
375.323 46.767 375.628 46.767 375.934 46.767 cv
376.017 46.767 li
375.934 46.767 li
376.1 46.767 li
376.017 46.767 li
375.85 47.6 li
375.934 47.6 li
375.85 47.6 li
375.85 46.767 li
376.267 46.767 li
376.434 46.017 li
376.517 46.017 li
375.767 46.017 li
375.85 46.017 li
375.684 46.017 li
375.434 45.267 li
375.267 44.433 li
375.1 43.683 li
375.434 42.85 li
375.6 42.85 li
375.767 42.1 li
375.6 42.85 li
375.184 42.85 li
375.1 43.683 li
375.017 44.433 li
375.6 44.433 li
375.684 45.267 li
376.017 45.267 li
375.767 46.017 li
375.6 46.017 li
376.017 46.017 li
376.1 45.267 li
375.767 45.267 li
375.767 46.017 li
375.434 46.017 li
375.267 45.267 li
375.767 45.267 li
375.934 46.017 li
376.1 46.017 li
375.85 46.767 li
375.767 46.767 li
375.934 47.6 li
375.85 47.6 li
375.934 46.767 li
375.85 46.767 li
375.767 46.017 li
375.767 45.267 li
376.184 45.267 li
376.1 46.017 li
375.684 46.017 li
375.684 46.767 li
376.017 46.767 li
375.85 46.767 li
376.017 46.767 li
376.1 46.017 li
376.017 46.017 li
375.934 45.267 li
376.267 45.267 li
376.184 45.267 li
377.184 45.267 li
377.267 44.433 li
377.35 44.433 li
377.017 43.683 li
376.85 43.683 li
376.434 42.85 li
376.1 42.85 li
376.35 42.85 li
376.434 43.683 li
377.1 43.683 li
377.184 44.433 li
378.184 45.267 li
378.6 45.267 li
378.517 46.017 li
378.1 45.267 li
377.934 45.267 li
378.517 44.433 li
378.6 44.433 li
378.35 43.683 li
378.35 42.85 li
378.017 42.85 li
378.1 42.85 li
377.85 42.85 li
377.934 42.85 li
377.434 42.85 li
377.6 42.1 li
376.85 42.1 li
377.517 42.1 li
377.517 42.85 li
377.267 42.85 li
377.35 42.85 li
377.517 43.683 li
377.184 44.433 li
377.1 44.433 li
377.35 44.433 li
377.434 45.267 li
377.267 45.267 li
377.35 46.017 li
377.434 46.017 li
377.35 46.017 li
377.517 45.267 li
377.767 45.267 li
377.684 45.267 li
377.684 44.433 li
377.934 44.433 li
377.934 43.683 li
377.767 43.683 li
377.934 43.683 li
377.1 43.683 li
377.267 42.85 li
377.1 42.85 li
377.184 42.85 li
377.434 43.683 li
377.517 44.433 li
377.434 45.267 li
377.184 46.017 li
377.1 46.017 li
377.184 46.767 li
376.35 46.767 li
376.85 46.767 li
376.934 46.017 li
377.684 46.017 li
377.85 45.267 li
378.1 45.267 li
378.1 44.433 li
377.684 44.433 li
377.934 44.433 li
377.017 44.433 li
376.934 45.267 li
376.85 45.267 li
377.1 45.267 li
377.184 44.433 li
377.434 44.433 li
377.35 44.433 li
377.434 44.433 li
377.267 44.433 li
377.35 44.433 li
377.267 44.433 li
377.434 44.433 li
377.6 43.683 li
377.35 43.683 li
377.267 42.85 li
377.184 43.683 li
377.517 43.683 li
377.684 44.433 li
377.6 44.433 li
377.6 45.267 li
377.434 45.267 li
377.434 46.017 li
377.35 46.017 li
377.267 45.267 li
377.517 45.267 li
377.434 45.267 li
377.517 44.433 li
378.267 44.433 li
378.1 45.267 li
377.267 45.267 li
378.017 45.267 li
378.184 46.017 li
378.517 46.017 li
378.517 46.767 li
378.684 46.767 li
378.517 46.767 li
379.017 46.767 li
379.184 46.017 li
379.35 46.017 li
379.267 45.267 li
379.017 45.267 li
378.85 44.433 li
377.934 44.433 li
378.1 44.433 li
378.267 45.267 li
378.6 45.267 li
378.6 44.433 li
379.184 44.433 li
379.267 43.683 li
379.517 43.683 li
379.684 44.433 li
379.934 44.433 li
379.767 44.433 li
379.434 43.683 li
378.85 43.683 li
379.267 42.85 li
380.35 42.85 li
380.1 42.85 li
380.017 42.1 li
380.1 42.1 li
379.85 42.1 li
380.1 42.1 li
379.934 42.1 li
380.35 42.85 li
380.517 42.85 li
380.35 42.85 li
380.434 43.683 li
379.85 43.683 li
.883665 .769161 0 0 cmyk
@
361.184 66.267 mo
361.017 66.267 li
361.517 66.267 li
361.184 65.517 li
361.101 65.517 li
362.267 65.517 li
362.434 64.767 li
363.101 64.767 li
363.017 63.934 li
363.101 63.934 li
362.184 63.934 li
361.934 63.184 li
362.934 63.184 li
362.767 63.184 li
362.767 62.35 li
363.017 62.35 li
363.017 63.184 li
363.101 63.184 li
362.934 63.184 li
363.601 63.184 li
363.767 63.934 li
364.767 63.934 li
364.851 63.184 li
365.851 63.184 li
366.434 62.35 li
366.517 61.6 li
366.601 61.6 li
366.351 61.6 li
366.434 60.85 li
365.517 60.85 li
365.517 60.017 li
365.684 59.267 li
365.267 59.267 li
367.684 59.267 li
366.517 59.267 li
366.601 58.517 li
366.684 58.517 li
366.267 58.517 li
366.267 57.684 li
367.267 57.684 li
366.434 57.684 li
366.684 57.684 li
366.767 56.934 li
367.517 56.934 li
367.684 57.684 li
367.517 57.684 li
367.684 57.684 li
368.017 58.517 li
367.767 59.267 li
367.934 59.267 li
367.684 58.517 li
368.601 58.517 li
368.767 57.684 li
369.851 57.684 li
369.851 56.934 li
369.351 56.934 li
368.851 56.184 li
368.684 56.184 li
368.601 55.35 li
368.851 55.35 li
368.684 54.6 li
369.101 54.6 li
368.601 54.6 li
368.934 54.6 li
368.767 54.6 li
369.017 54.6 li
369.101 53.767 li
369.434 54.6 li
370.101 54.6 li
370.351 55.35 li
370.851 55.35 li
370.184 55.35 li
370.101 54.6 li
370.267 54.6 li
370.184 54.6 li
370.184 53.767 li
370.351 53.767 li
370.601 53.017 li
371.017 53.017 li
371.184 52.267 li
369.684 52.267 li
370.017 53.017 li
370.351 53.017 li
370.267 53.767 li
370.601 53.767 li
370.684 54.6 li
371.101 54.6 li
371.184 53.767 li
369.601 53.767 li
370.017 53.767 li
369.684 53.767 li
369.851 53.767 li
370.795 53.767 371.74 53.767 372.684 53.767 cv
372.934 53.767 li
373.101 53.017 li
373.184 53.017 li
373.017 52.267 li
371.517 52.267 li
371.684 53.017 li
371.851 53.017 li
371.601 53.767 li
371.684 53.767 li
371.101 53.767 li
371.017 53.017 li
371.434 53.017 li
371.351 53.017 li
371.351 52.267 li
371.767 52.267 li
372.101 51.434 li
372.267 51.434 li
372.267 50.684 li
372.434 50.684 li
372.517 49.934 li
372.351 49.934 li
372.267 49.1 li
372.017 49.1 li
372.101 49.1 li
371.934 49.1 li
371.851 49.934 li
372.351 49.934 li
372.267 50.684 li
372.101 50.684 li
372.101 51.434 li
372.267 52.267 li
371.101 52.267 li
371.517 51.434 li
371.517 50.684 li
372.517 50.684 li
372.601 49.934 li
372.434 49.934 li
372.851 49.934 li
372.601 49.934 li
372.684 49.934 li
372.434 49.934 li
372.434 50.684 li
372.517 50.684 li
372.434 50.684 li
372.601 51.434 li
373.101 51.434 li
373.101 52.267 li
373.851 52.267 li
373.934 51.434 li
374.267 51.434 li
374.267 50.684 li
373.601 50.684 li
373.601 49.934 li
373.934 49.934 li
373.851 49.1 li
374.101 49.1 li
374.017 49.1 li
374.184 48.35 li
373.851 48.35 li
374.184 47.6 li
373.267 47.6 li
373.684 47.6 li
373.684 48.35 li
374.101 48.35 li
373.684 48.35 li
373.851 48.35 li
373.684 48.35 li
373.601 49.1 li
373.934 49.1 li
374.017 49.934 li
374.351 49.934 li
374.267 49.934 li
374.267 50.684 li
374.017 50.684 li
373.767 51.434 li
373.601 51.434 li
373.684 50.684 li
373.434 49.934 li
373.351 49.934 li
373.684 49.1 li
374.267 48.35 li
374.351 48.35 li
373.684 48.35 li
373.517 47.6 li
373.267 47.6 li
373.434 47.6 li
373.184 47.6 li
373.267 47.6 li
373.434 46.767 li
373.851 46.767 li
373.601 46.767 li
373.684 47.6 li
373.684 48.35 li
373.767 48.35 li
374.017 49.1 li
373.434 49.1 li
374.267 49.1 li
@
350.101 74.1 mo
351.434 74.1 li
351.601 74.85 li
352.434 74.85 li
352.684 75.6 li
352.851 75.6 li
352.934 76.433 li
352.768 76.433 li
352.184 75.6 li
352.268 75.6 li
352.268 74.85 li
352.434 74.1 li
352.518 73.267 li
352.268 73.267 li
353.684 73.267 li
353.768 74.1 li
353.934 74.1 li
353.518 73.267 li
353.268 72.517 li
353.434 71.767 li
353.434 70.933 li
353.268 70.933 li
353.268 71.767 li
353.184 71.767 li
353.434 71.767 li
353.601 72.517 li
353.851 72.517 li
352.851 72.517 li
352.851 71.767 li
352.601 71.767 li
352.768 70.933 li
353.518 70.933 li
353.518 70.183 li
353.601 70.183 li
353.601 70.933 li
352.851 70.933 li
352.934 70.933 li
352.851 70.933 li
353.601 70.933 li
353.684 71.767 li
353.768 71.767 li
353.851 72.517 li
353.768 72.517 li
353.684 73.267 li
353.434 73.267 li
353.518 73.267 li
353.101 73.267 li
353.768 73.267 li
354.018 74.1 li
353.934 74.1 li
354.101 74.1 li
354.018 74.1 li
354.101 73.267 li
354.434 73.267 li
354.434 72.517 li
353.934 72.517 li
355.184 72.517 li
355.268 71.767 li
355.601 71.767 li
355.601 70.933 li
355.768 70.933 li
355.768 70.183 li
355.934 70.183 li
355.934 69.433 li
355.601 69.433 li
355.851 69.433 li
355.768 68.6 li
355.684 69.433 li
355.518 69.433 li
355.601 69.433 li
355.268 69.433 li
355.351 70.183 li
355.684 70.933 li
356.018 70.933 li
356.018 71.767 li
355.601 71.767 li
355.434 70.933 li
354.684 70.933 li
354.351 70.183 li
354.601 70.183 li
354.518 70.183 li
355.351 70.183 li
355.601 69.433 li
355.434 69.433 li
355.601 69.433 li
355.351 68.6 li
355.018 68.6 li
354.851 69.433 li
355.601 69.433 li
355.518 70.183 li
355.684 70.183 li
355.434 70.183 li
355.351 69.433 li
355.684 69.433 li
355.601 69.433 li
355.351 68.6 li
355.184 68.6 li
355.768 68.6 li
355.684 69.433 li
355.601 70.183 li
355.351 70.183 li
355.184 70.933 li
356.434 70.933 li
356.518 71.767 li
356.351 71.767 li
356.601 71.767 li
356.351 71.767 li
356.268 70.933 li
356.768 70.933 li
357.018 70.183 li
357.351 70.183 li
356.768 70.183 li
356.684 69.433 li
356.768 69.433 li
356.768 68.6 li
356.434 68.6 li
357.684 68.6 li
357.684 69.433 li
357.768 69.433 li
357.601 70.183 li
357.768 70.183 li
357.184 70.183 li
357.851 69.433 li
357.768 69.433 li
358.268 69.433 li
358.184 69.433 li
358.768 68.6 li
358.434 68.6 li
358.601 68.6 li
358.351 68.6 li
358.268 67.85 li
357.934 67.85 li
358.184 67.1 li
358.268 67.1 li
357.768 67.1 li
358.268 67.85 li
358.018 67.85 li
357.934 68.6 li
357.518 68.6 li
357.184 69.433 li
357.101 69.433 li
357.851 69.433 li
358.351 68.6 li
358.018 67.85 li
357.518 67.85 li
357.434 67.1 li
357.684 67.1 li
357.601 67.1 li
357.934 67.1 li
357.851 67.1 li
358.351 67.85 li
358.268 67.85 li
358.434 67.85 li
358.351 67.85 li
358.518 67.85 li
358.101 67.85 li
358.518 67.85 li
358.684 68.6 li
360.351 68.6 li
360.184 68.6 li
360.351 67.85 li
360.268 67.85 li
360.518 67.85 li
358.851 67.85 li
358.851 67.1 li
358.768 67.1 li
358.851 66.267 li
358.101 66.267 li
358.268 66.267 li
358.101 66.267 li
358.434 66.267 li
358.268 66.267 li
358.351 67.1 li
359.184 67.1 li
359.268 67.85 li
359.434 67.85 li
359.434 68.6 li
359.518 67.85 li
359.018 67.85 li
359.101 67.1 li
358.684 67.1 li
358.518 66.267 li
359.018 66.267 li
359.184 65.517 li
361.018 65.517 li
360.601 65.517 li
360.018 65.517 359.434 65.517 358.851 65.517 cv
358.684 65.517 li
358.934 65.517 li
359.184 64.767 li
359.934 64.767 li
360.184 63.933 li
360.434 63.933 li
360.101 63.933 li
360.268 63.933 li
360.434 64.767 li
360.268 64.767 li
360.268 65.517 li
360.518 65.517 li
360.518 66.267 li
361.434 66.267 li
361.184 66.267 li
@
333.434 88.933 mo
333.267 88.933 li
334.767 88.933 li
335.184 89.683 li
335.434 89.683 li
334.934 89.683 li
334.767 88.933 li
334.601 88.933 li
334.434 88.1 li
334.601 88.1 li
334.517 88.1 li
334.851 87.35 li
336.017 87.35 li
335.101 87.35 li
335.267 87.35 li
334.934 87.35 li
335.351 87.35 li
335.267 87.35 li
337.351 87.35 li
336.601 87.35 li
336.934 87.35 li
336.851 87.35 li
337.267 86.516 li
337.184 86.516 li
337.684 85.766 li
338.184 85.766 li
338.101 85.016 li
337.434 85.766 li
337.184 85.766 li
337.684 85.766 li
337.851 85.016 li
337.934 85.016 li
338.267 84.183 li
338.351 84.183 li
338.351 83.433 li
338.517 83.433 li
338.351 83.433 li
338.767 84.183 li
338.684 84.183 li
339.101 85.016 li
339.017 85.016 li
339.934 85.016 li
339.101 85.016 li
339.017 84.183 li
338.601 83.433 li
338.517 83.433 li
338.684 82.683 li
339.684 81.85 li
340.684 81.85 li
340.601 81.85 li
340.684 81.85 li
340.351 82.683 li
339.934 82.683 li
339.767 83.433 li
339.684 83.433 li
339.851 82.683 li
339.601 82.683 li
339.851 81.85 li
340.767 81.85 li
341.267 82.683 li
340.851 82.683 li
340.684 83.433 li
339.851 83.433 li
340.101 83.433 li
340.184 84.183 li
340.601 84.183 li
340.517 84.183 li
340.684 84.183 li
340.434 83.433 li
340.517 82.683 li
340.517 81.85 li
340.767 81.85 li
340.684 81.85 li
340.684 81.1 li
340.767 81.85 li
343.017 81.85 li
342.934 81.85 li
343.184 81.1 li
342.851 81.1 li
343.017 81.85 li
343.101 81.85 li
343.351 81.1 li
343.267 81.1 li
343.434 81.1 li
343.934 80.35 li
344.684 79.516 li
344.851 79.516 li
345.517 78.766 li
345.184 78.766 li
345.017 78.016 li
345.017 78.766 li
344.684 78.766 li
345.017 78.766 li
345.267 78.016 li
345.601 78.016 li
345.601 77.183 li
345.851 77.183 li
346.184 76.433 li
346.601 77.183 li
347.101 77.183 li
347.351 77.183 347.601 77.183 347.851 77.183 cv
347.934 77.183 li
346.267 77.183 li
346.517 77.183 li
347.184 77.183 347.851 77.183 348.517 77.183 cv
348.851 77.183 li
348.684 77.183 li
348.684 76.433 li
348.351 76.433 li
348.351 75.6 li
348.434 75.6 li
348.184 75.6 li
348.017 74.85 li
348.601 74.85 li
348.851 74.1 li
347.267 74.1 li
347.351 74.85 li
347.267 74.85 li
348.017 74.85 li
347.851 74.85 li
347.934 74.85 li
347.684 74.85 li
348.101 74.85 li
348.017 75.6 li
348.101 75.6 li
347.934 75.6 li
348.017 76.433 li
348.517 75.6 li
349.017 75.6 li
349.184 74.85 li
349.434 74.85 li
348.434 74.85 li
348.517 74.85 li
348.017 74.85 li
348.517 74.85 li
348.517 75.6 li
348.101 75.6 li
348.267 75.6 li
348.517 76.433 li
349.017 76.433 li
348.767 76.433 li
348.851 76.433 li
349.267 75.6 li
349.434 75.6 li
349.351 75.6 li
349.434 75.6 li
348.934 75.6 li
348.517 76.433 li
348.017 76.433 li
348.434 75.6 li
348.601 75.6 li
349.267 74.85 li
349.517 74.85 li
350.601 74.1 li
350.934 74.1 li
349.351 74.1 li
349.184 74.85 li
349.184 74.1 li
349.434 74.1 li
349.267 74.1 li
349.351 74.1 li
349.267 74.1 li
349.434 74.1 li
348.934 74.1 li
348.684 73.266 li
349.351 73.266 li
349.184 73.266 li
349.267 74.1 li
348.934 74.1 li
348.767 74.85 li
348.684 74.85 li
349.017 74.85 li
349.017 75.6 li
349.267 75.6 li
349.351 76.433 li
349.767 76.433 li
350.017 75.6 li
351.267 75.6 li
351.434 76.433 li
351.684 76.433 li
351.267 76.433 li
351.351 76.433 li
350.517 76.433 li
350.517 75.6 li
350.684 75.6 li
350.684 74.85 li
350.601 74.85 li
350.434 74.1 li
350.351 74.1 li
350.434 74.1 li
350.184 74.1 li
350.517 74.1 li
349.934 74.1 li
350.101 74.1 li
@
317.851 109.933 mo
317.934 110.683 li
318.351 110.683 li
318.684 109.933 li
319.018 109.933 li
318.934 109.183 li
319.018 109.183 li
318.684 109.183 li
318.434 108.35 li
318.018 108.35 li
318.268 108.35 li
317.934 108.35 li
318.101 107.6 li
318.184 107.6 li
318.351 106.85 li
318.434 106.85 li
318.268 106.85 li
318.268 107.6 li
318.184 107.6 li
318.184 108.35 li
318.434 108.35 li
318.684 109.183 li
318.768 109.183 li
318.768 108.35 li
318.601 108.35 li
318.601 107.6 li
318.934 107.6 li
319.184 106.85 li
319.268 106.85 li
318.268 106.85 li
318.018 107.6 li
319.018 107.6 li
319.268 108.35 li
319.601 108.35 li
319.851 109.183 li
319.684 109.183 li
319.934 109.183 li
318.768 109.183 li
318.768 108.35 li
319.768 108.35 li
319.684 108.35 li
319.768 108.35 li
319.434 107.6 li
319.268 107.6 li
319.184 106.85 li
319.268 106.85 li
319.018 106.016 li
318.934 106.016 li
319.018 106.016 li
318.934 105.266 li
319.018 105.266 li
319.184 106.016 li
319.351 106.016 li
319.268 106.016 li
319.268 107.6 li
319.351 107.6 li
319.434 108.35 li
319.684 108.35 li
319.768 109.183 li
319.851 109.183 li
319.601 109.183 li
319.851 109.183 li
320.101 108.35 li
321.101 108.35 li
322.434 108.35 323.768 108.35 325.101 108.35 cv
325.184 108.35 li
325.351 107.6 li
325.184 107.6 li
325.184 106.85 li
324.851 106.016 li
324.934 105.266 li
325.268 104.516 li
325.434 103.683 li
325.684 103.683 li
325.851 102.933 li
325.934 102.933 li
326.018 102.183 li
325.768 102.183 li
325.934 101.35 li
326.101 101.35 li
326.018 101.35 li
326.018 100.6 li
326.268 100.6 li
326.351 99.85 li
326.851 99.85 li
327.018 99.016 li
327.768 99.016 li
327.934 98.266 li
327.851 98.266 li
328.018 98.266 li
327.768 98.266 li
327.268 97.433 li
327.184 97.433 li
327.268 96.683 li
327.351 96.683 li
327.268 96.683 li
327.351 95.933 li
328.268 95.933 li
328.434 96.683 li
328.934 96.683 li
328.934 97.433 li
328.851 98.266 li
328.518 98.266 li
328.601 98.266 li
328.351 97.433 li
328.351 96.683 li
328.434 95.933 li
329.268 95.933 li
329.434 95.1 li
329.768 95.1 li
329.768 94.35 li
329.601 94.35 li
329.518 93.6 li
329.018 93.6 li
328.934 94.35 li
328.434 94.35 li
329.518 94.35 li
329.268 94.35 li
329.351 94.35 li
328.768 94.35 li
329.018 94.35 li
329.101 93.6 li
329.601 93.6 li
329.601 92.766 li
329.684 92.766 li
330.018 92.016 li
330.518 92.016 li
329.934 91.266 li
330.351 91.266 li
329.518 91.266 li
329.518 92.016 li
329.268 92.016 li
329.601 92.016 li
329.434 92.016 li
329.518 92.016 li
329.351 92.016 li
328.851 92.766 li
328.768 93.6 li
330.434 93.6 li
330.268 93.6 li
330.351 93.6 li
329.768 93.6 li
330.018 93.6 li
329.934 93.6 li
330.684 93.6 li
330.601 93.6 li
332.518 93.6 li
332.351 93.6 li
332.434 92.766 li
331.768 92.766 li
331.851 92.766 li
331.601 93.6 li
331.768 93.6 li
331.434 93.6 li
331.018 92.766 li
330.934 92.766 li
330.684 92.016 li
331.018 91.266 li
331.101 90.433 li
331.268 90.433 li
331.184 89.683 li
331.268 89.683 li
331.101 89.683 li
331.018 90.433 li
330.768 90.433 li
330.768 91.266 li
330.601 91.266 li
330.601 92.016 li
330.351 92.016 li
330.434 92.766 li
331.018 92.766 li
330.934 92.766 li
331.601 92.766 li
331.601 92.016 li
331.184 92.016 li
331.018 92.766 li
331.184 92.766 li
331.101 92.016 li
331.434 92.016 li
331.601 91.266 li
332.101 91.266 li
332.268 90.433 li
332.684 90.433 li
332.018 90.433 li
332.018 91.266 li
331.768 91.266 li
331.934 92.016 li
332.184 92.766 li
332.351 92.766 li
332.101 92.766 li
332.268 92.766 li
332.351 92.016 li
332.018 92.016 li
331.851 91.266 li
331.601 91.266 li
331.934 91.266 li
332.101 90.433 li
332.518 90.433 li
332.601 91.266 li
332.434 91.266 li
332.518 91.266 li
332.601 92.016 li
332.934 92.016 li
332.768 91.266 li
332.684 91.266 li
332.434 90.433 li
332.601 89.683 li
333.018 88.933 li
332.934 88.933 li
334.768 88.933 li
334.684 89.683 li
334.018 89.683 li
333.601 90.433 li
333.268 90.433 li
333.434 89.683 li
333.351 89.683 li
333.518 89.683 li
333.434 89.683 li
333.434 88.933 li
@
308.351 127.1 mo
308.434 127.1 li
308.434 126.35 li
308.851 126.35 li
308.768 126.35 li
308.601 125.517 li
308.351 125.517 li
308.268 124.767 li
308.184 124.767 li
308.268 124.767 li
308.407 124.767 308.545 124.767 308.684 124.767 cv
308.768 124.767 li
308.601 124.767 li
308.518 125.517 li
308.851 125.517 li
308.768 125.517 li
308.851 125.517 li
309.351 124.767 li
309.851 124.767 li
309.934 124.017 li
310.018 123.183 li
310.268 123.183 li
310.018 124.017 li
310.101 123.183 li
309.934 123.183 li
309.601 122.433 li
309.684 121.6 li
310.684 121.6 li
311.018 122.433 li
311.184 121.6 li
311.101 121.6 li
310.601 120.85 li
310.351 120.85 li
310.351 120.1 li
310.351 120.85 li
311.101 120.85 li
311.351 120.1 li
311.851 120.1 li
312.101 119.267 li
311.851 119.267 li
311.851 120.1 li
311.351 120.1 li
311.601 120.1 li
311.851 119.267 li
311.851 118.517 li
312.268 117.767 li
312.351 116.933 li
312.018 116.933 li
311.851 116.183 li
311.851 116.933 li
312.101 116.933 li
312.101 117.767 li
312.018 118.517 li
312.268 119.267 li
312.184 119.267 li
312.268 120.1 li
312.518 120.1 li
312.351 120.1 li
312.351 119.267 li
311.768 119.267 li
312.268 119.267 li
311.934 119.267 li
312.601 119.267 li
312.351 119.267 li
312.601 118.517 li
313.184 118.517 li
313.184 117.767 li
312.934 117.767 li
313.018 116.933 li
312.518 116.933 li
312.601 117.767 li
312.601 118.517 li
312.434 118.517 li
312.518 118.517 li
312.601 119.267 li
312.934 119.267 li
313.018 118.517 li
312.768 118.517 li
312.851 118.517 li
312.601 118.517 li
313.601 118.517 li
313.768 117.767 li
313.934 118.517 li
314.184 118.517 li
313.268 118.517 li
313.768 118.517 li
314.018 117.767 li
314.434 117.767 li
314.434 116.933 li
314.351 116.933 li
314.518 116.183 li
314.268 116.183 li
314.101 115.433 li
314.101 116.183 li
313.268 116.183 li
313.518 116.933 li
314.184 116.933 li
313.768 116.933 li
313.851 116.933 li
313.601 116.933 li
313.934 116.933 li
314.101 116.183 li
314.268 116.183 li
314.351 115.433 li
314.851 114.6 li
315.101 114.6 li
315.268 113.85 li
315.018 113.85 li
314.851 114.6 li
314.768 115.433 li
314.934 116.183 li
314.684 116.183 li
314.768 116.183 li
314.684 116.183 li
314.601 115.433 li
314.934 115.433 li
314.684 115.433 li
314.934 114.6 li
315.018 114.6 li
315.018 113.85 li
314.934 113.85 li
315.018 113.85 li
314.601 113.85 li
314.518 114.6 li
314.268 115.433 li
314.101 115.433 li
315.268 115.433 li
315.518 114.6 li
315.351 114.6 li
315.184 113.85 li
314.934 113.1 li
314.684 113.1 li
314.851 113.1 li
314.684 113.1 li
314.518 113.85 li
314.768 114.6 li
314.851 114.6 li
314.934 115.433 li
315.601 115.433 li
315.018 115.433 li
315.434 115.433 li
314.684 115.433 li
314.601 116.183 li
315.268 116.183 li
315.101 116.183 li
315.351 116.183 li
315.268 115.433 li
314.601 115.433 li
314.518 114.6 li
314.434 114.6 li
315.018 113.85 li
316.184 113.85 li
315.601 113.85 li
315.768 113.85 li
315.684 113.1 li
316.184 113.1 li
316.184 113.85 li
316.018 113.85 li
316.184 113.85 li
316.101 114.6 li
316.351 114.6 li
316.184 113.85 li
316.101 113.85 li
316.101 113.1 li
315.934 112.267 li
316.101 112.267 li
316.018 111.517 li
316.101 111.517 li
316.018 110.683 li
316.518 110.683 li
316.934 111.517 li
316.851 111.517 li
317.434 111.517 li
317.351 111.517 li
317.601 111.517 li
316.184 111.517 li
316.018 112.267 li
316.934 112.267 li
316.851 112.267 li
317.434 112.267 li
317.351 112.267 li
318.768 112.267 li
318.684 112.267 li
318.684 111.517 li
318.518 111.517 li
318.101 110.683 li
317.351 110.683 li
317.601 109.933 li
317.518 109.933 li
317.601 109.933 li
317.434 109.183 li
317.351 109.183 li
317.268 108.35 li
317.434 108.35 li
317.351 109.183 li
317.184 109.183 li
317.601 109.183 li
317.684 108.35 li
318.268 108.35 li
318.101 108.35 li
317.934 109.183 li
317.768 109.183 li
317.684 109.933 li
317.601 109.933 li
317.851 109.933 li
@
284.101 170.767 mo
284.768 170.767 li
284.851 170.017 li
286.101 169.184 li
286.518 169.184 li
287.434 168.434 li
287.768 167.684 li
288.601 167.684 li
288.768 166.85 li
288.851 166.1 li
288.518 166.1 li
288.518 165.267 li
288.351 165.267 li
292.434 165.267 li
292.601 164.517 li
292.768 163.767 li
292.934 162.934 li
293.184 162.184 li
293.518 161.434 li
293.768 160.6 li
293.684 160.6 li
293.351 159.85 li
293.268 159.1 li
292.934 158.267 li
292.684 157.517 li
292.768 157.517 li
292.518 157.517 li
292.934 156.767 li
293.851 156.767 li
294.184 155.934 li
294.601 155.934 li
294.518 155.934 li
294.184 155.184 li
294.268 154.434 li
293.934 154.434 li
294.184 153.6 li
294.268 153.6 li
294.518 152.85 li
294.768 152.85 li
294.934 152.017 li
295.184 152.017 li
295.101 152.017 li
295.351 151.267 li
297.434 151.267 li
297.351 150.517 li
297.434 150.517 li
297.351 150.517 li
297.018 149.684 li
297.351 149.684 li
297.518 148.934 li
297.601 148.934 li
297.768 148.184 li
297.518 148.184 li
297.934 147.35 li
297.851 147.35 li
297.851 146.6 li
297.434 146.6 li
297.518 145.85 li
297.434 145.85 li
297.934 145.017 li
298.101 144.267 li
298.601 143.517 li
298.684 143.517 li
298.934 142.684 li
299.184 142.684 li
298.684 142.684 li
298.934 142.684 li
299.184 141.934 li
299.101 141.934 li
299.351 141.934 li
298.851 141.934 li
299.018 141.934 li
299.101 142.684 li
298.934 142.684 li
299.351 142.684 li
299.518 143.517 li
299.684 142.684 li
299.768 142.684 li
299.101 142.684 li
299.101 141.934 li
299.018 141.934 li
299.268 141.934 li
299.268 141.1 li
299.518 141.1 li
299.434 141.1 li
299.601 140.35 li
299.518 140.35 li
299.601 140.35 li
299.601 139.6 li
299.684 139.6 li
299.601 139.6 li
299.768 138.767 li
298.768 138.767 li
298.601 139.6 li
298.684 140.35 li
299.101 140.35 li
299.268 141.1 li
299.518 141.1 li
298.851 141.1 li
299.101 141.1 li
299.268 140.35 li
299.434 140.35 li
299.351 140.35 li
299.518 140.35 li
299.434 140.35 li
299.684 139.6 li
299.601 139.6 li
299.684 139.6 li
299.518 138.767 li
300.018 138.767 li
300.101 138.017 li
299.768 138.017 li
299.601 137.267 li
299.351 137.267 li
299.434 137.267 li
299.268 138.017 li
300.018 138.017 li
300.018 138.767 li
300.351 138.767 li
300.351 139.6 li
300.434 139.6 li
300.351 138.767 li
300.268 138.767 li
300.351 138.767 li
300.018 138.017 li
299.934 138.017 li
300.018 138.767 li
301.518 138.767 li
301.684 138.017 li
301.851 138.017 li
301.268 138.017 li
301.434 137.267 li
301.684 136.434 li
301.601 135.684 li
302.184 134.934 li
302.101 134.934 li
302.018 134.1 li
301.851 134.1 li
301.768 133.35 li
301.434 133.35 li
301.684 133.35 li
301.351 133.35 li
301.851 133.35 li
301.768 133.35 li
302.101 133.35 li
301.934 133.35 li
301.851 134.1 li
301.934 134.1 li
301.684 134.934 li
300.101 134.934 li
300.601 134.934 li
300.518 135.684 li
301.351 135.684 li
301.684 134.934 li
301.434 134.1 li
301.351 134.1 li
301.268 133.35 li
301.601 133.35 li
301.518 134.1 li
301.684 134.1 li
301.684 134.934 li
301.601 134.934 li
302.351 134.934 li
302.351 134.1 li
302.268 134.1 li
302.268 133.35 li
301.601 133.35 li
302.684 133.35 li
302.601 133.35 li
302.434 132.517 li
302.768 133.35 li
302.684 133.35 li
302.518 134.1 li
302.434 134.1 li
302.518 134.1 li
302.351 134.1 li
303.768 134.1 li
304.018 133.35 li
304.268 133.35 li
304.268 132.517 li
304.101 132.517 li
304.268 132.517 li
304.184 132.517 li
304.101 131.767 li
303.851 131.767 li
304.101 131.767 li
303.768 131.767 li
303.601 132.517 li
303.518 132.517 li
303.518 131.767 li
303.184 131.767 li
303.268 131.767 li
303.268 131.017 li
304.101 131.017 li
304.018 131.767 li
304.268 131.767 li
304.268 132.517 li
303.518 132.517 li
303.768 132.517 li
304.518 132.517 305.268 132.517 306.018 132.517 cv
306.351 132.517 li
306.101 132.517 li
305.434 131.767 li
304.851 131.767 li
304.934 131.767 li
305.268 131.017 li
305.601 131.017 li
305.684 130.184 li
306.601 130.184 li
306.934 129.434 li
307.018 129.434 li
306.184 129.434 li
306.184 128.684 li
306.018 128.684 li
306.351 128.684 li
306.434 127.85 li
307.851 127.85 li
307.768 127.85 li
308.184 127.85 li
308.101 127.85 li
308.351 127.1 li
@
262.434 211.267 mo
262.434 212.1 li
262.601 212.1 li
262.434 212.1 li
263.101 212.1 li
263.434 211.267 li
263.351 211.267 li
263.517 211.267 li
263.517 210.517 li
263.684 210.517 li
263.851 209.767 li
263.767 209.767 li
263.767 208.934 li
263.517 208.934 li
263.934 208.934 li
263.851 208.934 li
264.351 208.934 li
263.601 208.934 li
263.767 209.767 li
263.684 209.767 li
264.101 209.767 li
264.017 208.934 li
264.101 208.934 li
263.851 208.184 li
263.767 208.184 li
263.934 208.184 li
263.934 207.434 li
264.267 207.434 li
264.184 207.434 li
264.351 207.434 li
264.267 207.434 li
264.351 207.434 li
264.267 207.434 li
264.601 207.434 li
264.517 207.434 li
264.295 207.434 264.073 207.434 263.851 207.434 cv
263.767 207.434 li
264.267 207.434 li
263.934 206.6 li
263.851 206.6 li
264.184 206.6 li
264.101 206.6 li
264.267 206.6 li
263.767 206.6 li
263.684 207.434 li
263.934 207.434 li
263.517 207.434 li
263.767 207.434 li
263.767 206.6 li
263.684 206.6 li
263.934 206.6 li
263.934 207.434 li
264.434 207.434 li
263.684 207.434 li
263.767 206.6 li
263.184 206.6 li
263.017 207.434 li
263.517 207.434 li
263.517 208.184 li
263.684 208.184 li
263.767 208.934 li
263.851 208.934 li
263.684 208.934 li
263.684 209.767 li
263.017 209.767 li
262.934 208.934 li
262.851 208.934 li
263.267 208.934 li
263.351 208.184 li
263.767 208.184 li
263.184 208.184 li
263.351 208.184 li
263.517 207.434 li
263.934 207.434 li
263.934 206.6 li
263.767 207.434 li
263.851 207.434 li
263.684 207.434 li
263.434 208.184 li
263.601 208.184 li
263.517 208.184 li
263.517 207.434 li
263.351 207.434 li
263.767 207.434 li
263.684 206.6 li
263.767 206.6 li
263.601 206.6 li
264.434 206.6 li
264.684 207.434 li
265.601 207.434 li
265.767 206.6 li
265.684 206.6 li
265.767 206.6 li
265.934 205.85 li
266.851 205.85 li
267.434 205.1 li
267.517 205.1 li
267.851 204.267 li
268.017 204.267 li
268.434 203.517 li
268.767 203.517 li
268.684 203.517 li
268.767 203.517 li
268.017 203.517 li
267.934 202.767 li
268.767 202.767 li
269.601 201.934 li
271.517 201.934 li
271.767 201.184 li
271.851 201.184 li
271.767 200.35 li
271.851 200.35 li
271.517 199.6 li
271.351 199.6 li
271.184 198.85 li
271.101 198.85 li
271.351 198.85 li
271.601 198.017 li
272.517 198.017 li
272.767 197.267 li
272.934 197.267 li
272.851 196.517 li
272.684 195.684 li
272.601 195.684 li
272.351 194.934 li
272.184 194.934 li
272.184 194.184 li
272.434 194.184 li
272.184 193.35 li
272.351 194.184 li
272.851 194.184 li
273.267 194.934 li
273.017 194.934 li
273.351 194.934 li
273.351 194.184 li
273.684 193.35 li
273.934 192.6 li
274.351 191.85 li
274.767 191.85 li
275.184 191.017 li
275.434 190.267 li
276.517 190.267 li
276.101 190.267 li
276.184 190.267 li
276.351 189.517 li
276.517 189.517 li
277.017 188.684 li
277.184 188.684 li
277.434 187.934 li
277.601 187.934 li
277.601 187.1 li
277.767 187.1 li
277.684 186.35 li
277.767 186.35 li
277.601 186.35 li
277.601 185.6 li
277.267 185.6 li
278.434 185.6 li
278.851 184.767 li
279.684 184.767 li
279.851 184.017 li
280.601 184.017 li
280.767 183.267 li
280.684 183.267 li
280.434 182.434 li
279.851 181.684 li
279.684 180.934 li
279.767 180.1 li
280.517 179.35 li
281.267 179.35 li
281.184 179.35 li
280.934 178.6 li
280.851 178.6 li
280.934 177.767 li
281.017 177.767 li
280.934 177.017 li
281.017 177.017 li
281.101 176.184 li
281.351 176.184 li
281.712 176.184 282.073 176.184 282.434 176.184 cv
282.517 176.184 li
282.184 175.434 li
282.267 175.434 li
282.101 175.434 li
282.017 174.684 li
282.101 173.85 li
281.684 173.85 li
281.934 173.85 li
282.101 173.1 li
282.934 173.1 li
282.851 173.1 li
282.934 173.1 li
282.184 173.1 li
282.267 172.35 li
282.434 172.35 li
282.934 171.517 li
283.601 171.517 li
283.684 170.767 li
284.351 170.767 li
283.851 170.767 li
283.934 171.517 li
284.017 171.517 li
283.934 171.517 li
284.434 171.517 li
284.101 170.767 li
@
253.601 231.6 mo
253.768 230.767 li
254.101 230.767 li
254.018 230.767 li
254.184 230.017 li
254.268 230.017 li
253.934 230.017 li
254.351 230.017 li
254.268 230.017 li
254.434 229.267 li
255.268 229.267 li
255.018 229.267 li
255.101 229.267 li
255.101 230.017 li
254.768 230.017 li
255.184 230.017 li
255.351 230.767 li
255.934 230.767 li
255.601 230.767 li
255.768 230.017 li
255.684 229.267 li
255.351 229.267 li
255.101 228.433 li
255.101 227.683 li
256.101 227.683 li
255.601 227.683 li
255.601 226.933 li
255.268 226.933 li
255.851 226.933 li
256.018 227.683 li
256.101 228.433 li
255.684 228.433 li
255.684 227.683 li
255.601 227.683 li
255.684 226.933 li
255.851 226.933 li
255.768 226.1 li
256.101 226.1 li
255.851 226.933 li
256.101 226.933 li
256.268 226.1 li
256.184 226.1 li
256.434 226.1 li
256.018 226.1 li
256.101 226.1 li
255.684 226.1 li
255.851 225.35 li
256.434 225.35 li
256.518 224.517 li
256.434 223.767 li
256.518 223.017 li
256.684 222.183 li
256.434 221.433 li
256.018 221.433 li
256.018 222.183 li
256.184 222.183 li
256.101 223.017 li
256.268 223.017 li
256.268 223.767 li
256.518 223.767 li
256.434 223.767 li
256.518 223.767 li
256.101 223.767 li
256.101 224.517 li
255.768 224.517 li
256.101 224.517 li
256.184 225.35 li
256.601 225.35 li
256.184 225.35 li
256.268 225.35 li
255.934 225.35 li
256.518 225.35 li
255.768 225.35 li
256.101 225.35 li
256.018 225.35 li
255.934 224.517 li
256.684 224.517 li
256.101 224.517 li
256.101 223.767 li
256.184 223.767 li
255.768 223.017 li
255.768 223.767 li
256.268 223.767 li
256.101 223.767 li
256.268 224.517 li
256.768 224.517 li
256.684 224.517 li
256.851 224.517 li
256.434 224.517 li
257.351 224.517 li
257.268 224.517 li
257.351 225.35 li
257.184 225.35 li
257.184 224.517 li
256.601 224.517 li
256.851 223.767 li
256.851 223.017 li
256.934 223.017 li
257.018 222.183 li
256.684 222.183 li
256.684 221.433 li
256.601 221.433 li
256.684 221.433 li
256.684 222.183 li
256.518 222.183 li
256.601 223.017 li
256.684 223.017 li
256.684 223.767 li
256.601 223.767 li
256.684 223.767 li
256.184 223.767 li
256.601 223.767 li
256.601 224.517 li
257.101 224.517 li
256.351 224.517 li
256.351 223.767 li
256.434 223.767 li
256.351 223.767 li
256.434 223.767 li
256.268 223.767 li
256.351 223.017 li
256.601 223.017 li
256.684 222.183 li
256.934 222.183 li
256.851 223.017 li
256.518 223.017 li
256.434 223.767 li
256.768 223.767 li
256.684 223.017 li
256.851 223.017 li
256.684 223.767 li
256.768 223.767 li
256.601 223.767 li
256.684 223.017 li
256.768 223.017 li
256.601 223.017 li
256.684 223.017 li
256.907 223.017 257.129 223.017 257.351 223.017 cv
257.518 223.017 li
257.518 222.183 li
257.268 222.183 li
257.351 222.183 li
257.184 222.183 li
257.101 223.017 li
257.184 223.017 li
257.018 223.017 li
257.184 223.017 li
257.434 222.183 li
257.934 222.183 li
257.434 222.183 li
257.601 221.433 li
257.684 221.433 li
257.601 220.683 li
257.851 220.683 li
257.851 219.85 li
257.768 219.85 li
258.018 219.85 li
257.851 219.85 li
257.934 219.85 li
257.851 219.85 li
258.184 219.85 li
258.434 220.683 li
259.101 220.683 li
259.768 220.683 260.434 220.683 261.101 220.683 cv
261.268 220.683 li
261.268 219.85 li
261.518 219.85 li
261.351 219.85 li
261.101 219.1 li
260.768 218.35 li
260.434 218.35 li
260.434 217.517 li
260.268 216.767 li
260.268 216.017 li
260.601 216.017 li
260.768 215.183 li
260.684 215.183 li
261.101 215.183 li
260.434 215.183 li
260.934 215.183 li
260.934 216.017 li
261.101 216.017 li
260.934 216.017 li
261.268 216.017 li
261.018 216.017 li
261.268 216.017 li
261.101 215.183 li
260.934 215.183 li
261.101 215.183 li
261.101 214.433 li
261.518 214.433 li
261.601 213.683 li
262.434 213.683 li
262.601 212.85 li
262.518 212.85 li
262.351 212.1 li
262.601 212.1 li
262.434 211.267 li
@
249.184 249.517 mo
249.267 248.767 li
249.601 248.767 li
249.434 248.767 li
249.267 247.934 li
249.351 247.934 li
249.267 247.934 li
249.351 247.934 li
249.101 247.934 li
249.101 247.184 li
249.017 247.184 li
249.101 246.434 li
248.934 246.434 li
248.767 245.6 li
249.017 245.6 li
249.101 246.434 li
249.351 246.434 li
248.934 246.434 li
248.851 245.6 li
249.101 245.6 li
249.184 244.85 li
249.267 244.85 li
249.434 244.017 li
249.184 244.017 li
249.434 244.017 li
249.351 244.017 li
249.517 244.017 li
248.684 244.017 li
248.767 244.017 li
248.767 244.85 li
249.684 244.85 li
249.351 244.85 li
249.267 244.017 li
248.934 244.017 li
249.101 244.017 li
249.017 244.017 li
249.101 243.267 li
249.517 243.267 li
249.434 243.267 li
249.517 243.267 li
249.184 243.267 li
249.351 242.517 li
248.934 242.517 li
249.101 242.517 li
249.101 243.267 li
249.434 243.267 li
249.267 243.267 li
249.351 242.517 li
249.101 242.517 li
249.017 241.684 li
249.267 241.684 li
249.434 242.517 li
249.684 243.267 li
249.767 243.267 li
249.767 244.017 li
249.851 244.017 li
249.517 244.85 li
249.601 244.85 li
249.351 245.6 li
249.434 244.85 li
249.517 244.017 li
249.601 244.017 li
249.601 243.267 li
249.684 243.267 li
249.434 242.517 li
249.017 242.517 li
249.101 242.517 li
248.767 242.517 li
248.934 242.517 li
248.851 242.517 li
248.851 243.267 li
249.267 243.267 li
249.434 244.017 li
249.684 244.017 li
249.601 244.017 li
249.684 244.017 li
249.517 244.017 li
249.517 243.267 li
249.434 243.267 li
249.517 243.267 li
249.684 242.517 li
249.767 242.517 li
249.434 242.517 li
249.934 242.517 li
249.767 242.517 li
249.434 241.684 li
249.517 241.684 li
249.601 242.517 li
249.684 242.517 li
249.517 242.517 li
249.767 242.517 li
249.601 243.267 li
250.017 243.267 li
249.767 243.267 li
249.851 243.267 li
249.684 243.267 li
249.851 242.517 li
249.601 242.517 li
249.684 242.517 li
249.934 241.684 li
250.434 241.684 li
250.517 242.517 li
250.767 242.517 li
250.601 242.517 li
250.684 242.517 li
250.434 242.517 li
250.434 241.684 li
250.267 241.684 li
250.517 240.934 li
250.434 240.934 li
250.601 240.184 li
250.517 240.184 li
250.601 239.35 li
250.684 239.35 li
250.684 238.6 li
250.184 238.6 li
250.601 238.6 li
250.851 239.35 li
250.934 239.35 li
250.684 240.184 li
250.601 240.184 li
250.517 240.934 li
250.851 240.934 li
250.684 240.934 li
250.684 240.184 li
250.517 240.184 li
251.184 240.184 li
251.267 240.934 li
251.601 240.934 li
251.434 240.934 li
251.351 240.184 li
251.101 240.184 li
251.267 239.35 li
251.184 239.35 li
251.351 238.6 li
251.517 237.85 li
251.434 237.85 li
251.517 237.017 li
251.351 237.85 li
251.434 237.85 li
251.351 237.85 li
251.267 237.017 li
251.434 237.017 li
251.351 237.017 li
251.517 237.017 li
251.434 237.017 li
251.517 237.017 li
251.351 237.85 li
251.434 238.6 li
251.351 238.6 li
251.267 239.35 li
251.101 239.35 li
251.767 239.35 li
251.684 239.35 li
251.767 239.35 li
251.684 239.35 li
251.851 239.35 li
252.017 238.6 li
251.934 238.6 li
251.767 237.85 li
251.601 237.017 li
251.851 237.017 li
251.767 236.267 li
252.017 236.267 li
251.934 236.267 li
252.017 236.267 li
252.017 237.017 li
252.101 237.017 li
252.184 237.85 li
252.267 237.85 li
252.101 238.6 li
251.851 238.6 li
252.267 238.6 li
252.351 237.85 li
252.184 237.85 li
252.434 237.017 li
252.184 236.267 li
252.101 235.517 li
252.184 235.517 li
251.851 235.517 li
252.017 236.267 li
252.017 237.017 li
252.101 237.017 li
252.017 237.85 li
252.351 237.85 li
252.517 237.017 li
252.601 237.017 li
252.601 236.267 li
252.267 236.267 li
252.434 236.267 li
252.267 236.267 li
253.267 236.267 li
252.851 236.267 li
252.601 235.517 li
252.517 235.517 li
252.684 234.684 li
252.684 233.184 li
252.767 233.934 li
252.684 233.934 li
252.684 234.684 li
252.934 235.517 li
252.851 235.517 li
252.767 236.267 li
252.934 236.267 li
252.684 236.267 li
252.517 235.517 li
252.601 235.517 li
252.517 235.517 li
252.434 234.684 li
252.351 234.684 li
253.017 234.684 li
252.934 234.684 li
252.934 233.934 li
252.851 233.184 li
253.267 233.184 li
253.184 233.934 li
253.767 233.934 li
253.184 233.934 li
253.434 233.934 li
253.267 233.934 li
253.434 233.934 li
253.351 233.934 li
253.434 233.184 li
253.517 233.184 li
253.517 232.35 li
253.434 232.35 li
253.601 232.35 li
253.434 232.35 li
253.684 231.6 li
253.517 231.6 li
253.601 231.6 li
253.517 232.35 li
253.684 232.35 li
253.351 232.35 li
253.684 232.35 li
253.601 232.35 li
253.517 231.6 li
253.601 231.6 li
@
240.517 342.267 mo
240.35 342.267 li
240.35 339.184 li
240.184 338.434 li
240.184 337.6 li
240.1 336.85 li
240.184 336.85 li
240.517 336.1 li
240.684 335.267 li
240.6 335.267 li
240.684 335.267 li
240.767 334.517 li
240.85 334.517 li
240.85 335.267 li
240.934 335.267 li
240.767 334.517 li
240.934 334.517 li
241.517 333.684 li
241.434 332.934 li
241.517 332.934 li
241.434 332.934 li
241.517 332.184 li
241.6 332.184 li
241.684 331.35 li
241.517 331.35 li
241.517 330.6 li
241.267 330.6 li
241.35 329.85 li
240.85 329.017 li
240.85 327.517 li
241.017 327.517 li
241.1 326.684 li
241.017 326.684 li
241.1 326.684 li
241.434 327.517 li
241.517 327.517 li
240.767 327.517 li
240.6 328.267 li
239.85 328.267 li
240.184 328.267 li
240.35 327.517 li
240.517 327.517 li
240.6 326.684 li
240.684 326.684 li
240.767 325.934 li
240.684 325.184 li
240.85 325.184 li
240.85 324.35 li
240.934 324.35 li
240.684 323.6 li
240.6 322.767 li
240.517 322.017 li
241.296 319.205 241.292 317.12 241.434 314.267 cv
241.434 313.434 li
241.1 311.85 li
241.35 310.35 li
241.267 309.517 li
241.434 308.017 li
241.517 306.434 li
241.684 305.684 li
241.767 304.1 li
241.934 303.35 li
241.934 300.184 li
242.1 299.434 li
242.184 297.85 li
242.1 296.267 li
242.184 295.517 li
242.1 294.767 li
242.419 292.245 241.647 289.961 242.6 287.684 cv
242.684 286.934 li
242.85 286.184 li
242.834 283.573 243.553 281 243.434 278.35 cv
243.35 277.6 li
243.267 276.767 li
243.017 276.017 li
242.934 276.017 li
242.934 275.267 li
243.017 275.267 li
242.85 274.434 li
243.184 274.434 li
243.267 273.684 li
243.684 272.934 li
243.85 272.1 li
243.767 271.35 li
243.6 270.6 li
243.684 270.6 li
243.6 269.767 li
243.6 269.017 li
243.517 269.017 li
243.434 268.267 li
243.184 268.267 li
243.35 267.434 li
243.6 267.434 li
243.6 266.684 li
243.684 266.684 li
243.85 265.85 li
244.017 265.85 li
243.767 265.85 li
243.6 265.1 li
243.517 264.35 li
243.517 263.517 li
243.434 263.517 li
243.267 262.767 li
243.1 262.017 li
243.184 262.017 li
243.184 261.184 li
243.267 261.184 li
243.184 261.184 li
243.434 261.184 li
243.6 260.434 li
243.767 260.434 li
243.6 261.184 li
243.517 261.184 li
243.6 262.017 li
244.35 262.017 li
244.517 261.184 li
244.684 261.184 li
244.684 260.434 li
244.6 260.434 li
244.517 261.184 li
244.267 261.184 li
244.517 261.184 li
244.684 262.017 li
244.684 261.184 li
244.434 261.184 li
244.767 260.434 li
244.684 259.684 li
244.6 259.684 li
244.934 259.684 li
245.017 258.85 li
245.1 258.85 li
244.85 258.85 li
245.184 258.1 li
245.35 258.1 li
245.434 257.35 li
245.1 256.517 li
245.017 256.517 li
245.267 255.767 li
245.184 255.767 li
245.517 254.934 li
245.35 254.934 li
245.184 254.184 li
245.267 254.184 li
245.267 254.934 li
245.35 254.934 li
245.35 255.767 li
245.767 255.767 li
246.184 256.517 li
246.35 256.517 li
246.267 257.35 li
246.1 257.35 li
246.017 256.517 li
245.85 256.517 li
245.684 255.767 li
245.684 254.934 li
245.6 254.934 li
245.85 254.184 li
245.934 253.434 li
246.1 253.434 li
245.6 253.434 li
245.684 253.434 li
245.517 253.434 li
245.767 253.434 li
245.934 252.6 li
245.85 252.6 li
246.184 251.85 li
246.517 251.85 li
246.35 251.85 li
246.184 252.6 li
246.1 252.6 li
246.1 253.434 li
246.017 253.434 li
246.017 254.184 li
245.85 254.184 li
246.267 254.184 li
246.184 254.184 li
246.267 253.434 li
246.517 253.434 li
246.517 252.6 li
246.684 252.6 li
246.6 251.85 li
246.684 251.85 li
246.767 251.1 li
246.6 250.267 li
246.35 250.267 li
246.434 250.267 li
246.35 250.267 li
246.6 250.267 li
246.6 251.1 li
246.684 251.1 li
246.684 251.85 li
246.934 251.85 li
246.767 252.6 li
246.35 252.6 li
246.6 252.6 li
246.767 251.85 li
246.6 251.1 li
246.517 250.267 li
246.934 250.267 li
246.934 249.517 li
246.684 249.517 li
247.017 249.517 li
246.684 249.517 li
246.6 250.267 li
247.1 250.267 li
247.017 249.517 li
247.1 249.517 li
247.267 248.767 li
247.017 248.767 li
247.1 249.517 li
247.017 250.267 li
246.934 250.267 li
247.267 250.267 li
247.35 251.1 li
247.684 251.1 li
247.184 251.1 li
247.517 251.1 li
247.35 250.267 li
247.184 250.267 li
247.434 249.517 li
247.35 249.517 li
248.1 249.517 li
247.934 250.267 li
247.767 250.267 li
247.6 249.517 li
247.267 249.517 li
247.434 249.517 li
247.434 250.267 li
247.6 250.267 li
247.684 249.517 li
247.934 249.517 li
247.85 249.517 li
247.684 248.767 li
247.517 248.767 li
247.6 248.767 li
247.517 248.767 li
247.767 248.767 li
247.934 249.517 li
249.184 249.517 li
@
222.684 391.434 mo
222.767 390.601 li
223.017 390.601 li
223.017 389.851 li
224.684 389.851 li
224.934 389.101 li
225.101 389.101 li
225.101 388.267 li
224.934 387.517 li
225.184 387.517 li
225.351 386.767 li
225.684 386.767 li
225.851 385.934 li
225.851 386.767 li
226.351 386.767 li
226.267 386.767 li
226.434 386.767 li
226.434 385.934 li
226.684 385.934 li
226.434 385.934 li
227.101 385.934 li
227.434 385.184 li
227.351 384.434 li
227.267 384.434 li
227.267 383.601 li
227.101 383.601 li
227.267 382.851 li
227.184 382.851 li
228.184 382.851 li
228.267 383.601 li
228.517 383.601 li
228.434 384.434 li
233.851 384.434 li
233.934 383.601 li
234.184 383.601 li
234.101 383.601 li
233.934 382.851 li
233.851 382.851 li
233.934 382.101 li
233.851 382.101 li
234.017 381.267 li
233.934 380.517 li
234.184 379.684 li
234.267 378.934 li
234.101 378.184 li
234.184 377.351 li
234.267 376.601 li
234.351 375.851 li
234.851 375.851 li
234.767 375.851 li
235.351 375.851 li
234.934 375.851 li
235.017 376.601 li
234.851 376.601 li
235.101 376.601 li
235.017 376.601 li
235.517 376.601 li
235.517 375.851 li
235.101 375.851 li
235.767 375.851 li
235.267 375.851 li
235.684 376.601 li
236.101 376.601 li
235.684 376.601 li
235.851 376.601 li
235.434 376.601 li
235.767 376.601 li
235.684 376.601 li
235.767 375.851 li
235.684 375.851 li
236.434 375.851 li
236.434 376.601 li
236.267 376.601 li
236.267 377.351 li
236.017 378.184 li
235.767 378.184 li
235.851 378.184 li
235.684 378.934 li
236.351 378.934 li
236.351 378.184 li
236.267 378.184 li
236.517 378.184 li
236.101 378.184 li
236.267 378.184 li
236.101 378.184 li
235.851 377.351 li
235.017 377.351 li
235.184 378.184 li
235.101 378.184 li
235.184 378.184 li
235.101 378.934 li
235.017 378.934 li
234.851 379.684 li
234.434 379.684 li
234.184 380.517 li
234.101 380.517 li
234.184 380.517 li
234.101 380.517 li
234.434 380.517 li
234.351 380.517 li
234.267 379.684 li
234.184 379.684 li
233.934 379.684 233.684 379.684 233.434 379.684 cv
233.351 379.684 li
233.601 379.684 li
233.434 379.684 li
233.684 379.684 li
233.434 379.684 li
233.267 380.517 li
233.184 380.517 li
232.851 381.267 li
232.684 381.267 li
233.017 381.267 li
232.267 381.267 li
232.517 381.267 li
232.434 381.267 li
232.267 380.517 li
232.434 380.517 li
232.351 379.684 li
232.267 379.684 li
232.184 378.934 li
232.017 378.934 li
232.351 378.934 li
232.434 378.184 li
232.351 378.184 li
232.351 377.351 li
232.101 376.601 li
232.017 375.851 li
231.934 375.017 li
231.934 374.267 li
231.767 373.517 li
231.601 373.517 li
231.851 373.517 li
231.351 373.517 li
231.517 373.517 li
231.267 373.517 li
231.601 373.517 li
231.767 372.684 li
231.684 372.684 li
231.851 372.684 li
231.601 372.684 li
231.434 371.934 li
231.267 371.934 li
231.267 371.184 li
231.184 371.184 li
231.351 371.184 li
231.101 370.351 li
230.934 370.351 li
231.017 370.351 li
231.101 369.601 li
231.684 369.601 li
231.351 369.601 li
231.017 368.767 li
231.267 368.767 li
231.184 368.767 li
231.267 368.767 li
230.934 368.767 li
231.184 368.767 li
231.434 368.017 li
231.184 368.017 li
231.017 367.267 li
231.267 367.267 li
231.267 366.434 li
231.517 366.434 li
231.267 366.434 li
231.267 365.684 li
231.101 365.684 li
230.934 364.934 li
230.934 364.101 li
231.017 363.351 li
231.184 362.601 li
231.351 362.601 li
231.434 361.767 li
231.601 361.767 li
231.184 361.017 li
231.101 361.017 li
230.851 360.267 li
230.767 360.267 li
230.851 359.434 li
230.934 358.684 li
230.767 358.684 li
230.684 357.851 li
230.851 357.101 li
231.184 357.101 li
231.017 356.351 li
230.851 356.351 li
230.934 355.517 li
230.767 355.517 li
230.934 355.517 li
231.017 354.767 li
230.851 354.767 li
230.184 354.017 li
230.101 354.017 li
234.267 354.017 li
236.934 353.184 li
237.851 353.184 li
239.767 352.434 li
240.434 351.684 li
241.017 351.684 li
241.267 350.851 li
241.934 350.851 li
241.684 350.851 li
241.684 350.101 li
241.434 350.101 li
241.434 349.351 li
240.851 349.351 li
240.851 347.767 li
240.934 347.017 li
240.684 346.184 li
240.601 346.184 li
240.517 345.434 li
240.684 345.434 li
240.351 345.434 li
240.434 344.601 li
240.767 344.601 li
240.851 343.851 li
241.101 343.851 li
240.767 343.101 li
240.684 343.101 li
240.517 342.267 li
@
209.517 440.517 mo
209.434 440.517 li
209.6 440.517 li
209.517 440.517 li
209.517 439.767 li
209.684 439.767 li
209.517 439.767 li
209.6 439.767 li
209.6 440.517 li
209.934 440.517 li
209.85 440.517 li
210.184 440.517 li
210.1 440.517 li
210.267 440.517 li
210.1 440.517 li
210.184 440.517 li
210.1 439.767 li
209.517 439.767 li
209.767 439.767 li
209.684 439.767 li
210.767 439.767 li
210.6 439.767 li
211.1 439.767 li
211.017 439.767 li
212.267 439.767 li
212.184 439.767 li
212.767 439.767 li
212.767 440.517 li
213.184 440.517 li
213.1 440.517 li
213.1 441.35 li
212.684 441.35 li
212.85 441.35 li
212.767 442.1 li
213.184 442.1 li
213.1 442.1 li
213.267 442.1 li
213.1 441.35 li
213.184 441.35 li
213.017 441.35 li
213.1 441.35 li
213.017 441.35 li
213.767 441.35 li
213.684 441.35 li
213.767 440.517 li
213.6 439.767 li
213.517 439.767 li
213.684 439.767 li
213.434 439.767 li
213.6 440.517 li
214.017 441.35 li
213.767 441.35 li
213.934 441.35 li
213.85 440.517 li
213.934 440.517 li
213.934 439.767 li
213.767 439.767 li
213.934 439.767 li
213.934 440.517 li
214.1 440.517 li
213.684 440.517 li
213.767 439.767 li
213.684 439.767 li
213.6 439.017 li
213.684 439.017 li
213.85 438.184 li
214.017 438.184 li
213.934 438.184 li
214.017 438.184 li
213.85 438.184 li
214.017 438.184 li
213.934 438.184 li
214.1 438.184 li
213.934 438.184 li
213.85 437.434 li
213.684 437.434 li
213.85 436.684 li
213.6 436.684 li
214.184 436.684 li
213.684 436.684 li
213.684 435.1 li
213.767 435.1 li
213.684 435.1 li
214.1 435.1 li
214.1 433.517 li
213.934 433.517 li
213.85 432.767 li
213.85 431.934 li
213.934 431.934 li
214.1 431.184 li
214.267 431.184 li
214.434 430.434 li
214.35 430.434 li
214.35 429.6 li
214.184 429.6 li
214.184 428.85 li
213.85 428.85 li
214.1 428.85 li
214.017 428.1 li
214.1 427.267 li
214.017 426.517 li
214.017 425.767 li
213.85 424.184 li
213.934 423.35 li
213.767 423.35 li
213.767 422.6 li
213.684 422.6 li
213.6 423.35 li
213.35 424.184 li
213.517 424.184 li
213.35 424.184 li
213.434 423.35 li
213.267 423.35 li
213.267 422.6 li
213.434 421.85 li
213.6 421.85 li
213.517 421.85 li
213.434 421.017 li
213.434 420.267 li
213.267 420.267 li
213.267 419.517 li
213.35 418.684 li
213.35 417.934 li
213.684 417.934 li
213.684 417.184 li
213.184 417.184 li
213.184 416.35 li
213.35 416.35 li
213.35 415.6 li
213.517 415.6 li
213.35 415.6 li
213.434 415.6 li
213.434 414.85 li
213.517 414.85 li
213.434 414.017 li
213.267 414.017 li
213.35 414.017 li
213.1 413.267 li
213.017 413.267 li
213.1 412.434 li
212.934 412.434 li
213.017 411.684 li
212.934 411.684 li
213.017 410.934 li
213.434 410.934 li
213.6 410.1 li
212.767 410.1 li
212.934 409.35 li
212.767 409.35 li
213.1 409.35 li
213.184 408.6 li
213.267 408.6 li
213.434 407.767 li
213.517 407.767 li
213.35 407.767 li
213.434 408.6 li
213.35 408.6 li
213.434 409.35 li
213.767 409.35 li
213.684 409.35 li
213.267 408.6 li
213.184 408.6 li
213.017 407.767 li
213.267 407.017 li
213.184 407.017 li
213.184 406.267 li
213.1 406.267 li
213.267 406.267 li
212.934 406.267 li
213.517 406.267 li
213.434 406.267 li
213.6 406.267 li
213.017 406.267 li
212.684 405.434 li
212.434 405.434 li
213.434 405.434 li
213.517 406.267 li
213.184 406.267 li
213.267 406.267 li
213.267 407.017 li
212.934 407.017 li
213.017 407.767 li
213.35 407.767 li
213.434 407.017 li
213.517 407.017 li
213.684 406.267 li
213.684 404.684 li
213.434 403.934 li
213.517 403.1 li
213.35 402.35 li
213.267 401.6 li
213.6 401.6 li
213.517 401.6 li
213.6 402.35 li
214.017 402.35 li
214.184 401.6 li
214.35 401.6 li
214.517 400.767 li
214.767 400.767 li
214.684 400.767 li
215.35 400.767 li
216.017 400.017 li
217.35 400.017 li
217.6 399.184 li
219.1 400.017 li
219.35 400.017 li
219.267 400.017 li
220.184 400.767 li
220.6 400.767 li
220.517 400.017 li
220.767 399.184 li
220.767 398.434 li
220.934 397.684 li
221.017 396.85 li
221.1 396.1 li
221.017 396.1 li
221.017 395.35 li
220.767 394.517 li
220.6 393.767 li
220.6 392.934 li
221.1 392.934 li
221.267 392.184 li
222.1 392.184 li
222.184 391.434 li
222.684 391.434 li
@
175.6 410.1 mo
175.35 410.1 li
175.35 410.933 li
175.267 410.933 li
175.267 410.1 li
175.35 410.1 li
175.267 410.1 li
175.017 409.35 li
175.1 409.35 li
174.85 409.35 li
174.767 408.6 li
174.683 409.35 li
174.6 409.35 li
174.767 409.35 li
174.933 408.6 li
175.1 408.6 li
174.6 408.6 li
175.017 408.6 li
175.628 408.6 176.239 408.6 176.85 408.6 cv
178.017 407.767 li
192.85 407.767 li
194.183 408.6 li
196.6 408.6 li
196.6 409.35 li
195.683 409.35 li
194.85 410.1 li
193.683 410.933 li
192.683 410.933 li
191.6 411.683 li
190.183 411.683 li
189.433 412.433 li
188.183 412.433 li
188.017 413.267 li
187.933 413.267 li
187.767 414.017 li
187.6 414.017 li
187.433 414.85 li
187.35 415.6 li
187.35 416.35 li
187.017 416.35 li
187.183 416.35 li
186.85 417.183 li
186.933 417.183 li
186.767 416.35 li
186.517 416.35 li
186.35 415.6 li
186.267 415.6 li
186.267 416.35 li
186.183 416.35 li
186.35 416.35 li
186.433 417.183 li
186.517 417.183 li
186.517 417.933 li
186.433 417.933 li
186.517 418.683 li
187.1 418.683 li
187.183 419.517 li
187.433 419.517 li
187.517 420.267 li
187.6 420.267 li
187.767 421.017 li
187.517 421.017 li
187.517 421.85 li
187.6 421.85 li
187.6 422.6 li
187.517 422.6 li
187.85 422.6 li
188.017 421.85 li
188.183 421.85 li
188.017 422.6 li
187.933 423.35 li
188.017 423.35 li
187.933 424.183 li
187.85 424.933 li
187.767 424.933 li
187.683 425.767 li
187.6 425.767 li
188.017 425.767 li
188.1 424.933 li
188.183 424.933 li
188.017 424.933 li
188.183 424.933 li
187.933 424.933 li
187.85 425.767 li
187.85 426.517 li
187.933 427.267 li
188.183 427.267 li
188.35 428.1 li
188.267 428.1 li
188.433 428.1 li
188.35 428.1 li
188.433 428.1 li
188.517 428.85 li
188.267 428.85 li
188.767 428.85 li
188.767 428.1 li
188.933 428.1 li
189.017 427.267 li
189.267 427.267 li
189.183 426.517 li
189.35 426.517 li
189.767 425.767 li
189.85 426.517 li
190.1 426.517 li
190.517 427.267 li
190.767 427.267 li
190.85 428.1 li
190.517 428.1 li
190.933 428.1 li
190.517 428.1 li
190.6 428.1 li
190.433 428.1 li
190.517 428.85 li
190.85 428.85 li
190.683 428.85 li
190.767 429.6 li
190.6 429.6 li
190.767 430.433 li
191.017 430.433 li
190.933 430.433 li
191.017 430.433 li
190.6 430.433 li
190.683 429.6 li
190.767 429.6 li
190.683 429.6 li
190.767 428.85 li
190.933 428.85 li
191.35 428.85 191.767 428.85 192.183 428.85 cv
192.267 428.85 li
191.933 428.85 li
192.35 428.85 li
192.35 429.6 li
193.933 429.6 li
194.433 430.433 li
195.433 430.433 li
195.767 431.183 li
196.1 431.183 li
196.35 431.933 li
196.683 431.933 li
196.767 432.767 li
196.6 432.767 li
196.517 433.517 li
196.267 433.517 li
196.35 433.517 li
196.267 433.517 li
196.683 433.517 li
196.683 434.267 li
197.683 434.267 li
197.85 433.517 li
198.1 433.517 li
198.017 433.517 li
197.85 434.267 li
198.017 434.267 li
198.711 434.267 199.406 434.267 200.1 434.267 cv
200.183 434.267 li
200.267 435.1 li
200.517 435.1 li
200.517 435.85 li
200.683 435.85 li
200.767 436.683 li
200.85 437.433 li
201.017 437.433 li
201.683 438.183 li
203.433 438.183 li
204.433 437.433 li
204.85 437.433 li
205.183 436.683 li
205.35 435.85 li
205.6 435.85 li
205.433 435.85 li
205.35 436.683 li
205.267 436.683 li
205.35 437.433 li
205.433 438.183 li
205.767 438.183 li
205.933 437.433 li
205.767 437.433 li
205.85 437.433 li
205.6 437.433 li
205.517 438.183 li
206.183 438.183 li
206.1 438.183 li
206.517 439.017 li
206.85 439.017 li
206.85 439.767 li
206.517 439.767 li
206.683 440.517 li
206.6 440.517 li
206.683 440.517 li
206.517 440.517 li
206.933 439.767 li
207.517 439.767 li
207.433 439.767 li
207.6 439.767 li
207.433 439.767 li
207.6 440.517 li
207.683 440.517 li
207.767 441.35 li
207.6 441.35 li
207.767 441.35 li
207.933 442.1 li
207.85 441.35 li
208.433 441.35 li
208.35 441.35 li
208.517 441.35 li
208.517 442.1 li
208.767 442.1 li
208.683 442.1 li
209.183 441.35 li
209.433 441.35 li
209.35 440.517 li
209.517 440.517 li
@
177.017 409.35 mo
177.017 410.1 li
177.1 410.1 li
176.934 410.933 li
176.767 410.933 li
176.934 410.933 li
176.85 410.1 li
176.767 410.1 li
176.934 410.1 li
176.85 410.1 li
177.1 410.1 li
177.017 409.35 li
176.85 409.35 li
177.017 409.35 li
177.017 408.6 li
176.934 409.35 li
176.767 409.35 li
177.1 409.35 li
176.934 409.35 li
177.184 409.35 li
177.267 408.6 li
177.1 407.767 li
176.767 407.767 li
176.767 408.6 li
176.934 408.6 li
176.934 409.35 li
177.267 409.35 li
177.184 410.1 li
176.934 410.1 li
177.1 410.1 li
177.184 410.933 li
177.1 410.933 li
177.017 410.1 li
176.934 410.1 li
177.1 410.1 li
177.1 409.35 li
176.934 409.35 li
176.767 410.1 li
177.1 410.1 li
177.017 410.1 li
177.017 410.933 li
177.184 410.933 li
177.017 410.933 li
177.184 410.933 li
177.1 410.1 li
177.184 410.1 li
177.017 410.933 li
177.1 410.933 li
177.017 410.933 li
177.184 410.1 li
177.184 409.35 li
177.1 409.35 li
177.267 409.35 li
176.934 409.35 li
176.934 410.1 li
176.767 410.1 li
177.1 410.1 li
177.184 409.35 li
176.767 409.35 li
176.85 409.35 li
176.767 409.35 li
176.85 410.1 li
177.1 410.1 li
177.017 410.1 li
177.267 410.1 li
177.1 410.1 li
176.934 409.35 li
177.1 408.6 li
177.184 407.767 li
177.35 407.767 li
177.267 407.767 li
177.6 408.6 li
177.434 409.35 li
177.6 410.1 li
177.85 410.1 li
178.128 410.1 178.406 410.1 178.684 410.1 cv
178.767 410.1 li
178.517 410.1 li
178.434 410.933 li
177.6 410.933 li
177.767 410.933 li
177.684 410.1 li
177.85 410.1 li
177.684 410.1 li
177.684 411.683 li
177.434 411.683 li
177.684 411.683 li
177.6 410.933 li
177.6 410.1 li
177.517 410.1 li
177.6 409.35 li
177.434 409.35 li
177.35 410.1 li
176.684 410.1 li
176.35 410.933 li
175.267 410.933 li
175.267 411.683 li
175.184 411.683 li
174.934 412.433 li
174.434 412.433 li
174.35 411.683 li
174.6 411.683 li
174.684 410.933 li
174.934 410.933 li
174.934 410.1 li
175.184 410.1 li
175.1 410.1 li
175.434 410.1 li
175.184 410.1 li
175.434 410.1 li
175.434 409.35 li
175.684 409.35 li
175.767 410.1 li
175.434 410.1 li
175.517 409.35 li
175.434 409.35 li
175.767 408.6 li
175.767 407.767 li
175.6 407.767 li
175.6 409.35 li
175.517 409.35 li
175.767 409.35 li
175.517 409.35 li
175.184 410.1 li
175.35 410.1 li
175.6 410.933 li
175.85 410.933 li
175.767 410.1 li
175.6 410.1 li
175.767 410.1 li
175.6 410.1 li
175.684 409.35 li
175.767 409.35 li
175.85 408.6 li
175.767 407.767 li
175.684 407.767 li
175.767 408.6 li
175.85 408.6 li
175.517 408.6 li
175.6 409.35 li
175.767 409.35 li
175.767 408.6 li
176.1 408.6 li
175.85 408.6 li
175.934 408.6 li
175.85 407.767 li
176.1 407.767 li
176.1 408.6 li
175.934 409.35 li
175.934 410.1 li
175.85 410.1 li
175.767 410.933 li
175.684 410.933 li
175.767 410.1 li
175.6 410.1 li
175.6 409.35 li
175.85 409.35 li
175.85 408.6 li
175.767 409.35 li
175.85 409.35 li
175.767 409.35 li
176.017 409.35 li
176.017 407.767 li
176.267 407.767 li
176.1 407.767 li
176.184 407.767 li
176.1 407.767 li
176.1 408.6 li
176.434 408.6 li
176.517 407.767 li
176.517 408.6 li
176.6 408.6 li
176.6 409.35 li
176.184 409.35 li
176.267 408.6 li
176.184 408.6 li
176.184 407.767 li
176.267 407.767 li
176.184 407.767 li
176.1 408.6 li
175.85 408.6 li
175.934 409.35 li
176.017 409.35 li
176.184 408.6 li
175.767 408.6 li
175.767 409.35 li
175.684 409.35 li
175.85 409.35 li
175.684 408.6 li
175.767 408.6 li
175.6 407.767 li
175.684 407.767 li
175.767 407.017 li
175.684 406.267 li
175.517 406.267 li
175.684 406.267 li
175.767 407.017 li
175.684 407.017 li
175.6 407.767 li
175.517 408.6 li
175.35 410.1 li
175.1 410.933 li
175.267 410.933 li
175.267 410.1 li
175.184 410.1 li
175.267 409.35 li
175.267 408.6 li
175.35 408.6 li
175.434 407.767 li
175.434 408.6 li
175.267 408.6 li
175.684 408.6 li
175.517 409.35 li
175.85 409.35 li
175.35 409.35 li
175.267 410.1 li
175.434 410.1 li
175.184 410.1 li
175.184 409.35 li
175.1 409.35 li
175.434 408.6 li
175.267 409.35 li
175.6 409.35 li
175.6 410.1 li
@
197.35 388.267 mo
197.433 388.267 li
197.1 388.267 li
196.933 387.517 li
196.267 387.517 li
195.6 388.267 li
195.35 389.1 li
194.933 389.85 li
194.683 390.6 li
194.433 390.6 li
194.267 391.434 li
194.267 392.184 li
194.1 392.184 li
193.711 392.184 193.322 392.184 192.933 392.184 cv
192.683 392.184 li
192.517 392.934 li
192.267 392.934 li
191.239 392.934 190.211 392.934 189.183 392.934 cv
189.1 392.934 li
189.017 393.767 li
188.933 393.767 li
188.933 395.35 li
188.683 395.35 li
188.6 396.1 li
188.183 396.1 li
188.1 396.85 li
187.933 396.85 li
187.683 397.684 li
187.433 397.684 li
187.433 398.434 li
187.35 398.434 li
187.35 399.184 li
187.267 399.184 li
186.906 399.184 186.544 399.184 186.183 399.184 cv
186.017 399.184 li
186.1 399.184 li
186.017 400.017 li
185.767 400.017 li
185.767 399.184 li
185.017 399.184 li
185.017 400.017 li
184.933 400.017 li
184.767 400.767 li
184.6 400.767 li
184.85 400.767 li
184.517 400.767 li
184.517 401.6 li
184.85 401.6 li
184.683 401.6 li
184.683 402.35 li
184.517 402.35 li
184.517 403.934 li
184.35 403.934 li
184.183 404.684 li
184.267 404.684 li
184.267 405.434 li
184.017 405.434 li
184.1 406.267 li
184.267 406.267 li
184.183 406.267 li
184.183 407.017 li
184.267 407.017 li
183.85 407.017 li
183.85 406.267 li
183.767 406.267 li
183.85 406.267 li
183.767 406.267 li
183.933 407.017 li
183.85 407.017 li
183.767 407.767 li
183.6 408.6 li
183.517 408.6 li
183.683 408.6 li
183.6 408.6 li
183.683 407.767 li
183.933 407.767 li
183.767 407.767 li
183.933 407.767 li
183.85 408.6 li
183.6 408.6 li
183.6 409.35 li
183.683 410.1 li
183.517 410.934 li
183.683 410.934 li
183.35 410.934 li
183.433 410.934 li
183.683 411.684 li
183.433 411.684 li
183.6 411.684 li
183.35 411.684 li
183.517 411.684 li
183.35 411.684 li
183.433 412.434 li
183.35 412.434 li
183.767 412.434 li
183.85 411.684 li
183.767 411.684 li
183.85 412.434 li
184.1 412.434 li
184.35 413.267 li
184.517 413.267 li
185.183 414.017 li
185.85 414.017 li
186.1 414.85 li
186.433 414.85 li
179.1 414.85 li
177.183 415.6 li
176.35 415.6 li
176.433 416.35 li
176.6 416.35 li
175.6 416.35 li
175.683 415.6 li
176.1 415.6 li
176.1 414.85 li
176.183 414.017 li
176.1 413.267 li
176.433 413.267 li
176.433 412.434 li
176.517 413.267 li
176.933 413.267 li
176.85 414.017 li
177.017 414.017 li
176.933 414.017 li
177.017 414.017 li
176.933 414.017 li
177.017 414.017 li
176.933 413.267 li
177.183 413.267 li
177.1 412.434 li
176.933 412.434 li
177.017 412.434 li
177.1 413.267 li
177.35 413.267 li
177.1 413.267 li
177.1 412.434 li
177.267 412.434 li
177.183 412.434 li
177.1 413.267 li
177.267 413.267 li
177.1 413.267 li
177.017 412.434 li
177.183 412.434 li
177.1 411.684 li
176.933 411.684 li
176.933 412.434 li
176.85 412.434 li
177.017 412.434 li
177.1 411.684 li
177.35 410.934 li
177.433 410.934 li
177.35 410.1 li
177.183 410.1 li
177.1 410.934 li
177.35 410.934 li
177.183 411.684 li
177.1 411.684 li
177.183 411.684 li
177.183 412.434 li
177.1 412.434 li
177.183 412.434 li
177.1 412.434 li
177.017 411.684 li
176.683 411.684 li
176.85 412.434 li
177.017 412.434 li
176.933 413.267 li
176.85 413.267 li
176.85 412.434 li
177.1 412.434 li
176.933 412.434 li
176.933 411.684 li
177.1 411.684 li
177.1 410.934 li
176.933 410.934 li
176.933 410.1 li
177.183 410.1 li
177.183 409.35 li
177.267 408.6 li
177.267 407.767 li
176.933 407.767 li
177.017 407.017 li
176.933 407.017 li
177.1 407.017 li
177.1 407.767 li
177.183 407.767 li
177.433 408.6 li
177.517 408.6 li
177.433 409.35 li
177.017 409.35 li
177.1 409.35 li
177.017 409.35 li
177.433 409.35 li
177.267 409.35 li
177.6 409.35 li
177.517 410.1 li
177.267 410.1 li
177.433 410.1 li
177.35 409.35 li
177.1 409.35 li
177.1 408.6 li
176.933 408.6 li
176.933 409.35 li
176.6 409.35 li
176.6 410.1 li
177.017 410.1 li
176.767 410.1 li
176.85 410.1 li
176.85 409.35 li
177.6 409.35 li
177.6 408.6 li
177.433 408.6 li
177.35 407.767 li
177.267 408.6 li
177.183 408.6 li
177.183 409.35 li
177.1 410.1 li
177.433 410.1 li
177.183 409.35 li
177.267 409.35 li
177.017 409.35 li
@
189.933 363.35 mo
189.766 363.35 li
189.933 363.35 li
190.1 362.6 li
190.016 362.6 li
190.1 362.6 li
190.016 362.6 li
189.933 361.767 li
189.85 361.767 li
190.016 361.767 li
190.1 362.6 li
190.183 362.6 li
190.183 363.35 li
190.016 363.35 li
190.183 363.35 li
190.35 362.6 li
190.433 362.6 li
190.516 361.767 li
190.35 361.767 li
190.516 361.767 li
190.516 361.017 li
190.6 361.017 li
190.6 361.767 li
190.516 361.767 li
190.933 361.767 li
190.85 361.017 li
190.433 361.017 li
190.6 361.017 li
190.516 361.767 li
190.683 361.767 li
190.6 361.767 li
190.516 362.6 li
190.683 363.35 li
190.766 363.35 li
190.766 362.6 li
191.016 362.6 li
190.85 362.6 li
191.1 362.6 li
191.183 361.767 li
191.35 361.767 li
191.266 361.767 li
191.516 361.767 li
191.433 361.767 li
191.266 362.6 li
191.183 362.6 li
191.183 363.35 li
191.35 363.35 li
191.516 363.35 191.683 363.35 191.85 363.35 cv
192.016 363.35 li
191.85 364.1 li
191.683 364.1 li
191.85 364.1 li
191.85 364.933 li
191.85 363.35 li
191.933 363.35 li
192.183 362.6 li
192.433 362.6 li
192.35 361.767 li
192.433 361.767 li
192.266 361.767 li
192.266 361.017 li
192.183 361.017 li
192.183 360.267 li
192.1 360.267 li
192.516 360.267 li
192.516 361.017 li
192.6 361.767 li
192.516 362.6 li
192.433 363.35 li
192.683 363.35 li
192.516 363.35 li
192.683 363.35 li
192.683 364.1 li
192.6 364.1 li
192.683 364.933 li
192.766 365.683 li
193.016 365.683 li
192.933 366.433 li
192.933 365.683 li
192.85 365.683 li
192.85 364.933 li
192.933 364.933 li
193.1 364.1 li
193.683 364.1 li
193.516 364.1 li
193.766 364.933 li
193.933 364.933 li
194.1 365.683 li
194.183 365.683 li
194.1 365.683 li
194.016 364.933 li
193.933 364.933 li
194.016 364.1 li
193.933 364.1 li
194.016 364.1 li
193.933 364.1 li
194.016 364.1 li
194.016 364.933 li
194.1 364.933 li
193.933 364.933 li
194.1 364.933 li
194.016 365.683 li
194.266 366.433 li
194.183 366.433 li
194.183 365.683 li
194.433 365.683 li
194.35 365.683 li
194.6 365.683 li
194.516 366.433 li
194.35 366.433 li
194.766 366.433 li
194.683 366.433 li
194.683 367.267 li
194.35 367.267 li
194.433 367.267 li
194.6 368.017 li
194.683 368.017 li
194.6 367.267 li
195.1 367.267 li
195.016 367.267 li
195.35 367.267 li
195.1 367.267 li
195.016 368.017 li
195.183 368.017 li
195.183 368.767 li
195.35 368.767 li
195.266 368.767 li
195.433 368.767 li
195.35 368.767 li
195.35 369.6 li
195.516 370.35 li
195.433 371.183 li
195.183 371.183 li
195.266 371.183 li
195.183 371.933 li
195.516 371.933 li
195.433 371.933 li
195.516 371.933 li
195.35 371.183 li
195.516 371.183 li
195.6 370.35 li
195.683 370.35 li
195.6 370.35 li
195.6 371.183 li
196.016 371.183 li
195.933 371.933 li
196.1 372.683 li
196.183 373.517 li
196.016 373.517 li
196.016 374.267 li
196.266 374.267 li
196.266 375.017 li
196.1 375.017 li
196.433 375.017 li
196.183 375.017 li
196.183 374.267 li
196.1 375.017 li
196.016 375.017 li
196.183 375.017 li
196.016 375.017 li
196.016 375.85 li
196.433 375.85 li
196.266 376.6 li
196.516 376.6 li
196.433 376.6 li
196.6 376.6 li
196.516 375.85 li
196.683 375.85 li
196.6 375.85 li
196.683 375.85 li
196.683 376.6 li
196.6 376.6 li
196.6 378.183 li
196.433 378.933 li
196.433 379.683 li
196.766 379.683 li
196.6 379.683 li
196.683 378.933 li
197.1 378.933 li
196.933 378.933 li
196.933 379.683 li
196.766 379.683 li
196.85 379.683 li
196.766 379.683 li
196.85 379.683 li
196.766 379.683 li
196.933 379.683 li
197.016 380.517 li
196.933 380.517 li
197.016 381.267 li
196.85 382.1 li
196.933 382.1 li
196.933 382.85 li
196.6 382.85 li
196.683 382.85 li
196.683 383.6 li
196.183 383.6 li
196.183 384.433 li
196.683 384.433 li
196.433 384.433 li
196.433 385.183 li
195.6 385.183 li
195.516 384.433 li
195.6 384.433 li
195.683 385.183 li
195.766 385.183 li
195.766 385.933 li
195.683 385.933 li
195.6 386.767 li
195.433 386.767 li
195.35 385.933 li
194.933 385.933 li
194.683 386.767 li
194.6 386.767 li
194.6 385.933 li
194.016 385.933 li
194.266 385.183 li
194.85 385.183 li
194.85 385.933 li
195.683 385.933 li
196.016 386.767 li
196.6 386.767 li
196.85 387.517 li
197.266 388.267 li
197.35 388.267 li
@
175.183 361.767 mo
175.6 361.767 li
175.683 362.6 li
175.933 362.6 li
175.85 362.6 li
176.016 362.6 li
176.1 361.767 li
176.016 361.017 li
176.1 361.017 li
176.1 360.267 li
176.266 360.267 li
176.516 361.017 li
176.6 361.017 li
176.516 361.017 li
176.516 361.767 li
176.35 361.767 li
176.433 361.767 li
176.683 362.6 li
176.766 362.6 li
176.6 362.6 li
176.6 363.35 li
176.933 363.35 li
176.85 363.35 li
176.85 362.6 li
176.766 362.6 li
176.85 362.6 li
176.183 362.6 li
176.266 362.6 li
176.266 363.35 li
176.35 363.35 li
176.266 363.35 li
176.266 364.1 li
176.1 364.1 li
176.1 363.35 li
176.35 363.35 li
176.6 362.6 li
177.016 362.6 li
177.35 361.767 li
178.516 361.767 li
178.683 362.6 li
179.1 362.6 li
181.266 362.6 183.433 362.6 185.6 362.6 cv
185.683 362.6 li
185.683 361.767 li
185.766 361.767 li
185.766 361.017 li
185.433 360.267 li
185.35 360.267 li
185.183 359.434 li
184.933 359.434 li
184.766 358.684 li
183.6 358.684 li
183.6 359.434 li
183.1 359.434 li
183.183 360.267 li
183.1 360.267 li
183.183 361.017 li
183.1 361.767 li
183.016 361.767 li
182.933 362.6 li
182.85 361.767 li
182.933 361.767 li
182.933 361.017 li
183.016 361.017 li
182.85 360.267 li
182.933 360.267 li
183.016 359.434 li
183.1 359.434 li
182.933 359.434 li
183.1 359.434 li
183.183 360.267 li
183.183 361.017 li
183.266 361.017 li
183.183 361.767 li
183.516 361.767 li
183.6 361.017 li
183.766 361.017 li
183.683 361.017 li
183.766 361.017 li
183.85 360.267 li
184.35 360.267 li
184.183 360.267 li
184.35 360.267 li
184.266 360.267 li
184.35 360.267 li
184.433 361.017 li
184.683 361.017 li
184.683 361.767 li
184.766 361.767 li
184.766 361.017 li
184.683 361.017 li
184.85 361.017 li
184.683 361.017 li
184.933 361.017 li
184.85 361.017 li
184.85 361.767 li
184.766 361.767 li
184.85 361.767 li
184.85 361.017 li
184.933 361.017 li
184.85 360.267 li
185.016 359.434 li
184.933 359.434 li
185.1 359.434 li
185.1 360.267 li
185.433 360.267 li
185.433 361.017 li
185.266 361.017 li
185.35 361.017 li
185.183 361.017 li
185.433 361.017 li
185.35 361.017 li
185.516 361.017 li
185.433 361.017 li
185.766 361.767 li
186.016 361.017 li
186.1 361.017 li
185.85 361.017 li
186.016 361.017 li
186.016 361.767 li
186.183 361.767 li
186.1 361.767 li
186.183 362.6 li
186.183 361.767 li
186.266 361.767 li
186.016 361.767 li
186.1 362.6 li
186.6 362.6 li
186.516 362.6 li
186.6 362.6 li
186.516 362.6 li
187.016 362.6 li
186.85 361.767 li
186.766 361.767 li
186.85 361.767 li
186.683 361.767 li
186.6 362.6 li
186.766 362.6 li
186.683 362.6 li
186.766 362.6 li
186.683 362.6 li
186.683 361.767 li
186.85 361.767 li
186.766 362.6 li
186.933 362.6 li
186.85 361.767 li
186.933 361.767 li
186.85 361.017 li
187.016 361.017 li
187.1 361.767 li
187.1 363.35 li
187.016 363.35 li
187.1 362.6 li
187.266 361.767 li
187.6 361.767 li
187.6 361.017 li
187.433 361.017 li
187.433 360.267 li
187.6 360.267 li
187.6 361.017 li
187.683 361.017 li
187.6 361.767 li
188.016 361.767 li
187.933 361.767 li
187.933 361.017 li
187.85 361.017 li
187.933 361.017 li
187.766 360.267 li
187.85 360.267 li
187.766 361.017 li
187.933 361.017 li
187.85 361.017 li
188.183 361.017 li
188.266 361.767 li
188.016 361.767 li
188.016 362.6 li
188.183 362.6 li
188.183 363.35 li
188.266 363.35 li
188.266 362.6 li
188.433 362.6 li
188.433 361.017 li
188.183 361.017 li
188.516 361.017 li
188.433 361.767 li
188.516 361.767 li
188.433 361.767 li
188.433 362.6 li
188.683 362.6 li
188.683 363.35 li
188.766 363.35 li
188.683 363.35 li
188.683 362.6 li
188.6 361.767 li
188.683 361.767 li
188.683 361.017 li
188.85 361.017 li
188.766 361.017 li
188.933 361.017 li
188.85 361.017 li
188.933 361.017 li
188.933 360.267 li
188.766 360.267 li
189.183 360.267 li
189.1 360.267 li
189.016 361.017 li
189.183 361.017 li
189.183 361.767 li
189.266 362.6 li
189.35 362.6 li
189.266 362.6 li
189.516 362.6 li
189.6 361.767 li
189.516 361.767 li
189.6 361.767 li
189.516 361.767 li
189.6 361.767 li
189.516 361.767 li
189.766 361.767 li
189.766 362.6 li
189.683 363.35 li
190.016 363.35 li
189.85 363.35 li
189.766 362.6 li
189.683 362.6 li
189.85 362.6 li
189.85 363.35 li
190.016 363.35 li
189.933 363.35 li
190.016 363.35 li
189.933 363.35 li
@
164.516 365.684 mo
164.599 365.684 li
164.433 365.684 li
164.433 364.934 li
164.349 364.934 li
164.349 364.101 li
164.266 364.101 li
164.849 364.101 li
164.849 363.351 li
164.933 363.351 li
164.849 362.601 li
165.099 362.601 li
164.849 362.601 li
165.016 362.601 li
165.016 363.351 li
165.099 363.351 li
165.099 364.101 li
165.266 364.101 li
165.016 364.101 li
165.016 364.934 li
164.683 364.934 li
164.849 364.934 li
164.933 365.684 li
165.349 365.684 li
165.183 365.684 li
165.099 364.934 li
165.349 364.934 li
165.183 364.934 li
165.266 364.934 li
165.183 364.934 li
165.349 364.934 li
165.266 364.934 li
165.433 364.934 li
165.266 364.934 li
165.183 364.101 li
165.349 364.101 li
165.266 364.101 li
165.516 364.101 li
165.599 364.934 li
165.516 364.934 li
165.683 364.934 li
165.683 364.101 li
165.766 364.101 li
165.599 364.101 li
165.683 364.101 li
165.516 364.101 li
165.683 364.101 li
165.516 364.101 li
165.433 363.351 li
165.849 363.351 li
165.683 364.101 li
165.849 364.101 li
165.849 364.934 li
165.683 364.934 li
165.849 364.101 li
165.683 363.351 li
165.516 363.351 li
165.349 362.601 li
165.099 362.601 li
165.266 362.601 li
165.016 362.601 li
165.349 363.351 li
165.266 363.351 li
165.433 363.351 li
165.349 363.351 li
165.433 363.351 li
165.599 364.101 li
166.016 364.101 li
166.516 363.351 li
166.433 363.351 li
166.683 363.351 li
166.599 363.351 li
167.266 363.351 li
167.099 363.351 li
167.349 363.351 li
167.266 363.351 li
167.516 363.351 li
167.516 364.101 li
167.766 364.101 li
167.683 364.101 li
168.016 364.101 li
167.933 364.101 li
168.266 364.101 li
168.183 364.101 li
168.349 364.101 li
168.266 364.101 li
168.599 364.101 li
168.599 363.351 li
168.516 363.351 li
168.766 363.351 li
168.683 363.351 li
168.933 362.601 li
169.016 362.601 li
169.183 361.767 li
169.349 361.767 li
169.349 362.601 li
169.433 362.601 li
169.433 363.351 li
169.766 363.351 li
169.683 363.351 li
170.016 363.351 li
169.933 363.351 li
169.933 364.101 li
170.183 364.101 li
170.099 364.101 li
170.183 363.351 li
170.099 363.351 li
170.099 362.601 li
169.933 362.601 li
170.683 362.601 li
170.599 362.601 li
171.099 362.601 li
170.933 362.601 li
171.016 362.601 li
170.933 362.601 li
171.099 362.601 li
171.266 361.767 li
171.516 362.601 li
171.433 363.351 li
171.516 364.101 li
171.433 364.101 li
171.516 364.934 li
171.599 364.101 li
171.849 364.101 li
171.849 363.351 li
171.766 363.351 li
171.933 362.601 li
172.183 362.601 li
172.183 361.767 li
172.433 361.767 li
172.266 361.767 li
172.683 361.767 li
172.683 362.601 li
173.016 362.601 li
172.933 362.601 li
173.016 362.601 li
172.849 361.767 li
172.933 361.017 li
173.016 360.267 li
172.933 360.267 li
173.016 360.267 li
173.266 361.017 li
173.516 361.017 li
173.516 361.767 li
173.433 361.767 li
173.433 362.601 li
173.516 362.601 li
173.433 362.601 li
173.599 362.601 li
173.683 363.351 li
173.849 363.351 li
173.766 363.351 li
173.849 363.351 li
173.766 363.351 li
173.849 363.351 li
173.849 362.601 li
174.099 362.601 li
174.266 363.351 li
174.433 363.351 li
174.183 363.351 li
174.266 363.351 li
174.349 362.601 li
174.516 362.601 li
174.349 362.601 li
174.433 362.601 li
174.349 362.601 li
174.516 362.601 li
174.433 362.601 li
174.433 363.351 li
174.266 363.351 li
174.599 363.351 li
174.683 362.601 li
174.516 362.601 li
174.516 363.351 li
174.599 363.351 li
174.516 364.101 li
174.683 364.101 li
174.516 364.934 li
174.349 364.934 li
174.849 364.934 li
174.933 364.101 li
174.849 364.101 li
175.016 364.101 li
174.766 363.351 li
175.016 363.351 li
174.933 363.351 li
175.016 363.351 li
174.766 363.351 li
175.266 363.351 li
175.433 364.101 li
175.349 364.101 li
175.433 364.934 li
175.599 364.934 li
175.599 364.101 li
175.683 364.101 li
175.516 364.101 li
175.683 364.101 li
175.683 363.351 li
175.599 362.601 li
175.766 362.601 li
175.516 362.601 li
175.599 362.601 li
175.516 362.601 li
175.599 362.601 li
175.266 362.601 li
175.516 362.601 li
175.433 362.601 li
175.766 362.601 li
175.516 362.601 li
175.599 362.601 li
175.266 362.601 li
175.433 363.351 li
175.349 363.351 li
175.516 363.351 li
175.266 363.351 li
175.266 362.601 li
175.349 362.601 li
175.433 361.767 li
175.266 361.767 li
175.183 361.017 li
175.099 361.767 li
175.016 361.767 li
175.099 361.767 li
174.933 361.767 li
175.016 361.767 li
175.016 362.601 li
175.099 362.601 li
175.183 361.767 li
@
146.599 371.934 mo
146.516 371.934 li
146.849 371.934 li
146.932 371.184 li
147.182 371.184 li
147.182 370.351 li
147.516 370.351 li
147.432 370.351 li
147.849 369.601 li
148.099 369.601 li
148.016 369.601 li
148.016 368.767 li
148.182 368.767 li
148.099 368.017 li
148.849 368.017 li
148.849 368.767 li
148.932 368.767 li
148.849 368.767 li
149.099 369.601 li
149.516 370.351 li
149.516 371.184 li
149.682 371.184 li
149.599 371.184 li
149.932 371.934 li
149.766 371.934 li
150.182 371.184 li
150.099 371.184 li
150.266 370.351 li
150.182 370.351 li
150.599 370.351 li
150.349 369.601 li
150.599 369.601 li
150.432 369.601 li
150.349 368.767 li
150.682 368.767 li
150.599 368.767 li
150.849 368.767 li
150.849 369.601 li
150.932 369.601 li
150.849 369.601 li
151.099 369.601 li
151.016 370.351 li
151.349 370.351 li
151.266 369.601 li
151.349 368.767 li
151.266 368.767 li
151.182 368.017 li
151.099 368.017 li
151.266 368.767 li
151.182 368.767 li
151.182 369.601 li
150.766 369.601 li
150.682 368.767 li
150.932 368.767 li
150.682 368.767 li
151.016 368.767 li
150.932 368.767 li
151.016 368.767 li
150.932 368.767 li
151.016 368.767 li
151.016 369.601 li
151.099 369.601 li
151.016 370.351 li
151.099 370.351 li
150.932 370.351 li
151.099 370.351 li
151.016 369.601 li
151.349 369.601 li
151.266 369.601 li
151.349 370.351 li
151.432 370.351 li
151.349 370.351 li
151.599 369.601 li
151.516 369.601 li
151.599 368.767 li
151.516 368.767 li
151.682 368.767 li
151.849 368.017 li
152.099 368.017 li
152.099 368.767 li
152.516 368.767 li
152.432 368.767 li
152.516 368.017 li
152.599 368.017 li
152.599 367.267 li
152.766 367.267 li
152.766 368.017 li
153.016 368.017 li
153.099 368.767 li
153.682 368.767 li
153.849 369.601 li
153.766 369.601 li
154.016 369.601 li
154.016 370.351 li
154.349 370.351 li
154.516 369.601 li
154.682 369.601 li
154.682 368.767 li
155.182 368.767 li
155.182 369.601 li
155.516 369.601 li
155.432 369.601 li
155.516 369.601 li
155.432 369.601 li
155.599 370.351 li
155.849 370.351 li
155.849 369.601 li
156.016 369.601 li
156.099 368.767 li
156.266 368.767 li
156.266 368.017 li
156.349 368.017 li
156.182 368.017 li
156.516 368.017 li
156.599 368.767 li
156.849 368.767 li
156.766 368.017 li
156.932 368.017 li
156.849 367.267 li
157.349 367.267 li
157.266 367.267 li
157.349 367.267 li
157.349 368.017 li
157.599 368.017 li
157.766 368.767 li
158.099 368.767 li
157.849 368.767 li
157.766 368.017 li
158.432 368.017 li
158.349 368.767 li
158.516 368.767 li
158.432 368.767 li
158.766 368.767 li
158.849 368.017 li
159.016 368.017 li
159.266 367.267 li
159.349 367.267 li
159.266 366.434 li
159.432 366.434 li
159.349 366.434 li
159.516 367.267 li
159.266 367.267 li
159.516 367.267 li
159.599 366.434 li
159.766 366.434 li
159.599 366.434 li
159.682 367.267 li
159.766 367.267 li
159.599 368.017 li
159.766 368.017 li
159.766 368.767 li
159.932 368.767 li
160.016 368.017 li
159.932 368.017 li
160.016 367.267 li
160.099 366.434 li
159.932 366.434 li
160.182 366.434 li
160.182 365.684 li
160.266 365.684 li
160.182 365.684 li
160.349 366.434 li
160.432 366.434 li
160.516 367.267 li
160.766 367.267 li
160.766 368.017 li
160.849 368.017 li
160.682 368.017 li
160.766 368.017 li
160.682 368.017 li
161.099 368.017 li
161.016 367.267 li
161.099 367.267 li
161.182 366.434 li
161.099 366.434 li
161.099 365.684 li
161.182 365.684 li
161.099 365.684 li
161.099 366.434 li
161.182 366.434 li
161.182 367.267 li
161.266 367.267 li
161.099 367.267 li
161.182 366.434 li
161.599 366.434 li
161.682 365.684 li
161.599 365.684 li
161.682 365.684 li
161.766 364.934 li
161.932 364.934 li
161.849 364.934 li
161.932 365.684 li
162.182 365.684 li
161.849 366.434 li
161.932 366.434 li
161.849 366.434 li
161.932 365.684 li
162.266 365.684 li
162.432 364.934 li
162.849 364.934 li
162.682 365.684 li
162.766 365.684 li
162.599 365.684 li
162.682 366.434 li
162.849 366.434 li
163.016 367.267 li
163.266 367.267 li
162.932 367.267 li
163.099 367.267 li
163.099 366.434 li
163.182 366.434 li
163.182 365.684 li
163.432 365.684 li
163.349 365.684 li
163.516 365.684 li
163.432 365.684 li
163.682 365.684 li
163.516 365.684 li
163.766 365.684 li
163.516 366.434 li
163.932 366.434 li
163.849 366.434 li
164.266 366.434 li
164.182 365.684 li
164.266 365.684 li
164.266 364.101 li
164.099 364.101 li
164.266 364.101 li
164.182 364.101 li
164.266 364.101 li
164.182 364.101 li
164.432 364.101 li
164.349 364.934 li
164.432 364.934 li
164.516 365.684 li
@
133.766 375.851 mo
133.683 375.851 li
133.766 375.851 li
133.516 375.851 li
133.849 376.601 li
133.933 377.351 li
133.766 377.351 li
133.849 376.601 li
134.183 376.601 li
134.099 375.851 li
134.183 375.851 li
134.099 375.851 li
134.183 375.018 li
134.099 375.851 li
134.349 375.851 li
134.266 375.851 li
134.433 375.851 li
134.266 375.018 li
134.099 374.268 li
134.599 374.268 li
134.433 374.268 li
134.683 374.268 li
134.599 374.268 li
134.516 375.018 li
134.599 375.018 li
134.516 375.018 li
134.683 374.268 li
134.599 374.268 li
134.683 373.518 li
134.933 372.684 li
134.766 372.684 li
134.766 373.518 li
134.683 373.518 li
134.683 374.268 li
134.599 375.018 li
134.599 375.851 li
134.683 376.601 li
134.933 376.601 li
134.933 377.351 li
134.849 377.351 li
134.683 376.601 li
134.683 375.851 li
134.849 375.851 li
134.599 375.018 li
134.766 375.018 li
134.433 375.018 li
134.766 375.018 li
134.849 375.851 li
134.766 375.851 li
134.933 377.351 li
134.849 377.351 li
135.016 377.351 li
134.849 377.351 li
134.933 376.601 li
135.099 376.601 li
135.183 375.851 li
135.099 375.851 li
135.099 375.018 li
135.266 375.018 li
135.099 375.851 li
135.183 375.851 li
135.183 376.601 li
135.349 376.601 li
135.266 376.601 li
135.349 375.851 li
135.433 375.851 li
135.516 375.018 li
135.349 374.268 li
135.433 374.268 li
135.349 373.518 li
135.433 373.518 li
135.433 374.268 li
135.266 375.018 li
135.349 375.018 li
135.266 375.851 li
135.433 375.851 li
135.349 375.851 li
135.266 376.601 li
135.099 376.601 li
135.433 376.601 li
135.349 376.601 li
135.433 376.601 li
135.349 376.601 li
135.349 375.851 li
135.183 375.851 li
135.016 375.018 li
135.099 375.018 li
134.933 374.268 li
134.766 374.268 li
134.849 374.268 li
134.683 374.268 li
134.849 374.268 li
134.766 375.018 li
134.933 375.018 li
134.933 374.268 li
134.849 374.268 li
134.933 374.268 li
134.766 374.268 li
134.849 374.268 li
134.766 375.018 li
134.933 375.018 li
134.849 375.018 li
134.933 375.851 li
134.766 375.851 li
134.766 376.601 li
134.766 375.851 li
135.016 375.851 li
134.849 375.018 li
135.099 375.018 li
135.099 374.268 li
135.433 374.268 li
135.516 375.018 li
135.766 375.018 li
135.849 375.851 li
135.933 375.851 li
136.377 375.851 136.822 375.851 137.266 375.851 cv
137.349 375.851 li
137.266 375.851 li
137.349 375.851 li
137.516 375.018 li
137.683 375.018 li
137.683 374.268 li
137.766 373.518 li
138.016 373.518 li
138.099 372.684 li
137.849 372.684 li
137.766 371.934 li
138.516 371.934 li
138.516 372.684 li
138.849 372.684 li
138.849 373.518 li
138.933 373.518 li
139.016 374.268 li
139.516 374.268 li
139.433 375.018 li
139.349 375.018 li
139.349 374.268 li
139.766 374.268 li
139.933 373.518 li
140.183 373.518 li
140.099 373.518 li
140.266 373.518 li
140.349 374.268 li
140.266 374.268 li
140.599 374.268 li
140.766 373.518 li
140.516 373.518 li
140.683 373.518 li
140.516 373.518 li
140.683 372.684 li
140.849 372.684 li
140.683 372.684 li
140.849 372.684 li
140.766 372.684 li
140.933 372.684 li
140.933 373.518 li
141.099 373.518 li
141.016 373.518 li
141.099 373.518 li
141.349 374.268 li
141.599 374.268 li
141.683 373.518 li
141.766 372.684 li
142.266 372.684 li
142.183 372.684 li
142.266 373.518 li
142.599 373.518 li
142.433 373.518 li
142.683 373.518 li
142.599 372.684 li
142.766 372.684 li
142.766 371.934 li
143.099 371.934 li
143.016 371.934 li
143.183 371.934 li
143.016 371.934 li
143.266 371.934 li
143.099 371.934 li
143.183 371.934 li
143.099 371.184 li
143.266 371.184 li
143.183 371.184 li
143.516 371.184 li
143.516 371.934 li
143.683 371.934 li
143.599 371.934 li
143.683 371.934 li
143.433 371.934 li
143.683 371.934 li
143.683 372.684 li
143.599 372.684 li
143.683 373.518 li
143.516 373.518 li
143.849 373.518 li
143.766 373.518 li
144.016 372.684 li
144.183 371.934 li
144.016 371.934 li
144.183 371.184 li
144.016 371.184 li
144.433 371.184 li
144.433 371.934 li
144.516 371.934 li
144.433 371.934 li
144.516 372.684 li
144.433 372.684 li
144.599 372.684 li
144.516 372.684 li
144.766 372.684 li
144.766 371.934 li
144.516 371.934 li
144.683 371.934 li
144.599 371.184 li
145.016 371.184 li
144.933 371.184 li
145.349 371.184 li
145.433 370.351 li
145.516 370.351 li
145.433 370.351 li
145.516 370.351 li
145.266 370.351 li
145.349 371.184 li
145.599 371.184 li
145.599 371.934 li
145.766 371.934 li
145.766 372.684 li
145.599 372.684 li
145.683 372.684 li
145.516 372.684 li
145.766 372.684 li
145.683 372.684 li
145.849 372.684 li
145.849 371.934 li
146.016 371.934 li
145.933 371.184 li
145.849 371.184 li
146.433 371.184 li
146.266 371.184 li
146.599 371.934 li
@
113.933 380.518 mo
114.1 380.518 li
114.016 380.518 li
114.1 380.518 li
114.183 379.685 li
114.35 378.935 li
114.266 378.185 li
114.35 378.185 li
114.35 377.351 li
114.35 378.185 li
114.516 378.185 li
114.683 378.935 li
114.683 379.685 li
114.85 379.685 li
114.933 380.518 li
115.1 380.518 li
115.1 381.268 li
115.183 381.268 li
115.266 380.518 li
115.433 380.518 li
115.266 381.268 li
115.6 381.268 li
115.683 382.101 li
115.933 382.101 li
116.1 381.268 li
116.183 381.268 li
116.266 380.518 li
116.433 380.518 li
116.683 379.685 li
116.933 379.685 li
116.933 378.935 li
117.016 378.935 li
117.183 378.185 li
117.516 378.185 li
117.683 378.935 li
117.766 378.935 li
117.766 379.685 li
117.933 379.685 li
118.016 380.518 li
118.516 380.518 li
118.6 379.685 li
118.516 379.685 li
118.516 378.935 li
118.933 378.185 li
119.016 378.185 li
119.1 377.351 li
119.6 377.351 li
119.35 378.185 li
119.683 378.185 li
119.6 378.185 li
119.683 378.185 li
119.766 378.935 li
119.85 378.935 li
119.683 378.935 li
120.35 378.935 li
120.266 378.935 li
120.35 378.935 li
120.266 378.935 li
120.35 378.935 li
120.35 379.685 li
120.433 379.685 li
120.516 378.935 li
120.933 378.935 li
120.85 378.935 li
121.016 378.935 li
120.933 378.935 li
121.1 378.185 li
121.516 378.185 li
121.35 378.185 li
121.6 378.185 li
121.433 378.185 li
121.516 378.185 li
121.6 377.351 li
121.933 377.351 li
121.85 378.185 li
121.766 378.185 li
121.933 378.185 li
121.933 377.351 li
122.1 377.351 li
122.266 376.601 li
122.1 376.601 li
122.266 377.351 li
122.183 377.351 li
122.35 378.185 li
122.516 379.685 li
122.683 379.685 li
122.6 379.685 li
122.683 379.685 li
122.766 378.935 li
122.933 378.935 li
123.016 378.185 li
123.1 378.185 li
122.933 378.185 li
123.016 377.351 li
122.85 377.351 li
123.183 377.351 li
123.1 378.185 li
123.183 378.185 li
123.1 378.185 li
123.183 378.935 li
123.1 378.935 li
123.266 378.935 li
122.85 378.935 li
123.016 378.935 li
122.85 378.935 li
122.933 378.935 li
122.85 378.935 li
122.933 379.685 li
122.85 380.518 li
123.1 380.518 li
123.016 380.518 li
123.016 379.685 li
122.933 379.685 li
123.016 378.935 li
122.933 378.935 li
123.35 378.935 li
123.6 379.685 li
123.516 379.685 li
123.85 379.685 li
123.6 378.935 li
123.933 378.185 li
124.016 378.185 li
123.85 378.185 li
123.933 378.185 li
123.85 378.185 li
124.6 378.185 li
124.516 378.185 li
124.516 378.935 li
124.683 379.685 li
124.6 379.685 li
124.85 379.685 li
124.85 380.518 li
124.766 380.518 li
125.016 379.685 li
125.1 379.685 li
125.016 378.935 li
124.85 378.935 li
124.933 378.185 li
125.016 377.351 li
124.933 377.351 li
125.266 377.351 li
125.183 377.351 li
125.516 377.351 li
125.6 378.185 li
125.516 378.185 li
125.433 378.935 li
125.85 378.935 li
125.85 378.185 li
126.016 378.185 li
125.933 377.351 li
126.183 377.351 li
126.183 376.601 li
126.266 376.601 li
126.183 376.601 li
126.1 377.351 li
126.433 377.351 li
126.766 378.185 li
126.683 378.185 li
126.933 378.185 li
127.016 378.935 li
127.1 378.935 li
127.016 378.935 li
127.183 378.185 li
127.6 378.185 li
127.6 377.351 li
128.183 377.351 li
128.1 377.351 li
128.35 377.351 li
128.266 377.351 li
128.6 377.351 li
128.683 376.601 li
128.933 376.601 li
128.766 377.351 li
129.6 377.351 li
129.516 377.351 li
129.766 376.601 li
129.85 375.851 li
130.266 375.851 li
130.183 375.851 li
130.433 376.601 li
130.35 376.601 li
130.6 376.601 li
130.516 376.601 li
130.933 376.601 li
130.85 376.601 li
131.183 376.601 li
131.1 375.851 li
131.516 375.851 li
131.516 375.018 li
131.683 375.018 li
131.6 375.018 li
131.683 375.018 li
131.6 375.018 li
131.683 375.851 li
131.516 375.851 li
131.683 376.601 li
131.6 376.601 li
131.766 376.601 li
131.683 376.601 li
131.933 376.601 li
132.016 375.851 li
132.266 375.851 li
132.183 375.851 li
132.35 375.018 li
132.183 375.018 li
132.35 375.018 li
132.183 375.018 li
132.35 375.851 li
132.183 376.601 li
132.516 377.351 li
132.433 377.351 li
132.516 377.351 li
132.433 377.351 li
132.6 376.601 li
132.766 376.601 li
132.6 376.601 li
132.933 376.601 li
132.85 376.601 li
132.933 376.601 li
132.85 376.601 li
133.1 376.601 li
133.016 376.601 li
133.266 375.851 li
133.1 375.851 li
133.266 375.851 li
133.266 374.268 li
133.6 374.268 li
133.433 374.268 li
133.6 374.268 li
133.516 375.018 li
133.6 375.018 li
133.683 375.851 li
133.766 375.851 li
@
98.016 384.435 mo
98.183 384.435 li
98.405 384.435 98.627 384.435 98.849 384.435 cv
98.933 384.435 li
98.849 384.435 li
98.933 384.435 li
98.933 385.185 li
98.933 384.435 li
99.016 384.435 li
99.016 385.185 li
99.099 385.185 li
99.183 385.935 li
99.183 386.768 li
99.516 386.768 li
99.516 385.935 li
99.849 385.935 li
99.849 385.185 li
100.099 385.185 li
100.016 385.185 li
100.099 384.435 li
100.349 384.435 li
100.266 384.435 li
100.349 384.435 li
100.266 384.435 li
100.766 384.435 li
100.766 385.185 li
101.016 385.185 li
100.933 385.935 li
101.266 385.935 li
101.183 385.935 li
101.433 385.935 li
101.433 386.768 li
101.683 386.768 li
101.599 386.768 li
101.683 385.935 li
101.683 385.185 li
101.766 384.435 li
101.933 384.435 li
101.933 385.185 li
102.016 385.185 li
101.933 385.185 li
101.849 385.935 li
102.099 385.935 li
102.183 385.185 li
101.933 385.185 li
102.183 385.185 li
102.183 384.435 li
102.266 383.602 li
102.433 383.602 li
102.516 382.852 li
102.266 382.852 li
102.433 383.602 li
102.683 383.602 li
102.683 384.435 li
102.766 384.435 li
102.849 385.185 li
102.933 385.185 li
102.849 385.185 li
103.016 385.185 li
102.766 385.185 li
102.933 384.435 li
103.183 384.435 li
103.266 383.602 li
103.433 383.602 li
103.433 382.852 li
103.349 382.852 li
103.849 382.852 li
103.683 382.852 li
103.683 383.602 li
103.766 383.602 li
103.516 383.602 li
104.099 383.602 li
104.099 384.435 li
104.016 384.435 li
104.016 385.185 li
103.933 385.185 li
104.099 385.185 li
104.183 384.435 li
104.349 384.435 li
104.183 385.185 li
104.599 385.185 li
104.516 384.435 li
104.683 384.435 li
104.599 383.602 li
105.016 383.602 li
104.933 383.602 li
105.099 384.435 li
105.016 384.435 li
105.016 383.602 li
105.183 383.602 li
105.099 383.602 li
105.183 382.852 li
105.433 382.852 li
105.516 383.602 li
105.516 384.435 li
105.433 384.435 li
105.433 385.185 li
105.516 384.435 li
105.433 384.435 li
105.516 384.435 li
105.516 383.602 li
105.849 383.602 li
105.933 384.435 li
105.766 384.435 li
106.183 384.435 li
106.099 384.435 li
106.183 384.435 li
106.099 384.435 li
106.183 383.602 li
106.099 383.602 li
106.433 383.602 li
106.433 384.435 li
106.683 384.435 li
106.599 384.435 li
106.766 385.185 li
106.766 384.435 li
106.849 384.435 li
106.849 383.602 li
106.766 383.602 li
106.933 382.852 li
107.016 382.852 li
107.016 383.602 li
106.849 383.602 li
107.016 384.435 li
107.183 384.435 li
107.183 385.185 li
107.266 385.185 li
107.35 384.435 li
107.266 384.435 li
107.516 384.435 li
107.433 384.435 li
107.433 385.185 li
107.766 385.185 li
107.6 384.435 li
107.516 384.435 li
107.6 384.435 li
107.516 383.602 li
107.6 383.602 li
107.516 383.602 li
107.683 383.602 li
107.6 382.852 li
107.266 382.852 li
107.516 382.102 li
107.349 382.102 li
107.433 382.102 li
107.266 382.102 li
107.433 382.102 li
107.266 382.852 li
107.349 382.852 li
107.349 383.602 li
107.183 383.602 li
107.266 383.602 li
107.099 383.602 li
107.349 383.602 li
107.266 383.602 li
107.433 383.602 li
107.349 384.435 li
107.433 384.435 li
107.349 384.435 li
107.599 384.435 li
107.599 383.602 li
108.099 383.602 li
107.849 383.602 li
108.099 383.602 li
108.016 383.602 li
108.099 383.602 li
108.016 382.852 li
108.183 382.852 li
108.099 382.102 li
108.433 382.102 li
108.349 381.268 li
108.599 381.268 li
108.433 381.268 li
108.766 381.268 li
108.683 381.268 li
108.849 382.102 li
108.766 382.102 li
108.933 382.102 li
109.183 382.852 li
109.183 383.602 li
109.266 383.602 li
109.516 384.435 li
109.433 384.435 li
109.599 384.435 li
109.433 384.435 li
109.349 383.602 li
109.516 383.602 li
109.433 382.852 li
109.349 382.102 li
109.433 381.268 li
109.766 381.268 li
109.849 380.518 li
110.016 380.518 li
109.933 381.268 li
110.433 381.268 li
110.599 382.102 li
110.683 382.102 li
111.238 382.102 111.794 382.102 112.349 382.102 cv
112.516 382.102 li
112.433 381.268 li
112.516 382.102 li
112.433 382.102 li
112.599 382.102 li
112.766 382.852 li
113.016 382.852 li
113.1 382.102 li
113.183 382.102 li
113.433 381.268 li
113.349 380.518 li
113.433 380.518 li
113.516 379.685 li
113.933 379.685 li
113.85 379.685 li
113.933 379.685 li
114.1 380.518 li
114.016 380.518 li
114.183 380.518 li
114.1 381.268 li
114.516 381.268 li
114.1 381.268 li
114.1 380.518 li
114.35 380.518 li
114.183 379.685 li
114.266 379.685 li
114.1 380.518 li
113.933 380.518 li
@
81.433 385.935 mo
81.516 385.935 li
81.35 385.935 li
81.683 385.935 li
81.6 385.935 li
82.1 385.935 li
82.1 386.768 li
82.266 386.768 li
82.35 385.935 li
82.266 385.935 li
82.85 385.935 li
83.016 386.768 li
82.85 386.768 li
83.433 386.768 li
83.683 387.518 li
83.85 387.518 li
83.933 386.768 li
84.016 386.768 li
84.016 385.935 li
84.1 385.935 li
84.1 385.185 li
84.433 385.185 li
84.516 384.435 li
84.766 384.435 li
84.933 385.185 li
85.266 385.185 li
85.266 385.935 li
85.1 385.935 li
85.266 386.768 li
85.433 386.768 li
85.433 385.935 li
85.516 385.935 li
85.6 385.185 li
85.683 385.185 li
85.6 385.185 li
85.683 384.435 li
85.683 385.185 li
85.766 385.185 li
85.683 385.185 li
85.683 385.935 li
85.85 385.935 li
86.016 386.768 li
86.35 386.768 li
86.433 385.935 li
86.516 385.935 li
86.516 385.185 li
86.35 385.185 li
86.516 384.435 li
86.683 384.435 li
86.683 385.185 li
86.766 385.185 li
86.683 385.935 li
86.766 386.768 li
86.933 386.768 li
86.85 386.768 li
87.016 386.768 li
86.933 386.768 li
86.933 385.935 li
87.266 385.935 li
87.35 385.185 li
87.183 385.185 li
87.35 385.185 li
87.266 385.185 li
87.35 385.185 li
87.266 385.935 li
87.433 385.935 li
87.35 385.935 li
87.516 386.768 li
87.766 386.768 li
87.766 387.518 li
88.1 387.518 li
88.016 387.518 li
88.183 387.518 li
88.183 386.768 li
88.016 386.768 li
88.266 386.768 li
88.183 387.518 li
88.266 387.518 li
88.266 388.268 li
88.683 388.268 li
88.433 388.268 li
88.683 388.268 li
88.6 388.268 li
89.183 388.268 li
89.1 388.268 li
89.1 386.768 li
89.266 386.768 li
89.266 385.935 li
89.35 385.185 li
89.433 385.185 li
89.266 385.185 li
89.35 385.935 li
89.766 385.935 li
90.1 384.435 li
90.016 384.435 li
89.933 383.602 li
89.933 384.435 li
90.1 384.435 li
90.1 385.185 li
90.35 385.185 li
90.266 385.185 li
90.433 385.185 li
90.433 385.935 li
90.35 385.935 li
90.433 385.935 li
90.35 385.935 li
90.683 385.935 li
90.683 385.185 li
90.6 385.185 li
90.85 385.185 li
90.766 385.185 li
90.933 385.185 li
90.85 385.185 li
90.85 385.935 li
90.766 385.935 li
90.766 385.185 li
90.85 385.185 li
90.683 385.185 li
90.85 385.185 li
90.683 385.185 li
90.85 385.935 li
90.766 385.935 li
90.85 385.935 li
90.683 385.935 li
90.766 385.935 li
90.85 385.185 li
90.766 385.185 li
90.85 385.185 li
90.766 385.185 li
91.016 385.185 li
90.933 385.935 li
90.766 385.935 li
91.016 385.935 li
90.933 386.768 li
91.183 385.935 li
91.016 385.935 li
91.1 385.935 li
91.266 386.768 li
91.1 386.768 li
91.266 386.768 li
91.183 387.518 li
91.35 387.518 li
91.266 387.518 li
91.35 386.768 li
91.35 385.935 li
91.266 385.185 li
91.683 385.185 li
91.6 385.935 li
91.433 385.935 li
91.516 385.935 li
91.516 386.768 li
91.766 386.768 li
91.6 386.768 li
91.766 386.768 li
91.85 385.935 li
91.85 385.185 li
92.016 385.185 li
92.016 384.435 li
91.85 383.602 li
91.766 382.852 li
92.1 382.852 li
92.183 383.602 li
92.35 383.602 li
92.266 384.435 li
92.183 384.435 li
92.183 385.185 li
92.35 385.185 li
92.35 385.935 li
92.933 385.935 li
92.85 385.935 li
93.1 385.935 li
93.266 385.185 li
93.183 385.185 li
93.266 385.185 li
93.266 384.435 li
93.766 384.435 li
93.683 385.185 li
93.933 385.185 li
94.1 385.935 li
94.1 385.185 li
94.183 385.185 li
94.1 385.185 li
94.183 385.185 li
94.183 385.935 li
94.683 385.935 li
94.6 385.935 li
94.6 385.185 li
94.516 385.185 li
94.6 385.935 li
94.933 385.935 li
95.017 386.768 li
95.1 386.768 li
95.183 387.518 li
95.35 387.518 li
95.517 386.768 li
95.6 386.768 li
95.517 385.935 li
95.767 385.935 li
95.683 385.935 li
95.767 385.935 li
95.683 385.935 li
95.683 385.185 li
95.6 385.185 li
95.85 385.185 li
95.767 385.185 li
96.35 385.185 li
96.183 385.185 li
96.85 385.185 li
96.767 384.435 li
96.6 384.435 li
96.767 384.435 li
96.683 384.435 li
96.683 385.185 li
97.017 385.185 li
96.933 385.185 li
97.017 385.185 li
96.933 384.435 li
96.85 383.602 li
97.017 383.602 li
97.183 382.852 li
97.1 382.852 li
97.1 383.602 li
97.35 384.435 li
97.433 384.435 li
97.35 384.435 li
97.933 384.435 li
97.767 384.435 li
98.017 384.435 li
@
63.683 386.768 mo
63.516 386.768 li
63.766 385.935 li
63.683 385.935 li
63.683 385.185 li
63.933 385.185 li
63.85 385.185 li
63.85 386.768 li
63.766 387.518 li
63.933 388.268 li
64.183 388.268 li
64.1 388.268 li
64.433 388.268 li
64.35 387.518 li
64.266 387.518 li
64.1 386.768 li
64.183 385.935 li
64.35 385.935 li
64.516 386.768 li
64.35 386.768 li
64.766 386.768 li
64.85 387.518 li
65.016 387.518 li
64.85 387.518 li
64.933 387.518 li
64.766 387.518 li
65.016 387.518 li
64.933 386.768 li
64.766 386.768 li
64.85 386.768 li
64.933 385.935 li
65.016 385.935 li
65.1 385.185 li
65.433 385.185 li
65.433 385.935 li
65.6 385.935 li
65.35 385.935 li
65.516 385.935 li
65.516 386.768 li
65.6 386.768 li
65.683 387.518 li
65.85 387.518 li
65.683 387.518 li
65.683 386.768 li
65.85 386.768 li
65.766 386.768 li
65.85 387.518 li
66.266 387.518 li
66.35 386.768 li
66.516 386.768 li
66.6 385.935 li
67.1 385.935 li
66.85 385.935 li
66.85 385.185 li
67.1 385.185 li
67.183 385.935 li
67.1 385.935 li
67.183 385.935 li
67.183 386.768 li
67.35 386.768 li
67.183 387.518 li
67.266 387.518 li
67.35 386.768 li
67.183 386.768 li
67.266 386.768 li
67.266 385.935 li
67.516 385.935 li
67.266 385.935 li
67.433 386.768 li
67.933 386.768 li
67.85 385.935 li
68.266 385.935 li
68.183 385.935 li
68.516 385.935 li
68.35 385.935 li
68.433 386.768 li
68.516 386.768 li
68.35 386.768 li
68.433 387.518 li
68.433 388.268 li
68.35 388.268 li
68.35 386.768 li
68.516 386.768 li
68.683 385.935 li
68.766 385.935 li
68.766 385.185 li
68.85 385.185 li
68.766 385.185 li
68.85 385.185 li
68.766 385.185 li
68.683 385.935 li
68.933 386.768 li
69.016 386.768 li
68.933 387.518 li
69.016 387.518 li
68.766 388.268 li
68.85 388.268 li
68.683 388.268 li
68.85 388.268 li
68.683 388.268 li
68.933 387.518 li
69.016 386.768 li
69.183 386.768 li
69.1 385.935 li
69.266 386.768 li
69.183 386.768 li
69.266 386.768 li
69.183 387.518 li
69.266 387.518 li
69.1 388.268 li
69.183 388.268 li
69.266 387.518 li
69.85 387.518 li
69.6 387.518 li
69.85 387.518 li
69.766 387.518 li
70.1 387.518 li
69.933 387.518 li
70.1 387.518 li
70.016 387.518 li
70.183 386.768 li
70.266 386.768 li
69.85 386.768 li
70.183 386.768 li
70.266 387.518 li
70.1 387.518 li
70.433 387.518 li
70.433 386.768 li
70.266 386.768 li
70.516 386.768 li
70.6 387.518 li
70.516 387.518 li
70.766 387.518 li
70.766 386.768 li
70.933 386.768 li
71.016 385.935 li
71.433 385.935 li
71.35 385.935 li
71.516 386.768 li
71.683 386.768 li
71.683 388.268 li
71.933 388.268 li
71.933 387.518 li
72.016 386.768 li
72.016 385.185 li
71.933 385.185 li
72.183 385.185 li
72.35 384.435 li
72.1 384.435 li
72.016 385.185 li
72.1 385.185 li
72.016 385.935 li
71.766 385.935 li
71.683 386.768 li
71.766 386.768 li
71.6 386.768 li
71.683 387.518 li
71.85 387.518 li
71.933 388.268 li
73.1 388.268 li
73.267 387.518 li
73.6 387.518 li
74.044 387.518 74.489 387.518 74.933 387.518 cv
75.35 387.518 li
75.6 386.768 li
76.183 386.768 li
76.517 385.935 li
77.517 385.935 li
77.6 386.768 li
77.683 386.768 li
78.017 386.768 78.35 386.768 78.683 386.768 cv
78.767 386.768 li
78.85 387.518 li
79.35 387.518 li
79.267 388.268 li
79.6 388.268 li
79.517 389.101 li
79.433 389.101 li
79.85 389.101 li
80.017 388.268 li
79.767 388.268 li
79.85 388.268 li
79.683 388.268 li
79.517 387.518 li
79.683 387.518 li
79.683 386.768 li
79.933 386.768 li
80.017 385.935 li
79.933 385.935 li
80.017 385.935 li
79.85 385.935 li
79.85 386.768 li
80.183 386.768 li
80.183 387.518 li
80.267 387.518 li
80.183 387.518 li
80.35 387.518 li
80.433 388.268 li
80.6 388.268 li
80.517 387.518 li
80.767 387.518 li
80.767 386.768 li
80.933 386.768 li
80.767 385.935 li
81.017 385.185 li
81.1 384.435 li
81.183 384.435 li
81.35 385.185 li
81.433 385.935 li
81.6 385.935 li
81.433 385.935 li
@
gsave
44.183 466.517 mo
393.35 466.517 li
393.35 26.1 li
44.183 26.1 li
cp
clp
44.183 389.1 mo
46.35 389.1 li
47.1 388.267 li
48.1 388.267 li
48.6 387.517 li
49.516 387.517 li
50.016 386.767 li
50.766 385.933 li
51.85 385.933 li
52.516 385.183 li
53.183 385.183 li
53.016 384.433 li
53.183 384.433 li
53.1 384.433 li
53.35 384.433 li
53.1 384.433 li
53.183 384.433 li
53.1 384.433 li
53.183 383.6 li
53.016 383.6 li
53.016 384.433 li
53.183 384.433 li
53.016 385.183 li
53.1 385.183 li
52.933 385.183 li
53.1 385.183 li
53.1 384.433 li
53.35 384.433 li
53.266 383.6 li
53.433 383.6 li
53.266 383.6 li
53.35 383.6 li
53.516 384.433 li
53.6 384.433 li
53.683 385.183 li
53.85 385.933 li
53.766 385.933 li
53.933 385.933 li
53.766 386.767 li
54.266 386.767 li
54.266 385.933 li
54.6 385.933 li
54.6 385.183 li
54.683 385.183 li
54.6 385.183 li
54.516 384.433 li
54.683 384.433 li
54.85 383.6 li
55.6 383.6 li
55.683 384.433 li
55.6 384.433 li
55.933 385.183 li
56.1 385.933 li
56.183 386.767 li
56.516 386.767 li
56.433 386.767 li
56.683 386.767 li
56.683 385.933 li
56.766 385.933 li
56.933 385.183 li
57.183 385.183 li
57.183 385.933 li
57.35 385.933 li
57.516 386.767 li
57.35 386.767 li
57.6 386.767 li
57.516 386.767 li
57.683 386.767 li
57.683 387.517 li
58.016 387.517 li
57.933 386.767 li
58.1 386.767 li
58.266 385.933 li
58.35 385.183 li
58.266 385.183 li
58.266 384.433 li
58.766 384.433 li
58.766 385.183 li
59.016 385.183 li
59.016 385.933 li
59.183 385.933 li
59.183 386.767 li
59.35 386.767 li
59.266 386.767 li
59.35 385.933 li
59.183 385.933 li
59.35 385.183 li
59.266 385.183 li
59.516 384.433 li
59.35 384.433 li
59.683 384.433 li
59.6 384.433 li
59.683 384.433 li
59.6 385.183 li
59.933 385.183 li
59.933 385.933 li
59.85 385.933 li
59.933 385.933 li
59.85 385.933 li
60.266 385.933 li
60.266 385.183 li
60.683 385.183 li
60.516 385.183 li
60.933 385.933 li
61.1 385.183 li
61.266 385.183 li
61.266 384.433 li
61.433 384.433 li
61.35 385.183 li
61.516 385.183 li
61.35 385.933 li
61.516 385.933 li
61.516 386.767 li
61.6 386.767 li
61.516 386.767 li
61.766 386.767 li
61.683 386.767 li
61.85 386.767 li
61.766 386.767 li
62.1 386.767 li
62.017 386.767 li
62.183 386.767 li
62.183 385.933 li
61.766 385.933 li
62.183 385.933 li
62.183 385.183 li
62.35 385.183 li
62.183 385.183 li
62.266 385.183 li
62.433 385.933 li
62.35 385.933 li
62.266 385.183 li
62.183 385.183 li
62.35 384.433 li
62.516 384.433 li
62.433 384.433 li
62.433 385.183 li
62.767 385.183 li
62.683 385.183 li
62.85 385.933 li
62.6 385.933 li
62.433 386.767 li
62.85 386.767 li
62.433 386.767 li
62.35 385.933 li
62.6 385.933 li
62.516 385.933 li
62.683 386.767 li
62.6 386.767 li
62.766 387.517 li
62.683 387.517 li
62.85 388.267 li
63.1 388.267 li
63.016 388.267 li
63.183 388.267 li
63.1 388.267 li
63.183 388.267 li
63.1 388.267 li
63.35 388.267 li
63.266 388.267 li
63.517 388.267 li
63.433 388.267 li
63.6 388.267 li
63.6 387.517 li
63.683 387.517 li
63.6 387.517 li
63.933 387.517 li
63.767 386.767 li
63.683 386.767 li
@
393.35 28.1 mo
393.1 28.1 li
393.35 28.1 li
@
grestore
217.933 470.767 mo
259.766 470.767 li
259.766 444.434 li
217.933 444.434 li
cp
.00231937 0 .0662547 0 cmyk
f
0 lj
217.933 444.433 mo
259.766 444.433 li
259.766 470.766 li
217.933 470.766 li
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/colon <1C60D8A8C9B854D0F461D1A979903F917C33CF6EDB0A437B4DDC7150
150B60E1> |-
/X <1C60D8A8C9B64EDFF4DFD017B43F7EAB96365BACFBED2D71ADAE4E00FD12
B461A7F13C64E3A175013F8F17B0F966419CDFD1925B86CBC99EE22C73270B3D
B758F48A1908F21BEE4A7E0F431996B89DD71E609DF64575A71FFC> |-
/Y <1C60D8A8C9B64EDFFB70684E072B8DF628E28D14904BBCFEE7A51F476B6F
96EC861657AB39D7A0FFD2C8F278DA1F84C35526773AA865D18FF930CB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 32 /space put
dup 58 /colon put
dup 88 /X put
dup 89 /Y put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/.notdef /four /five /six /seven /eight /nine /colon 
29{/.notdef}rp /X /Y 166{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [8 0 0 -8 0 0 ]msf
221.933 455.85 mo
(X: 0.8261)
[5.33606 2.224 2.224 4.448 2.224 4.44801 4.448 4.448 0 ]xsh
221.933 465.016 mo
(Y: 5.959)
[5.33606 2.224 2.224 4.448 2.224 4.44801 4.448 0 ]xsh
210.1 445.267 mo
217.933 445.267 li
217.933 437.434 li
210.1 437.434 li
cp
f
2 lw
210.1 437.433 mo
217.933 437.433 li
217.933 445.266 li
210.1 445.266 li
cp
.00891127 0 .158572 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B7F374869C4D14FD697FCCAF1C53E703093C> |-
/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-
/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F
7F6ED1937D1E8A10> |-
/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3
AC927984C1E464F121F968> |-
/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117
C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47
CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EF
BF59B4862165C7DEA15B42BE3811C2CAA25C54> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06
742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81
A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF6
26A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA
1EAAF79B76AA2B52CCF0307B360E6D> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C56
63BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF
3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-
/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A0
65D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D55
9B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C2
47BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC
9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD8
8F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF57
5C72F67F4BEBB98F8AFA57505EC9> |-
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/k <1C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A32
0C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |-
/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5
BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99
C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB
9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C
54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B964
70F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330D
C4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556
CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1
E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F51
7D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F
992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE3879399
0906DA8D7F8ACFF6D70790F06B02> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 33 /minus put
dup 47 /slash put
dup 70 /F put
dup 78 /N put
dup 80 /P put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[32{/.notdef}rp /space /minus 12{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
/colon 11{/.notdef}rp /F 7{/.notdef}rp /N /.notdef /P 7{/.notdef}rp 
/X /Y 7{/.notdef}rp /a /b /c /d /e 
/f /g /.notdef /i /.notdef /k /.notdef /m 
/n /o /p /.notdef /r /s /.notdef /u 
138{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [10 0 0 -10 0 0 ]msf
119.433 18.1834 mo
(compression force !! backside gas pressure)
[5 5.56 8.32993 5.56 3.32993 5.56 5 5 2.22 5.56 5.56 2.78 
2.78 5.56 3.32993 5 5.56 2.78 5.84 5.84 2.78 5.56 5.56 5 
5 5.00002 2.21997 5.56 5.56 2.78003 5.56 5.56 5 2.77997 5.56 3.32996 
5.56 5 5 5.56 3.3299 0 ]xsh
206.016 490.433 mo
(p/kPa)
[5.56 2.78 5 6.67007 0 ]xsh
AWRLKA+ArialMT*1 [0 -10 -10 0 0 0 ]msf
15.0167 258.6 mo
(F/mN)
[-6.10992 -2.78 -8.32993 0 ]ysh
151.017 357.1 mo
188.35 357.1 li
188.35 330.767 li
151.017 330.767 li
cp
.00231937 0 .0662547 0 cmyk
f
.5 lw
151.017 330.767 mo
188.35 330.767 li
188.35 357.1 li
151.017 357.1 li
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
AWRLKA+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368A
FE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD1
0C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA76
98FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA
14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C0
2C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608
AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AWRLKA+ArialMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/AWRLKA+ArialMT*1 
[32{/.notdef}rp /space /minus 12{/.notdef}rp /period /slash /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon 11{/.notdef}rp /F 7{/.notdef}rp /N /.notdef /P 7{/.notdef}rp 
/X /Y 7{/.notdef}rp /a /b /c /d /e 
/f /g /.notdef /i /.notdef /k /.notdef /m 
/n /o /p /.notdef /r /s /.notdef /u 
138{/.notdef}rp]
AWRLKA+ArialMT nf
AWRLKA+ArialMT*1 [8 0 0 -8 0 0 ]msf
155.017 342.183 mo
(X: 0.734)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 0 ]xsh
155.017 351.35 mo
(Y: 6.886)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 0 ]xsh
186.933 364.933 mo
194.766 364.933 li
194.766 357.1 li
186.933 357.1 li
cp
f
2 lw
186.933 357.1 mo
194.766 357.1 li
194.766 364.933 li
186.933 364.933 li
cp
.00891127 0 .158572 0 cmyk
@
237.767 413.85 mo
279.6 413.85 li
279.6 387.517 li
237.767 387.517 li
cp
.00231937 0 .0662547 0 cmyk
f
.5 lw
237.767 387.517 mo
279.6 387.517 li
279.6 413.85 li
237.767 413.85 li
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1 /0 /CSD get_res sepcs
1 sep
AWRLKA+ArialMT*1 [8 0 0 -8 0 0 ]msf
241.767 398.933 mo
(X: 0.9049)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 4.448 0 ]xsh
241.767 408.1 mo
(Y: 6.616)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 0 ]xsh
229.933 388.35 mo
237.766 388.35 li
237.766 380.517 li
229.933 380.517 li
cp
f
2 lw
229.933 380.517 mo
237.766 380.517 li
237.766 388.35 li
229.933 388.35 li
cp
.00891127 0 .158572 0 cmyk
@
245.85 346.933 mo
287.683 346.933 li
287.683 320.6 li
245.85 320.6 li
cp
.00231937 0 .0662547 0 cmyk
f
.5 lw
245.85 320.6 mo
287.683 320.6 li
287.683 346.933 li
245.85 346.933 li
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1 /0 /CSD get_res sepcs
1 sep
AWRLKA+ArialMT*1 [8 0 0 -8 0 0 ]msf
249.85 332.017 mo
(X: 0.9371)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 4.448 0 ]xsh
249.85 341.183 mo
(Y: 7.003)
[5.33606 2.224 2.224 4.448 2.224 4.448 4.448 0 ]xsh
238.017 354.767 mo
245.85 354.767 li
245.85 346.934 li
238.017 346.934 li
cp
f
2 lw
238.017 346.933 mo
245.85 346.933 li
245.85 354.766 li
238.017 354.766 li
cp
.00891127 0 .158572 0 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/AWRLKA+ArialMT*1 uf
/AWRLKA+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
