%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP4DEE.tmp.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/06/12, 18:56:19
%%BoundingBox: 0 0 352 226
%%HiResBoundingBox: 0 0 351.0266 225.9601
%%CropBox: 0 0 351.0266 225.9601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1050 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2014-06-12T18:55:41+08:00"
   xmp:CreatorTool="MATLAB, The MathWorks, Inc. Version 8.2.0.701 (R2013b). Operating System: Microsoft Windows 8."
   xmp:ModifyDate="2014-06-12T18:55:41+08:00"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:4862e9c5-c309-42eb-91f0-f04452ebb3b4"
   xmpMM:InstanceID="uuid:672f18ad-03a8-4fc4-b1e2-d69723f1cdb5">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">D:\my\mech\e-chuck (local)\_thesis\figures\exp\overshoot-fix.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -225.96 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 225.96 li
351.027 225.96 li
351.027 0 li
cp
clp
36.0249 198.627 mo
326.858 198.627 li
326.858 17.127 li
36.0249 17.127 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
36.0249 198.627 mo
36.0249 17.127 li
326.858 17.127 li
326.858 198.627 li
36.0249 198.627 li
@
36.0249 17.127 mo
326.858 17.127 li
1 /0 /CSD get_res sepcs
1 sep
@
36.0249 198.627 mo
326.858 198.627 li
326.858 17.127 li
@
36.0249 198.627 mo
36.0249 17.127 li
@
36.0249 198.627 mo
326.858 198.627 li
@
36.0249 198.627 mo
36.0249 17.127 li
@
67.9419 198.627 mo
67.9419 195.71 li
@
67.9419 17.127 mo
67.9419 19.96 li
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
def
/FontBBox {-665 -325 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/HAHOMU+ArialMT /ArialMT findfont ct_VMDictPut
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
62.4419 210.71 mo
(10)
[5.56 0 ]xsh
100.275 198.627 mo
100.275 195.71 li
@
100.275 17.127 mo
100.275 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
94.7752 210.71 mo
(20)
[5.56 0 ]xsh
132.525 198.627 mo
132.525 195.71 li
@
132.525 17.127 mo
132.525 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368A
FE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD1
0C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA76
98FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA
14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C0
2C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608
AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
127.025 210.71 mo
(30)
[5.56 0 ]xsh
164.859 198.627 mo
164.859 195.71 li
@
164.859 17.127 mo
164.859 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
159.359 210.71 mo
(40)
[5.56 0 ]xsh
197.192 198.627 mo
197.192 195.71 li
@
197.192 17.127 mo
197.192 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001B
CD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB
63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF20
0B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC4
9372EF96DD9EB13A793559C13CFDFE477> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
191.692 210.71 mo
(50)
[5.56 0 ]xsh
229.525 198.627 mo
229.525 195.71 li
@
229.525 17.127 mo
229.525 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
201{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
224.025 210.71 mo
(60)
[5.56 0 ]xsh
261.775 198.627 mo
261.775 195.71 li
@
261.775 17.127 mo
261.775 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031
CB3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0
F55546101EE3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 200{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
256.275 210.71 mo
(70)
[5.56 0 ]xsh
294.109 198.627 mo
294.109 195.71 li
@
294.109 17.127 mo
294.109 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 199{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
288.609 210.71 mo
(80)
[5.56 0 ]xsh
326.442 198.627 mo
326.442 195.71 li
@
326.442 17.127 mo
326.442 19.96 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6
DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435
C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D
5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807
E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3
072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA
27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E
17188994F16> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
320.942 210.71 mo
(90)
[5.56 0 ]xsh
36.0249 197.21 mo
38.8579 197.21 li
@
326.858 197.21 mo
323.941 197.21 li
@
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.6086 200.877 mo
(0)sh
36.0249 165.877 mo
38.8579 165.877 li
@
326.858 165.877 mo
323.941 165.877 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /seven /eight /nine 198{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
19.2752 169.543 mo
(0.2)
[5.56 2.78 0 ]xsh
36.0249 134.627 mo
38.8579 134.627 li
@
326.858 134.627 mo
323.941 134.627 li
@
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
19.2752 138.293 mo
(0.4)
[5.56 2.78 0 ]xsh
36.0249 103.293 mo
38.8579 103.293 li
@
326.858 103.293 mo
323.941 103.293 li
@
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
19.2752 106.96 mo
(0.6)
[5.56 2.78 0 ]xsh
36.0249 72.043 mo
38.8579 72.043 li
@
326.858 72.043 mo
323.941 72.043 li
@
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
19.2752 75.71 mo
(0.8)
[5.56 2.78 0 ]xsh
36.0249 40.71 mo
38.8579 40.71 li
@
326.858 40.71 mo
323.941 40.71 li
@
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
27.6086 44.3767 mo
(1)sh
36.0249 17.127 mo
326.858 17.127 li
@
36.0249 198.627 mo
326.858 198.627 li
326.858 17.127 li
@
36.0249 198.627 mo
36.0249 17.127 li
@
309.275 27.96 mo
309.275 27.877 li
309.358 28.043 li
309.608 28.293 li
309.692 28.127 li
309.692 27.96 li
309.858 27.96 li
309.858 27.877 li
309.942 27.793 li
310.108 27.793 li
310.025 27.793 li
310.108 27.793 li
310.192 27.71 li
310.192 27.543 li
310.275 27.627 li
310.358 27.543 li
310.358 27.71 li
310.442 27.627 li
310.525 27.543 li
310.525 27.46 li
310.692 27.46 li
310.608 27.46 li
310.775 27.627 li
310.775 27.543 li
310.775 27.627 li
310.858 27.627 li
310.858 27.46 li
310.942 27.46 li
310.942 27.627 li
311.025 27.543 li
311.108 27.543 li
311.192 27.46 li
311.275 27.293 li
311.358 27.377 li
311.358 27.293 li
311.442 27.21 li
311.442 27.127 li
311.525 26.96 li
311.525 27.127 li
311.692 26.96 li
311.692 26.877 li
311.775 26.96 li
311.942 26.793 li
311.942 26.96 li
312.025 26.877 li
312.108 26.877 li
312.192 26.96 li
312.275 27.127 li
312.442 26.96 li
312.358 26.96 li
312.442 26.96 li
312.608 26.793 li
312.775 26.793 li
312.858 26.71 li
312.942 26.793 li
312.942 26.71 li
313.108 26.71 li
313.025 26.71 li
313.108 26.627 li
313.192 26.71 li
313.275 26.627 li
313.358 26.543 li
313.442 26.71 li
313.525 26.71 li
313.525 26.543 li
313.608 26.71 li
313.608 26.793 li
313.608 26.71 li
313.692 26.71 li
313.775 26.627 li
313.858 26.71 li
313.942 26.71 li
314.025 26.543 li
314.025 26.46 li
314.108 26.377 li
314.192 26.377 li
314.275 26.46 li
314.358 26.377 li
314.358 26.46 li
314.525 26.46 li
314.442 26.46 li
314.525 26.377 li
314.608 26.377 li
314.608 26.21 li
314.692 26.21 li
314.692 26.377 li
314.775 26.46 li
314.858 26.377 li
315.025 26.377 li
314.942 26.377 li
315.025 26.377 li
315.192 26.21 li
315.192 26.127 li
315.275 26.043 li
315.275 26.293 li
315.358 26.21 li
315.442 26.21 li
315.525 26.127 li
315.525 25.877 li
315.608 25.877 li
315.692 26.043 li
315.692 25.96 li
315.858 25.96 li
315.775 25.96 li
315.858 25.96 li
316.025 25.793 li
316.108 25.877 li
316.108 25.793 li
316.192 25.71 li
316.192 25.793 li
316.275 25.877 li
316.275 25.71 li
316.358 25.627 li
316.358 25.543 li
316.358 25.627 li
316.442 25.543 li
316.525 25.543 li
316.608 25.46 li
316.692 25.543 li
316.692 25.46 li
316.692 25.543 li
316.775 25.46 li
316.858 25.543 li
316.942 25.543 li
317.025 25.46 li
317.025 25.543 li
317.108 25.627 li
317.108 25.46 li
317.192 25.543 li
317.192 25.377 li
317.192 25.46 li
317.275 25.46 li
317.275 25.627 li
317.358 25.543 li
317.442 25.543 li
317.525 25.627 li
317.608 25.71 li
317.692 25.627 li
317.692 25.543 li
317.775 25.627 li
317.775 25.543 li
317.775 25.627 li
317.858 25.543 li
318.025 25.377 li
317.942 25.377 li
318.025 25.377 li
318.108 25.46 li
318.108 25.543 li
318.192 25.46 li
318.192 25.543 li
318.358 25.377 li
318.358 25.21 li
318.442 25.293 li
318.525 25.377 li
318.775 25.377 li
318.692 25.377 li
318.942 25.127 li
318.942 25.043 li
319.025 25.127 li
319.025 25.21 li
319.109 25.127 li
319.109 25.043 li
319.192 24.96 li
319.192 25.127 li
319.359 24.96 li
319.359 24.71 li
319.442 24.793 li
319.525 24.793 li
319.609 24.71 li
319.609 24.793 li
319.775 24.793 li
319.692 24.793 li
319.775 24.793 li
319.859 24.877 li
320.025 24.71 li
320.025 24.627 li
320.109 24.543 li
320.192 24.627 li
320.275 24.627 li
320.359 24.71 li
320.359 24.543 li
320.442 24.46 li
320.442 24.543 li
320.609 24.543 li
320.525 24.543 li
320.609 24.543 li
320.692 24.627 li
320.692 24.46 li
320.775 24.543 li
320.775 24.627 li
320.859 24.46 li
320.859 24.543 li
320.859 24.46 li
320.942 24.46 li
321.025 24.377 li
321.192 24.377 li
321.192 24.127 li
321.275 24.21 li
321.275 24.293 li
321.359 24.21 li
321.525 24.21 li
321.525 24.127 li
321.609 24.21 li
321.609 24.293 li
321.692 24.127 li
321.942 23.877 li
321.942 23.96 li
321.942 23.877 li
322.025 23.877 li
322.109 23.96 li
322.359 23.96 li
322.275 23.96 li
322.359 23.877 li
322.442 24.043 li
322.442 24.127 li
322.525 23.96 li
322.525 23.793 li
322.692 23.793 li
322.775 23.877 li
322.859 23.793 li
322.859 23.627 li
322.942 23.627 li
323.025 23.543 li
323.025 23.627 li
323.192 23.46 li
323.109 23.46 li
323.275 23.627 li
323.275 23.793 li
323.525 23.543 li
323.442 23.543 li
323.525 23.627 li
323.692 23.46 li
323.775 23.543 li
323.775 23.46 li
323.859 23.543 li
323.859 23.377 li
323.942 23.377 li
324.025 23.293 li
324.025 23.21 li
324.192 23.377 li
324.275 23.293 li
324.275 23.043 li
324.359 22.96 li
324.359 22.877 li
324.442 22.96 li
324.442 23.127 li
324.525 23.127 li
324.609 23.21 li
324.692 23.127 li
324.692 23.043 li
324.692 23.127 li
324.775 23.043 li
324.775 23.127 li
324.859 23.043 li
324.859 23.21 li
324.942 23.127 li
325.109 23.127 li
325.109 23.293 li
325.192 23.21 li
325.275 23.127 li
325.442 23.127 li
325.359 23.127 li
325.442 23.043 li
325.609 23.043 li
325.609 22.877 li
325.775 22.877 li
325.692 22.877 li
325.775 22.877 li
325.942 22.71 li
325.859 22.71 li
325.942 22.71 li
326.025 22.793 li
326.192 22.627 li
326.109 22.627 li
326.359 22.627 li
326.359 22.46 li
326.442 22.543 li
.883665 .769161 0 0 cmyk
@
291.775 33.71 mo
291.858 33.793 li
291.858 33.627 li
291.942 33.71 li
292.192 33.71 li
292.275 33.627 li
292.358 33.46 li
292.358 33.71 li
292.442 33.627 li
292.525 33.543 li
292.525 33.627 li
292.692 33.627 li
292.608 33.627 li
292.692 33.627 li
292.858 33.46 li
293.025 33.293 li
293.192 33.293 li
293.192 33.46 li
293.275 33.377 li
293.275 33.293 li
293.442 33.293 li
293.358 33.293 li
293.442 33.377 li
293.525 33.293 li
293.608 33.377 li
293.692 33.377 li
293.858 33.21 li
293.775 33.21 li
293.858 33.21 li
293.942 33.293 li
293.942 33.21 li
293.942 33.293 li
294.025 33.377 li
294.025 33.46 li
294.108 33.377 li
294.192 33.377 li
294.275 33.21 li
294.275 33.377 li
294.358 33.293 li
294.358 33.377 li
294.442 33.293 li
294.442 33.377 li
294.525 33.293 li
294.525 33.377 li
294.608 33.293 li
294.608 33.377 li
294.775 33.127 li
294.775 32.96 li
294.858 32.96 li
294.942 32.877 li
294.942 32.96 li
295.025 33.043 li
295.192 32.877 li
295.192 32.96 li
295.192 32.877 li
295.275 32.793 li
295.275 32.71 li
295.358 32.793 li
295.358 32.877 li
295.358 32.793 li
295.442 32.793 li
295.525 32.71 li
295.608 32.877 li
295.608 32.793 li
295.775 32.627 li
295.858 32.627 li
295.942 32.543 li
295.942 32.627 li
296.025 32.543 li
296.108 32.543 li
296.358 32.293 li
296.358 32.21 li
296.442 32.293 li
296.442 32.21 li
296.525 32.293 li
296.525 32.043 li
296.775 32.043 li
296.692 32.043 li
296.775 32.043 li
296.858 31.96 li
296.942 31.877 li
297.025 31.877 li
297.025 31.71 li
297.358 31.71 li
297.358 31.627 li
297.442 31.627 li
297.525 31.543 li
297.608 31.377 li
297.608 31.293 li
297.608 31.46 li
297.692 31.543 li
297.858 31.377 li
297.858 31.293 li
297.942 31.377 li
297.942 31.293 li
297.942 31.377 li
298.025 31.293 li
298.275 31.293 li
298.192 31.293 li
298.275 31.377 li
298.358 31.293 li
298.358 31.21 li
298.442 31.043 li
298.608 31.043 li
298.525 31.043 li
298.608 31.127 li
298.692 31.127 li
298.775 31.043 li
298.942 31.043 li
298.858 31.043 li
299.025 30.877 li
299.275 30.877 li
299.275 30.793 li
299.358 30.877 li
299.442 30.793 li
299.442 30.877 li
299.525 30.793 li
299.525 30.71 li
299.692 30.71 li
299.692 30.627 li
299.775 30.543 li
299.858 30.71 li
300.025 30.543 li
300.025 30.627 li
300.108 30.543 li
300.108 30.627 li
300.192 30.46 li
300.275 30.627 li
300.275 30.543 li
300.358 30.46 li
300.358 30.543 li
300.442 30.627 li
300.442 30.543 li
300.525 30.627 li
300.525 30.543 li
300.525 30.627 li
300.775 30.377 li
300.775 30.293 li
300.859 30.21 li
300.859 30.293 li
300.942 30.21 li
300.942 30.293 li
300.942 30.21 li
301.025 30.293 li
301.192 30.293 li
301.109 30.293 li
301.275 30.127 li
301.359 30.21 li
301.359 30.377 li
301.442 30.21 li
301.525 30.293 li
301.525 30.127 li
301.609 30.127 li
301.692 30.21 li
301.775 30.127 li
301.775 30.293 li
301.942 30.127 li
301.942 30.043 li
302.192 30.043 li
302.192 29.96 li
302.275 30.043 li
302.275 29.96 li
302.275 30.043 li
302.442 29.877 li
302.525 29.96 li
302.525 30.127 li
302.609 30.043 li
302.775 30.043 li
302.859 30.127 li
302.859 30.043 li
302.859 30.127 li
302.942 30.21 li
303.109 30.21 li
303.109 30.127 li
303.192 30.127 li
303.275 30.043 li
303.359 30.127 li
303.525 30.127 li
303.525 29.96 li
303.692 29.96 li
303.609 29.96 li
303.692 29.96 li
303.775 29.877 li
303.859 29.877 li
303.942 29.96 li
303.942 29.793 li
303.942 29.877 li
304.109 29.71 li
304.275 29.877 li
304.275 29.793 li
304.275 29.877 li
304.359 29.71 li
304.525 29.543 li
304.609 29.627 li
304.609 29.71 li
304.775 29.543 li
304.775 29.377 li
304.859 29.46 li
304.859 29.543 li
305.025 29.377 li
305.025 29.46 li
305.025 29.377 li
305.109 29.46 li
305.109 29.377 li
305.109 29.46 li
305.192 29.543 li
305.275 29.46 li
305.275 29.543 li
305.359 29.46 li
305.442 29.377 li
305.692 29.627 li
305.692 29.293 li
305.775 29.377 li
305.859 29.46 li
305.859 29.293 li
305.942 29.377 li
305.942 29.293 li
306.025 29.46 li
306.192 29.21 li
306.192 29.127 li
306.275 29.127 li
306.359 29.043 li
306.359 29.127 li
306.442 28.96 li
306.442 29.043 li
306.442 28.96 li
306.525 28.96 li
306.525 28.71 li
306.609 28.793 li
306.609 28.877 li
306.692 28.71 li
306.692 28.793 li
306.775 28.877 li
306.942 28.877 li
306.942 28.96 li
307.109 28.793 li
307.109 28.877 li
307.192 28.96 li
307.192 28.793 li
307.359 28.793 li
307.275 28.793 li
307.359 28.877 li
307.442 28.877 li
307.609 28.71 li
307.609 28.793 li
307.609 28.71 li
307.692 28.793 li
307.692 28.71 li
307.775 28.793 li
307.859 28.877 li
307.859 28.71 li
307.942 28.793 li
308.025 28.71 li
308.025 28.543 li
308.109 28.46 li
308.192 28.377 li
308.275 28.46 li
308.359 28.377 li
308.442 28.46 li
308.609 28.293 li
308.609 28.377 li
308.775 28.293 li
308.692 28.293 li
308.775 28.21 li
308.859 28.21 li
308.942 28.127 li
309.025 28.043 li
309.109 27.96 li
309.192 28.043 li
309.275 27.96 li
@
275.692 39.627 mo
275.692 39.46 li
275.775 39.544 li
275.775 39.46 li
275.859 39.377 li
275.859 39.46 li
275.942 39.377 li
275.942 39.21 li
276.109 39.377 li
276.275 39.377 li
276.192 39.377 li
276.275 39.21 li
276.359 39.294 li
276.442 39.21 li
276.442 39.044 li
276.525 39.127 li
276.609 39.044 li
276.692 39.127 li
276.775 38.96 li
276.859 38.96 li
276.942 39.044 li
277.109 38.877 li
277.025 38.877 li
277.109 38.877 li
277.192 38.794 li
277.275 38.71 li
277.359 38.71 li
277.359 38.544 li
277.525 38.377 li
277.525 38.294 li
277.525 38.377 li
277.692 38.377 li
277.609 38.377 li
277.692 38.294 li
277.775 38.377 li
277.775 38.294 li
277.775 38.377 li
277.859 38.21 li
278.025 38.377 li
278.109 38.377 li
278.192 38.294 li
278.192 38.21 li
278.359 38.21 li
278.359 38.127 li
278.359 38.21 li
278.525 38.21 li
278.525 38.044 li
278.609 38.127 li
278.692 38.044 li
278.775 37.96 li
278.942 38.127 li
278.942 38.044 li
279.025 37.96 li
279.192 37.794 li
279.109 37.794 li
279.192 37.877 li
279.275 37.96 li
279.442 37.794 li
279.442 37.627 li
279.525 37.544 li
279.692 37.71 li
279.692 37.627 li
279.775 37.71 li
279.775 37.627 li
279.942 37.627 li
279.859 37.627 li
279.942 37.46 li
280.025 37.46 li
280.025 37.294 li
280.192 37.46 li
280.109 37.46 li
280.192 37.294 li
280.359 37.294 li
280.359 37.21 li
280.442 37.21 li
280.525 37.127 li
280.609 37.21 li
280.609 37.127 li
280.692 37.294 li
280.859 37.127 li
281.025 37.127 li
280.942 37.127 li
281.025 37.127 li
281.109 37.21 li
281.109 37.127 li
281.192 37.21 li
281.192 37.127 li
281.275 37.21 li
281.275 37.127 li
281.359 36.96 li
281.359 37.127 li
281.359 37.044 li
281.442 37.127 li
281.442 36.96 li
281.525 37.044 li
281.525 36.96 li
281.525 37.21 li
281.609 37.127 li
281.609 37.044 li
281.692 36.96 li
281.692 37.044 li
281.692 36.96 li
281.775 37.044 li
281.775 36.96 li
281.859 37.044 li
281.942 36.96 li
281.942 37.21 li
281.942 37.127 li
282.025 37.044 li
282.109 37.127 li
282.192 37.044 li
282.192 36.96 li
282.275 36.877 li
282.275 36.96 li
282.275 36.877 li
282.359 36.96 li
282.359 36.794 li
282.525 36.794 li
282.442 36.794 li
282.525 36.71 li
282.609 36.794 li
282.609 36.71 li
282.692 36.794 li
282.775 36.71 li
282.942 36.71 li
282.942 36.627 li
282.942 36.71 li
283.109 36.544 li
283.109 36.46 li
283.192 36.627 li
283.275 36.544 li
283.275 36.46 li
283.275 36.627 li
283.359 36.544 li
283.359 36.627 li
283.525 36.46 li
283.525 36.377 li
283.525 36.544 li
283.609 36.46 li
283.775 36.46 li
283.859 36.377 li
283.859 36.46 li
283.942 36.377 li
283.942 36.46 li
283.942 36.377 li
284.025 36.46 li
284.109 36.377 li
284.192 36.46 li
284.275 36.294 li
284.275 36.377 li
284.275 36.294 li
284.359 36.21 li
284.442 36.294 li
284.525 36.21 li
284.525 36.127 li
284.609 36.294 li
284.692 36.21 li
284.859 36.21 li
284.859 36.294 li
284.859 36.21 li
284.942 36.127 li
284.942 36.044 li
284.942 36.127 li
285.109 35.96 li
285.109 35.877 li
285.192 35.794 li
285.275 35.794 li
285.359 35.877 li
285.442 35.794 li
285.442 35.71 li
285.609 35.544 li
285.609 35.46 li
285.692 35.46 li
285.775 35.627 li
285.942 35.46 li
285.942 35.627 li
286.026 35.544 li
286.026 35.46 li
286.109 35.544 li
286.109 35.627 li
286.192 35.46 li
286.276 35.544 li
286.276 35.46 li
286.359 35.544 li
286.442 35.46 li
286.442 35.294 li
286.526 35.377 li
286.526 35.294 li
286.609 35.377 li
286.692 35.294 li
286.692 35.377 li
286.776 35.294 li
286.859 35.377 li
286.859 35.21 li
286.942 35.21 li
287.026 35.127 li
287.026 35.294 li
287.109 35.21 li
287.109 35.127 li
287.276 35.127 li
287.276 35.044 li
287.442 35.21 li
287.442 35.127 li
287.526 35.21 li
287.526 35.044 li
287.692 34.877 li
287.859 35.044 li
287.859 34.96 li
287.942 34.794 li
288.026 34.71 li
288.109 34.794 li
288.109 34.71 li
288.109 34.794 li
288.192 34.71 li
288.192 34.877 li
288.276 34.794 li
288.359 34.794 li
288.442 34.877 li
288.442 34.71 li
288.526 34.627 li
288.609 34.71 li
288.692 34.627 li
288.692 34.544 li
288.692 34.627 li
288.942 34.627 li
289.026 34.71 li
289.026 34.627 li
289.109 34.544 li
289.109 34.627 li
289.192 34.544 li
289.192 34.377 li
289.359 34.544 li
289.442 34.46 li
289.442 34.377 li
289.526 34.46 li
289.526 34.377 li
289.692 34.377 li
289.692 34.46 li
289.692 34.294 li
289.776 34.377 li
289.776 34.294 li
289.942 34.46 li
290.026 34.377 li
290.026 34.46 li
290.026 34.377 li
290.109 34.377 li
290.109 34.21 li
290.192 34.127 li
290.192 34.294 li
290.276 34.21 li
290.276 34.294 li
290.359 34.377 li
290.359 34.21 li
290.442 34.21 li
290.526 34.294 li
290.609 34.127 li
290.609 33.96 li
290.692 34.127 li
290.692 33.96 li
290.776 34.044 li
290.776 33.96 li
290.859 33.877 li
290.859 33.96 li
290.859 33.877 li
291.026 33.877 li
290.942 33.877 li
291.026 33.877 li
291.109 33.794 li
291.109 33.96 li
291.192 33.877 li
291.192 33.794 li
291.276 33.877 li
291.276 33.794 li
291.442 33.627 li
291.442 33.794 li
291.526 33.794 li
291.526 33.627 li
291.609 33.544 li
291.609 33.627 li
291.776 33.794 li
291.776 33.71 li
@
258.359 46.21 mo
258.442 46.127 li
258.442 46.21 li
258.526 46.127 li
258.609 45.96 li
258.776 46.127 li
258.776 46.043 li
258.859 45.96 li
258.942 46.043 li
258.942 45.96 li
258.942 46.127 li
259.192 45.877 li
259.109 45.877 li
259.276 45.877 li
259.359 45.793 li
259.609 45.793 li
259.609 45.877 li
259.692 45.877 li
259.776 45.793 li
259.859 45.793 li
259.859 45.627 li
260.026 45.627 li
260.109 45.543 li
260.109 45.46 li
260.109 45.627 li
260.192 45.543 li
260.276 45.627 li
260.276 45.543 li
260.526 45.293 li
260.526 45.377 li
260.609 45.293 li
260.776 45.293 li
260.692 45.293 li
260.776 45.21 li
260.859 45.21 li
260.942 45.127 li
261.026 45.127 li
261.109 45.21 li
261.192 45.127 li
261.192 44.96 li
261.276 45.043 li
261.359 45.043 li
261.442 44.96 li
261.609 44.96 li
261.526 44.96 li
261.609 44.96 li
261.692 44.877 li
261.859 44.877 li
261.859 44.71 li
261.942 44.71 li
262.026 44.627 li
262.026 44.543 li
262.109 44.46 li
262.109 44.377 li
262.109 44.46 li
262.192 44.377 li
262.192 44.293 li
262.276 44.377 li
262.276 44.293 li
262.359 44.377 li
262.359 44.21 li
262.442 44.127 li
262.942 44.127 li
262.859 44.127 li
262.942 44.127 li
263.109 43.96 li
263.276 43.96 li
263.192 43.96 li
263.276 43.96 li
263.359 44.043 li
263.526 43.877 li
263.526 43.793 li
263.692 43.793 li
263.609 43.793 li
263.692 43.877 li
263.776 43.793 li
263.776 43.71 li
263.859 43.627 li
263.942 43.627 li
264.026 43.46 li
264.026 43.543 li
264.109 43.627 li
264.109 43.793 li
264.276 43.793 li
264.192 43.793 li
264.276 43.627 li
264.359 43.71 li
264.359 43.543 li
264.526 43.543 li
264.526 43.46 li
264.526 43.543 li
264.609 43.46 li
264.776 43.46 li
264.692 43.46 li
264.776 43.46 li
264.859 43.377 li
264.942 43.377 li
265.109 43.543 li
265.109 43.627 li
265.192 43.627 li
265.192 43.46 li
265.276 43.377 li
265.276 43.46 li
265.276 43.377 li
265.359 43.46 li
265.359 43.377 li
265.359 43.543 li
265.442 43.627 li
265.692 43.377 li
265.609 43.377 li
265.942 43.377 li
265.942 43.293 li
266.109 43.293 li
266.026 43.293 li
266.109 43.21 li
266.359 43.21 li
266.359 43.127 li
266.442 43.21 li
266.526 43.043 li
266.526 42.96 li
266.526 43.043 li
266.609 43.043 li
266.692 42.96 li
266.776 43.043 li
266.859 42.877 li
266.859 42.793 li
266.859 42.96 li
266.943 42.96 li
267.026 42.793 li
267.109 42.877 li
267.193 42.877 li
267.276 42.793 li
267.276 42.877 li
267.276 42.793 li
267.359 42.877 li
267.443 42.793 li
267.443 42.627 li
267.526 42.71 li
267.776 42.46 li
267.693 42.46 li
267.859 42.627 li
267.859 42.543 li
267.943 42.46 li
268.026 42.46 li
268.109 42.377 li
268.109 42.543 li
268.276 42.377 li
268.276 42.293 li
268.276 42.46 li
268.359 42.377 li
268.443 42.46 li
268.443 42.543 li
268.443 42.46 li
268.609 42.293 li
268.609 42.543 li
268.693 42.46 li
268.693 42.627 li
268.859 42.46 li
268.943 42.543 li
269.026 42.46 li
269.026 42.377 li
269.109 42.46 li
269.109 42.377 li
269.193 42.293 li
269.359 42.293 li
269.276 42.293 li
269.359 42.21 li
269.443 42.127 li
269.609 42.127 li
269.526 42.127 li
269.609 42.127 li
269.776 41.96 li
269.776 41.877 li
269.859 41.793 li
269.859 41.71 li
270.026 41.793 li
270.026 41.627 li
270.109 41.543 li
270.193 41.627 li
270.193 41.543 li
270.276 41.627 li
270.276 41.543 li
270.443 41.543 li
270.443 41.627 li
270.443 41.543 li
270.526 41.543 li
270.609 41.46 li
270.693 41.543 li
270.693 41.627 li
270.693 41.543 li
270.776 41.543 li
270.776 41.377 li
270.859 41.293 li
270.943 41.377 li
271.109 41.21 li
271.276 41.21 li
271.193 41.21 li
271.276 41.21 li
271.359 41.127 li
271.443 41.21 li
271.443 41.043 li
271.443 41.127 li
271.526 41.043 li
271.776 41.043 li
271.776 41.127 li
271.943 41.127 li
271.859 41.127 li
272.109 41.127 li
272.026 41.127 li
272.109 41.21 li
272.193 41.043 li
272.193 40.96 li
272.276 41.043 li
272.359 41.127 li
272.359 40.96 li
272.443 41.043 li
272.443 40.96 li
272.526 41.043 li
272.609 40.96 li
272.859 40.96 li
272.859 40.793 li
272.943 40.877 li
273.026 40.793 li
273.026 40.71 li
273.109 40.793 li
273.276 40.793 li
273.193 40.793 li
273.276 40.793 li
273.443 40.627 li
273.526 40.71 li
273.609 40.627 li
273.609 40.71 li
273.609 40.543 li
273.693 40.543 li
273.776 40.627 li
273.776 40.543 li
273.943 40.46 li
273.943 40.543 li
274.109 40.543 li
274.109 40.46 li
274.276 40.46 li
274.193 40.46 li
274.276 40.543 li
274.359 40.543 li
274.443 40.377 li
274.443 40.543 li
274.526 40.46 li
274.609 40.543 li
274.609 40.293 li
274.693 40.377 li
274.693 40.46 li
274.776 40.293 li
275.026 40.043 li
275.026 40.127 li
275.026 40.043 li
275.109 40.127 li
275.109 39.96 li
275.193 40.043 li
275.193 39.877 li
275.193 39.96 li
275.276 40.043 li
275.359 39.877 li
275.359 39.71 li
275.443 39.627 li
275.443 39.71 li
275.526 39.543 li
275.609 39.627 li
275.609 39.543 li
275.693 39.627 li
@
240.359 53.293 mo
240.442 53.21 li
240.609 53.376 li
240.526 53.376 li
240.609 53.293 li
240.938 53.277 240.774 53.375 241.026 53.126 cv
241.109 53.043 li
241.109 53.126 li
241.192 52.96 li
241.192 53.126 li
241.276 53.043 li
241.442 53.043 li
241.359 53.043 li
241.442 53.043 li
241.526 53.126 li
241.609 53.043 li
241.609 52.96 li
241.609 53.043 li
241.692 53.043 li
241.776 52.96 li
241.859 53.043 li
242.026 52.876 li
242.026 52.96 li
242.109 52.876 li
242.109 52.96 li
242.109 52.876 li
242.192 52.793 li
242.192 52.876 li
242.276 52.793 li
242.276 52.876 li
242.442 52.876 li
242.359 52.876 li
242.442 52.876 li
242.526 52.793 li
242.526 52.71 li
242.609 52.626 li
242.609 52.71 li
242.692 52.626 li
242.692 52.543 li
242.776 52.71 li
242.859 52.543 li
242.859 52.626 li
242.942 52.543 li
242.942 52.71 li
242.942 52.543 li
243.026 52.46 li
243.109 52.543 li
243.276 52.376 li
243.359 52.46 li
243.359 52.376 li
243.359 52.46 li
243.442 52.376 li
243.526 52.293 li
243.526 52.21 li
243.609 52.293 li
243.776 52.126 li
243.692 52.126 li
243.776 52.21 li
243.859 52.21 li
244.026 52.043 li
244.026 52.126 li
244.192 51.96 li
244.192 52.043 li
244.276 51.96 li
244.359 51.96 li
244.609 51.71 li
244.526 51.71 li
244.776 51.71 li
244.776 51.543 li
244.859 51.543 li
244.942 51.46 li
245.026 51.543 li
245.109 51.626 li
245.276 51.46 li
245.276 51.543 li
245.276 51.46 li
245.442 51.46 li
245.526 51.543 li
245.526 51.46 li
245.609 51.376 li
245.776 51.376 li
245.859 51.293 li
245.942 51.293 li
246.026 51.21 li
246.109 51.293 li
246.109 51.21 li
246.192 51.126 li
246.192 51.043 li
246.276 51.126 li
246.276 50.96 li
246.359 51.043 li
246.526 50.876 li
246.526 50.793 li
246.526 50.876 li
246.692 50.876 li
246.609 50.876 li
246.776 50.876 li
246.859 50.793 li
246.859 50.876 li
247.026 50.71 li
247.109 50.876 li
247.109 50.71 li
247.192 50.626 li
247.276 50.543 li
247.359 50.626 li
247.526 50.46 li
247.526 50.376 li
247.692 50.46 li
247.692 50.376 li
247.776 50.293 li
247.776 50.376 li
248.026 50.126 li
248.026 50.21 li
248.109 50.126 li
248.109 50.21 li
248.276 50.043 li
248.359 50.126 li
248.442 50.126 li
248.442 49.96 li
248.526 49.876 li
248.526 49.793 li
248.609 49.876 li
248.609 49.96 li
248.692 49.793 li
248.859 49.626 li
248.859 49.71 li
248.943 49.626 li
249.109 49.626 li
249.026 49.626 li
249.109 49.46 li
249.193 49.376 li
249.276 49.46 li
249.359 49.376 li
249.443 49.46 li
249.609 49.46 li
249.526 49.46 li
249.609 49.46 li
249.693 49.376 li
249.776 49.376 li
249.859 49.293 li
249.859 49.21 li
249.943 49.293 li
249.943 49.043 li
250.109 49.043 li
250.026 49.043 li
250.193 49.043 li
250.276 49.126 li
250.443 48.96 li
250.443 49.043 li
250.443 48.96 li
250.526 48.96 li
250.609 49.043 li
250.609 48.96 li
250.609 49.043 li
250.693 49.043 li
250.776 48.96 li
250.859 49.043 li
250.943 48.96 li
250.943 49.043 li
251.109 49.043 li
251.026 49.043 li
251.109 49.043 li
251.193 48.876 li
251.443 48.876 li
251.359 48.876 li
251.526 48.876 li
251.609 48.71 li
251.609 48.793 li
251.609 48.71 li
251.776 48.876 li
251.859 48.793 li
251.859 48.71 li
251.943 48.793 li
252.026 48.793 li
252.026 48.626 li
252.109 48.46 li
252.276 48.376 li
252.276 48.543 li
252.443 48.376 li
252.526 48.21 li
252.609 48.21 li
252.776 48.043 li
252.693 48.043 li
252.776 48.043 li
252.859 48.126 li
252.859 47.96 li
252.943 48.126 li
253.026 48.043 li
253.109 48.043 li
253.193 48.126 li
253.193 48.043 li
253.276 47.96 li
253.276 47.876 li
253.359 47.96 li
253.443 47.876 li
253.526 47.96 li
253.526 48.043 li
253.693 47.876 li
253.693 47.71 li
253.859 47.876 li
253.776 47.876 li
253.859 47.793 li
253.943 47.876 li
253.943 47.71 li
254.026 47.71 li
254.109 47.626 li
254.109 47.71 li
254.276 47.543 li
254.359 47.626 li
254.359 47.71 li
254.443 47.543 li
254.443 47.46 li
254.609 47.46 li
254.609 47.376 li
254.609 47.46 li
254.693 47.293 li
254.776 47.376 li
254.776 47.21 li
254.859 47.293 li
254.943 47.21 li
254.943 47.293 li
255.026 47.21 li
255.193 47.376 li
255.193 47.46 li
255.276 47.21 li
255.359 47.126 li
255.443 47.21 li
255.443 47.293 li
255.526 47.376 li
255.609 47.21 li
255.609 47.293 li
255.693 47.21 li
255.693 47.126 li
255.776 47.043 li
255.776 47.126 li
255.859 47.043 li
255.943 47.126 li
256.026 47.21 li
256.109 47.21 li
256.193 47.126 li
256.193 46.96 li
256.276 46.96 li
256.359 47.043 li
256.359 46.96 li
256.359 47.043 li
256.443 47.043 li
256.526 46.96 li
256.776 46.96 li
256.776 46.793 li
256.859 46.793 li
257.109 46.543 li
257.193 46.626 li
257.359 46.626 li
257.526 46.46 li
257.609 46.543 li
257.609 46.376 li
257.693 46.376 li
257.776 46.293 li
257.859 46.376 li
258.026 46.21 li
258.359 46.21 li
@
223.776 60.626 mo
223.776 60.709 li
223.859 60.626 li
223.943 60.709 li
223.943 60.793 li
223.943 60.626 li
224.026 60.709 li
224.109 60.543 li
224.109 60.459 li
224.109 60.543 li
224.276 60.543 li
224.276 60.459 li
224.359 60.543 li
224.443 60.459 li
224.526 60.543 li
224.526 60.459 li
224.693 60.459 li
224.693 60.376 li
224.776 60.459 li
224.776 60.543 li
224.776 60.459 li
224.943 60.293 li
225.026 60.126 li
225.026 60.209 li
225.193 60.209 li
225.109 60.209 li
225.193 60.043 li
225.276 59.793 li
225.359 59.876 li
225.359 59.959 li
225.359 59.793 li
225.526 59.959 li
225.693 59.793 li
225.693 59.876 li
225.776 59.876 li
225.776 59.709 li
225.943 59.543 li
226.109 59.543 li
226.026 59.543 li
226.109 59.626 li
226.193 59.626 li
226.276 59.459 li
226.276 59.376 li
226.359 59.459 li
226.359 59.543 li
226.526 59.376 li
226.526 59.459 li
226.526 59.293 li
226.609 59.293 li
226.693 59.209 li
226.776 59.209 li
226.859 59.293 li
226.859 59.209 li
226.943 59.293 li
226.943 59.376 li
226.943 59.293 li
227.109 59.293 li
227.026 59.293 li
227.109 59.209 li
227.193 59.293 li
227.359 59.126 li
227.276 59.126 li
227.526 59.126 li
227.693 58.959 li
227.693 59.043 li
227.693 58.959 li
227.776 58.959 li
227.943 58.793 li
228.026 58.876 li
228.109 58.793 li
228.109 58.709 li
228.109 58.793 li
228.193 58.793 li
228.276 58.709 li
228.359 58.793 li
228.359 58.626 li
228.359 58.709 li
228.443 58.626 li
228.443 58.709 li
228.609 58.709 li
228.526 58.709 li
228.693 58.543 li
228.693 58.459 li
228.693 58.543 li
228.776 58.459 li
228.776 58.626 li
228.859 58.543 li
229.026 58.709 li
228.943 58.709 li
229.026 58.709 li
229.109 58.626 li
229.109 58.459 li
229.193 58.543 li
229.193 58.459 li
229.276 58.543 li
229.359 58.459 li
229.359 58.626 li
229.526 58.626 li
229.526 58.543 li
229.609 58.626 li
229.693 58.543 li
229.693 58.626 li
229.693 58.543 li
229.776 58.459 li
229.859 58.626 li
229.859 58.459 li
229.943 58.376 li
230.026 58.376 li
230.109 58.209 li
230.193 58.126 li
230.193 58.293 li
230.276 58.293 li
230.443 58.126 li
230.443 57.959 li
230.526 57.876 li
230.609 57.959 li
230.859 57.709 li
230.859 57.626 li
230.943 57.709 li
231.109 57.709 li
231.109 57.793 li
231.276 57.626 li
231.276 57.459 li
231.526 57.459 li
231.526 57.376 li
231.526 57.459 li
231.776 57.459 li
231.693 57.459 li
231.943 57.459 li
231.943 57.209 li
232.026 57.126 li
232.026 57.209 li
232.026 57.126 li
232.109 57.209 li
232.193 57.209 li
232.276 57.126 li
232.443 57.209 li
232.443 57.126 li
232.526 57.043 li
232.526 57.126 li
232.609 57.043 li
232.609 57.126 li
232.609 57.043 li
232.693 56.959 li
232.693 57.043 li
232.776 56.959 li
232.776 57.043 li
232.859 56.959 li
232.859 57.043 li
232.859 56.959 li
232.943 56.876 li
233.026 56.876 li
233.026 56.709 li
233.109 56.793 li
233.109 56.876 li
233.109 56.793 li
233.193 56.876 li
233.193 56.709 li
233.276 56.793 li
233.276 56.709 li
233.443 56.543 li
233.526 56.626 li
233.526 56.543 li
233.609 56.626 li
233.609 56.459 li
233.776 56.459 li
233.693 56.459 li
233.776 56.459 li
233.859 56.376 li
233.859 56.459 li
234.026 56.293 li
234.026 56.209 li
234.109 56.293 li
234.109 56.209 li
234.276 56.043 li
234.276 55.959 li
234.359 56.043 li
234.359 55.876 li
234.443 55.876 li
234.526 55.793 li
234.609 55.793 li
234.693 55.876 li
234.693 55.793 li
234.693 55.876 li
234.859 55.709 li
234.943 55.876 li
234.943 55.709 li
235.026 55.793 li
235.026 55.626 li
235.026 55.709 li
235.109 55.626 li
235.109 55.793 li
235.276 55.626 li
235.276 55.543 li
235.443 55.543 li
235.359 55.543 li
235.526 55.543 li
235.693 55.376 li
235.776 55.376 li
235.859 55.459 li
235.859 55.376 li
235.859 55.459 li
235.943 55.376 li
236.11 55.376 li
236.11 55.209 li
236.36 55.209 li
236.443 55.293 li
236.526 55.293 li
236.61 55.209 li
236.61 55.043 li
236.693 55.043 li
236.776 55.126 li
236.776 55.043 li
236.943 54.959 li
236.86 54.959 li
237.193 54.626 li
237.276 54.709 li
237.276 54.626 li
237.443 54.626 li
237.443 54.543 li
237.526 54.543 li
237.61 54.459 li
237.693 54.543 li
237.693 54.626 li
237.776 54.459 li
237.776 54.543 li
237.86 54.459 li
237.86 54.543 li
237.943 54.376 li
238.026 54.459 li
238.026 54.543 li
238.026 54.459 li
238.11 54.376 li
238.193 54.376 li
238.36 54.209 li
238.526 54.209 li
238.693 54.126 li
238.61 54.126 li
238.86 53.876 li
239.026 53.876 li
238.943 53.876 li
239.026 53.876 li
239.11 53.793 li
239.11 53.876 li
239.193 53.709 li
239.276 53.793 li
239.276 53.709 li
239.36 53.793 li
239.36 53.626 li
239.526 53.626 li
239.443 53.626 li
239.526 53.626 li
239.61 53.543 li
239.61 53.626 li
239.693 53.459 li
239.693 53.543 li
239.776 53.293 li
239.776 53.376 li
239.86 53.459 li
240.026 53.293 li
240.193 53.459 li
240.11 53.459 li
240.193 53.376 li
240.276 53.459 li
240.36 53.376 li
240.36 53.293 li
@
207.026 69.126 mo
207.109 69.126 li
207.193 69.209 li
207.276 69.209 li
207.443 69.043 li
207.359 69.043 li
207.443 69.043 li
207.609 68.876 li
207.693 68.876 li
207.693 68.709 li
207.859 68.626 li
207.776 68.626 li
207.859 68.459 li
207.943 68.376 li
207.943 68.459 li
208.026 68.293 li
208.026 68.376 li
208.109 68.209 li
208.109 68.293 li
208.109 68.209 li
208.193 68.293 li
208.193 67.959 li
208.526 67.626 li
208.526 67.709 li
208.693 67.459 li
208.693 67.543 li
208.693 67.459 li
208.943 67.209 li
208.943 67.293 li
208.943 67.209 li
209.026 67.209 li
209.109 67.126 li
209.109 67.043 li
209.109 67.126 li
209.193 67.209 li
209.359 67.043 li
209.359 66.876 li
209.693 66.876 li
209.693 66.626 li
209.776 66.543 li
209.859 66.543 li
209.943 66.626 li
210.026 66.543 li
210.026 66.459 li
210.109 66.376 li
210.193 66.376 li
210.276 66.293 li
210.276 66.376 li
210.359 66.293 li
210.359 66.376 li
210.359 66.293 li
210.443 66.293 li
210.526 66.376 li
210.609 66.293 li
210.776 66.209 li
210.693 66.209 li
210.776 66.126 li
210.859 66.293 li
210.859 66.126 li
210.859 66.209 li
210.943 66.043 li
210.943 65.876 li
211.193 66.126 li
211.359 65.959 li
211.276 65.959 li
211.359 65.959 li
211.443 65.876 li
211.443 65.709 li
211.443 65.793 li
211.526 65.709 li
211.609 65.793 li
211.693 65.709 li
211.693 65.626 li
211.776 65.543 li
211.776 65.626 li
211.859 65.543 li
211.943 65.626 li
211.943 65.543 li
212.109 65.376 li
212.276 65.543 li
212.443 65.459 li
212.526 65.626 li
212.526 65.543 li
212.693 65.376 li
212.693 65.459 li
212.693 65.376 li
212.776 65.376 li
212.943 65.209 li
212.943 65.293 li
213.026 65.209 li
213.026 65.293 li
213.026 65.209 li
213.276 65.209 li
213.359 65.293 li
213.443 65.209 li
213.443 65.293 li
213.609 65.126 li
213.609 64.959 li
213.693 65.043 li
213.693 64.876 li
213.693 64.959 li
213.859 64.793 li
213.859 64.876 li
213.943 64.793 li
214.026 64.793 li
214.109 64.709 li
214.109 64.793 li
214.109 64.709 li
214.276 64.876 li
214.276 64.793 li
214.276 64.876 li
214.359 64.876 li
214.609 64.626 li
214.609 64.793 li
214.693 64.709 li
214.693 64.793 li
214.693 64.709 li
214.776 64.793 li
214.776 64.626 li
214.859 64.709 li
214.859 64.626 li
214.943 64.543 li
214.943 64.626 li
215.109 64.459 li
215.026 64.459 li
215.109 64.543 li
215.276 64.376 li
215.359 64.376 li
215.609 64.126 li
215.693 64.209 li
215.693 64.126 li
215.693 64.209 li
215.859 64.209 li
215.943 64.293 li
216.026 64.209 li
216.109 64.043 li
216.193 63.959 li
216.193 63.876 li
216.276 64.126 li
216.443 63.959 li
216.526 64.043 li
216.609 63.959 li
216.609 64.126 li
216.693 64.126 li
216.943 63.876 li
217.193 63.876 li
217.276 63.793 li
217.36 63.793 li
217.443 63.709 li
217.443 63.793 li
217.61 63.626 li
217.693 63.626 li
217.776 63.709 li
217.86 63.626 li
217.86 63.459 li
217.943 63.376 li
218.11 63.543 li
218.193 63.459 li
218.193 63.376 li
218.276 63.459 li
218.276 63.376 li
218.36 63.293 li
218.443 63.459 li
218.443 63.543 li
218.443 63.459 li
218.526 63.293 li
218.693 63.293 li
218.61 63.293 li
218.693 63.293 li
218.776 63.209 li
218.776 63.293 li
218.776 63.126 li
218.86 63.209 li
218.86 63.043 li
218.86 63.126 li
218.943 63.126 li
219.026 63.209 li
219.026 63.043 li
219.193 63.043 li
219.193 62.876 li
219.276 62.793 li
219.443 62.793 li
219.443 62.959 li
219.526 62.793 li
219.61 62.709 li
219.61 62.793 li
219.61 62.709 li
219.693 62.626 li
219.776 62.626 li
219.943 62.459 li
219.943 62.376 li
220.026 62.459 li
220.026 62.293 li
220.11 62.376 li
220.11 62.459 li
220.193 62.376 li
220.193 62.293 li
220.36 62.459 li
220.36 62.543 li
220.526 62.293 li
220.526 62.126 li
220.693 62.126 li
220.61 62.126 li
220.693 62.293 li
220.86 62.043 li
221.026 62.043 li
221.11 62.126 li
221.11 61.959 li
221.193 62.043 li
221.193 61.793 li
221.276 61.876 li
221.276 62.043 li
221.36 61.876 li
221.36 61.793 li
221.443 61.876 li
221.443 61.793 li
221.526 61.876 li
221.526 61.709 li
221.61 61.543 li
221.693 61.626 li
221.693 61.709 li
221.776 61.793 li
221.776 61.543 li
221.776 61.626 li
222.026 61.376 li
222.026 61.293 li
222.026 61.376 li
222.193 61.376 li
222.36 61.209 li
222.36 61.126 li
222.443 61.043 li
222.443 61.126 li
222.526 61.043 li
222.526 61.126 li
222.526 61.043 li
222.61 61.126 li
222.776 61.043 li
222.776 61.126 li
222.776 61.043 li
222.86 61.043 li
222.943 61.209 li
222.943 60.959 li
222.943 61.043 li
223.026 61.043 li
223.11 61.126 li
223.11 60.959 li
223.193 60.959 li
223.276 61.043 li
223.36 60.959 li
223.36 61.043 li
223.36 60.793 li
223.443 60.876 li
223.526 60.793 li
223.526 60.876 li
223.61 60.709 li
223.61 60.793 li
223.61 60.626 li
223.693 60.709 li
223.776 60.626 li
@
189.609 77.793 mo
189.526 77.793 li
189.692 77.793 li
189.776 77.71 li
189.776 77.626 li
189.859 77.543 li
189.859 77.376 li
189.942 77.376 li
190.026 77.46 li
190.192 77.293 li
190.192 77.21 li
190.359 77.043 li
190.276 77.043 li
190.359 77.126 li
190.442 77.043 li
190.442 76.876 li
190.526 76.793 li
190.526 76.876 li
190.692 76.71 li
190.692 76.793 li
190.692 76.71 li
190.776 76.793 li
190.859 76.793 li
190.859 76.626 li
191.026 76.46 li
191.109 76.543 li
191.192 76.46 li
191.192 76.543 li
191.276 76.46 li
191.276 76.376 li
191.359 76.293 li
191.526 76.46 li
191.526 76.293 li
191.609 76.293 li
191.692 76.21 li
191.692 76.293 li
191.776 76.21 li
191.859 76.293 li
192.026 76.126 li
191.942 76.126 li
192.026 76.126 li
192.109 76.21 li
192.109 76.126 li
192.192 76.043 li
192.359 76.043 li
192.276 76.043 li
192.442 75.876 li
192.442 75.96 li
192.442 75.876 li
192.526 75.793 li
192.526 75.71 li
192.609 75.626 li
192.692 75.626 li
192.859 75.46 li
193.026 75.46 li
193.026 75.376 li
193.109 75.293 li
193.109 75.21 li
193.109 75.376 li
193.192 75.376 li
193.276 75.293 li
193.359 75.376 li
193.442 75.376 li
193.526 75.293 li
193.526 75.376 li
193.526 75.293 li
193.609 75.376 li
193.692 75.293 li
193.692 75.376 li
193.859 75.21 li
193.859 75.376 li
193.776 75.21 li
193.859 75.293 li
194.026 75.126 li
194.192 75.126 li
194.109 75.126 li
194.192 75.126 li
194.359 74.96 li
194.359 74.876 li
194.442 74.793 li
194.442 74.71 li
194.526 74.626 li
194.526 74.71 li
194.609 74.626 li
194.692 74.71 li
194.692 74.626 li
194.776 74.543 li
194.859 74.626 li
195.026 74.626 li
194.942 74.626 li
195.026 74.543 li
195.109 74.626 li
195.109 74.46 li
195.276 74.293 li
195.359 74.126 li
195.442 74.21 li
195.526 74.21 li
195.609 74.126 li
195.609 74.043 li
195.692 73.96 li
195.692 74.126 li
195.776 74.043 li
195.776 74.126 li
195.859 74.043 li
195.859 73.96 li
195.942 74.043 li
196.026 74.043 li
196.109 73.96 li
196.109 74.043 li
196.109 73.876 li
196.192 73.876 li
196.276 73.96 li
196.276 73.876 li
196.276 73.96 li
196.359 73.793 li
196.442 73.71 li
196.442 73.876 li
196.526 73.793 li
196.609 73.793 li
196.859 73.543 li
196.942 73.543 li
197.026 73.626 li
197.026 73.543 li
197.192 73.543 li
197.109 73.543 li
197.276 73.71 li
197.276 73.626 li
197.359 73.71 li
197.359 73.626 li
197.442 73.71 li
197.442 73.543 li
197.692 73.543 li
197.609 73.543 li
197.859 73.543 li
197.942 73.46 li
197.942 73.376 li
198.026 73.46 li
198.026 73.293 li
198.109 73.21 li
198.192 73.21 li
198.276 73.293 li
198.276 73.21 li
198.359 73.126 li
198.442 73.21 li
198.442 73.043 li
198.526 73.043 li
198.609 73.126 li
198.609 73.043 li
198.692 73.126 li
198.776 73.043 li
198.776 73.126 li
198.776 73.043 li
198.859 72.96 li
199.109 72.96 li
199.026 72.96 li
199.109 72.96 li
199.192 73.043 li
199.192 72.876 li
199.359 72.876 li
199.359 72.793 li
199.442 72.876 li
199.526 72.876 li
199.609 72.793 li
199.692 72.876 li
199.692 72.71 li
199.859 72.543 li
199.859 72.626 li
199.942 72.71 li
200.026 72.71 li
200.109 72.793 li
200.109 72.876 li
200.192 72.71 li
200.192 72.543 li
200.359 72.376 li
200.276 72.376 li
200.359 72.376 li
200.442 72.293 li
200.609 72.46 li
200.776 72.126 li
200.859 72.043 li
200.859 72.126 li
200.942 72.21 li
201.109 72.043 li
201.026 72.043 li
201.109 72.126 li
201.276 71.96 li
201.359 72.043 li
201.442 72.043 li
201.526 71.96 li
201.609 72.043 li
201.692 72.043 li
201.692 71.876 li
201.776 71.793 li
201.859 71.793 li
201.942 71.876 li
202.026 71.793 li
202.026 71.71 li
202.109 71.543 li
202.192 71.626 li
202.192 71.793 li
202.276 71.71 li
202.276 71.626 li
202.359 71.543 li
202.442 71.543 li
202.609 71.376 li
202.609 71.293 li
202.692 71.21 li
202.692 71.126 li
202.859 71.126 li
202.859 71.21 li
202.942 71.21 li
203.109 71.043 li
203.026 71.043 li
203.109 70.876 li
203.192 70.96 li
203.276 70.793 li
203.526 70.543 li
203.609 70.626 li
203.609 70.543 li
203.859 70.543 li
203.942 70.46 li
203.942 70.376 li
204.109 70.543 li
204.026 70.543 li
204.109 70.543 li
204.359 70.293 li
204.359 70.21 li
204.526 70.376 li
204.692 70.21 li
204.859 70.21 li
204.776 70.21 li
204.859 70.21 li
204.942 70.293 li
205.109 70.126 li
205.109 70.21 li
205.192 70.126 li
205.276 70.126 li
205.359 70.043 li
205.359 69.96 li
205.526 70.126 li
205.609 70.043 li
205.692 69.876 li
205.776 69.876 li
205.942 69.71 206.109 69.543 206.276 69.376 cv
206.359 69.293 li
206.359 69.376 li
206.359 69.21 li
206.442 69.293 li
206.442 69.21 li
206.526 69.293 li
206.526 69.21 li
206.526 69.293 li
206.609 69.376 li
206.609 69.46 li
206.692 69.376 li
206.692 69.46 li
206.692 69.293 li
206.776 69.293 li
206.776 69.46 li
206.859 69.293 li
206.859 69.376 li
206.942 69.293 li
206.942 69.376 li
206.942 69.293 li
207.026 69.376 li
207.026 69.126 li
@
172.359 86.876 mo
172.442 86.959 li
172.526 86.876 li
172.609 86.876 li
172.609 87.043 li
172.692 87.043 li
172.692 86.876 li
172.776 86.793 li
172.942 86.793 li
173.109 86.626 li
173.192 86.626 li
173.192 86.459 li
173.276 86.543 li
173.276 86.626 li
173.359 86.543 li
173.359 86.459 li
173.526 86.459 li
173.442 86.459 li
173.526 86.459 li
173.609 86.376 li
173.609 86.459 li
173.776 86.459 li
173.692 86.459 li
173.859 86.293 li
173.859 86.376 li
174.026 86.376 li
173.942 86.376 li
174.026 86.126 li
174.109 86.043 li
174.109 86.126 li
174.276 86.126 li
174.276 86.209 li
174.276 86.043 li
174.359 86.043 li
174.442 85.959 li
174.442 86.043 li
174.526 85.876 li
174.526 85.959 li
174.526 85.793 li
174.692 85.959 li
174.609 85.959 li
174.692 85.876 li
174.776 85.876 li
174.859 85.793 li
174.859 85.709 li
175.026 85.876 li
174.942 85.876 li
175.192 85.626 li
175.192 85.543 li
175.276 85.626 li
175.359 85.626 li
175.526 85.459 li
175.526 85.376 li
175.609 85.293 li
175.609 85.459 li
175.692 85.376 li
175.776 85.543 li
175.776 85.459 li
175.859 85.543 li
175.942 85.459 li
175.942 85.543 li
176.109 85.376 li
176.109 85.293 li
176.109 85.376 li
176.192 85.459 li
176.192 85.376 li
176.359 85.293 li
176.526 85.126 li
176.526 85.209 li
176.526 85.126 li
176.609 85.043 li
176.609 84.876 li
176.692 85.043 li
176.692 84.959 li
176.692 85.043 li
176.776 84.959 li
176.776 85.043 li
176.859 84.959 li
176.859 84.876 li
176.942 84.793 li
176.942 84.709 li
177.026 84.626 li
177.026 84.543 li
177.109 84.626 li
177.192 84.543 li
177.359 84.543 li
177.276 84.543 li
177.359 84.543 li
177.609 84.293 li
177.609 84.209 li
177.692 84.126 li
177.692 84.293 li
177.692 84.209 li
177.776 84.293 li
177.776 84.209 li
177.859 84.293 li
177.859 84.043 li
178.026 84.043 li
177.942 84.043 li
178.192 84.043 li
178.359 83.876 li
178.359 83.793 li
178.442 83.876 li
178.526 83.876 li
178.692 83.709 li
178.776 83.709 li
178.859 83.793 li
178.859 83.709 li
178.942 83.626 li
179.109 83.626 li
179.026 83.626 li
179.109 83.626 li
179.192 83.543 li
179.192 83.626 li
179.192 83.543 li
179.359 83.376 li
179.359 83.543 li
179.442 83.459 li
179.442 83.376 li
179.526 83.209 li
179.609 83.293 li
179.609 83.209 li
179.609 83.293 li
179.692 83.209 li
179.692 83.293 li
179.692 83.209 li
179.776 83.043 li
179.859 82.959 li
179.859 83.043 li
179.942 82.959 li
180.026 83.043 li
180.192 82.876 li
180.192 82.793 li
180.359 82.626 li
180.359 82.543 li
180.442 82.543 li
180.526 82.459 li
180.526 82.543 li
180.609 82.459 li
180.609 82.543 li
180.609 82.376 li
180.692 82.293 li
180.859 82.293 li
180.859 82.209 li
180.942 82.209 li
181.026 82.293 li
181.026 82.209 li
181.192 82.126 li
181.192 82.209 li
181.192 82.043 li
181.276 82.043 li
181.359 81.959 li
181.442 82.043 li
181.442 81.959 li
181.609 81.959 li
181.526 81.959 li
181.609 82.043 li
181.776 81.876 li
181.776 82.043 li
181.776 81.959 li
181.942 81.793 li
182.109 81.793 li
182.109 81.626 li
182.276 81.626 li
182.192 81.626 li
182.276 81.626 li
182.359 81.709 li
182.609 81.459 li
182.526 81.459 li
182.776 81.459 li
182.692 81.459 li
182.776 81.543 li
182.859 81.459 li
182.942 81.543 li
182.942 81.376 li
183.026 81.293 li
183.109 81.376 li
183.192 81.293 li
183.359 81.293 li
183.442 81.126 li
183.442 80.959 li
183.526 80.959 li
183.609 81.043 li
183.776 80.876 li
183.776 80.959 li
183.776 80.876 li
183.859 80.793 li
183.942 80.876 li
184.109 80.709 li
184.109 80.626 li
184.192 80.709 li
184.192 80.543 li
184.359 80.709 li
184.359 80.543 li
184.442 80.626 li
184.442 80.376 li
184.526 80.293 li
184.609 80.293 li
184.609 80.459 li
184.609 80.293 li
184.692 80.293 li
184.776 80.376 li
184.859 80.043 li
184.942 80.043 li
185.026 79.959 li
185.109 79.959 li
185.192 79.876 li
185.192 79.793 li
185.359 79.793 li
185.359 79.709 li
185.359 79.793 li
185.442 79.709 li
185.526 79.709 li
185.609 79.626 li
185.692 79.626 li
185.776 79.459 li
185.776 79.543 li
185.942 79.543 li
185.859 79.543 li
185.942 79.543 li
186.026 79.626 li
186.109 79.626 li
186.109 79.459 li
186.192 79.376 li
186.276 79.376 li
186.359 79.293 li
186.359 79.376 li
186.359 79.209 li
186.442 79.293 li
186.526 79.209 li
186.859 79.209 li
186.942 79.126 li
187.026 79.209 li
187.109 79.126 li
187.109 79.209 li
187.109 79.126 li
187.192 79.043 li
187.192 78.959 li
187.192 79.043 li
187.276 79.043 li
187.276 78.876 li
187.442 78.876 li
187.359 78.876 li
187.442 78.876 li
187.526 78.793 li
187.692 78.793 li
187.776 78.709 li
187.776 78.793 li
187.776 78.709 li
187.942 78.709 li
187.942 78.543 li
187.942 78.626 li
188.026 78.626 li
188.109 78.459 li
188.192 78.543 li
188.276 78.459 li
188.276 78.543 li
188.359 78.626 li
188.359 78.376 li
188.442 78.376 li
188.442 78.209 li
188.609 78.376 li
188.526 78.376 li
188.609 78.209 li
188.692 78.209 li
188.776 78.126 li
188.859 78.126 li
188.942 78.043 li
189.109 78.043 li
189.109 77.959 li
189.109 78.043 li
189.192 78.126 li
189.192 77.959 li
189.276 78.043 li
189.359 78.043 li
189.609 77.793 li
@
155.692 97.209 mo
155.692 97.042 li
155.775 97.042 li
155.859 96.876 li
156.025 96.876 li
156.109 96.792 li
156.109 96.626 li
156.275 96.626 li
156.275 96.542 li
156.275 96.626 li
156.442 96.459 li
156.525 96.542 li
156.525 96.376 li
156.692 96.292 li
156.692 96.376 li
156.775 96.459 li
156.775 96.292 li
156.859 96.376 li
156.859 96.209 li
157.025 96.209 li
156.942 96.209 li
157.109 96.209 li
157.192 96.042 li
157.442 96.042 li
157.359 96.042 li
157.525 96.042 li
157.525 95.876 li
157.692 95.709 li
157.859 95.709 li
157.775 95.709 li
157.859 95.626 li
157.942 95.626 li
158.025 95.542 li
158.025 95.459 li
158.025 95.542 li
158.109 95.542 li
158.109 95.376 li
158.192 95.292 li
158.275 95.376 li
158.275 95.459 li
158.525 95.209 li
158.442 95.209 li
158.525 95.209 li
158.609 95.126 li
158.692 95.126 li
158.775 95.209 li
158.859 95.126 li
158.859 95.042 li
158.859 95.126 li
158.942 95.209 li
159.025 95.042 li
159.025 95.126 li
159.025 95.042 li
159.109 95.126 li
159.275 95.126 li
159.192 95.126 li
159.275 94.959 li
159.609 94.626 li
159.609 94.709 li
159.609 94.626 li
159.692 94.709 li
159.692 94.626 li
159.692 94.709 li
159.775 94.709 li
159.942 94.542 li
160.025 94.542 li
160.109 94.459 li
160.109 94.542 li
160.109 94.459 li
160.192 94.459 li
160.192 94.292 li
160.442 94.292 li
160.359 94.292 li
160.442 94.126 li
160.525 94.126 li
160.692 93.959 li
160.692 94.042 li
160.775 93.959 li
160.775 93.792 li
160.859 93.876 li
160.859 93.792 li
160.942 93.709 li
160.942 93.792 li
161.109 93.792 li
161.109 93.709 li
161.192 93.792 li
161.192 93.709 li
161.192 93.792 li
161.359 93.542 li
161.442 93.542 li
161.609 93.376 li
161.692 93.376 li
161.692 93.209 li
161.859 93.042 li
161.859 92.792 li
161.942 92.959 li
161.942 93.042 li
162.025 93.126 li
162.025 93.209 li
162.025 93.042 li
162.109 92.959 li
162.192 92.792 li
162.192 92.709 li
162.275 92.876 li
162.442 92.876 li
162.442 93.042 li
162.525 92.959 li
162.525 92.876 li
162.692 92.626 li
162.609 92.626 li
162.859 92.626 li
162.942 92.459 li
162.942 92.542 li
163.025 92.459 li
163.025 92.542 li
163.025 92.459 li
163.109 92.376 li
163.275 92.376 li
163.359 92.459 li
163.359 92.376 li
163.525 92.376 li
163.525 92.209 li
163.692 92.042 li
163.859 92.126 li
163.859 92.042 li
163.942 92.126 li
164.109 91.959 li
164.192 92.042 li
164.359 91.876 li
164.359 91.792 li
164.359 91.876 li
164.442 91.709 li
164.525 91.876 li
164.525 91.792 li
164.609 91.709 li
164.609 91.459 li
164.692 91.542 li
164.775 91.459 li
164.859 91.542 li
164.859 91.459 li
164.942 91.542 li
164.942 91.292 li
165.025 91.376 li
165.109 91.376 li
165.192 91.292 li
165.192 91.376 li
165.275 91.209 li
165.275 91.292 li
165.359 91.126 li
165.442 91.209 li
165.442 91.042 li
165.525 90.959 li
165.525 91.126 li
165.692 91.126 li
165.609 91.126 li
165.775 90.959 li
165.775 90.792 li
165.859 90.876 li
166.025 90.709 li
166.025 90.626 li
166.025 90.709 li
166.275 90.709 li
166.192 90.709 li
166.275 90.792 li
166.359 90.709 li
166.359 90.542 li
166.442 90.542 li
166.609 90.376 li
166.525 90.376 li
166.609 90.459 li
166.692 90.292 li
166.692 90.376 li
166.775 90.292 li
166.775 90.376 li
166.775 90.292 li
166.859 90.209 li
167.025 90.209 li
167.192 90.042 li
167.192 89.959 li
167.275 90.042 li
167.359 89.876 li
167.359 89.959 li
167.359 89.876 li
167.442 89.959 li
167.525 89.959 li
167.609 89.876 li
167.609 89.709 li
167.775 89.709 li
167.692 89.709 li
167.775 89.792 li
167.942 89.626 li
167.942 89.542 li
168.025 89.626 li
168.025 89.542 li
168.109 89.626 li
168.109 89.459 li
168.192 89.459 li
168.275 89.542 li
168.275 89.459 li
168.359 89.542 li
168.359 89.459 li
168.359 89.542 li
168.442 89.376 li
168.442 89.459 li
168.525 89.376 li
168.609 89.459 li
168.609 89.292 li
168.692 89.376 li
168.859 89.126 li
168.859 89.042 li
168.942 89.126 li
169.109 88.959 li
169.192 89.126 li
169.192 88.959 li
169.275 88.876 li
169.359 88.959 li
169.359 88.709 li
169.525 88.709 li
169.442 88.709 li
169.525 88.792 li
169.775 88.542 li
169.775 88.626 li
169.942 88.459 li
170.025 88.542 li
170.025 88.376 li
170.109 88.459 li
170.192 88.376 li
170.192 88.459 li
170.192 88.292 li
170.275 88.292 li
170.275 88.126 li
170.359 88.126 li
170.359 88.292 li
170.442 88.292 li
170.525 88.209 li
170.692 88.292 li
170.692 88.126 li
170.692 88.209 li
170.859 88.126 li
170.775 88.126 li
170.942 87.959 li
170.942 88.042 li
171.025 87.959 li
171.025 88.042 li
171.109 87.876 li
171.109 87.792 li
171.192 87.876 li
171.275 87.876 li
171.275 87.709 li
171.359 87.626 li
171.359 87.376 li
171.442 87.292 li
171.525 87.376 li
171.525 87.292 li
171.609 87.376 li
171.692 87.292 li
171.692 87.376 li
171.692 87.292 li
171.775 87.209 li
171.775 87.292 li
171.942 87.126 li
172.109 87.292 li
172.109 87.209 li
172.109 87.292 li
172.192 87.126 li
172.359 87.042 li
172.275 87.042 li
172.359 86.876 li
@
137.859 107.459 mo
138.026 107.459 li
137.942 107.459 li
138.026 107.542 li
138.109 107.376 li
138.109 107.542 li
138.192 107.459 li
138.192 107.376 li
138.276 107.292 li
138.276 107.126 li
138.359 107.126 li
138.526 106.959 li
138.526 106.792 li
138.609 106.792 li
138.692 106.876 li
138.859 106.709 li
138.859 106.626 li
138.859 106.792 li
138.942 106.792 li
138.942 106.626 li
139.109 106.626 li
139.276 106.459 li
139.276 106.626 li
139.359 106.709 li
139.442 106.626 li
139.442 106.542 li
139.442 106.626 li
139.609 106.459 li
139.609 106.376 li
139.692 106.459 li
139.692 106.376 li
139.776 106.459 li
139.859 106.376 li
139.942 106.376 li
140.026 106.292 li
140.109 106.292 li
140.192 106.376 li
140.192 106.292 li
140.359 106.126 li
140.276 106.126 li
140.359 106.209 li
140.442 106.126 li
140.609 106.126 li
140.692 106.042 li
140.776 106.126 li
140.776 106.042 li
140.942 105.792 li
141.026 105.876 li
141.026 105.709 li
141.192 105.709 li
141.276 105.626 li
141.276 105.542 li
141.359 105.626 li
141.526 105.626 li
141.609 105.542 li
141.609 105.459 li
141.692 105.542 li
141.692 105.459 li
141.692 105.542 li
141.776 105.542 li
141.776 105.376 li
141.859 105.459 li
142.026 105.459 li
142.026 105.292 li
142.109 105.209 li
142.192 105.209 li
142.192 105.042 li
142.276 105.292 li
142.276 105.209 li
142.359 105.126 li
142.442 105.126 li
142.526 105.042 li
142.692 105.042 li
142.609 105.042 li
142.776 104.876 li
142.776 104.792 li
142.942 104.792 li
142.859 104.792 li
142.942 104.959 li
143.359 104.542 li
143.276 104.542 li
143.359 104.542 li
143.526 104.376 li
143.442 104.376 li
143.526 104.459 li
143.609 104.376 li
143.609 104.292 li
143.609 104.376 li
143.692 104.292 li
143.692 104.376 li
143.776 104.459 li
143.776 104.292 li
143.942 104.292 li
143.942 104.209 li
144.192 103.959 li
144.192 103.876 li
144.276 103.959 li
144.276 103.792 li
144.359 103.626 li
144.442 103.542 li
144.526 103.542 li
144.609 103.626 li
144.609 103.459 li
144.776 103.292 li
144.942 103.292 li
145.026 103.209 li
145.026 103.126 li
145.109 103.042 li
145.192 103.042 li
145.276 102.959 li
145.442 102.959 li
145.359 102.959 li
145.442 102.792 li
145.609 102.792 li
145.776 102.626 li
145.859 102.626 li
145.942 102.542 li
146.026 102.292 li
146.026 102.376 li
146.026 102.292 li
146.109 102.209 li
146.192 102.292 li
146.359 102.292 li
146.359 102.209 li
146.442 102.042 li
146.442 101.959 li
146.442 102.042 li
146.526 102.126 li
146.609 102.042 li
146.859 102.042 li
146.942 101.959 li
147.109 101.959 li
147.109 102.042 li
147.192 101.959 li
147.192 101.792 li
147.276 101.709 li
147.442 101.709 li
147.609 101.542 li
147.609 101.459 li
147.692 101.459 li
147.776 101.542 li
147.776 101.459 li
147.942 101.459 li
147.942 101.376 li
148.026 101.126 li
148.026 101.209 li
148.026 101.126 li
148.109 100.959 li
148.109 100.876 li
148.192 100.959 li
148.192 101.042 li
148.276 100.959 li
148.276 101.042 li
148.359 100.959 li
148.359 100.876 li
148.442 100.959 li
148.526 100.959 li
148.609 100.876 li
148.609 100.709 li
148.692 100.792 li
148.692 100.709 li
148.776 100.626 li
148.942 100.626 li
148.942 100.709 li
149.026 100.626 li
149.026 100.542 li
149.192 100.376 li
149.442 100.376 li
149.359 100.376 li
149.442 100.292 li
149.526 100.292 li
149.526 100.459 li
149.692 100.292 li
149.609 100.292 li
149.692 100.376 li
149.776 100.209 li
149.776 100.376 li
149.942 100.209 li
149.942 100.126 li
150.026 100.042 li
150.026 100.126 li
150.192 99.959 li
150.192 99.876 li
150.442 99.876 li
150.442 99.959 li
150.609 99.792 li
150.526 99.792 li
150.776 99.792 li
150.692 99.792 li
150.942 99.792 li
150.859 99.792 li
151.026 99.626 li
151.026 99.542 li
151.109 99.626 li
151.109 99.542 li
151.192 99.459 li
151.192 99.542 li
151.192 99.459 li
151.276 99.376 li
151.276 99.292 li
151.359 99.459 li
151.359 99.292 li
151.442 99.376 li
151.692 99.126 li
151.692 99.042 li
151.692 99.126 li
151.776 99.209 li
151.942 99.042 li
151.942 98.959 li
151.942 99.042 li
152.109 98.876 li
152.109 98.959 li
152.109 98.876 li
152.276 98.876 li
152.192 98.876 li
152.276 98.959 li
152.526 98.709 li
152.442 98.709 li
152.526 98.792 li
152.609 98.626 li
152.692 98.542 li
152.776 98.542 li
152.859 98.459 li
152.859 98.542 li
152.942 98.459 li
153.026 98.459 li
153.109 98.542 li
153.192 98.459 li
153.192 98.376 li
153.276 98.459 li
153.526 98.459 li
153.526 98.292 li
153.692 98.126 li
153.776 98.209 li
153.776 98.042 li
153.859 97.959 li
153.942 98.042 li
153.942 97.959 li
153.942 98.042 li
154.026 98.126 li
154.109 97.876 li
154.192 97.959 li
154.192 97.876 li
154.276 97.959 li
154.276 97.792 li
154.359 97.709 li
154.442 97.709 li
154.442 97.959 li
154.526 97.876 li
154.609 97.709 li
154.692 97.626 li
154.692 97.709 li
154.692 97.626 li
154.776 97.709 li
154.859 97.709 li
154.942 97.626 li
155.026 97.626 li
155.109 97.542 li
155.192 97.542 li
155.359 97.376 li
155.359 97.292 li
155.442 97.126 li
155.442 97.209 li
155.526 97.126 li
155.526 97.209 li
155.526 97.126 li
155.609 97.126 li
155.692 97.209 li
@
120.109 122.292 mo
120.276 122.209 li
120.192 122.209 li
120.276 121.959 li
120.442 122.125 li
120.609 121.959 li
120.859 121.959 li
120.859 121.792 li
120.942 121.875 li
120.942 121.709 li
121.026 121.792 li
121.109 121.709 li
121.109 121.792 li
121.109 121.709 li
121.276 121.709 li
121.276 121.542 li
121.359 121.459 li
121.442 121.542 li
121.526 121.459 li
121.526 121.209 li
121.526 121.292 li
121.609 121.292 li
121.692 121.209 li
121.692 121.292 li
121.692 121.209 li
121.776 121.292 li
121.776 121.125 li
121.859 121.209 li
121.859 121.125 li
121.859 121.209 li
121.942 121.125 li
121.942 121.042 li
122.026 121.125 li
122.026 120.959 li
122.109 120.875 li
122.192 120.875 li
122.359 120.709 li
122.276 120.709 li
122.359 120.709 li
122.526 120.542 li
122.609 120.625 li
122.692 120.542 li
122.692 120.375 li
122.859 120.292 li
122.859 120.375 li
122.859 120.292 li
122.942 120.209 li
123.109 120.209 li
123.026 120.209 li
123.276 119.959 li
123.276 119.875 li
123.276 119.959 li
123.359 119.959 li
123.442 120.042 li
123.442 119.875 li
123.526 119.959 li
123.692 119.792 li
123.692 119.959 li
123.776 119.792 li
123.942 119.792 li
124.026 119.709 li
124.109 119.792 li
124.192 119.709 li
124.192 119.625 li
124.276 119.542 li
124.276 119.375 li
124.359 119.375 li
124.442 119.459 li
124.526 119.292 li
124.692 119.292 li
124.692 119.209 li
124.776 119.209 li
124.859 119.125 li
124.859 118.959 li
125.026 118.959 li
125.192 118.792 li
125.192 118.709 li
125.276 118.625 li
125.276 118.542 li
125.276 118.625 li
125.442 118.625 li
125.359 118.625 li
125.442 118.459 li
125.609 118.292 li
125.609 118.125 li
125.859 117.875 li
125.859 117.625 li
126.026 117.459 li
126.026 117.542 li
126.109 117.375 li
126.276 117.209 li
126.276 117.125 li
126.359 117.209 li
126.442 117.209 li
126.442 116.792 li
126.609 116.625 li
126.526 116.625 li
126.609 116.625 li
126.692 116.459 li
126.776 116.375 li
126.776 116.292 li
126.859 116.375 li
126.859 116.125 li
126.942 116.125 li
127.026 115.959 li
127.109 115.959 li
127.192 115.875 li
127.192 115.792 li
127.276 115.625 li
127.276 115.542 li
127.359 115.625 li
127.442 115.542 li
127.442 115.459 li
127.526 115.375 li
127.526 115.292 li
127.609 115.375 li
127.609 115.292 li
127.609 115.459 li
127.776 115.209 li
127.776 115.125 li
127.859 114.959 li
127.942 114.875 li
127.942 115.042 li
128.109 114.875 li
128.109 114.792 li
128.192 114.709 li
128.192 114.625 li
128.192 114.792 li
128.276 114.792 li
128.359 114.709 li
128.359 114.625 li
128.442 114.709 li
128.442 114.542 li
128.526 114.459 li
128.609 114.542 li
128.609 114.375 li
128.692 114.292 li
128.692 114.209 li
128.776 114.292 li
128.859 114.209 li
128.942 114.292 li
129.192 114.042 li
129.276 114.042 li
129.442 113.875 li
129.359 113.875 li
129.526 113.875 li
129.609 113.959 li
129.609 113.792 li
129.692 113.875 li
129.776 113.792 li
129.776 113.709 li
129.859 113.625 li
129.942 113.709 li
130.109 113.542 li
130.359 113.542 li
130.442 113.625 li
130.442 113.459 li
130.526 113.375 li
130.526 113.292 li
130.526 113.375 li
130.609 113.459 li
130.692 113.459 li
130.692 113.292 li
130.776 113.209 li
130.859 113.292 li
130.942 113.292 li
130.942 113.125 li
131.026 113.125 li
131.026 112.959 li
131.109 113.042 li
131.192 112.959 li
131.276 113.042 li
131.276 112.875 li
131.359 112.959 li
131.526 112.792 li
131.526 112.875 li
131.609 112.792 li
131.609 112.709 li
131.693 112.792 li
131.776 112.792 li
131.776 112.625 li
131.859 112.625 li
131.943 112.709 li
132.026 112.625 li
132.109 112.459 li
132.109 112.542 li
132.109 112.459 li
132.193 112.375 li
132.276 112.459 li
132.443 112.209 li
132.443 112.125 li
132.526 112.209 li
132.776 111.959 li
132.776 111.875 li
132.776 111.959 li
132.859 111.792 li
132.943 111.875 li
133.026 111.875 li
133.193 111.709 li
133.193 111.542 li
133.443 111.292 li
133.443 111.375 li
133.609 111.292 li
133.526 111.292 li
133.609 111.209 li
133.693 111.209 li
133.776 111.042 li
133.776 111.125 li
133.859 111.209 li
133.859 111.042 li
133.943 111.125 li
134.026 110.959 li
134.109 110.959 li
134.109 110.709 li
134.193 110.792 li
134.193 110.709 li
134.276 110.792 li
134.276 110.625 li
134.359 110.709 li
134.443 110.709 li
134.443 110.542 li
134.526 110.459 li
134.526 110.542 li
134.776 110.292 li
134.776 110.375 li
135.026 110.125 li
135.026 110.042 li
135.109 109.959 li
135.193 110.042 li
135.276 109.959 li
135.443 109.959 li
135.526 109.709 li
135.693 109.542 li
135.859 109.459 li
135.776 109.459 li
135.943 109.292 li
135.943 109.209 li
136.109 109.042 li
136.193 109.125 li
136.276 109.042 li
136.276 108.959 li
136.443 108.959 li
136.359 108.959 li
136.443 108.792 li
136.526 108.792 li
136.526 108.625 li
136.609 108.542 li
136.859 108.542 li
136.859 108.375 li
137.026 108.209 li
137.109 108.292 li
137.109 108.125 li
137.109 108.209 li
137.193 108.209 li
137.359 108.042 li
137.359 107.959 li
137.443 107.875 li
137.443 107.959 li
137.693 107.709 li
137.859 107.709 li
137.776 107.709 li
137.859 107.459 li
@
104.692 132.459 mo
104.775 132.376 li
104.859 132.459 li
104.942 132.376 li
105.025 132.376 li
105.025 132.209 li
105.192 132.376 li
105.192 132.209 li
105.192 132.292 li
105.275 132.209 li
105.275 132.042 li
105.359 132.042 li
105.442 132.126 li
105.442 132.042 li
105.525 131.959 li
105.609 131.792 li
105.609 131.876 li
105.609 131.792 li
105.692 131.876 li
105.859 131.709 li
105.859 131.542 li
105.942 131.542 li
105.942 131.376 li
106.025 131.459 li
106.025 131.542 li
106.192 131.376 li
106.192 131.459 li
106.192 131.376 li
106.275 131.459 li
106.275 131.209 li
106.359 131.209 li
106.442 131.126 li
106.525 131.126 li
106.525 130.959 li
106.609 131.042 li
106.609 130.959 li
106.692 131.042 li
106.692 130.959 li
106.775 130.876 li
106.775 130.792 li
106.859 130.876 li
106.859 130.959 li
107.025 130.626 li
107.025 130.542 li
107.109 130.709 li
107.192 130.626 li
107.192 130.709 li
107.275 130.542 li
107.275 130.626 li
107.275 130.459 li
107.359 130.542 li
107.359 130.459 li
107.442 130.376 li
107.442 130.292 li
107.609 130.209 li
107.525 130.209 li
107.692 130.042 li
107.775 130.126 li
107.942 129.959 li
107.942 129.876 li
108.025 129.792 li
108.025 129.709 li
108.025 129.792 li
108.109 129.709 li
108.192 129.792 li
108.275 129.792 li
108.359 129.709 li
108.359 129.542 li
108.359 129.709 li
108.525 129.542 li
108.525 129.376 li
108.609 129.292 li
108.609 129.376 li
108.775 129.376 li
108.692 129.376 li
108.775 129.209 li
108.942 129.376 li
108.859 129.376 li
108.942 129.209 li
109.025 129.209 li
109.275 128.959 li
109.192 128.959 li
109.275 128.959 li
109.359 128.876 li
109.359 128.959 li
109.359 128.876 li
109.442 129.042 li
109.442 128.959 li
109.442 129.042 li
109.609 128.876 li
109.692 128.959 li
109.692 128.876 li
109.859 128.876 li
109.942 128.792 li
109.942 128.876 li
109.942 128.792 li
110.025 128.709 li
110.025 128.626 li
110.025 128.709 li
110.192 128.709 li
110.192 128.542 li
110.359 128.709 li
110.359 128.542 li
110.442 128.459 li
110.442 128.376 li
110.525 128.459 li
110.525 128.376 li
110.609 128.459 li
110.609 128.376 li
110.775 128.376 li
110.692 128.376 li
110.775 128.126 li
110.942 128.292 li
111.025 128.126 li
111.025 127.959 li
111.109 128.042 li
111.275 127.876 li
111.275 127.959 li
111.359 127.876 li
111.359 127.959 li
111.359 127.876 li
111.442 127.876 li
111.525 127.959 li
111.525 127.876 li
111.911 127.44 111.744 127.761 111.942 127.542 cv
111.942 127.459 li
112.025 127.542 li
112.025 127.459 li
112.025 127.626 li
112.192 127.459 li
112.192 127.376 li
112.275 127.209 li
112.275 127.126 li
112.359 127.292 li
112.359 127.209 li
112.359 127.292 li
112.525 127.126 li
112.525 127.042 li
112.609 126.876 li
112.609 126.792 li
112.609 126.959 li
112.692 126.876 li
112.775 126.709 li
112.859 126.792 li
112.859 126.709 li
112.942 126.792 li
112.942 126.542 li
113.025 126.542 li
113.025 126.709 li
113.109 126.626 li
113.109 126.459 li
113.192 126.376 li
113.192 126.459 li
113.276 126.376 li
113.276 126.459 li
113.442 126.292 li
113.442 126.209 li
113.526 126.292 li
113.526 126.126 li
113.526 126.209 li
113.609 126.126 li
113.609 125.959 li
113.692 126.042 li
113.692 125.876 li
113.776 125.959 li
113.776 126.042 li
113.859 125.959 li
113.942 125.792 li
113.942 125.626 li
114.109 125.626 li
114.109 125.542 li
114.109 125.626 li
114.192 125.709 li
114.192 125.542 li
114.276 125.542 li
114.276 125.376 li
114.359 125.459 li
114.359 125.376 li
114.442 125.292 li
114.526 125.376 li
114.526 125.292 li
114.692 125.126 li
114.692 125.042 li
114.859 125.042 li
115.192 124.709 li
115.192 124.792 li
115.276 124.709 li
115.276 124.626 li
115.359 124.542 li
115.359 124.626 li
115.359 124.542 li
115.526 124.376 li
115.526 124.459 li
115.692 124.376 li
115.609 124.376 li
115.692 124.292 li
115.776 124.376 li
115.776 124.292 li
115.942 124.126 li
115.859 124.126 li
116.026 124.292 li
116.026 124.209 li
116.109 124.292 li
116.109 124.042 li
116.109 124.126 li
116.192 124.209 li
116.276 124.126 li
116.276 124.209 li
116.276 124.126 li
116.442 124.126 li
116.442 124.209 li
116.526 124.042 li
116.526 123.959 li
116.609 124.042 li
116.609 123.959 li
116.776 123.792 li
116.776 123.709 li
116.859 123.792 li
116.859 123.626 li
116.942 123.709 li
117.026 123.709 li
117.109 123.542 li
117.192 123.542 li
117.192 123.376 li
117.276 123.459 li
117.276 123.376 li
117.359 123.459 li
117.359 123.542 li
117.359 123.376 li
117.442 123.459 li
117.442 123.292 li
117.526 123.209 li
117.609 123.292 li
117.692 123.209 li
117.692 123.292 li
117.692 123.209 li
117.776 123.126 li
117.859 123.209 li
117.859 123.292 li
118.026 123.126 li
117.942 123.126 li
118.026 123.209 li
118.192 123.042 li
118.276 123.126 li
118.276 123.042 li
118.359 123.126 li
118.776 123.126 li
118.859 123.042 li
118.859 122.959 li
118.942 123.042 li
118.942 122.959 li
119.109 122.959 li
119.192 122.876 li
119.276 122.876 li
119.359 122.959 li
119.442 122.792 li
119.442 122.626 li
119.609 122.626 li
119.526 122.626 li
119.609 122.709 li
119.692 122.626 li
119.692 122.459 li
119.776 122.542 li
119.859 122.459 li
119.942 122.542 li
119.942 122.376 li
120.026 122.459 li
120.026 122.292 li
120.109 122.292 li
@
87.5249 144.459 mo
87.5249 144.376 li
87.6919 144.376 li
87.8579 144.209 li
88.1079 144.209 li
88.0249 144.209 li
88.1079 144.209 li
88.2749 144.042 li
88.4419 144.042 li
88.3579 144.042 li
88.4419 144.042 li
88.6079 143.876 li
88.6919 143.959 li
88.6919 143.876 li
88.7749 143.959 li
88.7749 144.042 li
88.8579 143.959 li
88.8579 144.042 li
88.8579 143.959 li
89.1079 143.959 li
89.1079 144.042 li
89.1919 143.876 li
89.2749 143.959 li
89.2749 143.709 li
89.3579 143.709 li
89.5249 143.876 li
89.5249 143.792 li
89.6079 143.876 li
89.6079 143.709 li
89.6079 143.792 li
89.6919 143.876 li
89.7749 143.792 li
89.7749 143.876 li
89.7749 143.709 li
89.8579 143.709 li
89.9419 143.876 li
90.0249 143.959 li
90.0249 143.792 li
90.2749 143.542 li
90.1919 143.542 li
90.2749 143.626 li
90.4419 143.459 li
90.3579 143.459 li
90.4419 143.542 li
90.5249 143.376 li
90.6919 143.542 li
90.7749 143.459 li
90.7749 143.376 li
90.8579 143.292 li
90.8579 143.376 li
90.9419 143.459 li
90.9419 143.292 li
91.0249 143.376 li
91.1079 143.292 li
91.1079 143.376 li
91.1919 143.292 li
91.1919 143.376 li
91.3579 143.209 li
91.4419 143.292 li
91.4419 143.209 li
91.5249 143.292 li
91.7749 143.292 li
91.7749 143.376 li
91.7749 143.292 li
91.9419 143.292 li
91.9419 143.209 li
92.0249 143.126 li
92.1079 143.126 li
92.2749 142.959 li
92.3579 142.792 li
92.4419 142.876 li
92.4419 142.959 li
92.6079 142.792 li
92.6079 142.876 li
92.6079 142.792 li
92.6919 142.709 li
92.6919 142.626 li
92.7749 142.709 li
92.7749 142.626 li
92.7749 142.709 li
92.9419 142.709 li
92.8579 142.709 li
92.9419 142.709 li
93.0249 142.542 li
93.0249 142.376 li
93.0249 142.459 li
93.1079 142.542 li
93.1919 142.459 li
93.1919 142.376 li
93.2749 142.459 li
93.3579 142.459 li
93.4419 142.542 li
93.5249 142.459 li
93.5249 142.376 li
93.6079 142.459 li
93.6079 142.292 li
93.6919 142.209 li
93.6919 142.126 li
93.8579 141.959 li
93.8579 141.792 li
93.9419 141.876 li
93.9419 141.792 li
93.9419 141.876 li
94.1079 141.709 li
94.1919 141.792 li
94.1919 141.709 li
94.1919 141.792 li
94.4419 141.542 li
94.4419 141.459 li
94.5249 141.459 li
94.6079 141.376 li
94.6079 141.292 li
94.6919 141.376 li
95.0249 141.042 li
95.0249 140.959 li
95.1079 140.959 li
95.3579 140.709 li
95.2749 140.709 li
95.3579 140.792 li
95.5249 140.626 li
95.5249 140.459 li
95.6079 140.376 li
95.6079 140.292 li
95.6079 140.376 li
95.7749 140.376 li
95.9419 140.209 li
95.9419 140.292 li
95.9419 140.209 li
96.1079 140.209 li
96.1919 140.126 li
96.1919 139.959 li
96.3589 139.792 li
96.3589 139.876 li
96.7749 139.459 li
96.8589 139.459 li
97.0249 139.292 li
97.1089 139.376 li
97.1089 139.209 li
97.1919 139.126 li
97.1919 139.042 li
97.2749 139.126 li
97.5249 138.876 li
97.5249 138.792 li
97.6919 138.792 li
97.6919 138.709 li
97.7749 138.626 li
97.7749 138.376 li
97.8589 138.376 li
97.9419 138.292 li
98.0249 138.376 li
98.1089 138.292 li
98.1089 138.376 li
98.1089 138.292 li
98.2749 138.126 li
98.2749 138.042 li
98.3589 137.876 li
98.3589 137.959 li
98.3589 137.876 li
98.4419 137.792 li
98.5249 137.792 li
98.6089 137.876 li
98.6919 137.792 li
98.6919 137.876 li
98.6919 137.709 li
98.7749 137.626 li
98.8589 137.459 li
98.8589 137.542 li
98.9419 137.459 li
98.9419 137.542 li
98.9419 137.459 li
99.1089 137.459 li
99.0249 137.459 li
99.1089 137.376 li
99.1919 137.376 li
99.2749 137.292 li
99.2749 137.209 li
99.3589 137.292 li
99.3589 137.209 li
99.5249 137.042 li
99.6919 137.042 li
99.6919 136.876 li
99.9419 136.876 li
100.025 136.792 li
100.025 136.876 li
100.275 136.626 li
100.442 136.626 li
100.359 136.626 li
100.442 136.626 li
100.525 136.709 li
100.609 136.709 li
100.775 136.459 li
100.692 136.459 li
100.775 136.459 li
100.859 136.542 li
100.859 136.626 li
101.025 136.459 li
101.025 136.376 li
101.109 136.376 li
101.359 136.126 li
101.359 136.042 li
101.442 135.959 li
101.442 135.876 li
101.442 135.959 li
101.525 135.792 li
101.525 135.876 li
101.525 135.709 li
101.609 135.792 li
101.609 135.709 li
101.692 135.792 li
101.692 135.709 li
101.859 135.542 li
101.859 135.376 li
101.942 135.459 li
102.025 135.376 li
102.025 135.459 li
102.109 135.292 li
102.109 135.209 li
102.192 135.292 li
102.192 135.126 li
102.275 135.209 li
102.275 135.126 li
102.359 134.959 li
102.525 134.792 li
102.525 134.876 li
102.609 134.792 li
102.692 134.792 li
102.692 134.459 li
102.859 134.292 li
102.942 134.292 li
103.025 134.209 li
103.109 134.292 li
103.109 134.042 li
103.192 133.876 li
103.275 133.876 li
103.275 133.709 li
103.442 133.709 li
103.442 133.542 li
103.609 133.376 li
103.609 133.292 li
103.692 133.376 li
103.692 133.292 li
103.775 133.042 li
103.859 132.959 li
103.942 133.042 li
103.942 132.792 li
104.025 132.876 li
104.109 132.709 li
104.109 132.626 li
104.192 132.709 li
104.359 132.709 li
104.275 132.709 li
104.359 132.709 li
104.442 132.626 li
104.442 132.709 li
104.442 132.459 li
104.525 132.459 li
104.609 132.542 li
104.609 132.376 li
104.609 132.542 li
104.692 132.626 li
104.692 132.459 li
@
69.4419 154.459 mo
69.5249 154.459 li
69.7749 154.209 li
69.8589 154.209 li
69.9419 154.126 li
69.9419 154.209 li
70.0249 154.126 li
70.1919 154.126 li
70.1919 153.959 li
70.2749 153.876 li
70.2749 153.959 li
70.4419 153.792 li
70.4419 153.876 li
70.6089 153.709 li
70.6089 153.542 li
70.6919 153.626 li
70.7749 153.542 li
70.8639 153.425 71.1429 153.423 71.1089 153.209 cv
71.1919 153.126 li
71.1919 153.292 li
71.4419 153.042 li
71.5249 153.042 li
71.6089 152.959 li
71.7749 152.959 li
71.6919 152.959 li
71.7749 152.959 li
71.8589 152.876 li
71.9419 152.876 li
72.1919 152.626 li
72.1089 152.626 li
72.3589 152.626 li
72.2749 152.626 li
72.3589 152.542 li
72.4419 152.626 li
72.4419 152.459 li
72.5249 152.376 li
72.5249 152.292 li
72.6089 152.209 li
72.6089 152.292 li
72.6089 152.209 li
72.6919 152.376 li
72.6919 152.292 li
72.7749 152.376 li
72.7749 152.042 li
72.9419 152.042 li
72.9419 151.959 li
73.0249 152.042 li
73.0249 152.126 li
73.0249 151.959 li
73.1919 151.792 li
73.1089 151.792 li
73.1919 151.876 li
73.2749 151.792 li
73.3589 151.626 li
73.4419 151.626 li
73.5249 151.542 li
73.6089 151.626 li
73.9419 151.292 li
74.0249 151.376 li
74.2749 151.126 li
74.3589 151.209 li
74.5249 151.042 li
74.4419 151.042 li
74.5249 151.209 li
74.6089 151.209 li
74.6089 151.042 li
74.6919 150.959 li
74.8589 150.959 li
74.9419 150.876 li
74.9419 151.042 li
74.9419 150.959 li
75.1089 150.959 li
75.1919 150.876 li
75.1919 150.709 li
75.3589 150.959 li
75.2749 150.959 li
75.5249 150.959 li
75.6089 150.876 li
75.6089 150.709 li
75.8589 150.709 li
75.9419 150.792 li
76.0249 150.709 li
76.1089 150.709 li
76.1089 150.542 li
76.1919 150.626 li
76.1919 150.709 li
76.3589 150.542 li
76.4419 150.542 li
76.5249 150.376 li
76.6089 150.459 li
76.6089 150.292 li
76.6919 150.292 li
76.7749 150.209 li
76.8589 150.209 li
76.8589 150.042 li
76.9419 150.126 li
76.9419 150.209 li
76.9419 150.126 li
77.1089 149.959 li
77.1089 150.042 li
77.5249 149.626 li
77.6089 149.709 li
77.6919 149.709 li
77.7749 149.626 li
77.7749 149.459 li
77.9419 149.292 li
78.0249 149.292 li
78.0249 149.459 li
78.1089 149.209 li
78.2759 149.042 li
78.2759 148.959 li
78.3589 149.042 li
78.3589 148.959 li
78.5259 148.959 li
78.4419 148.959 li
78.5259 149.042 li
78.6089 148.876 li
78.7759 148.876 li
78.6919 148.876 li
78.7759 148.876 li
78.8589 148.709 li
78.9419 148.626 li
78.9419 148.542 li
79.0259 148.626 li
79.0259 148.542 li
79.1089 148.626 li
79.1089 148.542 li
79.1089 148.626 li
79.1919 148.459 li
79.3589 148.459 li
79.2759 148.459 li
79.3589 148.209 li
79.4419 148.292 li
79.6919 148.042 li
79.6919 147.959 li
79.8589 147.959 li
79.8589 147.876 li
79.9419 147.959 li
79.9419 148.042 li
80.0259 147.876 li
80.1089 147.792 li
80.1919 147.792 li
80.2759 147.876 li
80.3589 147.792 li
80.3589 147.709 li
80.4419 147.626 li
80.5259 147.626 li
80.6089 147.792 li
80.6089 147.709 li
80.6919 147.626 li
80.6919 147.709 li
80.6919 147.626 li
80.7759 147.542 li
80.7759 147.459 li
80.8589 147.542 li
80.8589 147.459 li
80.8589 147.626 li
81.0259 147.542 li
80.9419 147.542 li
81.0259 147.542 li
81.1089 147.459 li
81.1919 147.542 li
81.2759 147.459 li
81.2759 147.542 li
81.2759 147.459 li
81.3589 147.459 li
81.3589 147.292 li
81.4419 147.376 li
81.6089 147.209 li
81.7759 147.376 li
81.8589 147.292 li
81.8589 147.376 li
81.9419 147.292 li
81.9419 147.376 li
82.0259 147.209 li
82.1919 147.042 li
82.1089 147.042 li
82.1919 147.126 li
82.2759 147.126 li
82.3589 147.042 li
82.3589 147.126 li
82.5259 146.959 li
82.4419 146.959 li
82.6089 146.959 li
82.7759 146.792 li
82.6919 146.792 li
82.7759 146.876 li
82.8589 146.792 li
82.8589 146.709 li
83.0259 146.542 li
83.1089 146.626 li
83.1089 146.709 li
83.1919 146.626 li
83.2759 146.709 li
83.2759 146.626 li
83.2759 146.709 li
83.3589 146.709 li
83.3589 146.542 li
83.4419 146.459 li
83.4419 146.542 li
83.6089 146.709 li
83.6919 146.626 li
83.7759 146.626 li
83.8589 146.542 li
83.8589 146.459 li
84.0259 146.459 li
83.9419 146.459 li
84.1919 146.209 li
84.3589 146.209 li
84.2759 146.209 li
84.3589 146.209 li
84.4419 146.292 li
84.4419 146.126 li
84.5259 146.126 li
84.6919 145.959 li
84.6919 145.876 li
84.7759 145.792 li
84.7759 145.959 li
84.9419 145.959 li
84.9419 146.042 li
85.0259 145.959 li
85.0259 145.792 li
85.1089 145.709 li
85.1919 145.709 li
85.2759 145.792 li
85.6089 145.459 li
85.6919 145.542 li
85.7759 145.542 li
86.0259 145.292 li
86.1089 145.376 li
86.1919 145.292 li
86.3589 145.292 li
86.3589 145.126 li
86.4419 145.209 li
86.4419 145.042 li
86.5259 145.126 li
86.6089 144.959 li
86.7759 145.126 li
86.7759 145.209 li
86.8589 144.959 li
86.8589 144.792 li
86.9419 144.709 li
87.0259 144.792 li
87.0259 144.876 li
87.1089 144.709 li
87.1089 144.792 li
87.1919 144.626 li
87.2759 144.709 li
87.4419 144.542 li
87.4419 144.376 li
87.5259 144.459 li
@
53.8589 196.376 mo
53.9419 196.293 li
54.0259 196.293 li
54.1089 196.209 li
54.1089 196.293 li
54.1919 196.376 li
54.2759 196.293 li
54.4419 196.293 li
54.4419 196.126 li
54.5259 196.043 li
54.6089 196.126 li
54.6089 196.043 li
54.6919 195.959 li
54.6919 195.876 li
54.7759 195.793 li
54.7759 195.626 li
54.8589 195.543 li
54.8589 195.376 li
54.9419 195.293 li
54.9419 195.126 li
55.0259 194.959 li
55.0259 194.626 li
55.1089 194.543 li
55.1089 194.293 li
55.1919 194.126 li
55.2719 193.073 55.4899 192.037 55.5259 190.959 cv
55.6089 190.709 li
55.6089 190.126 li
55.6919 189.626 li
55.6919 189.293 li
55.9329 187.825 55.9269 186.06 56.1089 184.626 cv
56.1089 184.293 li
56.1919 183.876 li
56.1919 183.209 li
56.2759 182.626 li
56.2759 182.293 li
56.3589 181.793 li
56.3589 180.959 li
56.4419 180.709 li
56.5259 180.376 li
56.5259 179.126 li
56.6089 178.709 li
56.6089 177.959 li
56.6919 177.709 li
56.6919 177.209 li
56.7759 176.959 li
56.7759 176.209 li
57.0619 173.761 57.2619 171.437 57.6919 169.043 cv
57.6919 168.959 li
57.7759 168.709 li
57.7759 168.209 li
57.8589 168.126 li
57.8589 168.043 li
57.9419 167.959 li
57.9419 167.543 li
58.0259 167.376 li
58.0259 167.293 li
58.1089 167.209 li
58.1089 166.793 li
58.1919 166.626 li
58.1919 166.543 li
58.2759 166.376 li
58.2759 166.293 li
58.3589 166.209 li
58.3589 165.959 li
58.5259 165.709 li
58.5259 165.459 li
58.6089 165.293 li
58.6089 165.209 li
58.6919 165.126 li
58.6919 165.043 li
58.7759 164.876 li
58.8589 164.793 li
58.9419 164.543 li
58.9419 164.376 li
58.9419 164.459 li
59.1089 164.293 li
59.1089 164.209 li
59.1919 163.959 li
59.4419 163.709 li
59.5259 163.543 li
59.5259 163.376 li
59.6919 163.376 li
59.6089 163.376 li
59.7759 163.209 li
59.7759 163.126 li
59.9419 162.959 li
59.8589 162.959 li
59.9419 163.126 li
60.1089 162.959 li
60.1089 162.876 li
60.1089 162.959 li
60.1919 162.876 li
60.1919 162.709 li
60.2759 162.626 li
60.3589 162.459 li
60.4419 162.459 li
60.5259 162.376 li
60.5259 162.293 li
60.6089 162.376 li
60.6089 162.293 li
60.6919 162.209 li
60.6919 162.293 li
60.7759 162.209 li
60.7759 162.043 li
60.9419 161.876 li
60.9419 161.959 li
61.0259 161.876 li
61.0259 161.959 li
61.1089 161.876 li
61.1089 161.626 li
61.1919 161.626 li
61.1919 161.459 li
61.2759 161.543 li
61.3589 161.459 li
61.3589 161.376 li
61.4419 161.293 li
61.6089 161.293 li
61.5259 161.293 li
61.6089 161.209 li
61.6919 161.293 li
61.6919 161.043 li
61.7759 160.959 li
61.7759 161.043 li
61.8589 160.959 li
61.8589 161.043 li
62.0259 160.876 li
62.1089 160.959 li
62.2759 160.709 li
62.2759 160.626 li
62.3589 160.543 li
62.3589 160.626 li
62.6089 160.376 li
62.7759 160.376 li
62.6929 160.376 li
62.7759 160.376 li
62.8589 160.293 li
62.8589 160.376 li
62.8589 160.293 li
62.9429 160.209 li
62.9429 160.043 li
63.0259 159.959 li
63.1089 159.793 li
63.1929 159.876 li
63.1929 159.793 li
63.2759 159.876 li
63.2759 159.709 li
63.3589 159.626 li
63.3589 159.543 li
63.4429 159.459 li
63.4429 159.543 li
63.5259 159.626 li
63.5259 159.543 li
63.6929 159.376 li
63.6089 159.376 li
63.7759 159.543 li
63.7759 159.376 li
63.8589 159.459 li
64.0259 159.293 li
64.2759 159.293 li
64.1929 159.293 li
64.2759 159.209 li
64.3589 159.209 li
64.3589 159.043 li
64.4429 159.126 li
64.6089 158.959 li
64.6089 158.876 li
64.6929 158.876 li
64.7759 158.793 li
64.9429 158.793 li
65.1929 158.543 li
65.1929 158.459 li
65.2759 158.376 li
65.2759 158.459 li
65.4429 158.293 li
65.5259 158.293 li
65.6929 157.959 li
65.6929 158.043 li
65.6929 157.793 li
65.8589 157.793 li
65.9429 157.709 li
65.9429 157.793 li
66.0259 157.709 li
66.0259 157.793 li
66.0259 157.626 li
66.1089 157.709 li
66.1089 157.543 li
66.1929 157.376 li
66.2759 157.459 li
66.2759 157.543 li
66.2759 157.376 li
66.3589 157.376 li
66.5259 157.209 li
66.5259 157.293 li
66.5259 157.126 li
66.6929 157.126 li
66.6089 157.126 li
66.6929 157.126 li
66.7759 157.043 li
66.7759 157.126 li
66.8589 157.043 li
66.8589 157.126 li
66.8589 156.959 li
66.9429 156.876 li
67.0259 156.959 li
67.0259 156.876 li
67.1089 156.626 li
67.1929 156.626 li
67.2759 156.709 li
67.2759 156.543 li
67.3589 156.626 li
67.4429 156.376 li
67.4429 156.459 li
67.4429 156.293 li
67.5259 156.209 li
67.8589 156.209 li
67.8589 156.043 li
67.9429 156.043 li
68.0259 155.876 li
68.0259 155.959 li
68.0259 155.876 li
68.1089 155.793 li
68.1089 155.709 li
68.1089 155.793 li
68.2759 155.626 li
68.4429 155.626 li
68.4429 155.459 li
68.5259 155.459 li
68.6929 155.376 li
68.6929 155.459 li
68.8589 155.209 li
68.8589 155.126 li
68.9429 155.043 li
68.9429 154.959 li
69.0259 154.876 li
69.0259 154.959 li
69.2759 154.709 li
69.3589 154.793 li
69.4429 154.626 li
69.4429 154.459 li
@
37.6089 196.543 mo
37.8589 196.543 li
37.9419 196.46 li
37.9419 196.376 li
37.9419 196.46 li
38.1089 196.293 li
38.0259 196.293 li
38.1089 196.376 li
38.1919 196.376 li
38.2759 196.46 li
38.3589 196.293 li
38.4419 196.21 li
38.6089 196.21 li
38.5259 196.21 li
38.7759 196.46 li
38.7759 196.543 li
39.0259 196.293 li
38.9419 196.293 li
39.1089 196.46 li
39.1919 196.376 li
39.2759 196.46 li
39.2759 196.543 li
39.4419 196.376 li
39.3589 196.376 li
39.4419 196.46 li
39.5259 196.376 li
39.5259 196.46 li
39.5259 196.376 li
39.6089 196.46 li
39.6919 196.46 li
39.7759 196.376 li
39.8589 196.46 li
40.0259 196.293 li
40.0259 196.376 li
40.1089 196.293 li
40.1089 196.46 li
40.1919 196.543 li
40.3589 196.376 li
40.3589 196.46 li
40.3589 196.376 li
40.5259 196.543 li
40.5259 196.46 li
40.5259 196.543 li
40.6089 196.46 li
40.6089 196.543 li
40.6919 196.46 li
40.6919 196.376 li
40.7759 196.293 li
40.7759 196.21 li
40.7759 196.376 li
40.9419 196.376 li
41.0259 196.46 li
41.1089 196.376 li
41.1919 196.46 li
41.1919 196.376 li
41.3589 196.376 li
41.3589 196.293 li
41.4419 196.376 li
41.5259 196.293 li
41.5259 196.376 li
41.5259 196.293 li
41.6089 196.376 li
41.6089 196.21 li
41.7759 196.293 li
41.7759 196.21 li
41.8589 196.293 li
41.8589 196.376 li
41.9419 196.46 li
41.9419 196.376 li
41.9419 196.46 li
42.1089 196.376 li
42.0259 196.376 li
42.1919 196.21 li
42.2759 196.21 li
42.2759 196.376 li
42.3589 196.293 li
42.4419 196.376 li
42.6089 196.376 li
42.6089 196.293 li
42.6919 196.21 li
42.7759 196.293 li
42.7759 196.21 li
42.7759 196.376 li
42.8589 196.293 li
42.8589 196.376 li
42.9419 196.293 li
42.9419 196.376 li
43.0259 196.46 li
43.0259 196.376 li
43.1089 196.46 li
43.1089 196.376 li
43.1089 196.46 li
43.1919 196.376 li
43.1919 196.46 li
43.3589 196.293 li
43.3589 196.376 li
43.4419 196.293 li
43.4419 196.376 li
43.5259 196.293 li
43.6919 196.46 li
43.6919 196.543 li
43.7759 196.46 li
43.7759 196.543 li
43.8589 196.376 li
44.0259 196.376 li
43.9419 196.376 li
44.0259 196.293 li
44.1919 196.293 li
44.1919 196.21 li
44.2759 196.376 li
44.6089 196.376 li
44.5259 196.376 li
44.6089 196.376 li
44.7759 196.543 li
44.6919 196.543 li
44.7759 196.46 li
44.8589 196.21 li
44.8589 196.126 li
44.8589 196.293 li
44.9419 196.376 li
44.9419 196.46 li
44.9419 196.376 li
45.0259 196.376 li
45.1919 196.46 li
45.1089 196.46 li
45.1919 196.543 li
45.2759 196.46 li
45.2759 196.626 li
45.2759 196.46 li
45.3589 196.543 li
45.5259 196.376 li
45.5259 196.46 li
45.6919 196.543 li
45.6919 196.46 li
45.7759 196.46 li
45.8589 196.376 li
45.9419 196.46 li
46.0259 196.46 li
46.1089 196.376 li
46.1089 196.46 li
46.1919 196.543 li
46.1919 196.46 li
46.2759 196.543 li
46.2759 196.376 li
46.3589 196.293 li
46.3589 196.46 li
46.5259 196.46 li
46.5259 196.543 li
46.6089 196.626 li
46.6929 196.543 li
46.6929 196.46 li
46.7759 196.543 li
46.7759 196.46 li
46.8589 196.626 li
46.8589 196.543 li
46.9429 196.46 li
46.9429 196.543 li
47.0259 196.46 li
47.1929 196.46 li
47.1089 196.46 li
47.1929 196.543 li
47.2759 196.46 li
47.3589 196.543 li
47.3589 196.46 li
47.5259 196.543 li
47.5259 196.626 li
47.5259 196.543 li
47.6089 196.46 li
47.6929 196.46 li
47.7759 196.293 li
47.8589 196.293 li
47.9429 196.376 li
47.9429 196.293 li
48.0259 196.46 li
48.0259 196.293 li
48.1089 196.21 li
48.1089 196.293 li
48.2759 196.46 li
48.2759 196.543 li
48.3589 196.46 li
48.3589 196.626 li
48.4429 196.46 li
48.4429 196.376 li
48.5259 196.543 li
48.5259 196.376 li
48.6089 196.46 li
48.6929 196.376 li
48.7759 196.376 li
48.8589 196.293 li
48.9429 196.293 li
48.9429 196.46 li
49.0259 196.46 li
49.1089 196.376 li
49.1089 196.46 li
49.1929 196.376 li
49.3589 196.543 li
49.3589 196.293 li
49.5259 196.293 li
49.6089 196.376 li
49.6929 196.626 li
49.6929 196.543 li
49.6929 196.626 li
49.7759 196.543 li
49.7759 196.626 li
49.8589 196.46 li
49.9429 196.376 li
50.0259 196.46 li
50.0259 196.543 li
50.1089 196.376 li
50.1089 196.543 li
50.1929 196.46 li
50.3589 196.46 li
50.2759 196.46 li
50.3589 196.543 li
50.5259 196.376 li
50.4429 196.376 li
50.5259 196.543 li
50.6089 196.46 li
50.6089 196.626 li
50.7759 196.626 li
50.6929 196.626 li
50.7759 196.46 li
50.8589 196.543 li
50.9429 196.46 li
51.1089 196.46 li
51.1929 196.376 li
51.1929 196.46 li
51.2759 196.376 li
51.2759 196.46 li
51.2759 196.376 li
51.3589 196.46 li
51.3589 196.376 li
51.4429 196.46 li
51.4429 196.376 li
51.4429 196.46 li
51.6089 196.626 li
51.6089 196.46 li
51.6929 196.543 li
51.6929 196.376 li
51.7759 196.46 li
51.7759 196.376 li
51.8589 196.293 li
51.8589 196.376 li
51.8589 196.293 li
52.0259 196.293 li
52.0259 196.46 li
52.1929 196.376 li
52.1929 196.46 li
52.1929 196.376 li
52.3589 196.376 li
52.2759 196.376 li
52.3589 196.376 li
52.4429 196.293 li
52.4429 196.376 li
52.6089 196.543 li
52.5259 196.543 li
52.6089 196.376 li
52.6089 196.46 li
52.6929 196.376 li
52.7759 196.376 li
52.8589 196.46 li
52.8589 196.626 li
53.0259 196.46 li
53.0259 196.293 li
53.1929 196.46 li
53.1089 196.46 li
53.3589 196.46 li
53.3589 196.543 li
53.3589 196.46 li
53.4429 196.376 li
53.4429 196.46 li
53.5259 196.293 li
53.6089 196.376 li
53.6089 196.293 li
53.6929 196.376 li
53.7759 196.293 li
53.8589 196.376 li
53.8589 196.46 li
53.8589 196.376 li
@
gsave
36.0249 198.71 mo
326.942 198.71 li
326.942 17.127 li
36.0249 17.127 li
cp
clp
36.1089 196.377 mo
36.1089 196.294 li
36.1919 196.377 li
36.1919 196.46 li
36.2759 196.294 li
36.3589 196.46 li
36.3589 196.377 li
36.4419 196.46 li
36.4419 196.294 li
36.4419 196.377 li
36.5259 196.377 li
36.6089 196.294 li
36.7759 196.294 li
36.8589 196.46 li
36.9419 196.544 li
36.9419 196.627 li
36.9419 196.46 li
37.0259 196.544 li
37.0259 196.46 li
37.0259 196.544 li
37.1089 196.377 li
37.1089 196.46 li
37.1919 196.294 li
37.1919 196.377 li
37.2759 196.46 li
37.2759 196.377 li
37.3589 196.46 li
37.5259 196.46 li
37.4419 196.46 li
37.5259 196.544 li
37.6919 196.544 li
37.6089 196.544 li
@
grestore
gsave
-12.7481 0 mo
362.252 0 li
362.252 225.043 li
-12.7481 225.043 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06
742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81
A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF6
26A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA
1EAAF79B76AA2B52CCF0307B360E6D> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A0
65D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D55
9B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C2
47BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC
9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD8
8F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF57
5C72F67F4BEBB98F8AFA57505EC9> |-
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/k <1C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A32
0C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |-
/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B964
70F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330D
C4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556
CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1
E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F51
7D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F
992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE3879399
0906DA8D7F8ACFF6D70790F06B02> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 32 /space put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven /eight /nine 39{/.notdef}rp 
/a /b /c /d /e /.notdef /g /.notdef 
/i /.notdef /k 4{/.notdef}rp /p /.notdef /r /s 
/.notdef /u 138{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
131.442 9.21001 mo
(backside gas pressure)
[5.56 5.56 5 5 5 2.22 5.56 5.56 2.78 5.56 5.56 5 
2.78 5.56 3.32993 5.56 5 5 5.56 3.32993 0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
HAHOMU+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-
/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117
C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47
CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EF
BF59B4862165C7DEA15B42BE3811C2CAA25C54> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HAHOMU+ArialMT /Encoding get
dup 47 /slash put
dup 80 /P put
dup 116 /t put
pop
%ADOEndSubsetFont
/HAHOMU+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two 
/three /four /five /six /seven /eight /nine 22{/.notdef}rp 
/P 16{/.notdef}rp /a /b /c /d /e /.notdef 
/g /.notdef /i /.notdef /k 4{/.notdef}rp /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
HAHOMU+ArialMT nf
HAHOMU+ArialMT*1 [10 0 0 -10 0 0 ]msf
176.109 222.627 mo
(t/s)
[2.78 2.78 0 ]xsh
HAHOMU+ArialMT*1 [0 -10 -10 0 0 0 ]msf
12.4419 120.543 mo
(p/kPa)
[-5.56 -2.78 -5 -6.67007 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/HAHOMU+ArialMT*1 uf
/HAHOMU+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
