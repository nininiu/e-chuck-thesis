%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: model__echuck__back.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Yin
%%CreationDate: 2014/05/29, 21:33:48
%%BoundingBox: -1 0 445 369
%%HiResBoundingBox: 0 0 444.5657 368.6387
%%CropBox: 0 0 444.5657 368.6387
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1111 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-05-29T21:33:40+08:00"
   xmp:CreateDate="2014-05-29T21:24:48+08:00"
   xmp:MetadataDate="2014-05-29T21:33:40+08:00"
   xmp:CreatorTool="SolidWorks 2010 SP0.0 (2009286)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:4e5d0d7c-1219-4d63-a305-fe1db747aa02"
   xmpMM:InstanceID="uuid:994d88b3-7af7-4767-bd5e-800034b3c9e8"
   pdf:Producer="SolidWorks PDF 出版程序">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">300mm ESC总装配体(NO HEATER)</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>NMC\luandw (LUANDAWEI)</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -368.639 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 368.639 li
444.566 368.639 li
444.566 0 li
cp
clp
set_def_flat
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: EWHGDB+FangSong_GB2312-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (EWHGDB+FangSong_GB2312-GBK-EUC-H)
%%Title: (EWHGDB+FangSong_GB2312-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /EWHGDB+FangSong_GB2312-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -141 996 855} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7580 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 39 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
21 <001C60D8A8C9B7A73DB9F9463B497F7F44F140C67DA0AB43AFFFD0B3A251
61CF8AC61A8071BF739A33F6EC97E9694B60F84BC58632FE440569A8A4158CCD
FBF937DEF6D892D8B199A146B209295091D5E6EAADD908D0216E4FDF6471F791
B0D2A32EE0F31AF5DF6F602B1FCD542E65D948462B4F6A175D41E5F153032E7F
3CEB0A9286FB> |
16 <001C60D8A8C9B7A73DE4254F792206B83E03CD1DAA674E> |
4368 <001C60D8A8C9B5EE3102502651546AD4498138F5F36BD97972D1F01670
8A03D94E5486787472E973E58C7828D15A5A4A36E4BEC43EA0DE501A6C4C1309
BEBF552AC864281DF81BD2AEC5C367CC4182BCD540103956D35E620DC62D676D
44AED75D12F4FE1AE200787347677B82753E4851479185C77AD30FC2FA3DED4C
0F98292570E178627BF8B3568C05DC50FE968A6E5FECF43985BA3279B4DC9AAC
8495497EB7C10C558A7F95ECE55DF58039E522F619B7DD00D122F31B6F5BE0CD
6372F8095CA29ADBE3012BC690EE21A7E8388170606A29680DBC2C4445BE279C
357C1556E03A6FBD4599975EB69D8D5FC714B435C46AF6EE4825EB6D98> |
2464 <001C60D8A8C9B5EE310D71E6001DD5533190A975ECE81CB7BCABA43032
C6B6F0B080086B47181BA632F8C0F30E02A7EDFD1FAC1B80FC325E3B04AC1AFF
F1F01B809244358269747BBB8D567309D6233CDF7C436E441B8B7FFB240E8B6B
9F478483B767ABF9C6032AC0C9B929ACE8485BE48414809803814BAA59DA0E37
7A088BCAA0A5AF7749E8986F62C0F8AE1FAA1665AFC02723F7B9CDC586AAEB34
51607994F44C6B2051C43FD37EE8FADAEDDEA23F9EA1B89977747B8E0F84C1C1
6A4742415D8F667B7458C6B33A6329A1650D9C15EAACA097276A4F0026006095
A450D541FD2A7F8A87F7CB19B3E948BE45DBFC0E0F63D590F80AECA1475C153E
6D99698E9D62B70A776E15FE73777A90D6BCA2405DD4283234D179204CB4D7A2
CDD8D3D074EE22DA2623EBB38EC81B7916CBC6ABC5D4B4E74D478208001BD8C5
BBFA3E63047BEB1DEE09778D93FBE6921D88ADE3FA70B729FDED060A13057200
5867C0266A070AC239BFFEF267CE971331A0D041BC4726C81C6672FA6E7C3A58
F807FBE2B3666B26E62EEB2792AA350B595A5588FF6E2626187EF52ACE54B198
7B68B6EBBE6A013E10E4677CCBF78332859E9E6759D9ABE299F9947A0B4F25D0
9FDF3B0F3E0756F14CC31E691DD388D7510F567749922AFEA81A86BF4B490B5F
6E082AD5F9263ADBF6CFB8A165> |
1320 <001C60D8A8C9B5EE3103B01BFA3D41C5EE4918D5C73823FBA4E700BF86
C5F022BEC229A9E3CF80015AF8E04E8657BB11F99C3C7AB6F83A0984FF7DBDA8
A5EF6A2339F2010E19512DE8F186995B9426EDC61EC4BB20C9897ECB8710B72E
7CBC233C291988EC4BDEAB300EBE011EAAFFBA6E12A05BD43BFD80B28A477D4D
07FD3F2B7846F9042EE4A9DD3463D624F0FD0899E7B9FB2FBE4CE4CA4B5C79C8
D4B42C7646BD5F89776C325AFB4B91F786085979BE3E068418CB6FF321356005
C1AEB848109EC0966F3AA782D2BABB1EB1DC0EA12714A17F228B1AA556D2BF75
AE04D583613777373AA2A13E8CF5846796113A9844DBA5FEF13E817C410860ED
5E22ECE3E89BD1> |
1918 <001C60D8A8C9B5EE3102DD664B607CAF1248826A7C47932F75EE6703C5
C6469DA87810CA9C089AA21763D42C3345D90CBF680A8977CFDC903031594D63
4EF532C4133CC970A62DE11BB57E2808C1AB318BC47AE5C6A81E191AAED44606
08A23FFE49EE9A9109A53DB5D9F48D1D8879C0284AD5B43F08A08D171E7800F7
2A3782593A68EFA36A45EE21877743B5CA0EE2F4C9C69A2D000771F2697FCFD9
9E0B3717B11D288DBBE6BF974880D1E2DA90D4B91133CE12C1ABADC30C6FDDCE
E80A46E34F6C45583752BCAE00C67D77827E82CD16BC4B36BFC879B49A2326D2
EEDADE97E4F16E7B135A4CF61A2B4645FEBC8AD907F89D4BD0F8C99740EEE509
1D5BCFBA389AA4E5A8FCECDA047117AD15494EFA6C86E227C82D1AD2BA051844
2E3D023859E2689F1442EFB4B9B5AAFDCE336290D6552EC4E9FE4D1DB5094FAF
85CFBB823B2F3DAB3BD4D15B8F107AD32445AADE93F7E35647482D3C1ABBD6BC
25B20A139CEE374D360860D6FD37AEC4D14D3865C7A8B4781394E09AB6DDA0A1
51BD7B8C95C386B538C17E61C90CF79EEE02661A9C98> |
2052 <001C60D8A8C9B5EE3103DDD58EFB3D604C21DB922390B5C7215420ECCF
605EE9D707167D2C3249E54EF507B47DA91FCDEBCEDC81639F6717C9FC9F8658
42B8D71AB7CAE26676C3F77A9F1953C15C6FA4F14F6FC0EDD54233A1FE37F2C1
07D6686485A7018AAEAD68D670FBE58090BDB43181D5D11ED6A0FBB582879672
FDE752890C7E35EDE2071D8C4323A3AF17766AD71FEADB339764837657A69A31
7BFC21A4E0FFCC06C315B8F05726DF5771DE038B5888561F51EF45110F1C8B1B
25FF20D48C70C10AB6405B67639DA3E76E8FE7B9FB8F5FF53BF4920EC4DD1184
CCCF978E19A163E7A23F75A3EEF865C60FCDAE437A8364189CDB02BF22255B06
770D67ABEDF39D5318D58BB3323936F18ED8B9790ADE906E4E6346F78E3A5AF9
EFFBE65300D0EDCC84AD9C192AECBE21CE86AA8197BC48A40B1DA74148E2F5CA
A2320CF50E5B562FF1BDEEF4002AA34B899496C169F85DF92293703D60E1F2DB
100B61321B3E4F180F7B887FF1A402D06C30EA337AA84FFF840921D143651456
FDE01ABF2A7EE25139EF1097D1DF6533D46362B5AF305271C8EC52B5FAE1CF60
D1D8EB8E3F8E1E9B4BE18D66614254DAF465267E98D5950D4D52BF3AB9D3E3BB
7A0B100B09A699E5EBA947> |
3110 <001C60D8A8C9B5EE310369DD6C2314540395B3AECD2A927E5D1D506925
0B701D42E70ED8D3C1005D764E86ACF8F7918AFF945D6627BA7E10606E8B5DBF
363DA383C9B2AC749D61534A4A833A43E40C7C5B3686025FF05B92B72A20E0A9
D627C8DE6E09DE40DA76972FB51620991F96> |
2244 <001C60D8A8C9B5EE3103B49FADC539D6BD703DDF6EB72E87F62A25C647
052B8C78784E88AFFBF4291BC3A957057A6A25A11A66B176CF8019A644C20592
452A1FB6BFFBF35B53525FD96068E3D513D6C23AD8528D6BBF5D39E0FD0B1679
586B2C011F8879FA32F675F0F107EFC1BF9EBB242825A88B69208365C8846D44
0818BF242437DC1FE97CC868612C7C4E71B9C198B2D229E4D12F5DE261B5C0E0
B94B04C3579CF9846133489029BE9F9FDC33000B5318C052392F2C6CE6F00F3F
B98270CD0B2BE469643BC7AF20B864A0EE399F240323A60C4E88A17681EC852E
7629B0F16B8436BA79CBB2E3A80EBD0B0D585700B8> |
39 <001C60D8A8C9B7A73DF844ABFB24A795F3FB8C70A5661D415B4D85C22C73
5825687857966FAC4D4AA742518690B120D8C8F55640EFB80FC375C963FA43D1
9D4DBE99F1AA95E5E7CB8D97E3EF8893F0CC5A8115F3280A6C052E839FC4648D
EFD3C3148E2DD5C68A90F1844779FDC7AA4F67B0A096> |
38 <001C60D8A8C9B7A73DA13CCC26357224EC7002D078E5499FB16FEC567B56
218613B87B8EA2BB1462255FF84DF2A8724537DCA3AD71E748C3160B841A86AD
08FCD2AAE18E35BB353ED4DDF546E173989EFA0629BD0A52F83BBBF7FDA36556
1CC5FBEA646675FF01AC61C91A773929339A481C537B77685D1E956D5135DA73
379318BDD40C60654CD49C18720518CC06C9634D506AADBF1F7C64E9A898457C
A0F2894D36> |
3 <001C60D8A8C9B7A73D40> |
50 <001C60D8A8C9B7A73DF441E0125C8C228DB5627340A40CCF4CDFF16C72BA
6D45660D88FCECE45BA6CD2C37DDE1BD1B2F2BBBC692ECB04FFED058E01A0EEF
BF0F492BC522E104645168F3CF675D3ACADCE768D3D692A3B98EE676E549AFBE
61F2AAC29FBA470635D7102A98BD719F803805F1DBDEA2264A8E27D0C4EF6054
3845548F30FB50741796E32878024CD23B09F583D2> |
49 <001C60D8A8C9B7A73DBA0599531AC2BB3F7CBE7E1447E3EF98E317DBE9D3
DE05209DCA931AB095CAD320793D2DE2067EE19C40D2059A708858B2B64E45D1
C342DD7005A74BD7CC1802F75AF222FFF76CEBFAAB773E5D735A2F24> |
40 <001C60D8A8C9B7A73DB69489935E4412756080D60C8099DA285E32ACB773
29951AAE97D9A83529B657A0789C7910637CF3C7F768220F1DC8FED455C4F9C4
3A78AE33A110CCD12313EA4565C3794769273C79B0653A6C3DFD8A51AC814507
221E0BF0C5106054A1F1468B331E380DA7603F2A186DACCC81E94962E2B33A92> |
55 <001C60D8A8C9B7A73DB6B5F44FC6745EF3FAE824A453A81AD3BB0678B207
E4E297DBC927017D2D38DFFE191B4D0EF1AAA49B59F3DEAB71828636B1946E69
4F7F791AE7109F47D47A5DCA42EA4F5BDA56D9E9B86C73CD4B484A6A150EA3> |
53 <001C60D8A8C9B7A73DB952FFA5C41FDD2DBB9DEA6479A3D0FB83E9439E2A
4F20F6861114EDCF2C05B97986E3C46CAED2103F03F31627399E746F58E10F6D
6C8A06835336E11C25C2AF5F4C0F0C923CE4066095C519FCD86178BCF445A490
3C66871D75540596CDE6DD729A6C07425944E64345F2F7AEF2C1065A8690A69B
E2B14ECFDCBE1E85DDC7AC2787323FA40E5AE9E4E44911D4DE7111C56A84A0B1
5867C0> |
43 <001C60D8A8C9B7A73DA74FD7729A452815DA00CB368FC62F2DB3AC8CAD4E
78CB7D0CD5593DF93E0076DB0BE9C4BE583A3F0E804548887CCFD61DD057D0E2
76B8E9EF277440C1D19AFA66827BAF009A29729F9D4D2C0226B8E3D5658711F0
A8D7D2A0756FA82FCB42ABEB84B42E69B5AEB03F667532A7EB> |
47 <001C60D8A8C9B7A73DB9A76A508513810832D6FC7462EAD35A73F229C908
67F42D6FA5151669DAB18CD90A6EFFCD2A53BC2B049B262EF602BB4B324AE8C5
316DB312A2B8AEAB11894D25AE0883> |
2089 <001C60D8A8C9B5EE310D9D60A8090983A672328E0B180FC3253C8316A4
6242F9B6626836E4F288CC2BDB7F1859837BEC33B6C754F33D3E2308BAAE85AF
6681991D01DF68E1F49CE8484A280447E294004438EFB41719F2265D8FF8395A
9FA4D53805DDA2FCCBF0BB75DCF8B208E2294AA81ADA6AB5ABC631758B9B84A9
9E269BD2AF3A0F186F5D6D40DC028E89DE90DA16D424CAB73A5D98A57E6C8DE3
8C02323FA7BE2A3096FDC2BD8C53CD5D4AF03E48306D4147C7411EE98727E908
5A43433052D7D83B072BAF13A755658439ED02B4D7F7057527FA05CFB54FB187
4284CE4E844FE05A590E678E188F8745B9290F81E8233E2CBD028C2A5D543E32
26D4C75EF14872FA185F1680080F343EFCA00132E2DF8B57F89FB31FBECAC8E9
BA94F56BA905B087F869C2823D0830B8A4722CC0B0C11B007D656BF0768B73DD
4E354F8F6AEF9040F3A9D2E5B06B0528E53ED7B74725F084A991FDAC11AA55F6
60B9029B83885C59E87AE9A5946E3AD13EA58793AACD1424EE212702F0B2E13C
B6E4E29E782EC847B2A4F3EEF987E7C9046240A0376D4BAE5BE9E5BC82A8A176
72F0242A302A> |
3331 <001C60D8A8C9B5EE310D85C9E2903986091F9F2A74C341390F8146B858
D85866FC4AFF32F5C946EF5BB22235E62C26E8DEE22CBDE2E2E2E8C01FA09EE1
45F6B152F5E5E13BD5D276D702C97A0393DAEC2021989168C8C8E1C11D679082
433530E5FB84AC246606659765077F95ED21F613582356F2FBB42E1E8FD89AC6
6E0865B3CD9785A4DF209DCAE451AC7FB8796D17BF9BE45024FE79D8061B30C4
2197B3F48A7BE3F4D9BC9108BAE75CCE0D541E4C3571C5E5D69136B703C50E6F
D6FFDB1C8866B42063BD1FC1B48897605B19DC0B> |
58 <001C60D8A8C9B7A73DB63A262733E738F0253E0C042CBF53A8904E852815
9814AC75BBEE6C92B915A1604944DC4453E429AB9C9E6A701649BF13E2A7D292
D95DE5ED7322D76B06B94359C7504308F7DC0F372FC7DC13D38162305A73E04F
FB665D1827ACBE1C40C9E29048F6A8199E754C0519C1> |
36 <001C60D8A8C9B7A73DB9FD364F4F619023573CE9316508047939AC5CAE05
ABBCEB895B2037B14824BFAF1B100D7A64F733527AA9E27C4786F184CF0A9A27
1DFA24DCDCFF0020EDC7DEF699C2DC8F69B3B81F3F7EDDFA33C8AA06B158DAB0
C91765B1A108C57A08AB9027A104AEA94FA7B3526FE5> |
44 <001C60D8A8C9B7A73DB6B5F4531852B29AA3E949659BB186C69E3093C698
4592D5C212B7BE1BC36265579DB58189B68E396D0DDC63ACD541DD8ED1D51893
4342> |
1147 <001C60D8A8C9B5EE31035452AF86FFF933FD4F21B6240165ED9CE63CB0
447D175A99789AC28B08F0C20F8C129EADCE70D572859BB8B80A6B3C41AB6984
ADF4DEEA96048D485A0982FAF6F2FC28A595C9CB4EAC78ACAD248C11F9F745AD
6E578A8B779AD571BECD4AC4ADDD008B4C5CF8EA186D0B54B1C5DAF7CF4A50EB
5A6B4ABE2F63F82C154E86EDC32363694C4C7090171EB4A98F18D14E10F701B1
547C42249AE838A1302629DBA0A5FBE026463A5254DEFA9FED82538387A28115
5451D8B2C3B51D767DF9E9841B2C43CD026F8BD4F8A2AC0C5BC98FD3D599A6C6
15B5D8C24405F6A5A3DB1B84EBE0CB47B09C4D800345B50D1B232DF92120BA55
204B472AE7E4F94C121A7A9B547A8FD6071C37DDBB17E14BBC8E5D7040E4BBB1
6E929CC3692F2615AF36DAA2FEF2> |
56 <001C60D8A8C9B7A73DB69C1C3ABB3B6D0CB3D4B34CF25B86CD7316AEC167
0E04A810F70E0A847E2A89C800F37C8E7132796B35A80C3962B947202026F454
92A3D68F545FEE762893F1EBC0E7598AFE2E2A06630E3865CD798D129277D5C1
EFE392778AF6136E49C839DA8B9F3931C8AB8CA8320D8159D237D4E063> |
1723 <001C60D8A8C9B5EE31039C3A3461BB11AFB3516F81D5292F81603BFA37
227553EDE5A35AE8A2116818F50EB88BAF40E528A7B47C0F029F4CCE1E499010
1609E0E3F248A30EF365975F73511A33EFFB27A8B07F09FFD54BC3D51CC89F69
B01B8E219CAE59D1F04C764F1DCDA5F6A405AB6E376D51726347656145382A4D
854A108131A72E371B7EBDD72574030F4F74070853C34FE2AE7DA48C52673603
D1988D680E8F4B44481E064DCD1EE597987B36A4508B686DDC9389EB99C0C51C
6B50A0C9853B79945670884FB292FBEDE8532E8228CAE8B488BD5479723D40A1
625953116B1C95AB5E844CFE88B731A78AC7ECD5B70C4532A4E55A37CD9DC161
0DCEECF7CCA070D913123F18E2464B0C0C25D5AA8ABE60C00259D8C193A84EB2
5CF073112BDDECFB68DF42CD4D55BF1698C4DD16B4173F29D4AD2585D34A8AB7
353D53D3C9C4478934FAD83F7181D7AF38EFDBCFE8D167300001404E17637A6E
CA8D1A38BC2F4EC7AE3BC3EFC2AB0AD0F4EBBE524C0454B767CDF5C7C960DEEB
A4416ACE1D6C10E301B064D958166A480E0F0EBF56C34EF9334F31F02860FB63
9EE1DE1C407B58513E2C23A0427B9BD60F10BEA736B942BFFA7F9B13DE4A006F
9208D95F7F20283665AED7E4A2E47233362B38F0EE2D> |
2935 <001C60D8A8C9B5EE310D4B825CF1EAF9D5BBF23CBA0A3AA307F9087AC7
1CA857338CF606C879244B54BDADA5A4A0A7E38BA1483F79E9B0160D42866831
A3FB67707A824F337F1BB7D753AF6B4FE25F1E452E282688F1022572D4970612
4C8EC05D918E120071BD6CF689B0A67CE93B4D623125DE72BCB887FDD3D46657
BD11C2A34E9D537A469730E0F9C0A51CE242C00574BD51D3B8C199E9EB531B75
04B5334CDFC055D680B7427D165028A6447DD73113D3C6D71CA88CC7B5AB5081
62FE01A00C8E1674199892ACE0CB158831EF332FCC64FCB4C6AAEDC672> |
48 <001C60D8A8C9B7A73DB9F97C7724FF54900EBD799428591C07B24C137B57
3F4D910CAA7B9748D858CBF8754745DE5B8D0725925EF3BF513CEA933553BF23
FE6B24025F9262F7CE467167F058943CA81CBF4E2DEB49B3BE1C7593D7EA4465
FF0970AA20ADA7CD1264B0E561B7> |
41 <001C60D8A8C9B7A73DB919EAD7E1DA7B4E68612326DED49EC2C197A74F4B
F216DFB6E71E018199D6539E99E9A1AB16AA5001C95D33A3E3AC822E3C3884F8
67904422E3DDB4CE60E5F2125171E2657DB27B5D0DB8E9E9D2BE1589D72C3443
A7DCCB58> |
22 <001C60D8A8C9B7A73DB938E91A58790C4A7DBC7E8996B8BA72D2E95C9EDC
CF9D6E19E85AA694D33FE4C72D719019E8098D8E45E9C12E6AF4FBD0C339CAEC
B6C018FFF8CA64A914CA7F35D8FED8BA1A3DBD17F7C47EFCF4FE7FCAD5AF5503
F1927E11C48D1431C0EA80B51BADDCA1DE8B80A99DBBD5E7C806882CE76BF2D9
ACF835538FDEB9013CF51A44A9A1DFA275252BD5915941CAED9F6D3E87744FD8
FF2C9319990F3737732CFEA9838515359E2DAFF029F1D4F490AED7CD25B2AB91
42A4853022D39A5700B43BC1> |
51 <001C60D8A8C9B7A73DBA19B93B6C92DC04D80AC58C56EFE37C8C5BF8AF20
4C9FDA609ADBEE2EF09C55CB8653582F25B1FF1991A5C77F9D8554F6F0472576
7C1F94AF9214C8758109F0BE0AAF13DD0EDB228373D0AB1C468629F09CE295C0
2C629AEBDFCC7C97F60832BBCB16EF8887122176B095E85E7215A3A8A132E946
420F3C955B8CC2D7167E> |
54 <001C60D8A8C9B7A73DB6F8E37890B517D46C849811D31750EF74D2282CF7
2EB45639FF9DE94D4BE2CC7B9C54DAE8FDCDC7807D987C3F923494814A298F46
FDEF2D8F196AD09E693226466F073B2AF33E16B5A15C3EB051CDFA48F231C14B
482914F39123E06E6836D626CD228B3010EA6C8137D6EB8C8CA169B40529ECFC
772077BF1CF1CECBCA96C256BAD58CBDA4563A778881ED0F7AF249101B3A9B84
0A6B4F556A171DA7EB1E7FEA3F08C422E5688E21C8687EAFA5BA77FE62E8760C
B7EFF63B4272E925749D624F282304257E7A6655C138> |
1033 <001C60D8A8C9B5EE310DB4DD551D38473030B81536DCC436DA7D84C1A3
742DA76FFB72125607F50E70190D2F7E60B8AA42E952C26A00B1835A523EA686
8B630927940A3C7B9A7B883BEA2F2D59B0D89D19E8B8E76D760D09509DB2DBCA
6555340BC9E034EE53F67C95807B89B629C77E61FD38323BEBED3E54F51CA91C
6A4AD3D0E5B22AFD1029C6A409BACF72EB313E84DEDB510A8F73AB84DD2437FC
61D1E54722395A54909894DF23C46CDA25A111855D7D36636A57F2495A494D38
C2EE29BC003DB9323DF0D68C576B2C96E7FB283852CC9B31E19FAEDBFAB997A1
55997C310A40C03FEC93C25D01B564C78F051E79BEEB5BD53076F05DEEDCDA7A
81050F1E99E6462866E79D23F7A102102C7EFCEAC9FC23EA5D9CC510C1E23872
02B9A2DE9D40F632CC022B9A7FA857AC4DD6CC34C2161667256D3B3D4F437AD1
3A6943A8297632B299929005F4C0FCEA0D40A9F7314C69A530EC14BE55922C93
5C0B605CDCA1202C82F87909960D286EF7928DBB82AA48CB28B81D9776D6814F
992FDE5BA590FE2D524A5EA751A2D133D6281CC785428A71550BC91F82098AD6
4AE658148B1C461FA7E8CB768A25742C49A706355DCB2353C002A8D6FCA0E77F
FCE71BDE35> |
3633 <001C60D8A8C9B5EE310D43FF393F8EEDA7F44BA13F093818C950A31F99
29847E79C8961442BE34AF010BD6595304B7E1D727397A97FD740E90760B078E
6E3E8DFDFAB22839D179434241ED3F78051ACA88F2C8B2E1D1799E644A85066C
13192C875AB9BA32AD146359C90C5F9167165308D4C5C5B6AADEF5573B5915C1
B64402740DA9D4DA400DAAE377F3283CD4980FFBFAB3223110CA6C240580B4F0
208B84B619B02B039F889A7D9C14E35CE2D5AE535C67E072D8D2266DEFEDFC1C
4FD3DC55C1106FB4CDD84D433FDAEC3BC3B832F35441A9A1559B76651339EF46
A835955B89E1A0A587932152C54BB4B09C597BFD6ABB0506C083B254C76B472F
BF7506DD66C285C539AD86D0D04B9F7DDEAA2F7A80B0427BCA25222726808AF4
AAE818F6FC9ADF25CC1AFC214A12660080E4F9892C4F1995B89961A8BC5E0079
5645EBF3D6FB7E9C9542596FD420564F5BB4CCF005790465016E9540F74B5E1C
11BC12A8C798FE02A9AFB08184> |
1351 <001C60D8A8C9B5EE3102B1EF1A3000F21EF07B68B6646E718561F8C3C1
12B772614D4AADA7CA3217CA19A997788A6974A075D375D4CA53853F258886BF
001C3A2C61C5991683AEB31A43CDFBB5A4F9ECEA1DBDF7F9C3E9FC997E93D567
6F29034E089C83587B329DD64573174103C80EB37DA640E6B5B2A5595C28672E
8EAC94F07B40F504230BA9663D388B0EEAD604514316414EC0FA72E761EBF633
344C4D024517E557193FAD184062BEC71FFAB7FE1531092CF8633C7BF43E34C7
B3A9727714BF4A82B32F334447E0A6B2543058F44204DA4CD8E8A52BFF1F2153
8AF7ADDD6309BE86A1F4F895A393B0669FCB2F99A15857E40640DAB39527CDE1
57840F> |
3626 <001C60D8A8C9B5EE31036D2464ABB34BF70C0D6402E57AA9713D845210
BE2F4A98B1639BCDF52FA011F17D5E50E295715CE53054B3C568565DF2EBD751
2E94C5CC9E3366C0C25A556D3EC90676690D7B2B76EAB0B18616A20EA0105382
5623EAAE9128F705B7171C2E56A437F0ECD2DB645F910361E0C55E27B585A6BE
4A24AA6DD2A30C55D55DD370FC981FAE8853FE5566A5048B1640E554ABABB5EE
4302E6534E8511F02C1F866F91C3A77BFBFA16001CFEF01CD581C2DB5B27C779
F103B41E9EACE4621E94B3F44BC08CC11A8B55C7811448AC34772265D155172A
FD1E56D0D22ACADD9BCEAE9FB980220A5C8CEFFEDB072C17D807EAAD74873C96
3BDEDF4466BA90AD49674A9DAEF3A3922AC442F20A54296A38DBCAB6E922561D
0A0EF4D205C04B0CC00DE9948F7F4FC0F84CD94C7C12C318799666227811777E
3A6AC2D12FB284> |
42 <001C60D8A8C9B7A73DA5FD2E3DEDA7CA483598F1AE5476EE7190CD677B34
55EBCC4125CF18577BC598AB5002BF7BF490E2E30826C74053D78E42BA45735F
E5250F02CC7F7773F62B08019CFC62BD2F6BFCA775C6B31441BE89682CD02530
83B9357DB8A313FCC93BB0636272BD8489F5762D21F4CDBD389FBBFFED9C0D45
C69B6236CB6D6F445D23476172CA0ECA121185A55CBC6CC01E213FB4E5FCC1BC
F26022CAD4038B4A2B258DE432162192150045> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /EWHGDB+FangSong_GB2312-GBK-EUC-H-Identity-H /Identity-H 0 [/EWHGDB+FangSong_GB2312-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/EWHGDB+FangSong_GB2312-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
336.292 345.984 mo
(\000\025\000\020\021\020\011\240\005\(\007~\010\004\014&\010\304)sh
336.292 357.984 mo
(\000'\000&\000\003\000&\0002\0001\0001\000\(\000&\0007\0002\0005\000\003\000+\0002\000/\000\()sh
367.528 127.152 mo
(\010\)\015\003\010\304)sh
367.528 139.152 mo
(\000:\000$\0007\000\(\0005\000\003\000,\0001)sh
366.604 250.872 mo
(\004{\015\003\010\304)sh
366.604 262.872 mo
(\000:\000$\0007\000\(\0005\000\003\0002\0008\0007)sh
3.75968 280.044 mo
(\006\273\013w\010\304)sh
3.75968 292.044 mo
(\000+\000\(\000/\000,\0008\0000\000\003\000+\0002\000/\000\()sh
32.0437 12.4803 mo
(\0005\000\)\010\004\014&\010\304)sh
32.0437 24.4803 mo
(\0005\000\)\000\003\000&\0002\0001\0001\000\(\000&\0007\0002\0005\000\003\000+\0002\000/\000\()sh
48.4597 336.132 mo
(\000\026\000\020\000/\000,\000\)\0007\000\020\0003\000,\0001\010\304)sh
48.4597 348.132 mo
(\000/\000,\000\)\0007\000\020\0003\000,\0001\000\003\000+\0002\000/\000\()sh
346.852 17.3043 mo
(\000\(\0006\000&\000\003\004\011\0161\010\304)sh
346.852 29.3043 mo
(\000\(\0006\000&\000\003\0007\000\(\0000\0003\000\(\0005\000$\0007\0008\0005\000\(\000\003)sh
346.852 41.3043 mo
(\0006\000\(\0001\0006\0002\0005\000\003\000+\0002\000/\000\()sh
347.284 298.812 mo
(\000\025\000\020\005G\016*\010\304)sh
347.284 310.812 mo
(\000$\000/\000,\000*\0001\000,\0001\000*\000\003\000+\0002\000/\000\()sh
.51 lw
0 lc
0 lj
10 ml
[86.4 3.6 3.6 3.6 ] 0 dsh
true sadj
283.517 138.105 mo
283.369 137.85 li
283.22 137.595 li
283.071 137.34 li
282.92 137.086 li
282.768 136.833 li
282.616 136.58 li
282.463 136.327 li
282.309 136.075 li
@
283.517 138.105 mo
283.664 138.361 li
283.811 138.617 li
283.956 138.874 li
284.101 139.132 li
284.245 139.39 li
284.388 139.648 li
284.53 139.907 li
284.671 140.166 li
@
206.598 271.333 mo
206.893 271.333 li
207.188 271.331 li
207.484 271.329 li
207.779 271.326 li
208.074 271.321 li
208.369 271.316 li
208.665 271.309 li
208.96 271.302 li
@
206.598 271.333 mo
206.303 271.333 li
206.007 271.331 li
205.712 271.329 li
205.417 271.326 li
205.122 271.321 li
204.826 271.316 li
204.531 271.309 li
204.236 271.302 li
@
242.724 101.374 mo
242.454 101.255 li
242.183 101.136 li
241.913 101.018 li
241.642 100.901 li
241.37 100.785 li
241.098 100.67 li
240.826 100.556 li
240.553 100.442 li
@
242.724 101.374 mo
242.993 101.495 li
243.262 101.616 li
243.531 101.739 li
243.8 101.862 li
244.067 101.986 li
244.335 102.111 li
244.602 102.237 li
244.869 102.364 li
@
263.69 114.475 mo
263.463 114.286 li
263.236 114.097 li
263.008 113.909 li
262.78 113.722 li
262.551 113.536 li
262.321 113.35 li
262.091 113.165 li
261.86 112.981 li
@
263.69 114.475 mo
263.915 114.665 li
264.141 114.856 li
264.365 115.048 li
264.589 115.24 li
264.813 115.434 li
265.035 115.628 li
265.257 115.822 li
265.479 116.018 li
@
[86.4 3.6 3.6 3.6 ] 3.516 dsh
211.32 271.208 mo
213.579 271.059 li
215.833 270.852 li
218.081 270.588 li
220.322 270.267 li
222.554 269.888 li
224.775 269.453 li
226.985 268.962 li
229.182 268.414 li
231.363 267.811 li
233.529 267.152 li
235.677 266.438 li
237.807 265.67 li
239.916 264.848 li
242.003 263.972 li
244.067 263.043 li
246.108 262.062 li
248.122 261.029 li
250.109 259.945 li
252.069 258.811 li
253.998 257.628 li
255.897 256.395 li
257.764 255.115 li
259.597 253.788 li
261.397 252.414 li
263.16 250.995 li
264.887 249.531 li
266.576 248.024 li
268.226 246.474 li
269.836 244.883 li
271.405 243.251 li
272.931 241.579 li
274.415 239.87 li
275.855 238.123 li
277.249 236.34 li
278.598 234.522 li
279.9 232.67 li
281.155 230.786 li
282.361 228.87 li
283.517 226.924 li
284.624 224.949 li
285.68 222.947 li
286.685 220.919 li
287.638 218.865 li
288.538 216.788 li
289.384 214.689 li
290.178 212.568 li
290.916 210.429 li
291.6 208.271 li
292.229 206.096 li
292.802 203.906 li
293.319 201.702 li
293.78 199.486 li
294.184 197.259 li
294.532 195.022 li
294.822 192.777 li
295.055 190.525 li
295.23 188.268 li
295.348 186.008 li
295.408 183.745 li
295.411 181.481 li
295.356 179.218 li
295.243 176.957 li
295.072 174.7 li
294.844 172.448 li
294.559 170.202 li
294.217 167.964 li
293.818 165.736 li
293.362 163.519 li
292.849 161.314 li
292.281 159.123 li
291.657 156.947 li
290.978 154.787 li
290.244 152.646 li
289.456 150.524 li
288.613 148.423 li
287.718 146.344 li
286.77 144.288 li
285.77 142.257 li
@
127.426 142.257 mo
126.426 144.288 li
125.478 146.344 li
124.582 148.423 li
123.74 150.524 li
122.952 152.646 li
122.218 154.787 li
121.539 156.947 li
120.915 159.123 li
120.346 161.314 li
119.834 163.519 li
119.378 165.736 li
118.979 167.964 li
118.636 170.202 li
118.351 172.448 li
118.123 174.7 li
117.953 176.957 li
117.84 179.218 li
117.785 181.481 li
117.787 183.745 li
117.848 186.008 li
117.966 188.268 li
118.141 190.525 li
118.374 192.777 li
118.664 195.022 li
119.011 197.259 li
119.416 199.486 li
119.876 201.702 li
120.394 203.906 li
120.967 206.096 li
121.595 208.271 li
122.279 210.429 li
123.018 212.568 li
123.811 214.689 li
124.658 216.788 li
125.558 218.865 li
126.511 220.919 li
127.516 222.947 li
128.572 224.949 li
129.678 226.924 li
130.835 228.87 li
132.041 230.786 li
133.296 232.67 li
134.598 234.522 li
135.946 236.34 li
137.341 238.123 li
138.781 239.87 li
140.264 241.579 li
141.791 243.251 li
143.36 244.883 li
144.97 246.474 li
146.62 248.024 li
148.309 249.531 li
150.036 250.995 li
151.799 252.414 li
153.598 253.788 li
155.432 255.115 li
157.299 256.395 li
159.198 257.628 li
161.127 258.811 li
163.086 259.945 li
165.074 261.029 li
167.088 262.062 li
169.128 263.043 li
171.193 263.972 li
173.28 264.848 li
175.389 265.67 li
177.518 266.438 li
179.667 267.152 li
181.832 267.811 li
184.014 268.414 li
186.211 268.962 li
188.42 269.453 li
190.642 269.888 li
192.874 270.267 li
195.114 270.588 li
197.363 270.852 li
199.617 271.059 li
201.876 271.208 li
@
[86.4 3.6 3.6 3.6 ] 31.418 dsh
238.359 99.5688 mo
236.221 98.7809 li
234.063 98.0489 li
231.887 97.3719 li
229.695 96.7509 li
227.487 96.1869 li
225.266 95.6799 li
223.032 95.2289 li
220.788 94.8359 li
218.534 94.5009 li
216.272 94.2239 li
214.004 94.0049 li
211.732 93.8439 li
209.455 93.7419 li
207.177 93.6979 li
204.899 93.7119 li
202.621 93.7849 li
200.347 93.9159 li
198.076 94.1049 li
195.811 94.3529 li
193.553 94.6589 li
191.304 95.0219 li
189.064 95.4429 li
186.836 95.9219 li
184.622 96.4568 li
182.421 97.0489 li
180.237 97.6979 li
178.07 98.4019 li
175.922 99.1609 li
173.794 99.9759 li
171.687 100.844 li
169.604 101.767 li
167.545 102.742 li
165.511 103.77 li
163.505 104.85 li
161.527 105.981 li
159.578 107.162 li
157.661 108.393 li
155.776 109.673 li
153.924 111.001 li
152.107 112.375 li
150.325 113.796 li
148.581 115.262 li
146.875 116.773 li
145.208 118.326 li
143.582 119.922 li
141.997 121.559 li
140.455 123.236 li
138.956 124.953 li
137.502 126.707 li
136.093 128.498 li
134.73 130.324 li
133.415 132.185 li
132.148 134.078 li
@
[86.4 3.6 3.6 3.6 ] 81.023 dsh
281.047 134.078 mo
279.714 132.089 li
278.328 130.136 li
276.89 128.221 li
275.401 126.345 li
273.861 124.511 li
272.273 122.718 li
270.637 120.969 li
268.954 119.265 li
267.226 117.607 li
@
[86.4 3.6 3.6 3.6 ] 84.123 dsh
259.991 111.536 mo
258.445 110.399 li
256.875 109.296 li
255.281 108.226 li
253.665 107.192 li
252.026 106.192 li
250.367 105.229 li
248.686 104.301 li
246.987 103.41 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
191.061 238.999 mo
191.717 239.176 li
192.375 239.344 li
193.035 239.505 li
193.696 239.659 li
194.36 239.805 li
195.025 239.943 li
195.691 240.073 li
196.359 240.195 li
@
182.192 235.771 mo
181.576 235.485 li
180.964 235.191 li
180.355 234.89 li
179.749 234.583 li
179.148 234.268 li
178.549 233.946 li
177.955 233.618 li
177.365 233.282 li
@
80.663 255.223 mo
80.811 255.479 li
80.959 255.734 li
81.108 255.989 li
81.257 256.244 li
81.407 256.498 li
81.558 256.752 li
81.709 257.006 li
81.86 257.259 li
@
80.663 255.223 mo
80.515 254.967 li
80.369 254.711 li
80.222 254.455 li
80.076 254.198 li
79.931 253.941 li
79.786 253.684 li
79.642 253.426 li
79.498 253.168 li
@
103.772 285.34 mo
103.981 285.549 li
104.191 285.757 li
104.401 285.965 li
104.611 286.172 li
104.822 286.379 li
105.033 286.585 li
105.244 286.791 li
105.456 286.997 li
@
103.772 285.34 mo
103.564 285.131 li
103.356 284.922 li
103.148 284.712 li
102.941 284.502 li
102.734 284.291 li
102.527 284.08 li
102.321 283.868 li
102.116 283.656 li
@
133.889 308.45 mo
134.145 308.597 li
134.401 308.744 li
134.658 308.89 li
134.914 309.036 li
135.171 309.181 li
135.429 309.326 li
135.686 309.47 li
135.944 309.614 li
@
133.889 308.45 mo
133.634 308.302 li
133.378 308.153 li
133.123 308.004 li
132.869 307.855 li
132.614 307.705 li
132.36 307.554 li
132.107 307.403 li
131.853 307.252 li
@
206.598 327.932 mo
206.893 327.932 li
207.188 327.931 li
207.484 327.929 li
207.779 327.927 li
208.074 327.924 li
208.369 327.921 li
208.665 327.917 li
208.96 327.913 li
@
206.598 327.932 mo
206.303 327.932 li
206.007 327.931 li
205.712 327.929 li
205.417 327.927 li
205.121 327.924 li
204.826 327.921 li
204.531 327.917 li
204.236 327.913 li
@
279.306 308.45 mo
279.562 308.302 li
279.817 308.153 li
280.072 308.004 li
280.327 307.855 li
280.581 307.705 li
280.835 307.554 li
281.089 307.403 li
281.343 307.252 li
@
279.306 308.45 mo
279.051 308.597 li
278.794 308.744 li
278.538 308.89 li
278.281 309.036 li
278.024 309.181 li
277.767 309.326 li
277.509 309.47 li
277.251 309.614 li
@
309.423 285.34 mo
309.632 285.131 li
309.84 284.922 li
310.048 284.712 li
310.255 284.502 li
310.462 284.291 li
310.669 284.08 li
310.875 283.868 li
311.08 283.656 li
@
309.423 285.34 mo
309.214 285.549 li
309.005 285.757 li
308.795 285.965 li
308.585 286.172 li
308.374 286.379 li
308.163 286.585 li
307.952 286.791 li
307.74 286.997 li
@
332.533 255.223 mo
332.68 254.967 li
332.827 254.711 li
332.974 254.455 li
333.119 254.198 li
333.265 253.941 li
333.409 253.684 li
333.554 253.426 li
333.697 253.168 li
@
332.533 255.223 mo
332.385 255.479 li
332.237 255.734 li
332.088 255.989 li
331.938 256.244 li
331.788 256.498 li
331.638 256.752 li
331.487 257.006 li
331.335 257.259 li
@
352.015 182.515 mo
352.015 182.219 li
352.014 181.924 li
352.012 181.629 li
352.01 181.333 li
352.008 181.038 li
352.004 180.743 li
352 180.448 li
351.996 180.152 li
@
352.015 182.515 mo
352.015 182.81 li
352.014 183.105 li
352.012 183.4 li
352.01 183.696 li
352.008 183.991 li
352.004 184.286 li
352 184.581 li
351.996 184.877 li
@
332.533 109.806 mo
332.385 109.55 li
332.237 109.295 li
332.088 109.04 li
331.938 108.785 li
331.788 108.531 li
331.638 108.277 li
331.487 108.023 li
331.335 107.77 li
@
332.533 109.806 mo
332.68 110.062 li
332.827 110.318 li
332.974 110.574 li
333.119 110.831 li
333.265 111.088 li
333.409 111.346 li
333.554 111.603 li
333.697 111.861 li
@
309.423 79.6889 mo
309.214 79.4799 li
309.005 79.2719 li
308.795 79.0649 li
308.585 78.8569 li
308.374 78.65 li
308.163 78.4439 li
307.952 78.2379 li
307.74 78.0319 li
@
309.423 79.6889 mo
309.632 79.8979 li
309.84 80.1069 li
310.048 80.317 li
310.255 80.528 li
310.462 80.7379 li
310.669 80.9489 li
310.875 81.1609 li
311.08 81.3729 li
@
279.306 56.5789 mo
279.051 56.4319 li
278.794 56.2849 li
278.538 56.1389 li
278.281 55.9929 li
278.024 55.8479 li
277.767 55.7029 li
277.509 55.5589 li
277.251 55.4149 li
@
279.306 56.5789 mo
279.562 56.7269 li
279.817 56.8759 li
280.072 57.0249 li
280.327 57.1739 li
280.581 57.3239 li
280.835 57.4749 li
281.089 57.6259 li
281.343 57.7769 li
@
206.598 37.0969 mo
206.303 37.0979 li
206.007 37.0979 li
205.712 37.0999 li
205.417 37.1019 li
205.121 37.1049 li
204.826 37.1079 li
204.531 37.1119 li
204.236 37.1159 li
@
206.598 37.0969 mo
206.893 37.0979 li
207.188 37.0979 li
207.484 37.0999 li
207.779 37.1019 li
208.074 37.1049 li
208.369 37.1079 li
208.665 37.1119 li
208.96 37.1159 li
@
133.889 56.5789 mo
133.634 56.7269 li
133.378 56.8759 li
133.123 57.0249 li
132.869 57.1739 li
132.614 57.3239 li
132.36 57.4749 li
132.107 57.6259 li
131.853 57.7769 li
@
133.889 56.5789 mo
134.145 56.4319 li
134.401 56.2849 li
134.658 56.1389 li
134.914 55.9929 li
135.171 55.8479 li
135.429 55.7029 li
135.686 55.5589 li
135.944 55.4149 li
@
103.772 79.6889 mo
103.564 79.8979 li
103.356 80.1069 li
103.148 80.317 li
102.941 80.528 li
102.734 80.7379 li
102.527 80.9489 li
102.321 81.1609 li
102.116 81.3729 li
@
103.772 79.6889 mo
103.981 79.4799 li
104.191 79.2719 li
104.401 79.0649 li
104.611 78.8569 li
104.822 78.65 li
105.033 78.4439 li
105.244 78.2379 li
105.456 78.0319 li
@
80.663 109.806 mo
80.515 110.062 li
80.369 110.318 li
80.222 110.574 li
80.076 110.831 li
79.931 111.088 li
79.786 111.346 li
79.642 111.603 li
79.498 111.861 li
@
80.663 109.806 mo
80.811 109.55 li
80.959 109.295 li
81.108 109.04 li
81.257 108.785 li
81.407 108.531 li
81.558 108.277 li
81.709 108.023 li
81.86 107.77 li
@
[86.4 3.6 3.6 3.6 ] 58.455 dsh
61.257 187.238 mo
61.38 190.135 li
61.561 193.029 li
61.8 195.919 li
62.096 198.803 li
62.449 201.681 li
62.86 204.552 li
63.328 207.413 li
63.853 210.265 li
64.435 213.105 li
65.073 215.934 li
65.767 218.749 li
66.518 221.55 li
67.324 224.335 li
68.185 227.104 li
69.102 229.855 li
70.073 232.587 li
71.099 235.299 li
72.178 237.99 li
73.311 240.659 li
74.497 243.305 li
75.735 245.927 li
77.026 248.524 li
78.367 251.094 li
@
[86.4 3.6 3.6 3.6 ] 77.49 dsh
83.091 259.276 mo
84.799 261.958 li
86.565 264.602 li
88.389 267.208 li
90.269 269.772 li
92.205 272.295 li
94.196 274.775 li
96.24 277.211 li
98.338 279.602 li
100.486 281.946 li
@
107.167 288.626 mo
109.511 290.775 li
111.901 292.872 li
114.337 294.916 li
116.817 296.907 li
119.34 298.843 li
121.905 300.723 li
124.51 302.547 li
127.154 304.313 li
129.837 306.021 li
@
[86.4 3.6 3.6 3.6 ] 58.455 dsh
138.018 310.745 mo
140.589 312.087 li
143.185 313.377 li
145.807 314.616 li
148.453 315.801 li
151.122 316.934 li
153.813 318.014 li
156.526 319.039 li
159.258 320.01 li
162.009 320.927 li
164.777 321.788 li
167.563 322.595 li
170.363 323.345 li
173.179 324.04 li
176.007 324.678 li
178.848 325.259 li
181.699 325.784 li
184.561 326.252 li
187.431 326.663 li
190.309 327.017 li
193.194 327.313 li
196.083 327.551 li
198.977 327.732 li
201.874 327.855 li
@
211.321 327.855 mo
214.218 327.732 li
217.112 327.551 li
220.002 327.313 li
222.887 327.017 li
225.764 326.663 li
228.635 326.252 li
231.496 325.784 li
234.348 325.259 li
237.189 324.678 li
240.017 324.04 li
242.832 323.345 li
245.633 322.595 li
248.418 321.788 li
251.187 320.927 li
253.938 320.01 li
256.67 319.039 li
259.382 318.014 li
262.073 316.934 li
264.743 315.801 li
267.389 314.616 li
270.01 313.377 li
272.607 312.087 li
275.177 310.745 li
@
[86.4 3.6 3.6 3.6 ] 77.49 dsh
283.359 306.021 mo
286.041 304.313 li
288.686 302.547 li
291.291 300.723 li
293.856 298.843 li
296.378 296.907 li
298.858 294.916 li
301.294 292.872 li
303.685 290.775 li
306.029 288.626 li
@
312.709 281.946 mo
314.858 279.602 li
316.955 277.211 li
319 274.775 li
320.99 272.295 li
322.926 269.772 li
324.807 267.208 li
326.63 264.602 li
328.397 261.958 li
330.105 259.276 li
@
[86.4 3.6 3.6 3.6 ] 58.455 dsh
334.828 251.094 mo
336.17 248.524 li
337.461 245.927 li
338.699 243.305 li
339.885 240.659 li
341.018 237.99 li
342.097 235.299 li
343.122 232.587 li
344.094 229.855 li
345.01 227.104 li
345.872 224.335 li
346.678 221.55 li
347.428 218.749 li
348.123 215.934 li
348.761 213.105 li
349.343 210.265 li
349.868 207.413 li
350.336 204.552 li
350.747 201.681 li
351.1 198.803 li
351.396 195.919 li
351.635 193.029 li
351.815 190.135 li
351.938 187.238 li
@
351.938 177.791 mo
351.815 174.894 li
351.635 172 li
351.396 169.11 li
351.1 166.226 li
350.747 163.348 li
350.336 160.478 li
349.868 157.616 li
349.343 154.764 li
348.761 151.924 li
348.123 149.095 li
347.428 146.28 li
346.678 143.479 li
345.872 140.694 li
345.01 137.925 li
344.094 135.174 li
343.122 132.442 li
342.097 129.73 li
341.018 127.039 li
339.885 124.37 li
338.699 121.724 li
337.461 119.102 li
336.17 116.505 li
334.828 113.935 li
@
[86.4 3.6 3.6 3.6 ] 77.49 dsh
330.105 105.753 mo
328.397 103.071 li
326.63 100.427 li
324.807 97.8209 li
322.926 95.2569 li
320.99 92.7339 li
319 90.2539 li
316.955 87.8179 li
314.858 85.4269 li
312.709 83.0829 li
@
306.029 76.4029 mo
303.685 74.2539 li
301.294 72.1569 li
298.858 70.1129 li
296.378 68.1219 li
293.856 66.1859 li
291.291 64.3059 li
288.686 62.4819 li
286.041 60.7159 li
283.359 59.0079 li
@
[86.4 3.6 3.6 3.6 ] 58.455 dsh
275.177 54.2839 mo
272.607 52.9419 li
270.01 51.6519 li
267.389 50.4129 li
264.743 49.2279 li
262.073 48.0949 li
259.382 47.0149 li
256.67 45.9899 li
253.938 45.0189 li
251.187 44.1019 li
248.418 43.2409 li
245.633 42.4339 li
242.832 41.6839 li
240.017 40.9889 li
237.189 40.3509 li
234.348 39.7699 li
231.496 39.2449 li
228.635 38.7769 li
225.764 38.3659 li
222.887 38.0119 li
220.002 37.7159 li
217.112 37.4779 li
214.218 37.2969 li
211.321 37.1739 li
@
201.874 37.1739 mo
198.977 37.2969 li
196.083 37.4779 li
193.194 37.7159 li
190.309 38.0119 li
187.431 38.3659 li
184.561 38.7769 li
181.699 39.2449 li
178.848 39.7699 li
176.007 40.3509 li
173.179 40.9889 li
170.363 41.6839 li
167.563 42.4339 li
164.777 43.2409 li
162.009 44.1019 li
159.258 45.0189 li
156.526 45.9899 li
153.813 47.0149 li
151.122 48.0949 li
148.453 49.2279 li
145.807 50.4129 li
143.185 51.6519 li
140.589 52.9419 li
138.018 54.2839 li
@
[86.4 3.6 3.6 3.6 ] 77.49 dsh
129.837 59.0079 mo
127.154 60.7159 li
124.51 62.4819 li
121.905 64.3059 li
119.34 66.1859 li
116.817 68.1219 li
114.337 70.1129 li
111.901 72.1569 li
109.511 74.2539 li
107.167 76.4029 li
@
100.486 83.0829 mo
98.338 85.4269 li
96.24 87.8179 li
94.196 90.2539 li
92.205 92.7339 li
90.269 95.2569 li
88.389 97.8209 li
86.565 100.427 li
84.799 103.071 li
83.091 105.753 li
@
[86.4 3.6 3.6 3.6 ] 58.455 dsh
78.367 113.935 mo
77.026 116.505 li
75.735 119.102 li
74.497 121.724 li
73.311 124.37 li
72.178 127.039 li
71.099 129.73 li
70.073 132.442 li
69.102 135.174 li
68.185 137.925 li
67.324 140.694 li
66.518 143.479 li
65.767 146.28 li
65.073 149.095 li
64.435 151.924 li
63.853 154.764 li
63.328 157.616 li
62.86 160.478 li
62.449 163.348 li
62.096 166.226 li
61.8 169.11 li
61.561 172 li
61.38 174.894 li
61.257 177.791 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
226.634 237.564 mo
226.912 237.463 li
227.188 237.36 li
227.464 237.255 li
227.74 237.149 li
228.015 237.042 li
228.29 236.933 li
228.564 236.823 li
228.837 236.712 li
@
226.634 237.564 mo
226.357 237.665 li
226.078 237.763 li
225.8 237.861 li
225.52 237.957 li
225.241 238.052 li
224.961 238.145 li
224.68 238.237 li
224.399 238.327 li
@
[86.4 3.6 3.6 3.6 ] 76.076 dsh
191.061 238.999 mo
192.852 239.462 li
194.657 239.867 li
196.474 240.216 li
198.301 240.507 li
200.136 240.74 li
201.978 240.915 li
203.824 241.031 li
205.673 241.09 li
207.523 241.09 li
209.372 241.031 li
211.218 240.915 li
213.06 240.74 li
214.895 240.507 li
216.722 240.216 li
218.538 239.867 li
220.343 239.462 li
222.135 238.999 li
@
[86.4 3.6 3.6 3.6 ] 30.137 dsh
231.004 235.771 mo
232.652 234.985 li
234.274 234.147 li
235.87 233.26 li
237.437 232.323 li
238.975 231.337 li
240.481 230.305 li
241.954 229.225 li
243.392 228.101 li
244.795 226.932 li
246.161 225.72 li
247.488 224.466 li
248.776 223.171 li
250.022 221.837 li
251.227 220.464 li
252.388 219.055 li
253.504 217.61 li
254.575 216.131 li
255.6 214.62 li
256.577 213.077 li
257.505 211.504 li
258.384 209.904 li
259.212 208.276 li
259.989 206.624 li
260.715 204.948 li
261.388 203.251 li
262.007 201.533 li
262.573 199.797 li
263.085 198.044 li
263.541 196.276 li
263.942 194.495 li
264.288 192.702 li
264.577 190.899 li
264.811 189.088 li
264.987 187.27 li
265.107 185.448 li
265.17 183.623 li
265.176 181.797 li
265.125 179.972 li
265.018 178.149 li
264.853 176.331 li
264.632 174.518 li
264.355 172.713 li
264.021 170.918 li
263.632 169.134 li
263.187 167.363 li
262.687 165.607 li
262.133 163.867 li
261.525 162.145 li
260.864 160.443 li
260.149 158.762 li
259.383 157.105 li
258.566 155.472 li
257.697 153.866 li
256.78 152.287 li
255.813 150.738 li
254.799 149.219 li
253.738 147.733 li
252.631 146.281 li
251.479 144.864 li
250.284 143.483 li
249.047 142.141 li
247.768 140.838 li
246.449 139.575 li
245.091 138.354 li
243.696 137.175 li
242.265 136.041 li
240.799 134.952 li
239.3 133.909 li
237.77 132.914 li
236.209 131.966 li
234.619 131.068 li
233.002 130.22 li
231.359 129.422 li
229.693 128.676 li
228.003 127.983 li
226.293 127.342 li
224.564 126.755 li
222.818 126.222 li
221.056 125.744 li
219.279 125.321 li
217.491 124.953 li
215.691 124.642 li
213.883 124.387 li
212.068 124.188 li
210.248 124.046 li
208.424 123.96 li
206.598 123.932 li
204.772 123.96 li
202.948 124.046 li
201.128 124.188 li
199.312 124.387 li
197.504 124.642 li
195.705 124.953 li
193.916 125.321 li
192.14 125.744 li
190.378 126.222 li
188.631 126.755 li
186.902 127.342 li
185.192 127.983 li
183.503 128.676 li
181.836 129.422 li
180.194 130.22 li
178.577 131.068 li
176.987 131.966 li
175.426 132.914 li
173.895 133.909 li
172.396 134.952 li
170.931 136.041 li
169.5 137.175 li
168.105 138.354 li
166.747 139.575 li
165.428 140.838 li
164.149 142.141 li
162.911 143.483 li
161.716 144.864 li
160.565 146.281 li
159.458 147.733 li
158.397 149.219 li
157.382 150.738 li
156.416 152.287 li
155.498 153.866 li
154.63 155.472 li
153.813 157.105 li
153.046 158.762 li
152.332 160.443 li
151.671 162.145 li
151.062 163.867 li
150.508 165.607 li
150.008 167.363 li
149.564 169.134 li
149.174 170.918 li
148.841 172.713 li
148.564 174.518 li
148.342 176.331 li
148.178 178.149 li
148.07 179.972 li
148.02 181.797 li
148.026 183.623 li
148.089 185.448 li
148.209 187.27 li
148.385 189.088 li
148.618 190.899 li
148.908 192.702 li
149.253 194.495 li
149.654 196.276 li
150.111 198.044 li
150.622 199.797 li
151.188 201.533 li
151.808 203.251 li
152.481 204.948 li
153.206 206.624 li
153.984 208.276 li
154.812 209.904 li
155.691 211.504 li
156.619 213.077 li
157.596 214.62 li
158.62 216.131 li
159.691 217.61 li
160.808 219.055 li
161.969 220.464 li
163.173 221.837 li
164.42 223.171 li
165.707 224.466 li
167.035 225.72 li
168.401 226.932 li
169.803 228.101 li
171.242 229.225 li
172.715 230.305 li
174.221 231.337 li
175.758 232.323 li
177.326 233.26 li
178.921 234.147 li
180.544 234.985 li
182.192 235.771 li
@
[] 0 dsh
129.601 138.159 mo
129.501 138.459 li
129.301 138.659 li
129.201 138.959 li
129.001 139.159 li
128.901 139.459 li
128.801 139.659 li
128.601 139.959 li
128.501 140.259 li
129.601 138.159 mo
129.801 137.859 li
129.901 137.659 li
130.101 137.359 li
130.201 137.159 li
130.401 136.859 li
130.501 136.659 li
130.701 136.359 li
130.801 136.159 li
186.501 237.659 mo
186.801 237.759 li
187.101 237.859 li
187.301 237.959 li
187.601 237.959 li
187.901 238.059 li
188.201 238.159 li
188.501 238.259 li
188.701 238.359 li
186.501 237.659 mo
186.201 237.559 li
186.001 237.459 li
185.701 237.259 li
185.401 237.159 li
185.101 237.059 li
184.901 236.959 li
184.601 236.859 li
184.301 236.759 li
61.101 182.559 mo
61.101 182.859 li
61.101 183.159 li
61.101 183.459 li
61.101 183.759 li
61.101 184.059 li
61.101 184.359 li
61.101 184.659 li
61.101 184.959 li
61.101 182.559 mo
61.101 182.259 li
61.101 181.959 li
61.101 181.659 li
61.101 181.359 li
61.101 181.059 li
61.101 180.759 li
61.101 180.459 li
61.101 180.159 li
186.501 237.659 mo
186.801 237.759 li
187.101 237.859 li
187.301 237.959 li
187.601 237.959 li
187.901 238.059 li
188.201 238.159 li
188.501 238.259 li
188.701 238.359 li
186.501 237.659 mo
186.201 237.559 li
186.001 237.459 li
185.701 237.259 li
185.401 237.159 li
185.101 237.059 li
184.901 236.959 li
184.601 236.859 li
184.301 236.759 li
188.501 240.259 mo
194.301 243.859 li
193.201 245.259 li
188.501 240.259 li
228.301 239.859 mo
233.501 244.359 li
232.301 245.459 li
228.301 239.859 li
320.801 180.259 mo
325.501 175.259 li
326.601 176.559 li
320.801 180.259 li
259.901 198.859 mo
266.101 201.759 li
265.201 203.159 li
259.901 198.859 li
122.601 217.359 mo
119.501 223.459 li
118.101 222.459 li
122.601 217.359 li
204.201 86.5589 mo
198.501 82.7589 li
199.601 81.4589 li
204.201 86.5589 li
206.001 272.459 mo
201.801 277.759 li
200.601 276.559 li
206.001 272.459 li
244.601 100.059 mo
250.201 96.0589 li
251.001 97.5589 li
244.601 100.059 li
239.601 267.159 mo
246.201 269.059 li
245.501 270.659 li
239.601 267.159 li
724.701 102.959 mo
724.601 103.159 li
724.401 103.459 li
724.301 103.659 li
724.101 103.959 li
724.001 104.159 li
723.801 104.459 li
723.701 104.659 li
723.601 104.959 li
724.701 102.959 mo
724.901 102.659 li
725.001 102.359 li
725.201 102.159 li
725.301 101.859 li
725.501 101.659 li
725.601 101.359 li
725.801 101.159 li
725.901 100.859 li
525.601 72.3589 mo
518.801 73.2589 li
518.801 71.5589 li
525.601 72.3589 li
524.201 29.3589 mo
521.301 29.3589 li
521.301 7.0589 li
524.201 7.0589 li
524.201 29.3589 li
509.701 18.1589 mo
509.701 17.3589 li
509.601 16.5589 li
509.501 15.8589 li
509.301 15.0589 li
509.001 14.2589 li
508.701 13.5589 li
508.301 12.8589 li
507.901 12.1589 li
507.501 11.4589 li
507.001 10.8589 li
506.401 10.2589 li
505.901 9.75891 li
505.201 9.25891 li
504.601 8.75891 li
503.901 8.35889 li
503.201 8.0589 li
502.401 7.75891 li
501.701 7.45892 li
500.901 7.25891 li
500.101 7.15887 li
499.301 7.0589 li
498.501 7.0589 li
497.801 7.0589 li
497.001 7.15887 li
496.201 7.25891 li
495.401 7.45892 li
494.601 7.75891 li
493.901 8.0589 li
493.201 8.35889 li
492.501 8.75891 li
491.901 9.25891 li
491.201 9.75891 li
490.701 10.2589 li
490.101 10.8589 li
489.601 11.4589 li
489.201 12.1589 li
488.801 12.8589 li
488.401 13.5589 li
488.101 14.2589 li
487.801 15.0589 li
487.601 15.8589 li
487.501 16.5589 li
487.401 17.3589 li
487.401 18.1589 li
487.401 18.9589 li
487.501 19.7589 li
487.601 20.5589 li
487.801 21.3589 li
488.101 22.0589 li
488.401 22.8589 li
488.801 23.5589 li
489.201 24.2589 li
489.601 24.8589 li
490.101 25.4589 li
490.701 26.0589 li
491.201 26.6589 li
491.901 27.1589 li
492.501 27.5589 li
493.201 27.9589 li
493.901 28.3589 li
494.601 28.6589 li
495.401 28.8589 li
496.201 29.0589 li
497.001 29.2589 li
497.801 29.3589 li
498.501 29.3589 li
499.301 29.3589 li
500.101 29.2589 li
500.901 29.0589 li
501.701 28.8589 li
502.401 28.6589 li
503.201 28.3589 li
503.901 27.9589 li
504.601 27.5589 li
505.201 27.1589 li
505.901 26.6589 li
506.401 26.0589 li
507.001 25.4589 li
507.501 24.8589 li
507.901 24.2589 li
508.301 23.5589 li
508.701 22.8589 li
509.001 22.0589 li
509.301 21.3589 li
509.501 20.5589 li
509.601 19.7589 li
509.701 18.9589 li
509.701 18.1589 li
@
225.601 236.659 mo
227.601 238.659 li
225.601 238.659 mo
227.601 236.659 li
226.601 239.059 mo
226.601 236.159 li
228.001 237.659 mo
225.201 237.659 li
174.701 96.7589 mo
176.701 98.7589 li
174.701 98.7589 mo
176.701 96.7589 li
175.701 99.1589 mo
175.701 96.3589 li
177.101 97.7589 mo
174.301 97.7589 li
175.701 99.4589 mo
177.701 101.459 li
175.701 101.459 mo
177.701 99.4589 li
176.701 101.859 mo
176.701 99.0589 li
178.101 100.459 mo
175.201 100.459 li
.247135 .195529 .200687 0 cmyk
@
1 lc
1 lj
[86.4 3.6 3.6 3.6 ] 0 dsh
125.587 135.743 mo
124.564 135.152 li
.75021 .679683 .670222 .90164 cmyk
@
[86.4 3.6 3.6 3.6 ] 42.253 dsh
133.77 140.467 mo
206.955 182.72 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
283.517 138.105 mo
285.563 136.924 li
@
283.517 138.105 mo
281.472 139.286 li
@
287.609 135.743 mo
288.632 135.152 li
@
[86.4 3.6 3.6 3.6 ] 42.286 dsh
279.426 140.467 mo
206.184 182.754 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
206.598 271.333 mo
206.598 273.696 li
@
206.598 271.333 mo
206.598 268.971 li
@
206.598 276.058 mo
206.598 277.239 li
@
206.598 266.609 mo
206.598 265.428 li
@
242.724 101.374 mo
243.685 99.2159 li
@
242.724 101.374 mo
241.763 103.532 li
@
243.685 99.2159 mo
244.645 97.0579 li
@
[86.4 3.6 3.6 3.6 ] 43.414 dsh
241.763 103.532 mo
206.447 182.854 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
263.69 114.475 mo
265.208 112.666 li
@
263.69 114.475 mo
262.171 116.285 li
@
266.726 110.856 mo
267.577 109.843 li
@
[86.4 3.6 3.6 3.6 ] 49.864 dsh
260.653 118.094 mo
206.741 182.344 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
255.732 200.467 mo
255.732 203.302 li
@
260.456 195.743 mo
263.291 195.743 li
@
255.732 191.018 mo
255.732 188.184 li
@
251.007 195.743 mo
248.173 195.743 li
@
316.204 187.239 mo
316.204 190.074 li
@
320.929 182.515 mo
323.763 182.515 li
@
316.204 177.79 mo
316.204 174.956 li
@
311.48 182.515 mo
308.645 182.515 li
@
184.946 242.004 mo
183.087 247.109 li
@
[86.4 3.6 3.6 3.6 ] 64.957 dsh
188.177 233.125 mo
206.539 182.677 li
@
[86.4 3.6 3.6 3.6 ] 26.981 dsh
206.598 225.034 mo
206.598 354.672 li
@
249.118 182.515 mo
378.755 182.515 li
@
206.598 139.995 mo
206.598 10.3569 li
@
164.078 182.515 mo
34.44 182.515 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
56.456 182.515 mo
55.936 182.515 li
@
65.905 182.515 mo
66.425 182.515 li
@
80.663 255.223 mo
78.617 256.404 li
@
80.663 255.223 mo
82.708 254.042 li
@
76.571 257.585 mo
76.121 257.845 li
@
84.754 252.861 mo
85.204 252.601 li
@
103.772 285.34 mo
102.102 287.01 li
@
103.772 285.34 mo
105.443 283.67 li
@
102.102 287.01 mo
100.432 288.681 li
@
105.443 283.67 mo
107.113 281.999 li
@
206.598 182.515 mo
206.598 184.877 li
@
206.598 182.515 mo
208.96 182.515 li
@
206.598 182.515 mo
206.598 180.152 li
@
206.598 182.515 mo
204.236 182.515 li
@
[86.4 3.6 3.6 3.6 ] 22.75 dsh
206.598 187.239 mo
206.598 325.339 li
@
211.322 182.515 mo
349.422 182.515 li
@
206.598 177.79 mo
206.598 39.6899 li
@
201.873 182.515 mo
63.773 182.515 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
133.889 308.45 mo
132.708 310.495 li
@
133.889 308.45 mo
135.07 306.404 li
@
131.527 312.541 mo
131.267 312.991 li
@
136.251 304.358 mo
136.511 303.908 li
@
206.598 327.932 mo
206.598 330.294 li
@
206.598 327.932 mo
206.598 325.57 li
@
206.598 332.656 mo
206.598 333.176 li
@
206.598 323.207 mo
206.598 322.688 li
@
279.306 308.45 mo
280.488 310.495 li
@
279.306 308.45 mo
278.125 306.404 li
@
281.669 312.541 mo
281.929 312.991 li
@
276.944 304.358 mo
276.684 303.908 li
@
309.423 285.34 mo
311.094 287.01 li
@
309.423 285.34 mo
307.753 283.67 li
@
311.094 287.01 mo
312.764 288.681 li
@
307.753 283.67 mo
306.083 281.999 li
@
332.533 255.223 mo
334.579 256.404 li
@
332.533 255.223 mo
330.487 254.042 li
@
336.624 257.585 mo
337.074 257.845 li
@
328.441 252.861 mo
327.991 252.601 li
@
352.015 182.515 mo
354.377 182.515 li
@
352.015 182.515 mo
349.653 182.515 li
@
356.74 182.515 mo
357.259 182.515 li
@
347.291 182.515 mo
346.771 182.515 li
@
332.533 109.806 mo
334.579 108.625 li
@
332.533 109.806 mo
330.487 110.987 li
@
336.624 107.444 mo
337.074 107.184 li
@
328.441 112.168 mo
327.991 112.428 li
@
309.423 79.6889 mo
311.094 78.0189 li
@
309.423 79.6889 mo
307.753 81.3589 li
@
311.094 78.0189 mo
312.764 76.3479 li
@
307.753 81.3589 mo
306.083 83.0299 li
@
279.306 56.5789 mo
280.488 54.5339 li
@
279.306 56.5789 mo
278.125 58.6249 li
@
281.669 52.4879 mo
281.929 52.0379 li
@
276.944 60.6709 mo
276.684 61.1209 li
@
206.598 37.0969 mo
206.598 34.7349 li
@
206.598 37.0969 mo
206.598 39.4589 li
@
206.598 32.3729 mo
206.598 31.8529 li
@
206.598 41.8219 mo
206.598 42.3409 li
@
133.889 56.5789 mo
132.708 54.5339 li
@
133.889 56.5789 mo
135.07 58.6249 li
@
131.527 52.4879 mo
131.267 52.0379 li
@
136.251 60.6709 mo
136.511 61.1209 li
@
103.772 79.6889 mo
102.102 78.0189 li
@
103.772 79.6889 mo
105.443 81.3589 li
@
102.102 78.0189 mo
100.432 76.3479 li
@
105.443 81.3589 mo
107.113 83.0299 li
@
80.663 109.806 mo
78.617 108.625 li
@
80.663 109.806 mo
82.708 110.987 li
@
76.571 107.444 mo
76.121 107.184 li
@
84.754 112.168 mo
85.204 112.428 li
@
184.946 242.004 mo
182.942 247.509 li
@
188.177 233.125 mo
190.181 227.62 li
@
226.634 237.564 mo
227.442 239.784 li
@
226.634 237.564 mo
225.826 235.344 li
@
228.25 242.004 mo
230.254 247.509 li
@
[86.4 3.6 3.6 3.6 ] 64.913 dsh
225.018 233.125 mo
206.626 182.593 li
@
[86.4 3.6 3.6 3.6 ] 0 dsh
206.598 182.515 mo
206.598 184.877 li
@
206.598 182.515 mo
208.96 182.515 li
@
206.598 182.515 mo
206.598 180.152 li
@
206.598 182.515 mo
204.236 182.515 li
@
[86.4 3.6 3.6 3.6 ] 17.532 dsh
206.598 187.239 mo
206.598 335.774 li
@
211.322 182.515 mo
359.858 182.515 li
@
206.598 177.79 mo
206.598 29.2549 li
@
201.873 182.515 mo
53.338 182.515 li
@
[] 0 dsh
129.601 138.159 mo
127.601 136.959 li
129.601 138.159 mo
131.701 139.359 li
255.701 195.759 mo
255.701 198.159 li
255.701 195.759 mo
258.001 195.759 li
255.701 195.759 mo
255.701 193.459 li
255.701 195.759 mo
253.301 195.759 li
316.201 182.559 mo
316.201 184.959 li
316.201 182.559 mo
318.501 182.559 li
316.201 182.559 mo
316.201 180.159 li
316.201 182.559 mo
313.801 182.559 li
186.501 237.659 mo
185.701 239.859 li
186.501 237.659 mo
187.301 235.359 li
206.501 182.559 mo
206.501 203.859 li
206.501 182.559 mo
227.801 182.559 li
206.501 182.559 mo
206.501 161.259 li
206.501 182.559 mo
185.301 182.559 li
61.101 182.559 mo
58.801 182.559 li
61.101 182.559 mo
63.501 182.559 li
186.501 237.659 mo
185.701 239.859 li
186.501 237.659 mo
187.301 235.359 li
336.101 359.759 mo
438.201 359.759 li
438.201 359.759 mo
336.101 359.759 li
336.101 359.759 mo
438.201 359.759 li
438.201 359.759 mo
336.101 359.759 li
336.101 359.759 mo
438.201 359.759 li
438.201 359.759 mo
336.101 359.759 li
336.101 359.759 mo
188.501 240.259 li
336.101 359.759 mo
228.301 239.859 li
367.401 141.059 mo
415.401 141.059 li
415.401 141.059 mo
367.401 141.059 li
367.401 141.059 mo
415.401 141.059 li
415.401 141.059 mo
367.401 141.059 li
367.401 141.059 mo
415.401 141.059 li
415.401 141.059 mo
367.401 141.059 li
367.401 141.059 mo
320.801 180.259 li
366.301 264.859 mo
420.401 264.859 li
420.401 264.859 mo
366.301 264.859 li
366.301 264.859 mo
420.401 264.859 li
420.401 264.859 mo
366.301 264.859 li
366.301 264.859 mo
420.401 264.859 li
420.401 264.859 mo
366.301 264.859 li
366.301 264.859 mo
259.901 198.859 li
3.60101 294.059 mo
69.601 294.059 li
69.601 294.059 mo
3.60101 294.059 li
3.60101 294.059 mo
69.601 294.059 li
69.601 294.059 mo
3.60101 294.059 li
3.60101 294.059 mo
69.601 294.059 li
69.601 294.059 mo
3.60101 294.059 li
69.601 294.059 mo
122.601 217.359 li
32.001 26.2589 mo
133.801 26.2589 li
133.801 26.2589 mo
32.001 26.2589 li
32.001 26.2589 mo
133.801 26.2589 li
133.801 26.2589 mo
32.001 26.2589 li
32.001 26.2589 mo
133.801 26.2589 li
133.801 26.2589 mo
32.001 26.2589 li
133.801 26.2589 mo
204.201 86.5589 li
48.401 349.959 mo
126.401 349.959 li
126.401 349.959 mo
48.401 349.959 li
48.401 349.959 mo
126.401 349.959 li
126.401 349.959 mo
48.401 349.959 li
48.401 349.959 mo
126.401 349.959 li
126.401 349.959 mo
48.401 349.959 li
126.401 349.959 mo
206.001 272.459 li
346.701 43.1589 mo
442.701 43.1589 li
442.701 43.1589 mo
346.701 43.1589 li
346.701 43.1589 mo
442.701 43.1589 li
442.701 43.1589 mo
346.701 43.1589 li
346.701 43.1589 mo
442.701 43.1589 li
442.701 43.1589 mo
346.701 43.1589 li
346.701 43.1589 mo
244.601 100.059 li
347.001 312.559 mo
425.201 312.559 li
425.201 312.559 mo
347.001 312.559 li
347.001 312.559 mo
425.201 312.559 li
425.201 312.559 mo
347.001 312.559 li
347.001 312.559 mo
425.201 312.559 li
425.201 312.559 mo
347.001 312.559 li
347.001 312.559 mo
239.601 267.159 li
850.701 175.659 mo
850.701 173.259 li
850.701 175.659 mo
848.301 175.659 li
850.701 175.659 mo
850.701 177.959 li
850.701 175.659 mo
853.001 175.659 li
724.701 102.959 mo
722.701 101.759 li
724.701 102.959 mo
726.801 104.059 li
446.701 64.0589 mo
446.701 80.7589 li
446.701 80.7589 mo
492.601 80.7589 li
492.601 64.0589 mo
446.701 64.0589 li
492.601 64.0589 mo
492.601 80.7589 li
492.601 64.0589 mo
492.601 80.7589 li
492.601 64.0589 mo
492.601 80.7589 li
492.601 64.0589 mo
492.601 80.7589 li
492.601 72.3589 mo
525.601 72.3589 li
521.301 18.1589 mo
509.701 18.1589 li
525.601 45.7589 mo
525.601 1.35889 li
@
[86.4 3.6 3.6 3.6 ] 43.683 dsh
173.684 92.0829 mo
206.598 182.515 li
.247135 .195529 .200687 0 cmyk
@
[86.4 3.6 3.6 3.6 ] 47.391 dsh
206.598 182.515 mo
124.246 215.787 li
@
[] 0 dsh
-101.899 764.659 mo
1088.5 764.659 li
1088.5 -77.1411 mo
-101.899 -77.1411 li
-101.899 -77.1411 mo
-101.899 764.659 li
1088.5 764.659 mo
1088.5 -77.1411 li
564.101 622.959 mo
734.201 622.959 li
564.101 637.159 mo
734.201 637.159 li
564.101 665.459 mo
734.201 665.459 li
564.101 679.659 mo
734.201 679.659 li
564.101 693.859 mo
734.201 693.859 li
564.101 708.059 mo
734.201 708.059 li
564.101 722.159 mo
734.201 722.159 li
564.101 736.359 mo
734.201 736.359 li
564.101 750.559 mo
734.201 750.559 li
589.601 608.759 mo
589.601 651.359 li
615.101 608.759 mo
615.101 750.559 li
666.201 608.759 mo
666.201 651.359 li
705.801 608.759 mo
705.801 750.559 li
734.201 750.559 mo
1074.3 750.559 li
1074.3 608.759 mo
1074.3 750.559 li
904.301 665.459 mo
1074.3 665.459 li
972.301 651.359 mo
972.301 708.059 li
938.301 665.459 mo
938.301 693.859 li
1023.3 651.359 mo
1023.3 693.859 li
-31.199 580.459 mo
-31.199 750.559 li
-31.199 708.059 mo
-101.899 708.059 li
-31.199 722.159 mo
-101.899 722.159 li
-66.599 708.059 mo
-66.599 750.559 li
-31.199 679.659 mo
-101.899 679.659 li
-31.199 665.459 mo
-101.899 665.459 li
-31.199 637.159 mo
-101.899 637.159 li
-31.199 622.959 mo
-101.899 622.959 li
-31.199 594.659 mo
-101.899 594.659 li
-31.199 580.459 mo
-101.899 580.459 li
1088.5 -77.1411 mo
1088.5 764.659 li
@
.992 lw
564.101 651.359 mo
734.201 651.359 li
734.201 608.759 mo
734.201 750.559 li
904.301 608.759 mo
904.301 750.559 li
734.201 693.859 mo
1074.3 693.859 li
904.301 708.059 mo
1074.3 708.059 li
904.301 651.359 mo
1074.3 651.359 li
110.601 -63.0411 mo
110.601 -29.0411 li
110.601 -29.0411 mo
-31.199 -29.0411 li
@
1.417 lw
564.101 608.759 mo
1074.3 608.759 li
-31.199 -63.0411 mo
1074.3 -63.0411 li
-31.199 -63.0411 mo
-31.199 750.559 li
564.101 750.559 mo
1074.3 750.559 li
1074.3 -63.0411 mo
1074.3 750.559 li
564.101 750.559 mo
-31.199 750.559 li
-31.199 750.559 mo
-101.899 750.559 li
564.101 608.759 mo
564.101 750.559 li
@
188.501 240.259 mo
194.301 243.859 li
193.201 245.259 li
228.301 239.859 mo
233.501 244.359 li
232.301 245.459 li
320.801 180.259 mo
325.501 175.259 li
326.601 176.559 li
259.901 198.859 mo
266.101 201.759 li
265.201 203.159 li
122.601 217.359 mo
119.501 223.459 li
118.101 222.459 li
204.201 86.559 mo
198.501 82.7589 li
199.601 81.4589 li
206.001 272.459 mo
201.801 277.759 li
200.601 276.559 li
244.601 100.059 mo
250.201 96.059 li
251.001 97.559 li
239.601 267.159 mo
246.201 269.059 li
245.501 270.659 li
525.601 72.3589 mo
518.801 73.2589 li
518.801 71.559 li
524.201 29.3589 mo
521.301 29.3589 li
521.301 7.05896 li
524.201 7.05896 li
.75021 .679683 .670222 .90164 cmyk
f
.709 lw
70.601 216.859 mo
69.101 210.159 li
67.901 203.359 li
67.001 196.559 li
66.501 189.659 li
66.301 182.759 li
66.501 175.859 li
67.001 169.059 li
67.801 162.159 li
69.001 155.459 li
70.501 148.659 li
72.301 142.059 li
74.501 135.559 li
76.901 129.059 li
79.701 122.759 li
82.801 116.659 li
86.201 110.659 li
89.901 104.859 li
93.801 99.1589 li
98.101 93.7589 li
102.501 88.5589 li
107.301 83.5589 li
112.301 78.7589 li
117.501 74.2589 li
122.901 70.0589 li
128.501 66.0589 li
134.301 62.3589 li
140.301 58.9589 li
146.501 55.8589 li
152.801 53.0589 li
159.201 50.5589 li
165.701 48.4589 li
172.401 46.5589 li
179.101 45.0589 li
185.901 43.8589 li
192.701 43.0589 li
199.601 42.5589 li
206.401 42.3589 li
213.301 42.5589 li
220.201 43.0589 li
227.001 43.8589 li
233.801 45.0589 li
240.501 46.5589 li
247.201 48.3589 li
253.701 50.5589 li
260.101 52.9589 li
266.401 55.7589 li
272.601 58.8589 li
278.601 62.2589 li
284.401 65.9589 li
290.001 69.9589 li
295.401 74.1589 li
300.701 78.6589 li
305.701 83.3589 li
310.401 88.3589 li
314.901 93.5589 li
319.101 98.9589 li
323.101 104.659 li
326.801 110.459 li
330.201 116.459 li
333.301 122.559 li
336.101 128.859 li
338.601 135.259 li
340.701 141.859 li
342.501 148.459 li
344.101 155.159 li
345.201 161.959 li
346.101 168.859 li
346.601 175.659 li
346.801 182.559 li
346.801 182.559 mo
346.601 189.459 li
346.101 196.359 li
345.201 203.259 li
344.001 210.059 li
342.501 216.859 li
340.601 223.559 li
338.501 230.059 li
335.901 236.559 li
333.101 242.859 li
330.001 249.059 li
326.601 255.059 li
322.801 260.859 li
318.801 266.559 li
314.501 271.959 li
310.001 277.159 li
305.201 282.159 li
300.201 286.959 li
294.901 291.459 li
289.401 295.659 li
283.701 299.659 li
277.801 303.259 li
271.801 306.659 li
265.601 309.759 li
259.201 312.459 li
252.801 314.959 li
246.201 317.059 li
239.501 318.859 li
232.701 320.359 li
225.901 321.459 li
219.001 322.259 li
212.101 322.659 li
205.201 322.759 li
198.201 322.559 li
191.301 321.959 li
184.501 321.059 li
177.701 319.759 li
170.901 318.159 li
164.301 316.259 li
157.701 313.959 li
151.301 311.459 li
145.001 308.559 li
138.801 305.359 li
132.901 301.859 li
127.101 298.059 li
121.501 293.959 li
116.101 289.659 li
110.901 285.059 li
105.901 280.259 li
101.201 275.159 li
96.801 269.859 li
92.601 264.259 li
88.701 258.559 li
85.101 252.659 li
81.801 246.559 li
78.801 240.359 li
76.101 233.959 li
73.701 227.459 li
71.701 220.859 li
74.601 220.059 mo
76.601 226.459 li
79.001 232.759 li
81.601 239.059 li
84.501 245.059 li
87.701 251.059 li
91.301 256.759 li
95.101 262.359 li
99.101 267.759 li
103.401 272.959 li
108.001 277.959 li
112.801 282.659 li
117.901 287.159 li
123.101 291.359 li
128.601 295.359 li
134.201 299.059 li
140.001 302.459 li
146.001 305.559 li
152.201 308.459 li
158.401 310.959 li
164.801 313.159 li
171.301 315.059 li
177.801 316.659 li
184.501 317.859 li
191.101 318.859 li
197.901 319.359 li
204.601 319.659 li
211.401 319.559 li
218.101 319.159 li
224.801 318.459 li
231.501 317.359 li
238.101 315.959 li
244.601 314.259 li
251.101 312.259 li
257.401 309.859 li
263.601 307.259 li
269.701 304.259 li
275.601 301.059 li
281.301 297.459 li
286.901 293.659 li
292.301 289.559 li
297.401 285.259 li
302.401 280.659 li
307.101 275.859 li
311.501 270.759 li
315.801 265.459 li
319.701 259.959 li
323.401 254.359 li
326.801 248.459 li
329.901 242.559 li
332.701 236.359 li
335.201 230.059 li
337.301 223.759 li
339.201 217.259 li
340.801 210.659 li
342.001 204.059 li
342.901 197.359 li
343.401 190.559 li
343.701 183.859 li
343.601 177.059 li
343.101 170.359 li
342.401 163.659 li
341.301 156.959 li
339.801 150.359 li
338.101 143.859 li
336.001 137.459 li
333.701 131.159 li
331.001 124.959 li
328.001 118.859 li
324.701 112.959 li
321.101 107.259 li
317.301 101.759 li
313.201 96.3589 li
308.801 91.2589 li
304.201 86.2589 li
299.301 81.5589 li
294.201 77.1589 li
289.001 72.9589 li
283.501 69.0589 li
277.801 65.3589 li
271.901 62.0589 li
265.901 58.9589 li
259.801 56.1589 li
253.501 53.7589 li
247.101 51.5589 li
240.601 49.7589 li
234.001 48.2589 li
227.401 47.0589 li
220.701 46.1589 li
213.901 45.6589 li
207.201 45.4589 li
200.401 45.5589 li
193.701 46.0589 li
187.001 46.8589 li
180.301 47.9589 li
173.801 49.4589 li
167.201 51.1589 li
160.801 53.2589 li
154.501 55.6589 li
148.301 58.4589 li
142.301 61.4589 li
136.401 64.7589 li
130.701 68.3589 li
125.201 72.1589 li
119.801 76.3589 li
114.701 80.7589 li
109.801 85.3589 li
105.201 90.2589 li
100.701 95.3589 li
96.601 100.659 li
92.701 106.159 li
89.101 111.859 li
85.701 117.759 li
82.701 123.759 li
79.901 129.959 li
77.501 136.259 li
75.401 142.659 li
73.601 149.159 li
72.101 155.759 li
70.901 162.359 li
70.101 169.059 li
69.601 175.859 li
69.401 182.559 li
69.401 182.559 mo
69.501 186.759 li
69.701 191.059 li
70.001 195.259 li
70.501 199.459 li
71.101 203.659 li
71.801 207.859 li
72.601 211.959 li
73.601 216.059 li
70.601 216.859 mo
70.601 216.859 li
70.601 216.959 li
70.501 216.959 li
70.401 217.059 li
70.401 217.159 li
70.401 217.159 mo
68.901 210.459 li
67.701 203.759 li
66.801 196.859 li
66.301 190.059 li
66.101 183.159 li
66.201 176.359 li
66.701 169.459 li
67.501 162.659 li
68.601 155.859 li
70.101 149.159 li
71.901 142.559 li
74.001 136.059 li
76.401 129.559 li
79.201 123.259 li
82.201 117.159 li
85.601 111.159 li
89.201 105.359 li
93.101 99.6589 li
97.301 94.2589 li
101.701 88.9589 li
106.401 83.9589 li
111.401 79.2589 li
116.501 74.6589 li
121.901 70.4589 li
127.501 66.4589 li
133.301 62.6589 li
139.201 59.2589 li
145.301 56.1589 li
151.601 53.2589 li
158.001 50.7589 li
164.501 48.5589 li
171.101 46.6589 li
177.701 45.0589 li
184.501 43.8589 li
191.301 42.8589 li
198.101 42.3589 li
205.001 42.0589 li
211.901 42.1589 li
218.701 42.5589 li
225.601 43.3589 li
232.301 44.4589 li
239.101 45.8589 li
245.701 47.6589 li
252.201 49.7589 li
258.701 52.0589 li
265.001 54.7589 li
271.201 57.8589 li
277.201 61.1589 li
283.001 64.7589 li
288.701 68.5589 li
294.201 72.7589 li
299.401 77.1589 li
304.501 81.8589 li
309.301 86.7589 li
313.801 91.8589 li
318.101 97.2589 li
322.201 102.759 li
325.901 108.559 li
329.401 114.459 li
332.601 120.559 li
335.501 126.759 li
338.101 133.159 li
340.301 139.659 li
342.301 146.159 li
343.901 152.859 li
345.201 159.659 li
346.101 166.459 li
346.701 173.259 li
347.001 180.159 li
347.001 186.959 li
346.601 193.859 li
345.901 200.659 li
344.801 207.459 li
343.401 214.159 li
341.701 220.859 li
339.701 227.359 li
337.301 233.859 li
334.701 240.159 li
331.701 246.359 li
328.401 252.459 li
324.901 258.259 li
321.001 263.959 li
316.901 269.459 li
312.501 274.759 li
307.901 279.859 li
303.001 284.659 li
297.901 289.259 li
292.601 293.559 li
287.101 297.659 li
281.401 301.459 li
275.501 304.959 li
269.401 308.259 li
263.201 311.159 li
256.801 313.759 li
250.401 316.059 li
243.801 318.059 li
237.101 319.659 li
230.401 321.059 li
223.601 322.059 li
216.801 322.659 li
209.901 323.059 li
203.001 323.059 li
196.201 322.659 li
189.301 321.959 li
182.501 320.959 li
175.801 319.659 li
169.101 317.959 li
162.601 315.959 li
156.101 313.659 li
149.801 311.059 li
143.501 308.159 li
137.501 304.859 li
131.601 301.359 li
125.901 297.559 li
120.301 293.459 li
115.001 289.159 li
109.901 284.559 li
105.101 279.759 li
100.401 274.659 li
96.101 269.359 li
92.001 263.859 li
88.101 258.159 li
84.601 252.259 li
81.301 246.259 li
78.301 240.059 li
75.701 233.659 li
73.301 227.259 li
71.301 220.659 li
71.301 220.659 mo
71.301 220.659 li
71.501 220.759 li
71.601 220.759 li
71.601 220.859 li
71.701 220.859 li
74.901 219.659 mo
76.801 226.159 li
79.101 232.459 li
81.801 238.659 li
84.701 244.759 li
87.901 250.659 li
91.401 256.459 li
95.201 262.059 li
99.201 267.459 li
103.501 272.659 li
108.101 277.559 li
112.901 282.359 li
117.901 286.759 li
123.101 291.059 li
128.601 295.059 li
134.201 298.759 li
140.001 302.159 li
146.001 305.259 li
152.101 308.059 li
158.401 310.659 li
164.701 312.859 li
171.201 314.759 li
177.801 316.359 li
184.401 317.559 li
191.101 318.559 li
197.801 319.159 li
204.501 319.359 li
211.201 319.359 li
218.001 318.959 li
224.701 318.159 li
231.301 317.159 li
237.901 315.759 li
244.401 314.059 li
250.901 312.059 li
257.201 309.659 li
263.401 307.059 li
269.501 304.059 li
275.401 300.859 li
281.101 297.259 li
286.701 293.459 li
292.001 289.359 li
297.201 285.059 li
302.101 280.459 li
306.801 275.659 li
311.301 270.559 li
315.501 265.359 li
319.401 259.859 li
323.101 254.259 li
326.501 248.359 li
329.601 242.359 li
332.401 236.259 li
334.901 229.959 li
337.101 223.659 li
338.901 217.159 li
340.501 210.559 li
341.701 203.959 li
342.601 197.259 li
343.101 190.559 li
343.401 183.859 li
343.301 177.059 li
342.801 170.359 li
342.101 163.659 li
341.001 156.959 li
339.501 150.459 li
337.801 143.859 li
335.701 137.459 li
333.401 131.159 li
330.701 124.959 li
327.701 118.959 li
324.401 113.059 li
320.801 107.359 li
317.001 101.759 li
312.901 96.4589 li
308.501 91.3589 li
303.901 86.4589 li
299.101 81.7589 li
294.001 77.2589 li
288.701 73.1589 li
283.201 69.2589 li
277.501 65.5589 li
271.701 62.2589 li
265.701 59.1589 li
259.501 56.3589 li
253.201 53.9589 li
246.901 51.7589 li
240.401 49.9589 li
233.801 48.4589 li
227.201 47.2589 li
220.501 46.4589 li
213.701 45.9589 li
207.001 45.7589 li
200.301 45.8589 li
193.501 46.3589 li
186.901 47.1589 li
180.201 48.2589 li
173.601 49.7589 li
167.101 51.5589 li
160.701 53.6589 li
154.401 56.0589 li
148.301 58.7589 li
142.201 61.7589 li
136.401 65.0589 li
130.701 68.6589 li
125.201 72.5589 li
119.801 76.7589 li
114.701 81.1589 li
109.801 85.7589 li
105.201 90.6589 li
100.801 95.7589 li
96.601 101.059 li
92.801 106.559 li
89.201 112.259 li
85.801 118.159 li
82.801 124.159 li
80.101 130.359 li
77.701 136.659 li
75.601 143.059 li
73.801 149.559 li
72.301 156.059 li
71.201 162.759 li
70.301 169.459 li
69.901 176.159 li
69.701 182.859 li
69.901 189.659 li
70.401 196.359 li
71.301 203.059 li
72.401 209.659 li
73.901 216.259 li
73.901 216.259 mo
73.901 216.259 li
73.801 216.159 li
73.701 216.159 li
73.601 216.059 li
74.701 219.959 mo
74.601 220.059 li
74.701 219.959 li
74.701 219.859 li
74.801 219.759 li
74.901 219.659 li
206.501 333.459 mo
213.601 333.259 li
220.701 332.759 li
227.701 331.959 li
234.701 330.859 li
241.601 329.359 li
248.401 327.559 li
255.201 325.359 li
261.801 322.959 li
268.401 320.259 li
274.701 317.159 li
281.001 313.859 li
287.001 310.159 li
292.901 306.259 li
298.601 302.059 li
304.101 297.659 li
309.401 292.959 li
314.501 287.959 li
319.301 282.859 li
323.901 277.459 li
328.201 271.859 li
332.301 266.059 li
336.001 260.059 li
339.501 253.859 li
342.701 247.559 li
345.601 241.159 li
348.201 234.559 li
350.501 227.859 li
352.501 221.059 li
354.101 214.159 li
355.401 207.259 li
356.401 200.259 li
357.101 193.159 li
357.401 186.059 li
357.401 179.059 li
357.101 171.959 li
356.401 164.959 li
355.401 157.959 li
354.101 150.959 li
352.501 144.059 li
350.501 137.259 li
348.201 130.559 li
345.601 123.959 li
342.701 117.559 li
339.501 111.259 li
336.001 105.059 li
332.301 99.0589 li
328.201 93.2589 li
323.901 87.6589 li
319.301 82.2589 li
314.501 77.1589 li
309.401 72.1589 li
304.101 67.4589 li
298.601 63.0589 li
292.901 58.8589 li
287.001 54.9589 li
281.001 51.2589 li
274.701 47.9589 li
268.401 44.8589 li
261.801 42.1589 li
255.201 39.7589 li
248.401 37.5589 li
241.601 35.7589 li
234.701 34.3589 li
227.701 33.1589 li
220.701 32.3589 li
213.601 31.8589 li
206.501 31.6589 li
199.501 31.8589 li
192.401 32.3589 li
185.401 33.1589 li
178.401 34.3589 li
171.501 35.7589 li
164.701 37.5589 li
157.901 39.7589 li
151.301 42.1589 li
144.701 44.8589 li
138.401 47.9589 li
132.101 51.2589 li
126.101 54.9589 li
120.201 58.8589 li
114.501 63.0589 li
109.001 67.4589 li
103.701 72.1589 li
98.601 77.1589 li
93.801 82.2589 li
89.201 87.6589 li
84.901 93.2589 li
80.801 99.0589 li
77.101 105.059 li
73.601 111.259 li
70.401 117.559 li
67.501 123.959 li
64.901 130.559 li
62.601 137.259 li
60.601 144.059 li
59.001 150.959 li
57.701 157.959 li
56.701 164.959 li
56.001 171.959 li
55.701 179.059 li
55.701 186.059 li
56.001 193.159 li
56.701 200.259 li
57.701 207.259 li
59.001 214.159 li
60.601 221.059 li
62.601 227.859 li
64.901 234.559 li
67.501 241.159 li
70.401 247.559 li
73.601 253.859 li
77.101 260.059 li
80.801 266.059 li
84.901 271.859 li
89.201 277.459 li
93.801 282.859 li
98.601 287.959 li
103.701 292.959 li
109.001 297.659 li
114.501 302.059 li
120.201 306.259 li
126.101 310.159 li
132.101 313.859 li
138.401 317.159 li
144.701 320.259 li
151.301 322.959 li
157.901 325.359 li
164.701 327.559 li
171.501 329.359 li
178.401 330.859 li
185.401 331.959 li
192.401 332.759 li
199.501 333.259 li
206.501 333.459 li
206.501 333.759 mo
199.501 333.559 li
192.401 333.059 li
185.401 332.259 li
178.401 331.059 li
171.401 329.659 li
164.601 327.759 li
157.801 325.659 li
151.201 323.259 li
144.601 320.459 li
138.201 317.459 li
132.001 314.059 li
125.901 310.459 li
120.001 306.559 li
114.301 302.359 li
108.801 297.859 li
103.501 293.159 li
98.401 288.159 li
93.601 283.059 li
89.001 277.659 li
84.701 271.959 li
80.601 266.159 li
76.801 260.159 li
73.301 254.059 li
70.101 247.659 li
67.201 241.259 li
64.601 234.659 li
62.301 227.959 li
60.401 221.159 li
58.701 214.259 li
57.401 207.259 li
56.401 200.259 li
55.701 193.159 li
55.401 186.059 li
55.401 179.059 li
55.701 171.959 li
56.401 164.859 li
57.401 157.859 li
58.701 150.859 li
60.401 143.959 li
62.301 137.159 li
64.601 130.459 li
67.201 123.859 li
70.101 117.459 li
73.301 111.059 li
76.801 104.959 li
80.601 98.9589 li
84.701 93.1589 li
89.001 87.5589 li
93.601 82.0589 li
98.401 76.9589 li
103.501 71.9589 li
108.801 67.2589 li
114.301 62.7589 li
120.001 58.6589 li
125.901 54.6589 li
132.001 51.0589 li
138.201 47.6589 li
144.601 44.6589 li
151.201 41.8589 li
157.801 39.4589 li
164.601 37.3589 li
171.401 35.5589 li
178.401 34.0589 li
185.401 32.8589 li
192.401 32.0589 li
199.501 31.5589 li
206.501 31.3589 li
213.601 31.5589 li
220.701 32.0589 li
227.701 32.8589 li
234.701 34.0589 li
241.701 35.5589 li
248.501 37.3589 li
255.301 39.4589 li
261.901 41.8589 li
268.501 44.6589 li
274.901 47.6589 li
281.101 51.0589 li
287.201 54.6589 li
293.101 58.6589 li
298.801 62.7589 li
304.301 67.2589 li
309.601 71.9589 li
314.701 76.9589 li
319.501 82.0589 li
324.101 87.5589 li
328.401 93.1589 li
332.501 98.9589 li
336.301 104.959 li
339.801 111.059 li
343.001 117.459 li
345.901 123.859 li
348.501 130.459 li
350.801 137.159 li
352.701 143.959 li
354.401 150.859 li
355.701 157.859 li
356.701 164.859 li
357.401 171.959 li
357.701 179.059 li
357.701 186.059 li
357.401 193.159 li
356.701 200.259 li
355.701 207.259 li
354.401 214.259 li
352.701 221.159 li
350.801 227.959 li
348.501 234.659 li
345.901 241.259 li
343.001 247.659 li
339.801 254.059 li
336.301 260.159 li
332.501 266.159 li
328.401 271.959 li
324.101 277.659 li
319.501 283.059 li
314.701 288.159 li
309.601 293.159 li
304.301 297.859 li
298.801 302.359 li
293.101 306.559 li
287.201 310.459 li
281.101 314.059 li
274.901 317.459 li
268.501 320.459 li
261.901 323.259 li
255.301 325.659 li
248.501 327.759 li
241.701 329.659 li
234.701 331.059 li
227.701 332.259 li
220.701 333.059 li
213.601 333.559 li
206.501 333.759 li
82.101 257.759 mo
81.101 258.159 li
80.101 258.159 li
79.201 257.759 li
78.401 257.159 li
77.901 256.259 li
77.701 255.259 li
77.901 254.259 li
78.401 253.459 li
79.201 252.759 li
80.101 252.459 li
81.101 252.459 li
82.101 252.759 li
82.801 253.459 li
83.301 254.259 li
83.501 255.259 li
83.301 256.259 li
82.801 257.159 li
82.101 257.759 li
209.401 327.959 mo
209.301 328.959 li
208.801 329.859 li
208.001 330.459 li
207.001 330.859 li
206.001 330.859 li
205.101 330.459 li
204.301 329.859 li
203.801 328.959 li
203.701 327.959 li
203.801 326.959 li
204.301 326.159 li
205.101 325.459 li
206.001 325.159 li
207.001 325.159 li
208.001 325.459 li
208.801 326.159 li
209.301 326.959 li
209.401 327.959 li
333.901 252.759 mo
334.701 253.459 li
335.201 254.259 li
335.401 255.259 li
335.201 256.259 li
334.701 257.159 li
333.901 257.759 li
333.001 258.159 li
332.001 258.159 li
331.001 257.759 li
330.301 257.159 li
329.801 256.259 li
329.601 255.259 li
329.801 254.259 li
330.301 253.459 li
331.001 252.759 li
332.001 252.459 li
333.001 252.459 li
333.901 252.759 li
331.001 107.359 mo
332.001 107.059 li
333.001 107.059 li
333.901 107.359 li
334.701 107.959 li
335.201 108.859 li
335.401 109.859 li
335.201 110.859 li
334.701 111.659 li
333.901 112.359 li
333.001 112.659 li
332.001 112.659 li
331.001 112.359 li
330.301 111.659 li
329.801 110.859 li
329.601 109.859 li
329.801 108.859 li
330.301 107.959 li
331.001 107.359 li
203.701 37.1589 mo
203.801 36.1589 li
204.301 35.2589 li
205.101 34.6589 li
206.001 34.3589 li
207.001 34.3589 li
208.001 34.6589 li
208.801 35.2589 li
209.301 36.1589 li
209.401 37.1589 li
209.301 38.1589 li
208.801 38.9589 li
208.001 39.6589 li
207.001 39.9589 li
206.001 39.9589 li
205.101 39.6589 li
204.301 38.9589 li
203.801 38.1589 li
203.701 37.1589 li
79.201 112.359 mo
78.401 111.659 li
77.901 110.859 li
77.701 109.859 li
77.901 108.859 li
78.401 107.959 li
79.201 107.359 li
80.101 107.059 li
81.101 107.059 li
82.101 107.359 li
82.801 107.959 li
83.301 108.859 li
83.501 109.859 li
83.301 110.859 li
82.801 111.659 li
82.101 112.359 li
81.101 112.659 li
80.101 112.659 li
79.201 112.359 li
61.101 185.459 mo
60.101 185.259 li
59.301 184.759 li
58.601 183.959 li
58.301 183.059 li
58.301 182.059 li
58.601 181.159 li
59.301 180.359 li
60.101 179.859 li
61.101 179.659 li
62.101 179.859 li
63.001 180.359 li
63.601 181.159 li
64.001 182.059 li
64.001 183.059 li
63.601 183.959 li
63.001 184.759 li
62.101 185.259 li
61.101 185.459 li
131.301 58.0589 mo
131.001 57.1589 li
131.001 56.1589 li
131.301 55.1589 li
132.001 54.4589 li
132.901 53.9589 li
133.801 53.7589 li
134.801 53.9589 li
135.701 54.4589 li
136.301 55.1589 li
136.701 56.1589 li
136.701 57.1589 li
136.301 58.0589 li
135.701 58.8589 li
134.801 59.3589 li
133.801 59.5589 li
132.901 59.3589 li
132.001 58.8589 li
131.301 58.0589 li
276.801 55.1589 mo
277.401 54.4589 li
278.301 53.9589 li
279.301 53.7589 li
280.201 53.9589 li
281.101 54.4589 li
281.801 55.1589 li
282.101 56.1589 li
282.101 57.1589 li
281.801 58.0589 li
281.101 58.8589 li
280.201 59.3589 li
279.301 59.5589 li
278.301 59.3589 li
277.401 58.8589 li
276.801 58.0589 li
276.401 57.1589 li
276.401 56.1589 li
276.801 55.1589 li
352.001 179.659 mo
352.901 179.859 li
353.801 180.359 li
354.501 181.159 li
354.801 182.059 li
354.801 183.059 li
354.501 183.959 li
353.801 184.759 li
352.901 185.259 li
352.001 185.459 li
351.001 185.259 li
350.101 184.759 li
349.501 183.959 li
349.101 183.059 li
349.101 182.059 li
349.501 181.159 li
350.101 180.359 li
351.001 179.859 li
352.001 179.659 li
281.801 307.059 mo
282.101 307.959 li
282.101 308.959 li
281.801 309.959 li
281.101 310.659 li
280.201 311.159 li
279.301 311.359 li
278.301 311.159 li
277.401 310.659 li
276.801 309.959 li
276.401 308.959 li
276.401 307.959 li
276.801 307.059 li
277.401 306.259 li
278.301 305.759 li
279.301 305.659 li
280.201 305.759 li
281.101 306.259 li
281.801 307.059 li
136.301 309.959 mo
135.701 310.659 li
134.801 311.159 li
133.801 311.359 li
132.901 311.159 li
132.001 310.659 li
131.301 309.959 li
131.001 308.959 li
131.001 307.959 li
131.301 307.059 li
132.001 306.259 li
132.901 305.759 li
133.801 305.659 li
134.801 305.759 li
135.701 306.259 li
136.301 307.059 li
136.701 307.959 li
136.701 308.959 li
136.301 309.959 li
309.401 287.759 mo
310.301 287.559 li
311.001 287.059 li
311.601 286.259 li
311.701 285.359 li
311.601 284.459 li
311.001 283.759 li
310.301 283.159 li
309.401 283.059 li
308.501 283.159 li
307.701 283.759 li
307.201 284.459 li
307.001 285.359 li
307.201 286.259 li
307.701 287.059 li
308.501 287.559 li
309.401 287.759 li
103.701 287.759 mo
104.601 287.559 li
105.401 287.059 li
105.901 286.259 li
106.101 285.359 li
105.901 284.459 li
105.401 283.759 li
104.601 283.159 li
103.701 283.059 li
102.801 283.159 li
102.101 283.759 li
101.501 284.459 li
101.401 285.359 li
101.501 286.259 li
102.101 287.059 li
102.801 287.559 li
103.701 287.759 li
103.701 82.0589 mo
104.601 81.9589 li
105.401 81.4589 li
105.901 80.6589 li
106.101 79.7589 li
105.901 78.8589 li
105.401 78.0589 li
104.601 77.5589 li
103.701 77.3589 li
102.801 77.5589 li
102.101 78.0589 li
101.501 78.8589 li
101.401 79.7589 li
101.501 80.6589 li
102.101 81.4589 li
102.801 81.9589 li
103.701 82.0589 li
309.401 82.0589 mo
310.301 81.9589 li
311.001 81.4589 li
311.601 80.6589 li
311.701 79.7589 li
311.601 78.8589 li
311.001 78.0589 li
310.301 77.5589 li
309.401 77.3589 li
308.501 77.5589 li
307.701 78.0589 li
307.201 78.8589 li
307.001 79.7589 li
307.201 80.6589 li
307.701 81.4589 li
308.501 81.9589 li
309.401 82.0589 li
70.401 217.159 mo
70.201 217.659 li
70.101 218.159 li
70.001 218.659 li
70.101 219.159 li
70.301 219.559 li
70.601 220.059 li
70.901 220.359 li
71.301 220.659 li
352.001 179.959 mo
351.001 180.159 li
350.201 180.659 li
349.601 181.359 li
349.401 182.359 li
349.501 183.259 li
349.901 184.159 li
350.601 184.759 li
351.501 185.159 li
352.401 185.159 li
353.301 184.759 li
354.001 184.159 li
354.501 183.259 li
354.601 182.359 li
354.301 181.359 li
353.701 180.659 li
352.901 180.159 li
352.001 179.959 li
124.201 218.059 mo
123.401 217.859 li
122.701 217.359 li
122.201 216.659 li
122.001 215.859 li
122.201 214.959 li
122.701 214.259 li
123.401 213.859 li
124.201 213.659 li
125.001 213.859 li
125.701 214.259 li
126.201 214.959 li
126.401 215.859 li
126.201 216.659 li
125.701 217.359 li
125.001 217.859 li
124.201 218.059 li
255.701 200.959 mo
254.301 200.859 li
253.101 200.259 li
252.001 199.459 li
251.201 198.359 li
250.701 197.159 li
250.501 195.759 li
250.701 194.459 li
251.201 193.159 li
252.001 192.159 li
253.101 191.259 li
254.301 190.759 li
255.701 190.559 li
257.001 190.759 li
258.301 191.259 li
259.401 192.159 li
260.201 193.159 li
260.701 194.459 li
260.901 195.759 li
260.701 197.159 li
260.201 198.359 li
259.401 199.459 li
258.301 200.259 li
257.001 200.859 li
255.701 200.959 li
316.201 187.759 mo
314.801 187.559 li
313.601 187.059 li
312.501 186.259 li
311.701 185.159 li
311.101 183.959 li
311.001 182.559 li
311.101 181.259 li
311.701 179.959 li
312.501 178.859 li
313.601 178.059 li
314.801 177.559 li
316.201 177.359 li
317.501 177.559 li
318.801 178.059 li
319.801 178.859 li
320.701 179.959 li
321.201 181.259 li
321.401 182.559 li
321.201 183.959 li
320.701 185.159 li
319.801 186.259 li
318.801 187.059 li
317.501 187.559 li
316.201 187.759 li
236.901 270.759 mo
235.701 270.559 li
234.501 270.059 li
233.501 269.259 li
232.701 268.159 li
232.301 266.959 li
232.201 265.659 li
232.501 264.459 li
233.101 263.259 li
233.901 262.359 li
235.001 261.659 li
236.301 261.359 li
237.601 261.359 li
238.801 261.659 li
239.901 262.359 li
240.801 263.259 li
241.401 264.459 li
241.601 265.659 li
241.601 266.959 li
241.101 268.159 li
240.401 269.259 li
239.401 270.059 li
238.201 270.559 li
236.901 270.759 li
171.201 99.3589 mo
171.001 98.0589 li
171.101 96.7589 li
171.601 95.4589 li
172.401 94.3589 li
173.501 93.5589 li
174.701 93.1589 li
176.101 93.0589 li
177.401 93.3589 li
178.501 94.0589 li
179.501 94.9589 li
180.101 96.1589 li
172.201 102.059 mo
171.201 99.3589 li
181.101 98.8589 mo
181.401 100.159 li
181.301 101.459 li
180.801 102.759 li
180.001 103.759 li
178.901 104.559 li
177.601 105.059 li
176.301 105.159 li
175.001 104.859 li
173.801 104.159 li
172.801 103.259 li
172.201 102.059 li
180.101 96.1589 mo
181.101 98.8589 li
206.501 103.159 mo
204.801 103.059 li
203.001 102.559 li
201.401 101.659 li
200.001 100.559 li
198.901 99.2589 li
198.001 97.6589 li
197.401 95.9589 li
197.101 94.1589 li
197.201 92.3589 li
197.601 90.6589 li
198.401 89.0589 li
199.401 87.5589 li
200.701 86.3589 li
202.201 85.3589 li
203.901 84.6589 li
205.601 84.3589 li
207.401 84.3589 li
209.201 84.6589 li
210.901 85.3589 li
212.401 86.3589 li
213.701 87.5589 li
214.701 89.0589 li
215.501 90.6589 li
215.901 92.3589 li
216.001 94.1589 li
215.701 95.9589 li
215.101 97.6589 li
214.201 99.2589 li
213.101 100.559 li
211.701 101.659 li
210.101 102.559 li
208.301 103.059 li
206.501 103.159 li
263.601 118.259 mo
262.501 118.059 li
261.501 117.459 li
260.701 116.659 li
260.101 115.659 li
260.001 114.559 li
260.101 113.359 li
260.701 112.359 li
261.501 111.559 li
262.501 111.059 li
263.601 110.859 li
264.801 111.059 li
265.801 111.559 li
266.601 112.359 li
267.101 113.359 li
267.301 114.559 li
267.101 115.659 li
266.601 116.659 li
265.801 117.459 li
264.801 118.059 li
263.601 118.259 li
242.701 103.759 mo
243.601 103.559 li
244.301 103.059 li
244.901 102.359 li
245.001 101.459 li
244.901 100.559 li
244.301 99.7589 li
243.601 99.2589 li
242.701 99.0589 li
241.801 99.2589 li
241.001 99.7589 li
240.501 100.559 li
240.301 101.459 li
240.501 102.359 li
241.001 103.059 li
241.801 103.559 li
242.701 103.759 li
206.501 274.959 mo
205.501 274.759 li
204.501 274.259 li
203.701 273.459 li
203.201 272.459 li
203.001 271.359 li
203.201 270.259 li
203.701 269.259 li
204.501 268.559 li
205.501 268.059 li
206.501 267.859 li
207.601 268.059 li
208.601 268.559 li
209.401 269.259 li
209.901 270.259 li
210.101 271.359 li
209.901 272.459 li
209.401 273.459 li
208.601 274.259 li
207.601 274.759 li
206.501 274.959 li
283.501 141.659 mo
282.401 141.559 li
281.401 141.059 li
280.601 140.259 li
280.101 139.259 li
279.901 138.159 li
280.101 137.059 li
280.601 136.059 li
281.401 135.259 li
282.401 134.759 li
283.501 134.659 li
284.601 134.759 li
285.501 135.259 li
286.301 136.059 li
286.801 137.059 li
287.001 138.159 li
286.801 139.259 li
286.301 140.259 li
285.501 141.059 li
284.601 141.559 li
283.501 141.659 li
129.601 141.659 mo
128.501 141.559 li
127.501 141.059 li
126.801 140.259 li
126.301 139.259 li
126.101 138.159 li
126.301 137.059 li
126.801 136.059 li
127.501 135.259 li
128.501 134.759 li
129.601 134.659 li
130.701 134.759 li
131.701 135.259 li
132.501 136.059 li
133.001 137.059 li
133.201 138.159 li
133.001 139.259 li
132.501 140.259 li
131.701 141.059 li
130.701 141.559 li
129.601 141.659 li
229.301 244.959 mo
235.801 244.159 li
235.801 244.159 mo
237.301 243.859 li
238.601 243.259 li
239.801 242.259 li
240.701 241.159 li
241.301 239.759 li
241.701 238.359 li
241.701 236.859 li
241.301 235.459 li
240.701 234.059 li
239.801 232.959 li
238.601 232.059 li
237.301 231.359 li
235.801 231.059 li
235.801 231.059 mo
229.301 230.359 li
229.301 230.359 mo
227.701 229.859 li
226.001 229.859 li
224.401 230.159 li
222.901 230.759 li
221.501 231.759 li
220.301 232.959 li
219.501 234.359 li
219.001 235.959 li
218.801 237.659 li
219.001 239.259 li
219.501 240.859 li
220.301 242.259 li
221.501 243.459 li
222.901 244.459 li
224.401 245.059 li
226.001 245.359 li
227.701 245.359 li
229.301 244.959 li
189.101 230.259 mo
183.701 226.659 li
183.701 226.659 mo
182.301 225.959 li
180.901 225.559 li
179.401 225.559 li
178.001 225.859 li
176.601 226.459 li
175.401 227.359 li
174.501 228.459 li
173.801 229.859 li
173.401 231.259 li
173.401 232.759 li
173.701 234.159 li
174.301 235.559 li
175.201 236.759 li
175.201 236.759 mo
179.701 241.459 li
179.701 241.459 mo
180.701 242.759 li
181.901 243.959 li
183.401 244.759 li
185.001 245.259 li
186.601 245.359 li
188.301 245.159 li
189.901 244.659 li
191.301 243.759 li
192.501 242.659 li
193.401 241.259 li
194.001 239.659 li
194.301 238.059 li
194.201 236.359 li
193.801 234.759 li
193.001 233.259 li
191.901 232.059 li
190.601 230.959 li
189.101 230.259 li
74.901 219.659 mo
75.101 219.259 li
75.201 218.759 li
75.201 218.259 li
75.101 217.759 li
74.901 217.359 li
74.701 216.859 li
74.301 216.559 li
73.901 216.259 li
331.201 107.559 mo
330.501 108.259 li
330.001 109.059 li
329.901 110.059 li
330.101 110.959 li
330.701 111.759 li
331.501 112.259 li
332.401 112.459 li
333.301 112.259 li
334.201 111.859 li
334.801 111.059 li
335.101 110.159 li
335.001 109.259 li
334.601 108.359 li
333.901 107.659 li
333.001 107.359 li
332.101 107.259 li
331.201 107.559 li
333.801 253.059 mo
332.901 252.659 li
331.901 252.759 li
331.001 253.059 li
330.401 253.759 li
330.001 254.659 li
329.901 255.559 li
330.201 256.459 li
330.801 257.259 li
331.601 257.759 li
332.601 257.859 li
333.501 257.659 li
334.301 257.159 li
334.801 256.359 li
335.101 255.459 li
335.001 254.459 li
334.501 253.659 li
333.801 253.059 li
316.201 187.259 mo
317.401 187.159 li
318.601 186.559 li
319.601 185.759 li
320.301 184.759 li
320.801 183.559 li
320.901 182.259 li
320.601 180.959 li
320.001 179.859 li
319.101 178.859 li
318.001 178.259 li
316.801 177.859 li
315.501 177.859 li
314.301 178.259 li
313.201 178.859 li
312.301 179.859 li
311.701 180.959 li
311.401 182.259 li
311.501 183.559 li
312.001 184.759 li
312.701 185.759 li
313.701 186.559 li
314.901 187.159 li
316.201 187.259 li
283.501 140.759 mo
284.401 140.559 li
285.201 140.059 li
285.801 139.359 li
286.101 138.359 li
286.001 137.459 li
285.501 136.559 li
284.801 135.959 li
283.901 135.559 li
283.001 135.559 li
282.101 135.959 li
281.401 136.559 li
281.001 137.459 li
280.901 138.359 li
281.101 139.359 li
281.701 140.059 li
282.501 140.559 li
283.501 140.759 li
281.501 307.159 mo
280.901 306.459 li
280.001 306.059 li
279.101 305.859 li
278.201 306.159 li
277.401 306.659 li
276.901 307.459 li
276.701 308.459 li
276.801 309.359 li
277.301 310.159 li
278.001 310.759 li
278.901 311.059 li
279.901 311.059 li
280.801 310.659 li
281.401 309.959 li
281.801 309.059 li
281.801 308.059 li
281.501 307.159 li
277.001 55.3589 mo
276.701 56.2589 li
276.701 57.1589 li
277.101 58.0589 li
277.801 58.7589 li
278.601 59.1589 li
279.601 59.1589 li
280.501 58.9589 li
281.201 58.3589 li
281.701 57.4589 li
281.901 56.5589 li
281.601 55.6589 li
281.101 54.8589 li
280.301 54.2589 li
279.401 54.0589 li
278.501 54.1589 li
277.601 54.5589 li
277.001 55.3589 li
263.601 117.759 mo
264.701 117.559 li
265.601 117.059 li
266.301 116.259 li
266.801 115.359 li
266.801 114.259 li
266.601 113.259 li
266.001 112.359 li
265.201 111.659 li
264.201 111.359 li
263.101 111.359 li
262.101 111.659 li
261.301 112.359 li
260.701 113.259 li
260.401 114.259 li
260.501 115.359 li
260.901 116.259 li
261.701 117.059 li
262.601 117.559 li
263.601 117.759 li
255.701 200.559 mo
257.001 200.359 li
258.101 199.859 li
259.101 199.059 li
259.901 197.959 li
260.301 196.759 li
260.401 195.459 li
260.101 194.259 li
259.501 193.059 li
258.701 192.159 li
257.601 191.459 li
256.301 191.159 li
255.001 191.159 li
253.801 191.459 li
252.701 192.159 li
251.801 193.059 li
251.201 194.259 li
251.001 195.459 li
251.101 196.759 li
251.501 197.959 li
252.201 199.059 li
253.201 199.859 li
254.401 200.359 li
255.701 200.559 li
236.901 268.859 mo
237.901 268.659 li
238.701 268.159 li
239.401 267.459 li
239.701 266.559 li
239.701 265.559 li
239.401 264.659 li
238.701 263.859 li
237.901 263.359 li
236.901 263.159 li
236.001 263.359 li
235.101 263.859 li
234.501 264.659 li
234.101 265.559 li
234.101 266.559 li
234.501 267.459 li
235.101 268.159 li
236.001 268.659 li
236.901 268.859 li
206.501 101.259 mo
208.201 101.159 li
209.701 100.559 li
211.101 99.7589 li
212.301 98.6589 li
213.201 97.2589 li
213.801 95.7589 li
214.101 94.1589 li
214.001 92.5589 li
213.601 90.9589 li
212.801 89.4589 li
211.701 88.2589 li
210.401 87.2589 li
209.001 86.5589 li
207.401 86.2589 li
205.701 86.2589 li
204.101 86.5589 li
202.601 87.2589 li
201.301 88.2589 li
200.301 89.4589 li
199.501 90.9589 li
199.101 92.5589 li
199.001 94.1589 li
199.301 95.7589 li
199.901 97.2589 li
200.801 98.6589 li
202.001 99.7589 li
203.401 100.559 li
204.901 101.159 li
206.501 101.259 li
206.501 273.959 mo
207.501 273.759 li
208.301 273.259 li
208.901 272.559 li
209.101 271.659 li
209.001 270.659 li
208.601 269.859 li
207.901 269.159 li
207.001 268.859 li
206.101 268.859 li
205.201 269.159 li
204.501 269.859 li
204.001 270.659 li
204.001 271.659 li
204.201 272.559 li
204.801 273.259 li
205.601 273.759 li
206.501 273.959 li
209.101 327.959 mo
209.001 327.059 li
208.501 326.259 li
207.701 325.659 li
206.801 325.359 li
205.801 325.459 li
205.001 325.859 li
204.301 326.659 li
204.001 327.459 li
204.001 328.459 li
204.301 329.359 li
205.001 330.059 li
205.801 330.459 li
206.801 330.559 li
207.701 330.259 li
208.501 329.759 li
209.001 328.959 li
209.101 327.959 li
203.901 37.1589 mo
204.101 38.0589 li
204.601 38.8589 li
205.401 39.4589 li
206.301 39.7589 li
207.301 39.6589 li
208.101 39.2589 li
208.801 38.5589 li
209.101 37.6589 li
209.101 36.6589 li
208.801 35.7589 li
208.101 35.0589 li
207.301 34.6589 li
206.301 34.5589 li
205.401 34.8589 li
204.601 35.3589 li
204.101 36.1589 li
203.901 37.1589 li
181.101 98.8589 mo
179.301 99.4589 li
179.301 99.4589 mo
178.301 96.7589 li
180.101 96.1589 mo
178.301 96.7589 li
174.001 101.359 mo
174.501 102.259 li
175.201 102.859 li
176.201 103.259 li
177.101 103.259 li
178.101 102.859 li
178.801 102.259 li
179.301 101.359 li
179.501 100.459 li
179.301 99.4589 li
174.001 101.359 mo
172.201 102.059 li
178.301 96.7589 mo
177.901 95.9589 li
177.101 95.3589 li
176.201 94.9589 li
175.201 94.9589 li
174.301 95.3589 li
173.501 95.9589 li
173.001 96.7589 li
172.801 97.7589 li
173.001 98.7589 li
173.001 98.7589 mo
171.201 99.3589 li
173.001 98.7589 mo
174.001 101.359 li
131.601 57.9589 mo
132.201 58.6589 li
133.101 59.0589 li
134.001 59.2589 li
134.901 58.9589 li
135.701 58.4589 li
136.201 57.6589 li
136.401 56.7589 li
136.301 55.7589 li
135.801 54.9589 li
135.101 54.3589 li
134.201 54.0589 li
133.201 54.1589 li
132.301 54.4589 li
131.701 55.1589 li
131.301 56.0589 li
131.301 57.0589 li
131.601 57.9589 li
136.101 309.759 mo
136.401 308.859 li
136.401 307.959 li
136.001 307.059 li
135.301 306.359 li
134.501 305.959 li
133.501 305.959 li
132.601 306.259 li
131.901 306.859 li
131.401 307.659 li
131.201 308.559 li
131.401 309.559 li
132.001 310.259 li
132.801 310.859 li
133.701 311.059 li
134.601 310.959 li
135.501 310.559 li
136.101 309.759 li
129.601 140.759 mo
130.601 140.559 li
131.401 140.059 li
132.001 139.359 li
132.201 138.359 li
132.101 137.459 li
131.701 136.559 li
131.001 135.959 li
130.101 135.559 li
129.101 135.559 li
128.301 135.959 li
127.601 136.559 li
127.101 137.459 li
127.001 138.359 li
127.301 139.359 li
127.901 140.059 li
128.701 140.559 li
129.601 140.759 li
124.201 217.759 mo
124.901 217.559 li
125.501 217.159 li
125.901 216.559 li
126.101 215.859 li
125.901 215.159 li
125.501 214.459 li
124.901 214.059 li
124.201 213.959 li
123.501 214.059 li
122.901 214.459 li
122.401 215.159 li
122.301 215.859 li
122.401 216.559 li
122.901 217.159 li
123.501 217.559 li
124.201 217.759 li
81.901 257.559 mo
82.601 256.859 li
83.101 256.059 li
83.201 255.159 li
83.001 254.159 li
82.401 253.359 li
81.601 252.859 li
80.701 252.659 li
79.701 252.859 li
78.901 253.259 li
78.301 254.059 li
78.001 254.959 li
78.101 255.859 li
78.501 256.759 li
79.201 257.459 li
80.101 257.859 li
81.001 257.859 li
81.901 257.559 li
79.301 112.059 mo
80.201 112.459 li
81.201 112.359 li
82.001 112.059 li
82.701 111.359 li
83.101 110.459 li
83.201 109.559 li
82.901 108.659 li
82.301 107.859 li
81.501 107.359 li
80.501 107.259 li
79.601 107.459 li
78.801 107.959 li
78.301 108.759 li
78.001 109.659 li
78.101 110.659 li
78.601 111.459 li
79.301 112.059 li
61.101 185.159 mo
62.101 184.959 li
62.901 184.459 li
63.501 183.759 li
63.701 182.759 li
63.601 181.859 li
63.201 180.959 li
62.501 180.359 li
61.601 180.059 li
60.701 180.059 li
59.801 180.359 li
59.101 180.959 li
58.601 181.859 li
58.501 182.759 li
58.801 183.759 li
59.401 184.459 li
60.201 184.959 li
61.101 185.159 li
71.801 220.859 mo
73.901 227.459 li
76.201 233.859 li
78.901 240.159 li
81.801 246.359 li
85.101 252.359 li
88.601 258.159 li
92.501 263.859 li
96.601 269.359 li
101.001 274.559 li
105.601 279.659 li
110.401 284.459 li
115.501 289.059 li
120.801 293.359 li
126.301 297.359 li
132.001 301.159 li
137.901 304.659 li
144.001 307.859 li
150.201 310.759 li
156.501 313.359 li
162.901 315.659 li
169.501 317.659 li
176.101 319.259 li
182.801 320.559 li
189.601 321.559 li
196.401 322.259 li
203.201 322.559 li
210.101 322.559 li
216.901 322.259 li
223.701 321.559 li
230.501 320.559 li
237.201 319.259 li
243.801 317.559 li
250.401 315.559 li
256.801 313.259 li
263.201 310.659 li
269.301 307.759 li
275.401 304.559 li
281.301 301.059 li
287.001 297.259 li
292.501 293.159 li
297.801 288.859 li
302.801 284.259 li
307.701 279.459 li
312.301 274.359 li
316.701 269.159 li
320.801 263.659 li
324.601 257.959 li
328.101 252.159 li
331.401 246.159 li
334.301 239.959 li
337.001 233.659 li
339.301 227.159 li
341.301 220.659 li
343.001 214.059 li
344.401 207.359 li
345.401 200.559 li
346.201 193.759 li
346.501 186.959 li
346.601 180.059 li
346.301 173.259 li
345.701 166.459 li
344.701 159.659 li
343.401 152.959 li
341.801 146.359 li
339.901 139.759 li
337.701 133.259 li
335.101 126.959 li
332.201 120.759 li
329.101 114.659 li
325.601 108.759 li
321.901 103.059 li
317.801 97.5589 li
313.501 92.1589 li
309.001 87.0589 li
304.201 82.1589 li
299.201 77.5589 li
294.001 73.1589 li
288.501 68.9589 li
282.901 65.1589 li
277.001 61.5589 li
271.101 58.2589 li
264.901 55.2589 li
258.601 52.5589 li
252.201 50.1589 li
245.701 48.0589 li
239.101 46.3589 li
232.401 44.8589 li
225.601 43.7589 li
218.801 43.0589 li
212.001 42.5589 li
205.201 42.4589 li
198.301 42.7589 li
191.501 43.2589 li
184.701 44.2589 li
178.001 45.4589 li
171.301 46.9589 li
164.801 48.8589 li
158.301 51.0589 li
151.901 53.5589 li
145.701 56.4589 li
139.601 59.5589 li
133.701 62.9589 li
127.901 66.6589 li
122.401 70.6589 li
117.001 74.8589 li
111.801 79.3589 li
106.901 84.1589 li
102.201 89.0589 li
97.801 94.2589 li
93.601 99.7589 li
89.701 105.359 li
86.101 111.159 li
82.701 117.059 li
79.701 123.259 li
76.901 129.459 li
74.501 135.859 li
72.401 142.359 li
70.601 148.959 li
69.101 155.659 li
67.901 162.459 li
67.101 169.159 li
66.601 176.059 li
66.501 182.859 li
66.701 189.659 li
67.201 196.559 li
68.001 203.359 li
69.201 210.059 li
70.701 216.759 li
73.401 216.059 mo
71.901 209.459 li
70.801 202.759 li
70.001 196.059 li
69.501 189.359 li
69.301 182.559 li
69.501 175.859 li
70.001 169.059 li
70.801 162.359 li
71.901 155.759 li
73.401 149.159 li
75.201 142.659 li
77.401 136.159 li
79.801 129.859 li
82.501 123.759 li
85.601 117.659 li
88.901 111.859 li
92.501 106.159 li
96.401 100.559 li
100.601 95.2589 li
105.001 90.1589 li
109.701 85.2589 li
114.601 80.6589 li
119.701 76.2589 li
125.101 72.0589 li
130.601 68.2589 li
136.301 64.6589 li
142.201 61.3589 li
148.301 58.2589 li
154.401 55.5589 li
160.801 53.1589 li
167.201 51.0589 li
173.701 49.2589 li
180.301 47.8589 li
187.001 46.7589 li
193.701 45.9589 li
200.401 45.4589 li
207.201 45.2589 li
213.901 45.4589 li
220.601 46.0589 li
227.301 46.8589 li
234.001 48.0589 li
240.601 49.5589 li
247.101 51.4589 li
253.501 53.5589 li
259.801 56.0589 li
265.901 58.8589 li
272.001 61.8589 li
277.801 65.2589 li
283.501 68.8589 li
289.001 72.8589 li
294.301 77.0589 li
299.401 81.4589 li
304.301 86.1589 li
308.901 91.0589 li
313.301 96.2589 li
317.401 101.559 li
321.201 107.159 li
324.801 112.859 li
328.101 118.759 li
331.101 124.859 li
333.801 131.059 li
336.101 137.359 li
338.201 143.759 li
340.001 150.359 li
341.401 156.959 li
342.501 163.559 li
343.301 170.259 li
343.701 177.059 li
343.801 183.759 li
343.601 190.559 li
343.001 197.259 li
342.101 203.959 li
340.901 210.659 li
339.401 217.159 li
337.501 223.659 li
335.301 230.059 li
332.801 236.359 li
330.001 242.559 li
326.901 248.559 li
323.501 254.359 li
319.901 260.059 li
315.901 265.559 li
311.701 270.759 li
307.201 275.859 li
302.501 280.659 li
297.601 285.259 li
292.401 289.659 li
287.001 293.759 li
281.501 297.559 li
275.701 301.159 li
269.801 304.359 li
263.701 307.359 li
257.501 310.059 li
251.201 312.359 li
244.701 314.359 li
238.201 316.159 li
231.601 317.559 li
224.901 318.559 li
218.201 319.359 li
211.501 319.759 li
204.701 319.859 li
197.901 319.559 li
191.201 318.959 li
184.501 318.059 li
177.901 316.759 li
171.301 315.259 li
164.801 313.359 li
158.401 311.159 li
152.201 308.559 li
146.001 305.759 li
140.001 302.659 li
134.201 299.259 li
128.601 295.559 li
123.101 291.559 li
117.801 287.259 li
112.801 282.859 li
108.001 278.059 li
103.401 273.159 li
99.101 267.959 li
95.001 262.559 li
91.201 256.959 li
87.701 251.159 li
84.401 245.259 li
81.501 239.159 li
78.901 232.959 li
76.501 226.559 li
74.501 220.159 li
73.401 216.059 mo
73.601 216.059 li
206.501 31.3589 mo
213.601 31.5589 li
220.701 32.0589 li
227.701 32.8589 li
234.701 34.0589 li
241.701 35.5589 li
248.501 37.3589 li
255.301 39.4589 li
261.901 41.8589 li
268.501 44.6589 li
274.901 47.6589 li
281.101 51.0589 li
287.201 54.6589 li
293.101 58.6589 li
298.801 62.7589 li
304.301 67.2589 li
309.601 71.9589 li
314.701 76.9589 li
319.501 82.0589 li
324.101 87.5589 li
328.401 93.1589 li
332.501 98.9589 li
336.301 104.959 li
339.801 111.059 li
343.001 117.459 li
345.901 123.859 li
348.501 130.459 li
350.801 137.159 li
352.701 143.959 li
354.401 150.859 li
355.701 157.859 li
356.701 164.859 li
357.401 171.959 li
357.701 179.059 li
357.701 186.059 li
357.401 193.159 li
356.701 200.259 li
355.701 207.259 li
354.401 214.259 li
352.701 221.159 li
350.801 227.959 li
348.501 234.659 li
345.901 241.259 li
343.001 247.659 li
339.801 254.059 li
336.301 260.159 li
332.501 266.159 li
328.401 271.959 li
324.101 277.659 li
319.501 283.059 li
314.701 288.159 li
309.601 293.159 li
304.301 297.859 li
298.801 302.359 li
293.101 306.559 li
287.201 310.459 li
281.101 314.059 li
274.901 317.459 li
268.501 320.459 li
261.901 323.259 li
255.301 325.659 li
248.501 327.759 li
241.701 329.659 li
234.701 331.059 li
227.701 332.259 li
220.701 333.059 li
213.601 333.559 li
206.501 333.759 li
55.401 182.559 mo
55.401 179.059 li
55.701 171.959 li
56.401 164.859 li
57.401 157.859 li
58.701 150.859 li
60.401 143.959 li
62.301 137.159 li
64.601 130.459 li
67.201 123.859 li
70.101 117.459 li
73.301 111.059 li
76.801 104.959 li
80.601 98.9589 li
84.701 93.1589 li
89.001 87.5589 li
93.601 82.0589 li
98.401 76.9589 li
103.501 71.9589 li
108.801 67.2589 li
114.301 62.7589 li
120.001 58.6589 li
125.901 54.6589 li
132.001 51.0589 li
138.201 47.6589 li
144.601 44.6589 li
151.201 41.8589 li
157.801 39.4589 li
164.601 37.3589 li
171.401 35.5589 li
178.401 34.0589 li
185.401 32.8589 li
192.401 32.0589 li
199.501 31.5589 li
206.501 31.3589 li
284.501 137.559 mo
284.201 137.259 li
283.801 137.059 li
283.301 136.959 li
282.901 137.159 li
282.501 137.459 li
282.301 137.859 li
282.301 138.359 li
282.401 138.759 li
282.701 139.059 li
283.201 139.259 li
283.601 139.359 li
284.101 139.159 li
284.401 138.859 li
284.601 138.459 li
284.601 137.959 li
284.501 137.559 li
206.501 272.559 mo
207.001 272.459 li
207.401 272.259 li
207.601 271.859 li
207.701 271.359 li
207.601 270.959 li
207.401 270.559 li
207.001 270.259 li
206.501 270.159 li
206.101 270.259 li
205.701 270.559 li
205.501 270.959 li
205.401 271.359 li
205.501 271.859 li
205.701 272.259 li
206.101 272.459 li
206.501 272.559 li
128.601 137.559 mo
128.501 137.959 li
128.501 138.459 li
128.701 138.859 li
129.001 139.159 li
129.501 139.359 li
129.901 139.259 li
130.301 139.059 li
130.701 138.759 li
130.801 138.359 li
130.801 137.859 li
130.601 137.459 li
130.201 137.159 li
129.801 136.959 li
129.301 137.059 li
128.901 137.259 li
128.601 137.559 li
218.401 237.659 mo
218.501 239.259 li
219.001 240.859 li
219.801 242.359 li
220.901 243.559 li
222.201 244.559 li
223.701 245.359 li
225.301 245.759 li
227.001 245.859 li
228.601 245.559 li
230.201 244.959 li
231.601 244.159 li
232.801 242.959 li
233.801 241.559 li
234.401 240.059 li
234.801 238.459 li
234.801 236.759 li
234.401 235.159 li
233.801 233.659 li
232.801 232.259 li
231.601 231.159 li
230.201 230.259 li
228.601 229.659 li
227.001 229.359 li
225.301 229.459 li
223.701 229.859 li
222.201 230.659 li
220.901 231.659 li
219.801 232.959 li
219.001 234.359 li
218.501 235.959 li
218.401 237.659 li
223.301 237.659 mo
223.501 236.559 li
224.001 235.559 li
224.801 234.859 li
225.801 234.359 li
226.901 234.359 li
227.901 234.559 li
228.801 235.159 li
229.501 236.059 li
229.801 237.059 li
229.801 238.159 li
229.501 239.159 li
228.801 240.059 li
227.901 240.659 li
226.901 240.959 li
225.801 240.859 li
224.801 240.359 li
224.001 239.659 li
223.501 238.659 li
223.301 237.659 li
233.701 237.659 mo
233.601 237.259 li
233.401 236.959 li
233.101 236.759 li
232.701 236.659 li
232.401 236.759 li
232.101 236.959 li
231.901 237.259 li
231.801 237.659 li
231.901 237.959 li
232.101 238.259 li
232.401 238.459 li
232.701 238.559 li
233.101 238.459 li
233.401 238.259 li
233.601 237.959 li
233.701 237.659 li
224.501 242.959 mo
224.401 242.559 li
224.201 242.259 li
223.901 242.059 li
223.501 241.959 li
223.201 242.059 li
222.801 242.259 li
222.601 242.559 li
222.601 242.959 li
222.601 243.259 li
222.801 243.559 li
223.201 243.759 li
223.501 243.859 li
223.901 243.759 li
224.201 243.559 li
224.401 243.259 li
224.501 242.959 li
224.501 232.259 mo
224.401 231.959 li
224.201 231.659 li
223.901 231.459 li
223.501 231.359 li
223.201 231.459 li
222.801 231.659 li
222.601 231.959 li
222.601 232.259 li
222.601 232.659 li
222.801 232.959 li
223.201 233.159 li
223.501 233.259 li
223.901 233.159 li
224.201 232.959 li
224.401 232.659 li
224.501 232.259 li
223.701 237.659 mo
223.901 238.559 li
224.401 239.459 li
225.201 240.059 li
226.101 240.359 li
227.101 240.359 li
228.001 240.059 li
228.801 239.459 li
229.201 238.559 li
229.401 237.659 li
229.201 236.659 li
228.801 235.759 li
228.001 235.159 li
227.101 234.859 li
226.101 234.859 li
225.201 235.159 li
224.401 235.759 li
223.901 236.659 li
223.701 237.659 li
178.301 237.659 mo
178.501 239.259 li
179.001 240.859 li
179.801 242.359 li
180.801 243.559 li
182.201 244.559 li
183.701 245.359 li
185.301 245.759 li
186.901 245.859 li
188.601 245.559 li
190.101 244.959 li
191.501 244.159 li
192.701 242.959 li
193.701 241.559 li
194.401 240.059 li
194.701 238.459 li
194.701 236.759 li
194.401 235.159 li
193.701 233.659 li
192.701 232.259 li
191.501 231.159 li
190.101 230.259 li
188.601 229.659 li
186.901 229.359 li
185.301 229.459 li
183.701 229.859 li
182.201 230.659 li
180.801 231.659 li
179.801 232.959 li
179.001 234.359 li
178.501 235.959 li
178.301 237.659 li
183.201 237.659 mo
183.401 236.559 li
183.901 235.559 li
184.701 234.859 li
185.701 234.359 li
186.801 234.359 li
187.801 234.559 li
188.801 235.159 li
189.401 236.059 li
189.801 237.059 li
189.801 238.159 li
189.401 239.159 li
188.801 240.059 li
187.801 240.659 li
186.801 240.959 li
185.701 240.859 li
184.701 240.359 li
183.901 239.659 li
183.401 238.659 li
183.201 237.659 li
193.601 237.659 mo
193.501 237.259 li
193.301 236.959 li
193.001 236.759 li
192.701 236.659 li
192.301 236.759 li
192.001 236.959 li
191.801 237.259 li
191.701 237.659 li
191.801 237.959 li
192.001 238.259 li
192.301 238.459 li
192.701 238.559 li
193.001 238.459 li
193.301 238.259 li
193.501 237.959 li
193.601 237.659 li
184.401 242.959 mo
184.301 242.559 li
184.101 242.259 li
183.801 242.059 li
183.401 241.959 li
183.101 242.059 li
182.801 242.259 li
182.601 242.559 li
182.501 242.959 li
182.601 243.259 li
182.801 243.559 li
183.101 243.759 li
183.401 243.859 li
183.801 243.759 li
184.101 243.559 li
184.301 243.259 li
184.401 242.959 li
184.401 232.259 mo
184.301 231.959 li
184.101 231.659 li
183.801 231.459 li
183.401 231.359 li
183.101 231.459 li
182.801 231.659 li
182.601 231.959 li
182.501 232.259 li
182.601 232.659 li
182.801 232.959 li
183.101 233.159 li
183.401 233.259 li
183.801 233.159 li
184.101 232.959 li
184.301 232.659 li
184.401 232.259 li
178.001 237.659 mo
178.201 235.859 li
178.701 234.259 li
179.501 232.759 li
180.701 231.459 li
182.001 230.359 li
183.601 229.659 li
185.201 229.159 li
186.901 229.159 li
187.501 229.159 li
178.401 239.959 mo
178.201 239.359 li
178.001 237.659 li
183.701 237.659 mo
183.801 238.559 li
184.301 239.459 li
185.101 240.059 li
186.001 240.359 li
187.001 240.359 li
187.901 240.059 li
188.701 239.459 li
189.201 238.559 li
189.301 237.659 li
189.201 236.659 li
188.701 235.759 li
187.901 235.159 li
187.001 234.859 li
186.001 234.859 li
185.101 235.159 li
184.301 235.759 li
183.801 236.659 li
183.701 237.659 li
235.801 244.159 mo
237.301 243.859 li
238.601 243.259 li
239.801 242.259 li
240.701 241.159 li
241.301 239.759 li
241.701 238.359 li
241.701 236.859 li
241.301 235.459 li
240.701 234.059 li
239.801 232.959 li
238.601 232.059 li
237.301 231.359 li
235.801 231.059 li
231.301 244.659 mo
235.801 244.159 li
231.301 244.659 mo
232.701 243.459 li
233.801 242.059 li
234.601 240.359 li
235.001 238.559 li
235.001 236.659 li
234.601 234.859 li
233.801 233.159 li
232.701 231.759 li
231.301 230.559 li
235.801 231.059 mo
231.301 230.559 li
183.701 226.659 mo
182.301 225.959 li
180.901 225.559 li
179.401 225.559 li
178.001 225.859 li
176.601 226.459 li
175.401 227.359 li
174.501 228.459 li
173.801 229.859 li
173.401 231.259 li
173.401 232.759 li
173.701 234.159 li
174.301 235.559 li
175.201 236.759 li
187.501 229.159 mo
185.601 229.159 li
183.801 229.559 li
182.101 230.359 li
180.601 231.459 li
179.401 232.859 li
178.601 234.559 li
178.101 236.359 li
178.001 238.159 li
178.401 239.959 li
175.201 236.759 mo
178.401 239.959 li
187.501 229.159 mo
183.701 226.659 li
227.301 239.859 mo
227.301 240.359 li
227.301 235.359 mo
228.001 235.659 li
228.501 236.259 li
228.801 236.859 li
228.901 237.659 li
228.801 238.359 li
228.501 239.059 li
228.001 239.559 li
227.301 239.859 li
227.301 234.859 mo
227.301 235.359 li
227.301 239.859 mo
227.301 239.359 li
227.301 239.359 mo
227.801 239.059 li
228.201 238.659 li
228.401 238.159 li
228.501 237.659 li
228.401 237.059 li
228.201 236.559 li
227.801 236.159 li
227.301 235.859 li
227.301 235.859 mo
227.301 235.359 li
225.901 239.859 mo
225.201 239.559 li
224.701 239.059 li
224.301 238.359 li
224.201 237.659 li
224.301 236.859 li
224.701 236.259 li
225.201 235.659 li
225.901 235.359 li
225.901 235.359 mo
225.901 235.859 li
225.901 235.859 mo
225.401 236.159 li
225.001 236.559 li
224.801 237.059 li
224.701 237.659 li
224.801 238.159 li
225.001 238.659 li
225.401 239.059 li
225.901 239.359 li
225.901 239.359 mo
225.901 239.859 li
225.901 235.359 mo
225.901 234.859 li
225.901 240.359 mo
225.901 239.859 li
227.301 239.359 mo
227.101 239.459 li
226.901 239.459 li
226.801 239.459 li
226.601 239.459 li
226.401 239.459 li
226.201 239.459 li
226.001 239.459 li
225.901 239.359 li
225.901 235.859 mo
226.001 235.759 li
226.201 235.759 li
226.401 235.759 li
226.601 235.759 li
226.801 235.759 li
226.901 235.759 li
227.101 235.759 li
227.301 235.859 li
184.301 236.859 mo
184.601 236.259 li
185.101 235.759 li
185.801 235.359 li
186.501 235.259 li
187.201 235.359 li
187.901 235.759 li
188.401 236.259 li
188.801 236.859 li
183.801 236.859 mo
184.301 236.859 li
188.801 236.859 mo
189.301 236.859 li
184.301 238.359 mo
183.801 238.359 li
188.801 238.359 mo
188.401 238.959 li
187.901 239.559 li
187.201 239.859 li
186.501 239.959 li
185.801 239.859 li
185.101 239.559 li
184.601 238.959 li
184.301 238.359 li
189.301 238.359 mo
188.801 238.359 li
188.301 236.859 mo
188.001 236.459 li
187.601 236.059 li
187.101 235.759 li
186.501 235.759 li
186.001 235.759 li
185.501 236.059 li
185.001 236.459 li
184.801 236.859 li
184.801 236.859 mo
184.301 236.859 li
188.801 236.859 mo
188.301 236.859 li
184.301 238.359 mo
184.801 238.359 li
184.801 238.359 mo
185.001 238.759 li
185.501 239.159 li
186.001 239.459 li
186.501 239.459 li
187.101 239.459 li
187.601 239.159 li
188.001 238.759 li
188.301 238.359 li
188.301 238.359 mo
188.801 238.359 li
188.301 236.859 mo
188.301 237.059 li
188.401 237.259 li
188.401 237.459 li
188.401 237.659 li
188.401 237.759 li
188.401 237.959 li
188.301 238.159 li
188.301 238.359 li
184.801 238.359 mo
184.701 238.159 li
184.701 237.959 li
184.601 237.759 li
184.601 237.659 li
184.601 237.459 li
184.701 237.259 li
184.701 237.059 li
184.801 236.859 li
@
.51 lw
0 lc
0 lj
559.601 360.259 mo
552.801 361.059 li
552.801 359.359 li
559.601 360.259 li
571.601 360.259 mo
578.401 359.359 li
578.401 361.059 li
571.601 360.259 li
.516442 .431464 .431464 .0754406 cmyk
@
1 lc
1 lj
[86.4 3.6 3.6 3.6 ] 78.059 dsh
560.605 47.0969 mo
533.123 47.0969 li
@
[86.4 3.6 3.6 3.6 ] 85.544 dsh
530.39 53.8529 mo
542.902 53.8529 li
@
[86.4 3.6 3.6 3.6 ] 75.495 dsh
564.952 103.696 mo
532.342 103.696 li
@
[86.4 3.6 3.6 3.6 ] 71.61 dsh
573.135 281.333 mo
532.755 281.333 li
@
[86.4 3.6 3.6 3.6 ] 78.05 dsh
560.605 337.932 mo
533.105 337.932 li
@
[86.4 3.6 3.6 3.6 ] 85.544 dsh
542.902 331.176 mo
530.39 331.176 li
@
559.601 360.259 mo
552.801 361.059 li
552.801 359.359 li
571.601 360.259 mo
578.401 359.359 li
578.401 361.059 li
f
[] 0 dsh
551.401 53.6589 mo
554.901 50.1589 li
557.301 60.4589 mo
564.701 53.0589 li
550.001 67.8589 mo
552.801 64.9589 li
557.301 73.1589 mo
564.101 66.4589 li
548.501 82.0589 mo
551.301 79.1589 li
557.301 85.8589 mo
566.801 76.4589 li
547.101 96.1589 mo
549.901 93.3589 li
559.201 96.7589 mo
566.801 89.1589 li
543.201 112.859 mo
544.701 111.259 li
559.201 109.459 mo
566.801 101.959 li
554.601 114.159 mo
557.401 111.259 li
543.201 125.559 mo
543.201 125.459 li
565.901 115.559 mo
566.801 114.659 li
557.301 124.059 mo
564.001 117.459 li
543.201 138.259 mo
556.001 125.459 li
546.001 148.159 mo
566.801 127.359 li
557.301 149.559 mo
566.801 140.059 li
543.201 163.759 mo
547.401 159.459 li
546.001 173.659 mo
566.801 152.859 li
557.301 174.959 mo
566.801 165.559 li
543.201 189.159 mo
547.301 184.959 li
544.901 200.159 mo
565.301 179.759 li
557.201 200.559 mo
566.801 191.059 li
543.201 214.659 mo
546.301 211.459 li
565.201 205.359 mo
566.801 203.759 li
544.901 225.659 mo
564.001 206.559 li
557.201 226.059 mo
566.801 216.459 li
543.201 240.059 mo
546.301 236.959 li
543.201 252.859 mo
566.801 229.159 li
549.101 259.659 mo
566.801 241.959 li
557.301 264.059 mo
566.801 254.659 li
543.201 278.259 mo
550.501 270.959 li
555.401 278.759 mo
564.601 269.559 li
566.701 280.159 mo
566.801 280.059 li
547.801 44.5589 mo
551.001 41.3589 li
543.201 341.959 mo
544.501 340.559 li
554.101 343.759 mo
555.101 342.659 li
543.201 290.959 mo
550.201 283.959 li
555.101 291.759 mo
564.301 282.559 li
543.201 303.759 mo
543.801 303.159 li
557.301 302.259 mo
566.801 292.859 li
553.701 305.959 mo
556.501 303.059 li
557.301 315.059 mo
566.801 305.559 li
552.201 320.159 mo
555.101 317.259 li
566.401 318.659 mo
566.801 318.259 li
557.301 327.759 mo
564.001 321.159 li
549.701 335.359 mo
553.601 331.459 li
565.701 332.059 mo
566.801 331.059 li
566.801 292.859 mo
570.601 289.059 li
566.801 305.559 mo
570.601 301.759 li
566.801 318.259 mo
570.601 314.559 li
566.801 331.059 mo
570.601 327.259 li
566.801 63.7589 mo
570.601 59.9589 li
566.801 76.4589 mo
570.101 73.1589 li
566.801 89.1589 mo
570.101 85.8589 li
566.801 101.959 mo
570.601 98.1589 li
566.801 114.659 mo
570.601 110.859 li
566.801 127.359 mo
570.601 123.559 li
566.801 140.059 mo
570.601 136.359 li
566.801 152.859 mo
570.601 149.059 li
566.801 165.559 mo
570.601 161.759 li
566.801 178.259 mo
570.601 174.459 li
566.801 191.059 mo
570.601 187.259 li
566.801 203.759 mo
570.601 199.959 li
566.801 216.459 mo
570.601 212.659 li
566.801 229.159 mo
570.601 225.459 li
566.801 241.959 mo
570.601 238.159 li
566.801 254.659 mo
570.601 250.859 li
566.801 267.359 mo
570.601 263.559 li
566.801 280.059 mo
570.601 276.359 li
535.601 43.9589 mo
538.201 41.3589 li
541.301 343.759 mo
543.201 341.959 li
535.601 120.359 mo
543.201 112.859 li
535.601 133.059 mo
543.201 125.559 li
535.601 145.859 mo
543.201 138.259 li
535.601 158.559 mo
543.201 150.959 li
535.601 171.259 mo
543.201 163.759 li
535.601 183.959 mo
543.201 176.459 li
535.601 196.759 mo
543.201 189.159 li
535.601 209.459 mo
543.201 201.859 li
535.601 222.159 mo
543.201 214.659 li
535.601 234.959 mo
543.201 227.359 li
535.601 247.659 mo
543.201 240.059 li
535.601 260.359 mo
543.201 252.859 li
535.601 273.059 mo
543.201 265.559 li
542.701 278.759 mo
543.201 278.259 li
535.601 285.859 mo
537.501 283.959 li
535.601 298.559 mo
543.201 290.959 li
535.601 311.259 mo
543.201 303.759 li
535.601 324.059 mo
543.201 316.459 li
537.001 335.359 mo
543.201 329.159 li
538.201 54.0589 mo
542.601 49.7589 li
535.601 56.7589 mo
536.601 55.7589 li
535.601 69.4589 mo
543.201 61.8589 li
535.601 82.1589 mo
543.201 74.6589 li
535.901 94.5589 mo
543.201 87.3589 li
571.301 148.259 mo
571.301 148.259 li
571.301 161.059 mo
571.301 161.059 li
571.301 173.759 mo
571.301 173.759 li
571.301 186.459 mo
571.301 186.459 li
571.301 199.259 mo
571.301 199.159 li
571.301 211.959 mo
571.301 211.959 li
571.301 224.659 mo
571.301 224.659 li
571.301 122.859 mo
571.301 122.859 li
571.301 250.159 mo
571.301 250.159 li
571.301 262.859 mo
571.301 262.859 li
571.301 275.559 mo
571.301 275.559 li
571.301 135.559 mo
571.301 135.559 li
571.301 97.3589 mo
571.301 97.3589 li
571.301 59.1589 mo
571.301 59.1589 li
571.301 313.759 mo
571.301 313.759 li
571.301 326.459 mo
571.301 326.459 li
570.601 174.459 mo
570.701 174.359 li
570.601 250.859 mo
570.701 250.759 li
570.601 187.259 mo
570.701 187.159 li
570.601 263.559 mo
570.701 263.459 li
570.601 123.559 mo
570.701 123.459 li
570.601 199.959 mo
570.701 199.859 li
570.601 276.359 mo
570.701 276.259 li
570.601 136.359 mo
570.701 136.259 li
570.601 212.659 mo
570.701 212.559 li
570.601 98.1589 mo
570.701 98.0589 li
570.601 110.859 mo
570.701 110.759 li
570.601 59.9589 mo
570.701 59.8589 li
570.601 327.259 mo
570.701 327.159 li
570.601 289.059 mo
570.701 288.959 li
.75021 .679683 .670222 .90164 cmyk
@
571.601 54.4589 mo
571.601 54.4589 li
571.401 97.5589 mo
571.401 97.5589 li
571.501 107.959 mo
571.501 107.959 li
571.501 166.559 mo
571.501 166.559 li
571.401 174.359 mo
571.401 174.359 li
571.601 196.359 mo
571.601 196.359 li
571.501 211.059 mo
571.501 211.059 li
571.501 120.259 mo
571.501 120.259 li
571.401 199.159 mo
571.401 199.159 li
571.401 216.159 mo
571.401 216.159 li
571.401 251.959 mo
571.401 251.959 li
571.501 262.359 mo
571.501 262.359 li
571.401 284.159 mo
571.401 284.159 li
571.601 289.659 mo
571.601 289.659 li
571.401 328.459 mo
571.401 328.459 li
571.501 312.059 mo
571.501 312.059 li
570.801 144.659 mo
570.801 144.659 li
570.901 150.159 mo
570.901 150.159 li
571.101 155.559 mo
571.101 155.559 li
571.301 161.059 mo
571.301 161.059 li
570.701 262.359 mo
570.701 262.359 li
570.901 267.759 mo
570.901 267.759 li
571.101 273.259 mo
571.101 273.259 li
571.201 278.659 mo
571.201 278.659 li
570.901 130.359 mo
570.901 130.359 li
570.801 145.059 mo
570.801 145.059 li
571.201 152.359 mo
571.201 152.359 li
571.101 167.059 mo
571.101 167.059 li
571.301 189.059 mo
571.301 189.059 li
570.701 262.559 mo
570.701 262.559 li
570.701 142.359 mo
570.701 142.359 li
570.801 159.359 mo
570.801 159.359 li
571.001 170.759 mo
571.001 170.759 li
571.101 187.759 mo
571.101 187.759 li
570.801 255.259 mo
570.801 255.259 li
570.901 199.959 mo
570.901 199.959 li
570.701 220.459 mo
570.701 220.459 li
571.301 220.959 mo
571.301 220.959 li
571.001 231.059 mo
571.001 231.059 li
571.101 241.459 mo
571.101 241.459 li
570.701 108.359 mo
570.701 108.359 li
570.801 63.4589 mo
570.801 63.4589 li
570.901 284.559 mo
570.901 284.559 li
571.201 306.459 mo
571.201 306.459 li
571.201 283.659 mo
571.201 283.659 li
@
.709 lw
571.598 116.461 mo
571.598 116.461 li
571.598 115.561 mo
571.598 115.561 li
571.598 279.961 mo
571.598 279.961 li
571.598 282.761 mo
571.598 282.761 li
571.598 280.961 mo
571.598 280.961 li
571.598 283.761 mo
571.598 283.761 li
566.798 269.361 mo
566.798 269.361 li
566.798 269.261 li
566.698 269.261 li
566.698 269.161 li
566.598 269.161 li
566.498 269.061 li
566.498 269.061 mo
563.998 269.061 li
557.298 269.361 mo
557.298 269.561 li
557.298 269.761 li
557.198 269.961 li
557.098 270.061 li
556.898 270.161 li
556.798 270.261 li
556.598 270.361 li
556.398 270.361 li
556.398 270.361 mo
543.198 270.361 li
566.798 180.061 mo
566.798 179.961 li
556.398 259.861 mo
556.598 259.961 li
556.798 259.961 li
556.898 260.061 li
557.098 260.161 li
557.198 260.361 li
557.298 260.461 li
557.298 260.661 li
557.298 260.861 li
543.198 259.861 mo
556.398 259.861 li
570.698 332.061 mo
570.598 332.061 li
570.598 53.0606 mo
570.698 53.0606 li
570.598 117.361 mo
570.698 117.361 li
570.698 279.961 mo
570.598 279.961 li
570.598 117.361 mo
570.598 279.961 li
570.698 117.361 mo
570.698 279.961 li
570.698 116.561 mo
570.598 116.561 li
570.598 53.0606 mo
570.598 116.561 li
570.698 53.0606 mo
570.698 116.561 li
570.598 282.761 mo
570.698 282.761 li
570.598 282.761 mo
570.598 332.061 li
570.698 282.761 mo
570.698 332.061 li
570.598 117.361 mo
570.598 117.361 li
570.598 117.261 li
570.598 117.161 li
570.598 116.961 li
570.598 116.861 li
570.598 116.661 li
570.598 116.561 li
570.698 117.361 mo
570.698 117.361 li
570.698 117.261 li
570.698 117.161 li
570.698 116.961 li
570.698 116.861 li
570.698 116.661 li
570.698 116.561 li
570.698 117.361 mo
571.298 117.361 li
570.698 117.361 mo
570.698 117.361 li
570.698 117.261 li
570.698 117.161 li
570.698 116.961 li
570.698 116.861 li
570.698 116.661 li
570.698 116.561 li
571.298 116.561 mo
570.698 116.561 li
571.298 117.361 mo
571.298 117.361 li
571.298 117.261 li
571.298 117.161 li
571.298 116.961 li
571.298 116.861 li
571.298 116.661 li
571.298 116.561 li
570.698 280.161 mo
570.698 117.361 li
571.298 280.161 mo
570.698 280.161 li
571.298 280.161 mo
571.298 117.361 li
570.698 282.561 mo
571.298 282.561 li
570.698 282.561 mo
570.698 282.461 li
570.698 282.261 li
570.698 281.861 li
570.698 281.361 li
570.698 280.961 li
570.698 280.561 li
570.698 280.261 li
570.698 280.161 li
571.298 282.561 mo
571.298 282.461 li
571.298 282.261 li
571.298 281.861 li
571.298 281.361 li
571.298 280.961 li
571.298 280.561 li
571.298 280.261 li
571.298 280.161 li
571.298 330.961 mo
570.698 330.961 li
570.698 330.961 mo
570.698 282.561 li
571.298 330.961 mo
571.298 282.561 li
570.698 54.1606 mo
571.298 54.1606 li
570.698 116.561 mo
570.698 54.1606 li
571.298 116.561 mo
571.298 54.1606 li
571.298 54.9606 mo
571.298 54.9606 li
571.298 330.161 mo
571.298 330.161 li
571.298 301.461 mo
571.298 301.461 li
571.298 284.261 mo
571.298 284.261 li
571.298 278.561 mo
571.298 278.561 li
571.298 287.661 mo
571.298 287.661 li
571.298 287.661 mo
571.298 284.261 li
571.298 287.661 mo
571.298 284.261 li
571.298 239.161 mo
571.298 239.161 li
571.298 145.961 mo
571.298 145.961 li
571.298 278.561 mo
571.298 239.161 li
571.298 278.561 mo
571.298 239.161 li
571.298 74.6606 mo
571.298 74.6606 li
571.298 109.261 mo
571.298 109.261 li
571.298 109.261 mo
571.298 74.6606 li
571.298 109.261 mo
571.298 74.6606 li
571.298 330.161 mo
571.298 301.461 li
571.298 330.161 mo
571.298 301.461 li
571.298 127.161 mo
571.298 127.161 li
571.298 145.961 mo
571.298 127.161 li
571.298 145.961 mo
571.298 127.161 li
571.298 62.3606 mo
571.298 62.3606 li
571.298 62.3606 mo
571.298 54.9606 li
571.298 62.3606 mo
571.298 54.9606 li
571.298 118.861 mo
571.298 118.861 li
571.298 115.061 mo
571.298 115.061 li
571.298 125.261 mo
571.298 125.261 li
571.298 125.261 mo
571.298 118.861 li
571.298 125.261 mo
571.298 118.861 li
571.298 299.561 mo
571.298 299.561 li
571.298 237.261 mo
571.298 237.261 li
571.298 237.261 mo
571.298 147.861 li
571.298 147.861 mo
571.298 147.861 li
571.298 237.261 mo
571.298 147.861 li
571.298 289.561 mo
571.298 289.561 li
571.298 299.561 mo
571.298 289.561 li
571.298 299.561 mo
571.298 289.561 li
571.298 72.7606 mo
571.298 72.7606 li
571.298 72.7606 mo
571.298 64.2606 li
571.298 64.2606 mo
571.298 64.2606 li
571.298 72.7606 mo
571.298 64.2606 li
571.298 111.161 mo
571.298 111.161 li
571.298 115.061 mo
571.298 111.161 li
571.298 115.061 mo
571.298 111.161 li
571.298 332.061 mo
571.398 332.061 li
571.498 332.061 li
571.498 331.961 li
571.598 331.961 li
571.598 331.861 li
571.598 331.761 li
571.598 53.3606 mo
571.598 53.2606 li
571.598 53.1606 li
571.498 53.1606 li
571.498 53.0606 li
571.398 53.0606 li
571.298 53.0606 li
570.698 53.0606 mo
571.298 53.0606 li
571.298 332.061 mo
570.698 332.061 li
571.598 302.161 mo
571.598 301.261 li
571.598 302.161 mo
571.598 302.161 li
571.598 304.061 mo
571.598 302.161 li
571.598 304.061 mo
571.598 304.061 li
571.598 304.961 mo
571.598 304.061 li
571.598 304.961 mo
571.598 304.961 li
571.598 306.861 mo
571.598 304.961 li
571.598 306.861 mo
571.598 306.861 li
571.598 307.861 mo
571.598 306.861 li
571.598 307.861 mo
571.598 307.861 li
571.598 309.761 mo
571.598 307.861 li
571.598 309.761 mo
571.598 309.761 li
571.598 310.661 mo
571.598 309.761 li
571.598 310.661 mo
571.598 310.661 li
571.598 312.561 mo
571.598 310.661 li
571.598 312.561 mo
571.598 312.561 li
571.598 313.561 mo
571.598 312.561 li
571.598 313.561 mo
571.598 313.561 li
571.598 315.361 mo
571.598 313.561 li
571.598 315.361 mo
571.598 315.361 li
571.598 316.361 mo
571.598 315.361 li
571.598 316.361 mo
571.598 316.361 li
571.598 318.261 mo
571.598 316.361 li
571.598 318.261 mo
571.598 318.261 li
571.598 319.161 mo
571.598 318.261 li
571.598 319.161 mo
571.598 319.161 li
571.598 321.061 mo
571.598 319.161 li
571.598 321.061 mo
571.598 321.061 li
571.598 322.061 mo
571.598 321.061 li
571.598 322.061 mo
571.598 322.061 li
571.598 323.861 mo
571.598 322.061 li
571.598 323.861 mo
571.598 323.861 li
571.598 324.861 mo
571.598 323.861 li
571.598 324.861 mo
571.598 324.861 li
571.598 326.761 mo
571.598 324.861 li
571.598 326.761 mo
571.598 326.761 li
571.598 327.361 mo
571.598 326.761 li
571.598 327.361 mo
571.598 327.361 li
570.698 330.961 mo
570.698 332.061 li
571.298 330.961 mo
570.698 330.961 li
571.298 330.961 mo
571.298 282.561 li
571.298 282.561 mo
571.598 282.561 li
571.598 285.161 mo
571.598 282.561 li
571.598 285.161 mo
571.598 285.161 li
571.598 287.061 mo
571.598 285.161 li
571.598 287.061 mo
571.598 287.061 li
571.598 287.961 mo
571.598 287.061 li
571.598 287.961 mo
571.598 287.961 li
571.598 289.861 mo
571.598 287.961 li
571.598 289.861 mo
571.598 289.861 li
571.598 290.861 mo
571.598 289.861 li
571.598 290.861 mo
571.598 290.861 li
571.598 292.761 mo
571.598 290.861 li
571.598 292.761 mo
571.598 292.761 li
571.598 293.661 mo
571.598 292.761 li
571.598 293.661 mo
571.598 293.661 li
571.598 295.561 mo
571.598 293.661 li
571.598 295.561 mo
571.598 295.561 li
571.598 296.461 mo
571.598 295.561 li
571.598 296.461 mo
571.598 296.461 li
571.598 298.361 mo
571.598 296.461 li
571.598 298.361 mo
571.598 298.361 li
571.598 299.361 mo
571.598 298.361 li
571.598 299.361 mo
571.598 299.361 li
571.598 301.261 mo
571.598 299.361 li
571.598 301.261 mo
571.598 301.261 li
571.598 331.761 mo
571.598 327.361 li
571.598 92.3606 mo
571.598 91.4606 li
571.598 92.3606 mo
571.598 92.3606 li
571.598 94.2606 mo
571.598 92.3606 li
571.598 94.2606 mo
571.598 94.2606 li
571.598 95.2606 mo
571.598 94.2606 li
571.598 95.2606 mo
571.598 95.2606 li
571.598 97.1606 mo
571.598 95.2606 li
571.598 97.1606 mo
571.598 97.1606 li
571.598 98.0606 mo
571.598 97.1606 li
571.598 98.0606 mo
571.598 98.0606 li
571.598 99.9606 mo
571.598 98.0606 li
571.598 99.9606 mo
571.598 99.9606 li
571.598 100.961 mo
571.598 99.9606 li
571.598 100.961 mo
571.598 100.961 li
571.598 102.761 mo
571.598 100.961 li
571.598 102.761 mo
571.598 102.761 li
571.598 103.761 mo
571.598 102.761 li
571.598 103.761 mo
571.598 103.761 li
571.598 105.661 mo
571.598 103.761 li
571.598 105.661 mo
571.598 105.661 li
571.598 106.561 mo
571.598 105.661 li
571.598 106.561 mo
571.598 106.561 li
571.598 108.461 mo
571.598 106.561 li
571.598 108.461 mo
571.598 108.461 li
571.598 109.461 mo
571.598 108.461 li
571.598 109.461 mo
571.598 109.461 li
571.598 111.261 mo
571.598 109.461 li
571.598 111.261 mo
571.598 111.261 li
571.598 112.261 mo
571.598 111.261 li
571.598 112.261 mo
571.598 112.261 li
571.598 114.161 mo
571.598 112.261 li
571.598 114.161 mo
571.598 114.161 li
571.598 116.561 mo
571.598 114.161 li
571.598 116.561 mo
571.298 116.561 li
571.298 116.561 mo
571.298 54.1606 li
570.698 54.1606 mo
571.298 54.1606 li
570.698 53.0606 mo
570.698 54.1606 li
571.598 57.7606 mo
571.598 57.7606 li
571.598 58.3606 mo
571.598 57.7606 li
571.598 58.3606 mo
571.598 58.3606 li
571.598 60.2606 mo
571.598 58.3606 li
571.598 60.2606 mo
571.598 60.2606 li
571.598 61.2606 mo
571.598 60.2606 li
571.598 61.2606 mo
571.598 61.2606 li
571.598 63.1606 mo
571.598 61.2606 li
571.598 63.1606 mo
571.598 63.1606 li
571.598 64.0606 mo
571.598 63.1606 li
571.598 64.0606 mo
571.598 64.0606 li
571.598 65.9606 mo
571.598 64.0606 li
571.598 65.9606 mo
571.598 65.9606 li
571.598 66.8606 mo
571.598 65.9606 li
571.598 66.8606 mo
571.598 66.8606 li
571.598 68.7606 mo
571.598 66.8606 li
571.598 68.7606 mo
571.598 68.7606 li
571.598 69.7606 mo
571.598 68.7606 li
571.598 69.7606 mo
571.598 69.7606 li
571.598 71.6606 mo
571.598 69.7606 li
571.598 71.6606 mo
571.598 71.6606 li
571.598 72.5606 mo
571.598 71.6606 li
571.598 72.5606 mo
571.598 72.5606 li
571.598 74.4606 mo
571.598 72.5606 li
571.598 74.4606 mo
571.598 74.4606 li
571.598 75.3606 mo
571.598 74.4606 li
571.598 75.3606 mo
571.598 75.3606 li
571.598 77.2606 mo
571.598 75.3606 li
571.598 77.2606 mo
571.598 77.2606 li
571.598 78.2606 mo
571.598 77.2606 li
571.598 78.2606 mo
571.598 78.2606 li
571.598 80.1606 mo
571.598 78.2606 li
571.598 80.1606 mo
571.598 80.1606 li
571.598 81.0606 mo
571.598 80.1606 li
571.598 81.0606 mo
571.598 81.0606 li
571.598 82.9606 mo
571.598 81.0606 li
571.598 82.9606 mo
571.598 82.9606 li
571.598 83.8606 mo
571.598 82.9606 li
571.598 83.8606 mo
571.598 83.8606 li
571.598 85.7606 mo
571.598 83.8606 li
571.598 85.7606 mo
571.598 85.7606 li
571.598 86.7606 mo
571.598 85.7606 li
571.598 86.7606 mo
571.598 86.7606 li
571.598 88.6606 mo
571.598 86.7606 li
571.598 88.6606 mo
571.598 88.6606 li
571.598 89.5606 mo
571.598 88.6606 li
571.598 89.5606 mo
571.598 89.5606 li
571.598 91.4606 mo
571.598 89.5606 li
571.598 91.4606 mo
571.598 91.4606 li
571.598 57.7606 mo
571.598 53.3606 li
571.598 327.361 mo
571.598 327.161 li
571.598 326.761 li
571.598 202.961 mo
571.598 202.961 li
571.598 204.861 mo
571.598 202.961 li
571.598 204.861 mo
571.598 204.861 li
571.598 205.761 mo
571.598 205.761 li
571.598 207.661 mo
571.598 205.761 li
571.598 207.661 mo
571.598 207.661 li
571.598 208.661 mo
571.598 208.661 li
571.598 210.561 mo
571.598 208.661 li
571.598 210.561 mo
571.598 210.561 li
571.598 211.461 mo
571.598 211.461 li
571.598 213.361 mo
571.598 211.461 li
571.598 213.361 mo
571.598 213.361 li
571.598 214.261 mo
571.598 214.261 li
571.598 216.161 mo
571.598 214.261 li
571.598 216.161 mo
571.598 216.161 li
571.598 217.161 mo
571.598 217.161 li
571.598 219.061 mo
571.598 217.161 li
571.598 219.061 mo
571.598 219.061 li
571.598 219.961 mo
571.598 219.961 li
571.598 221.861 mo
571.598 219.961 li
571.598 221.861 mo
571.598 221.861 li
571.598 222.761 mo
571.598 222.761 li
571.598 224.661 mo
571.598 222.761 li
571.598 224.661 mo
571.598 224.661 li
571.598 225.661 mo
571.598 225.661 li
571.598 227.561 mo
571.598 225.661 li
571.598 227.561 mo
571.598 227.561 li
571.598 228.461 mo
571.598 228.461 li
571.598 230.361 mo
571.598 228.461 li
571.598 230.361 mo
571.598 230.361 li
571.598 231.261 mo
571.598 231.261 li
571.598 233.161 mo
571.598 231.261 li
571.598 233.161 mo
571.598 233.161 li
571.598 234.161 mo
571.598 234.161 li
571.598 236.061 mo
571.598 234.161 li
571.598 236.061 mo
571.598 236.061 li
571.598 236.961 mo
571.598 236.961 li
571.598 238.861 mo
571.598 236.961 li
571.598 238.861 mo
571.598 238.861 li
571.598 239.761 mo
571.598 239.761 li
571.598 241.661 mo
571.598 239.761 li
571.598 241.661 mo
571.598 241.661 li
571.598 242.661 mo
571.598 242.661 li
571.598 244.561 mo
571.598 242.661 li
571.598 244.561 mo
571.598 244.561 li
571.598 245.461 mo
571.598 245.461 li
571.598 247.361 mo
571.598 245.461 li
571.598 247.361 mo
571.598 247.361 li
571.598 248.361 mo
571.598 248.361 li
571.598 250.161 mo
571.598 248.361 li
571.598 250.161 mo
571.598 250.161 li
571.598 251.161 mo
571.598 251.161 li
571.598 253.061 mo
571.598 251.161 li
571.598 253.061 mo
571.598 253.061 li
571.598 253.961 mo
571.598 253.961 li
571.598 255.861 mo
571.598 253.961 li
571.598 255.861 mo
571.598 255.861 li
571.598 256.861 mo
571.598 256.861 li
571.598 258.661 mo
571.598 256.861 li
571.598 258.661 mo
571.598 258.661 li
571.598 259.661 mo
571.598 259.661 li
571.598 261.561 mo
571.598 259.661 li
571.598 261.561 mo
571.598 261.561 li
571.598 262.461 mo
571.598 262.461 li
571.598 264.361 mo
571.598 262.461 li
571.598 264.361 mo
571.598 264.361 li
571.598 265.361 mo
571.598 265.361 li
571.598 267.261 mo
571.598 265.361 li
571.598 267.261 mo
571.598 267.261 li
571.598 268.161 mo
571.598 268.161 li
571.598 270.061 mo
571.598 268.161 li
571.598 270.061 mo
571.598 270.061 li
571.598 270.961 mo
571.598 270.961 li
571.598 272.861 mo
571.598 270.961 li
571.598 272.861 mo
571.598 272.861 li
571.598 273.861 mo
571.598 273.861 li
571.598 275.761 mo
571.598 273.861 li
571.598 275.761 mo
571.598 275.761 li
571.598 276.661 mo
571.598 276.661 li
571.598 278.561 mo
571.598 276.661 li
571.598 278.561 mo
571.598 278.561 li
571.598 280.161 mo
571.298 280.161 li
571.298 117.361 mo
571.598 117.361 li
571.598 117.961 mo
571.598 117.961 li
571.598 119.761 mo
571.598 117.961 li
571.598 119.761 mo
571.598 119.761 li
571.598 120.761 mo
571.598 120.761 li
571.598 122.661 mo
571.598 120.761 li
571.598 122.661 mo
571.598 122.661 li
571.598 123.561 mo
571.598 123.561 li
571.598 125.461 mo
571.598 123.561 li
571.598 125.461 mo
571.598 125.461 li
571.598 126.461 mo
571.598 126.461 li
571.598 128.361 mo
571.598 126.461 li
571.598 128.361 mo
571.598 128.361 li
571.598 129.261 mo
571.598 129.261 li
571.598 131.161 mo
571.598 129.261 li
571.598 131.161 mo
571.598 131.161 li
571.598 132.061 mo
571.598 132.061 li
571.598 133.961 mo
571.598 132.061 li
571.598 133.961 mo
571.598 133.961 li
571.598 134.961 mo
571.598 134.961 li
571.598 136.861 mo
571.598 134.961 li
571.598 136.861 mo
571.598 136.861 li
571.598 137.761 mo
571.598 137.761 li
571.598 139.661 mo
571.598 137.761 li
571.598 139.661 mo
571.598 139.661 li
571.598 140.561 mo
571.598 140.561 li
571.598 142.461 mo
571.598 140.561 li
571.598 142.461 mo
571.598 142.461 li
571.598 143.461 mo
571.598 143.461 li
571.598 145.361 mo
571.598 143.461 li
571.598 145.361 mo
571.598 145.361 li
571.598 146.261 mo
571.598 146.261 li
571.598 148.161 mo
571.598 146.261 li
571.598 148.161 mo
571.598 148.161 li
571.598 149.061 mo
571.598 149.061 li
571.598 150.961 mo
571.598 149.061 li
571.598 150.961 mo
571.598 150.961 li
571.598 151.961 mo
571.598 151.961 li
571.598 153.861 mo
571.598 151.961 li
571.598 153.861 mo
571.598 153.861 li
571.598 154.761 mo
571.598 154.761 li
571.598 156.661 mo
571.598 154.761 li
571.598 156.661 mo
571.598 156.661 li
571.598 157.561 mo
571.598 157.561 li
571.598 159.461 mo
571.598 157.561 li
571.598 159.461 mo
571.598 159.461 li
571.598 160.461 mo
571.598 160.461 li
571.598 162.361 mo
571.598 160.461 li
571.598 162.361 mo
571.598 162.361 li
571.598 163.261 mo
571.598 163.261 li
571.598 165.161 mo
571.598 163.261 li
571.598 165.161 mo
571.598 165.161 li
571.598 166.061 mo
571.598 166.061 li
571.598 167.961 mo
571.598 166.061 li
571.598 167.961 mo
571.598 167.961 li
571.598 168.961 mo
571.598 168.961 li
571.598 170.861 mo
571.598 168.961 li
571.598 170.861 mo
571.598 170.861 li
571.598 171.761 mo
571.598 171.761 li
571.598 173.661 mo
571.598 171.761 li
571.598 173.661 mo
571.598 173.661 li
571.598 174.661 mo
571.598 174.661 li
571.598 176.461 mo
571.598 174.661 li
571.598 176.461 mo
571.598 176.461 li
571.598 177.461 mo
571.598 177.461 li
571.598 179.361 mo
571.598 177.461 li
571.598 179.361 mo
571.598 179.361 li
571.598 180.261 mo
571.598 180.261 li
571.598 182.161 mo
571.598 180.261 li
571.598 182.161 mo
571.598 182.161 li
571.598 183.161 mo
571.598 183.161 li
571.598 184.961 mo
571.598 183.161 li
571.598 184.961 mo
571.598 184.961 li
571.598 185.961 mo
571.598 185.961 li
571.598 187.861 mo
571.598 185.961 li
571.598 187.861 mo
571.598 187.861 li
571.598 188.761 mo
571.598 188.761 li
571.598 190.661 mo
571.598 188.761 li
571.598 190.661 mo
571.598 190.661 li
571.598 191.661 mo
571.598 191.661 li
571.598 193.561 mo
571.598 191.661 li
571.598 193.561 mo
571.598 193.561 li
571.598 194.461 mo
571.598 194.461 li
571.598 196.361 mo
571.598 194.461 li
571.598 196.361 mo
571.598 196.361 li
571.598 197.261 mo
571.598 197.261 li
571.598 199.161 mo
571.598 197.261 li
571.598 199.161 mo
571.598 199.161 li
571.598 200.161 mo
571.598 200.161 li
571.598 202.061 mo
571.598 200.161 li
571.598 202.061 mo
571.598 202.061 li
571.598 280.161 mo
571.598 278.561 li
571.598 276.661 mo
571.598 275.761 li
571.598 273.861 mo
571.598 272.861 li
571.598 270.961 mo
571.598 270.061 li
571.598 268.161 mo
571.598 267.261 li
571.598 265.361 mo
571.598 264.361 li
571.598 262.461 mo
571.598 261.561 li
571.598 259.661 mo
571.598 258.661 li
571.598 256.861 mo
571.598 255.861 li
571.598 253.961 mo
571.598 253.061 li
571.598 251.161 mo
571.598 250.161 li
571.598 248.361 mo
571.598 247.361 li
571.598 245.461 mo
571.598 244.561 li
571.598 242.661 mo
571.598 241.661 li
571.598 239.761 mo
571.598 238.861 li
571.598 236.961 mo
571.598 236.061 li
571.598 234.161 mo
571.598 233.161 li
571.598 231.261 mo
571.598 230.361 li
571.598 228.461 mo
571.598 227.561 li
571.598 225.661 mo
571.598 224.661 li
571.598 222.761 mo
571.598 221.861 li
571.598 219.961 mo
571.598 219.061 li
571.598 217.161 mo
571.598 216.161 li
571.598 214.261 mo
571.598 213.361 li
571.598 211.461 mo
571.598 210.561 li
571.598 208.661 mo
571.598 207.661 li
571.598 205.761 mo
571.598 204.861 li
571.598 202.961 mo
571.598 202.061 li
571.598 200.161 mo
571.598 199.161 li
571.598 197.261 mo
571.598 196.361 li
571.598 194.461 mo
571.598 193.561 li
571.598 191.661 mo
571.598 190.661 li
571.598 188.761 mo
571.598 187.861 li
571.598 185.961 mo
571.598 184.961 li
571.598 183.161 mo
571.598 182.161 li
571.598 180.261 mo
571.598 179.361 li
571.598 177.461 mo
571.598 176.461 li
571.598 174.661 mo
571.598 173.661 li
571.598 171.761 mo
571.598 170.861 li
571.598 168.961 mo
571.598 167.961 li
571.598 166.061 mo
571.598 165.161 li
571.598 163.261 mo
571.598 162.361 li
571.598 160.461 mo
571.598 159.461 li
571.598 157.561 mo
571.598 156.661 li
571.598 154.761 mo
571.598 153.861 li
571.598 151.961 mo
571.598 150.961 li
571.598 149.061 mo
571.598 148.161 li
571.598 146.261 mo
571.598 145.361 li
571.598 143.461 mo
571.598 142.461 li
571.598 140.561 mo
571.598 139.661 li
571.598 137.761 mo
571.598 136.861 li
571.598 134.961 mo
571.598 133.961 li
571.598 132.061 mo
571.598 131.161 li
571.598 129.261 mo
571.598 128.361 li
571.598 126.461 mo
571.598 125.461 li
571.598 123.561 mo
571.598 122.661 li
571.598 120.761 mo
571.598 119.761 li
571.598 117.961 mo
571.598 117.361 li
571.298 280.161 mo
571.298 117.361 li
571.598 282.561 mo
571.598 282.461 li
571.598 282.261 li
571.598 281.861 li
571.598 281.361 li
571.598 280.961 li
571.598 280.561 li
571.598 280.261 li
571.598 280.161 li
571.298 282.561 mo
571.298 282.461 li
571.298 282.261 li
571.298 281.861 li
571.298 281.361 li
571.298 280.961 li
571.298 280.561 li
571.298 280.261 li
571.298 280.161 li
571.598 116.561 mo
571.598 116.661 li
571.598 116.861 li
571.598 116.961 li
571.598 117.161 li
571.598 117.261 li
571.598 117.361 li
571.298 116.561 mo
571.298 116.661 li
571.298 116.861 li
571.298 116.961 li
571.298 117.161 li
571.298 117.261 li
571.298 117.361 li
571.598 190.661 mo
571.598 190.761 li
571.598 191.161 li
571.598 191.461 li
571.598 191.661 li
571.598 193.561 mo
571.598 193.661 li
571.598 193.961 li
571.598 194.361 li
571.598 194.461 li
571.598 187.861 mo
571.598 187.961 li
571.598 188.361 li
571.598 188.661 li
571.598 188.761 li
571.598 184.961 mo
571.598 185.161 li
571.598 185.461 li
571.598 185.861 li
571.598 185.961 li
571.598 196.361 mo
571.598 196.461 li
571.598 196.861 li
571.598 197.161 li
571.598 197.261 li
571.598 182.161 mo
571.598 182.261 li
571.598 182.661 li
571.598 182.961 li
571.598 183.161 li
571.598 179.361 mo
571.598 179.461 li
571.598 179.761 li
571.598 180.161 li
571.598 180.261 li
571.598 199.161 mo
571.598 199.261 li
571.598 199.661 li
571.598 200.061 li
571.598 200.161 li
571.598 176.461 mo
571.598 176.661 li
571.598 176.961 li
571.598 177.361 li
571.598 177.461 li
571.598 173.661 mo
571.598 173.761 li
571.598 174.161 li
571.598 174.461 li
571.598 174.661 li
571.598 202.061 mo
571.598 202.161 li
571.598 202.461 li
571.598 202.861 li
571.598 202.961 li
571.598 170.861 mo
571.598 170.961 li
571.598 171.261 li
571.598 171.661 li
571.598 171.761 li
571.598 167.961 mo
571.598 168.061 li
571.598 168.461 li
571.598 168.861 li
571.598 168.961 li
571.598 204.861 mo
571.598 204.961 li
571.598 205.361 li
571.598 205.661 li
571.598 205.761 li
571.598 165.161 mo
571.598 165.261 li
571.598 165.661 li
571.598 165.961 li
571.598 166.061 li
571.598 162.361 mo
571.598 162.461 li
571.598 162.761 li
571.598 163.161 li
571.598 163.261 li
571.598 207.661 mo
571.598 207.761 li
571.598 208.161 li
571.598 208.561 li
571.598 208.661 li
571.598 159.461 mo
571.598 159.561 li
571.598 159.961 li
571.598 160.361 li
571.598 160.461 li
571.598 156.661 mo
571.598 156.761 li
571.598 157.161 li
571.598 157.461 li
571.598 157.561 li
571.598 153.861 mo
571.598 153.961 li
571.598 154.261 li
571.598 154.661 li
571.598 154.761 li
571.598 210.561 mo
571.598 210.661 li
571.598 210.961 li
571.598 211.361 li
571.598 211.461 li
571.598 150.961 mo
571.598 151.061 li
571.598 151.461 li
571.598 151.861 li
571.598 151.961 li
571.598 148.161 mo
571.598 148.261 li
571.598 148.661 li
571.598 148.961 li
571.598 149.061 li
571.598 213.361 mo
571.598 213.461 li
571.598 213.861 li
571.598 214.161 li
571.598 214.261 li
571.598 145.361 mo
571.598 145.461 li
571.598 145.761 li
571.598 146.161 li
571.598 146.261 li
571.598 142.461 mo
571.598 142.561 li
571.598 142.961 li
571.598 143.361 li
571.598 143.461 li
571.598 216.161 mo
571.598 216.261 li
571.598 216.661 li
571.598 217.061 li
571.598 217.161 li
571.598 139.661 mo
571.598 139.761 li
571.598 140.161 li
571.598 140.461 li
571.598 140.561 li
571.598 219.061 mo
571.598 219.161 li
571.598 219.461 li
571.598 219.861 li
571.598 219.961 li
571.598 136.861 mo
571.598 136.961 li
571.598 137.261 li
571.598 137.661 li
571.598 137.761 li
571.598 133.961 mo
571.598 134.061 li
571.598 134.461 li
571.598 134.861 li
571.598 134.961 li
571.598 221.861 mo
571.598 221.961 li
571.598 222.361 li
571.598 222.661 li
571.598 222.761 li
571.598 131.161 mo
571.598 131.261 li
571.598 131.661 li
571.598 131.961 li
571.598 132.061 li
571.598 128.361 mo
571.598 128.461 li
571.598 128.761 li
571.598 129.161 li
571.598 129.261 li
571.598 224.661 mo
571.598 224.761 li
571.598 225.161 li
571.598 225.561 li
571.598 225.661 li
571.598 125.461 mo
571.598 125.561 li
571.598 125.961 li
571.598 126.361 li
571.598 126.461 li
571.598 122.661 mo
571.598 122.761 li
571.598 123.161 li
571.598 123.461 li
571.598 123.561 li
571.598 119.761 mo
571.598 119.961 li
571.598 120.261 li
571.598 120.661 li
571.598 120.761 li
571.598 227.561 mo
571.598 227.661 li
571.598 227.961 li
571.598 228.361 li
571.598 228.461 li
571.598 116.461 mo
571.598 116.561 li
571.598 116.761 li
571.598 117.061 li
571.598 117.461 li
571.598 117.761 li
571.598 117.961 li
571.598 114.161 mo
571.598 114.261 li
571.598 114.661 li
571.598 114.961 li
571.598 115.261 li
571.598 115.461 li
571.598 115.561 li
571.598 230.361 mo
571.598 230.461 li
571.598 230.861 li
571.598 231.161 li
571.598 231.261 li
571.598 111.261 mo
571.598 111.461 li
571.598 111.761 li
571.598 112.161 li
571.598 112.261 li
571.598 108.461 mo
571.598 108.561 li
571.598 108.961 li
571.598 109.261 li
571.598 109.461 li
571.598 233.161 mo
571.598 233.261 li
571.598 233.661 li
571.598 234.061 li
571.598 234.161 li
571.598 105.661 mo
571.598 105.761 li
571.598 106.061 li
571.598 106.461 li
571.598 106.561 li
571.598 102.761 mo
571.598 102.961 li
571.598 103.261 li
571.598 103.661 li
571.598 103.761 li
571.598 236.061 mo
571.598 236.161 li
571.598 236.461 li
571.598 236.861 li
571.598 236.961 li
571.598 99.9606 mo
571.598 100.061 li
571.598 100.461 li
571.598 100.761 li
571.598 100.961 li
571.598 97.1606 mo
571.598 97.2606 li
571.598 97.5606 li
571.598 97.9606 li
571.598 98.0606 li
571.598 238.861 mo
571.598 238.961 li
571.598 239.361 li
571.598 239.661 li
571.598 239.761 li
571.598 94.2606 mo
571.598 94.3606 li
571.598 94.7606 li
571.598 95.1606 li
571.598 95.2606 li
571.598 91.4606 mo
571.598 91.5606 li
571.598 91.9606 li
571.598 92.2606 li
571.598 92.3606 li
571.598 241.661 mo
571.598 241.861 li
571.598 242.161 li
571.598 242.561 li
571.598 242.661 li
571.598 88.6606 mo
571.598 88.7606 li
571.598 89.0606 li
571.598 89.4606 li
571.598 89.5606 li
571.598 85.7606 mo
571.598 85.8606 li
571.598 86.2606 li
571.598 86.6606 li
571.598 86.7606 li
571.598 244.561 mo
571.598 244.661 li
571.598 244.961 li
571.598 245.361 li
571.598 245.461 li
571.598 82.9606 mo
571.598 83.0606 li
571.598 83.4606 li
571.598 83.7606 li
571.598 83.8606 li
571.598 80.1606 mo
571.598 80.2606 li
571.598 80.5606 li
571.598 80.9606 li
571.598 81.0606 li
571.598 247.361 mo
571.598 247.461 li
571.598 247.861 li
571.598 248.161 li
571.598 248.361 li
571.598 77.2606 mo
571.598 77.3606 li
571.598 77.7606 li
571.598 78.1606 li
571.598 78.2606 li
571.598 74.4606 mo
571.598 74.5606 li
571.598 74.9606 li
571.598 75.2606 li
571.598 75.3606 li
571.598 250.161 mo
571.598 250.361 li
571.598 250.661 li
571.598 251.061 li
571.598 251.161 li
571.598 71.6606 mo
571.598 71.7606 li
571.598 72.0606 li
571.598 72.4606 li
571.598 72.5606 li
571.598 68.7606 mo
571.598 68.8606 li
571.598 69.2606 li
571.598 69.6606 li
571.598 69.7606 li
571.598 253.061 mo
571.598 253.161 li
571.598 253.561 li
571.598 253.861 li
571.598 253.961 li
571.598 65.9606 mo
571.598 66.0606 li
571.598 66.4606 li
571.598 66.7606 li
571.598 66.8606 li
571.598 255.861 mo
571.598 255.961 li
571.598 256.361 li
571.598 256.661 li
571.598 256.861 li
571.598 63.1606 mo
571.598 63.2606 li
571.598 63.5606 li
571.598 63.9606 li
571.598 64.0606 li
571.598 60.2606 mo
571.598 60.3606 li
571.598 60.7606 li
571.598 61.1606 li
571.598 61.2606 li
571.598 258.661 mo
571.598 258.861 li
571.598 259.161 li
571.598 259.561 li
571.598 259.661 li
571.598 261.561 mo
571.598 261.661 li
571.598 262.061 li
571.598 262.361 li
571.598 262.461 li
571.598 264.361 mo
571.598 264.461 li
571.598 264.861 li
571.598 265.261 li
571.598 265.361 li
571.598 267.261 mo
571.598 267.361 li
571.598 267.661 li
571.598 268.061 li
571.598 268.161 li
571.598 270.061 mo
571.598 270.161 li
571.598 270.561 li
571.598 270.861 li
571.598 270.961 li
571.598 272.861 mo
571.598 272.961 li
571.598 273.361 li
571.598 273.761 li
571.598 273.861 li
571.598 275.761 mo
571.598 275.861 li
571.598 276.161 li
571.598 276.561 li
571.598 276.661 li
571.598 278.561 mo
571.598 278.661 li
571.598 279.061 li
571.598 279.361 li
571.598 279.661 li
571.598 279.861 li
571.598 279.961 li
571.598 280.961 mo
571.598 280.961 li
571.598 281.161 li
571.598 281.461 li
571.598 281.861 li
571.598 282.261 li
571.598 282.561 li
571.598 282.761 li
571.598 283.761 mo
571.598 283.861 li
571.598 284.061 li
571.598 284.361 li
571.598 284.661 li
571.598 285.061 li
571.598 285.161 li
571.598 287.061 mo
571.598 287.161 li
571.598 287.561 li
571.598 287.861 li
571.598 287.961 li
571.598 289.861 mo
571.598 289.961 li
571.598 290.361 li
571.598 290.761 li
571.598 290.861 li
571.598 292.761 mo
571.598 292.861 li
571.598 293.161 li
571.598 293.561 li
571.598 293.661 li
571.598 295.561 mo
571.598 295.661 li
571.598 296.061 li
571.598 296.361 li
571.598 296.461 li
571.598 298.361 mo
571.598 298.461 li
571.598 298.861 li
571.598 299.261 li
571.598 299.361 li
571.598 301.261 mo
571.598 301.361 li
571.598 301.661 li
571.598 302.061 li
571.598 302.161 li
571.598 304.061 mo
571.598 304.161 li
571.598 304.561 li
571.598 304.861 li
571.598 304.961 li
571.598 306.861 mo
571.598 306.961 li
571.598 307.361 li
571.598 307.761 li
571.598 307.861 li
571.598 309.761 mo
571.598 309.861 li
571.598 310.161 li
571.598 310.561 li
571.598 310.661 li
571.598 312.561 mo
571.598 312.661 li
571.598 313.061 li
571.598 313.361 li
571.598 313.561 li
571.598 315.361 mo
571.598 315.561 li
571.598 315.861 li
571.598 316.261 li
571.598 316.361 li
571.598 318.261 mo
571.598 318.361 li
571.598 318.661 li
571.598 319.061 li
571.598 319.161 li
571.598 321.061 mo
571.598 321.161 li
571.598 321.561 li
571.598 321.861 li
571.598 322.061 li
571.598 323.861 mo
571.598 324.061 li
571.598 324.361 li
571.598 324.761 li
571.598 324.861 li
571.598 115.561 mo
571.598 115.661 li
571.598 116.061 li
571.598 116.361 li
571.598 116.461 li
571.598 279.961 mo
571.598 280.061 li
571.598 280.461 li
571.598 280.761 li
571.598 280.961 li
571.598 282.761 mo
571.598 282.961 li
571.598 283.261 li
571.598 283.661 li
571.598 283.761 li
543.198 343.761 mo
535.898 343.761 li
535.898 41.3606 mo
543.198 41.3606 li
535.898 41.3606 mo
535.798 41.3606 li
535.698 41.4606 li
535.698 41.5606 li
535.598 41.5606 li
535.598 41.6606 li
535.598 343.461 mo
535.598 343.561 li
535.698 343.661 li
535.798 343.761 li
535.898 343.761 li
543.198 278.761 mo
536.598 278.761 li
535.598 277.861 mo
536.598 278.761 li
537.498 111.261 mo
535.598 113.161 li
537.498 111.261 mo
543.198 111.261 li
535.598 113.161 mo
535.598 277.861 li
543.198 111.261 mo
543.198 278.761 li
538.198 52.4606 mo
538.198 52.3606 li
538.198 52.1606 li
537.998 51.9606 li
537.898 51.8606 li
537.698 51.7606 li
537.498 51.7606 li
537.398 51.7606 li
537.198 51.8606 li
537.198 51.8606 mo
535.998 52.3606 li
535.598 52.0606 mo
535.598 52.1606 li
535.698 52.2606 li
535.698 52.3606 li
535.798 52.3606 li
535.898 52.3606 li
535.998 52.3606 li
535.598 55.7606 mo
535.598 54.7606 li
535.598 53.5606 li
535.598 52.7606 li
535.598 52.2606 li
535.598 52.0606 li
537.198 55.9606 mo
537.398 56.0606 li
537.498 56.0606 li
537.698 56.0606 li
537.898 55.9606 li
537.998 55.8606 li
538.198 55.6606 li
538.198 55.4606 li
538.198 55.2606 li
535.998 55.4606 mo
537.198 55.9606 li
535.998 55.4606 mo
535.898 55.4606 li
535.798 55.4606 li
535.698 55.4606 li
535.698 55.5606 li
535.598 55.5606 li
535.598 55.6606 li
535.598 55.7606 li
537.198 333.361 mo
537.398 333.361 li
537.498 333.361 li
537.698 333.361 li
537.898 333.261 li
537.998 333.161 li
538.198 332.961 li
538.198 332.861 li
538.198 332.661 li
538.198 329.861 mo
538.198 329.661 li
538.198 329.461 li
537.998 329.361 li
537.898 329.161 li
537.698 329.061 li
537.498 329.061 li
537.398 329.061 li
537.198 329.161 li
537.198 329.161 mo
535.998 329.661 li
535.598 329.361 mo
535.598 329.461 li
535.598 329.561 li
535.698 329.561 li
535.698 329.661 li
535.798 329.661 li
535.898 329.661 li
535.998 329.661 li
536.598 283.961 mo
535.598 284.961 li
536.598 283.961 mo
543.198 283.961 li
543.198 335.361 mo
535.898 335.361 li
535.598 335.061 mo
535.898 335.361 li
535.998 332.761 mo
535.898 332.761 li
535.798 332.761 li
535.698 332.861 li
535.598 332.961 li
535.598 333.061 li
535.998 332.761 mo
537.198 333.361 li
535.598 284.961 mo
535.598 329.361 li
538.198 332.661 mo
538.198 329.861 li
535.598 333.061 mo
535.598 335.061 li
543.198 283.961 mo
543.198 335.361 li
536.598 278.761 mo
536.598 278.961 li
536.598 279.561 li
536.598 280.361 li
536.598 281.361 li
536.598 282.361 li
536.598 283.261 li
536.598 283.761 li
536.598 283.961 li
543.198 278.761 mo
543.198 278.961 li
543.198 279.561 li
543.198 280.361 li
543.198 281.361 li
543.198 282.361 li
543.198 283.261 li
543.198 283.761 li
543.198 283.961 li
535.598 284.961 mo
535.598 284.761 li
535.598 284.261 li
535.598 283.461 li
535.598 282.461 li
535.598 281.361 li
535.598 280.261 li
535.598 279.261 li
535.598 278.561 li
535.598 278.061 li
535.598 277.861 li
535.898 49.7606 mo
535.598 50.0606 li
535.898 49.7606 mo
543.198 49.7606 li
543.198 96.1606 mo
537.498 96.1606 li
535.598 94.2606 mo
537.498 96.1606 li
535.598 55.7606 mo
535.598 94.2606 li
538.198 55.2606 mo
538.198 52.4606 li
535.598 50.0606 mo
535.598 52.0606 li
543.198 49.7606 mo
543.198 96.1606 li
537.498 96.1606 mo
537.498 96.3606 li
537.498 96.9606 li
537.498 97.8606 li
537.498 99.0606 li
537.498 100.461 li
537.498 102.061 li
537.498 103.761 li
537.498 105.461 li
537.498 107.061 li
537.498 108.461 li
537.498 109.661 li
537.498 110.561 li
537.498 111.161 li
537.498 111.261 li
543.198 96.1606 mo
543.198 96.3606 li
543.198 96.9606 li
543.198 97.8606 li
543.198 99.0606 li
543.198 100.461 li
543.198 102.061 li
543.198 103.761 li
543.198 105.461 li
543.198 107.061 li
543.198 108.461 li
543.198 109.661 li
543.198 110.561 li
543.198 111.161 li
543.198 111.261 li
535.598 113.161 mo
535.598 113.061 li
535.598 112.461 li
535.598 111.561 li
535.598 110.461 li
535.598 108.961 li
535.598 107.361 li
535.598 105.561 li
535.598 103.761 li
535.598 101.861 li
535.598 100.161 li
535.598 98.4606 li
535.598 97.0606 li
535.598 95.8606 li
535.598 95.0606 li
535.598 94.4606 li
535.598 94.2606 li
543.198 44.5606 mo
535.898 44.5606 li
535.898 44.5606 mo
535.898 44.7606 li
535.898 45.3606 li
535.898 46.1606 li
535.898 47.1606 li
535.898 48.1606 li
535.898 48.9606 li
535.898 49.5606 li
535.898 49.7606 li
543.198 44.5606 mo
543.198 44.7606 li
543.198 45.3606 li
543.198 46.1606 li
543.198 47.1606 li
543.198 48.1606 li
543.198 48.9606 li
543.198 49.5606 li
543.198 49.7606 li
535.898 340.561 mo
543.198 340.561 li
535.898 335.361 mo
535.898 335.561 li
535.898 336.161 li
535.898 336.961 li
535.898 337.961 li
535.898 338.961 li
535.898 339.861 li
535.898 340.361 li
535.898 340.561 li
543.198 335.361 mo
543.198 335.561 li
543.198 336.161 li
543.198 336.961 li
543.198 337.961 li
543.198 338.961 li
543.198 339.861 li
543.198 340.361 li
543.198 340.561 li
535.898 340.561 mo
535.598 340.861 li
535.598 340.861 mo
535.598 343.461 li
543.198 340.561 mo
543.198 343.761 li
535.598 44.2606 mo
535.898 44.5606 li
535.598 50.0606 mo
535.598 49.8606 li
535.598 49.3606 li
535.598 48.5606 li
535.598 47.6606 li
535.598 46.6606 li
535.598 45.6606 li
535.598 44.9606 li
535.598 44.4606 li
535.598 44.2606 li
535.598 340.861 mo
535.598 340.661 li
535.598 340.161 li
535.598 339.461 li
535.598 338.461 li
535.598 337.461 li
535.598 336.561 li
535.598 335.761 li
535.598 335.261 li
535.598 335.061 li
535.598 41.6606 mo
535.598 44.2606 li
543.198 41.3606 mo
543.198 44.5606 li
535.598 333.061 mo
535.598 332.861 li
535.598 332.361 li
535.598 331.461 li
535.598 330.261 li
535.598 329.361 li
570.298 332.061 mo
570.298 332.061 li
570.398 332.061 li
570.498 331.961 li
570.498 331.861 li
570.598 331.861 li
570.598 331.761 li
570.598 53.3606 mo
570.598 53.2606 li
570.498 53.2606 li
570.498 53.1606 li
570.398 53.0606 li
570.298 53.0606 li
566.798 282.561 mo
570.598 282.561 li
566.798 282.561 mo
566.798 282.461 li
566.798 282.261 li
566.798 281.861 li
566.798 281.361 li
566.798 280.961 li
566.798 280.561 li
566.798 280.261 li
566.798 280.161 li
570.598 280.161 mo
566.798 280.161 li
570.598 282.561 mo
570.598 282.461 li
570.598 282.261 li
570.598 281.861 li
570.598 281.361 li
570.598 280.961 li
570.598 280.561 li
570.598 280.261 li
570.598 280.161 li
566.798 53.0606 mo
570.298 53.0606 li
570.598 116.461 mo
566.798 116.461 li
566.798 116.461 mo
566.798 53.0606 li
570.598 116.461 mo
570.598 53.3606 li
570.298 332.061 mo
566.798 332.061 li
566.798 332.061 mo
566.798 282.561 li
570.598 331.761 mo
570.598 282.561 li
566.798 117.461 mo
570.598 117.461 li
566.798 117.461 mo
566.798 117.461 li
566.798 117.261 li
566.798 117.161 li
566.798 116.961 li
566.798 116.761 li
566.798 116.661 li
566.798 116.561 li
566.798 116.461 li
566.798 280.161 mo
566.798 117.461 li
570.598 280.161 mo
570.598 117.461 li
556.398 184.961 mo
543.198 184.961 li
557.298 184.061 mo
557.298 184.261 li
557.298 184.461 li
557.198 184.561 li
557.098 184.761 li
556.898 184.861 li
556.798 184.961 li
556.598 184.961 li
556.398 184.961 li
557.298 174.661 mo
557.298 184.061 li
557.298 174.661 mo
557.298 174.461 li
557.298 174.261 li
557.198 174.061 li
557.098 173.961 li
556.898 173.861 li
556.798 173.761 li
556.598 173.661 li
556.398 173.661 li
556.398 173.661 mo
543.198 173.661 li
543.198 173.661 mo
543.198 159.461 li
556.398 159.461 mo
543.198 159.461 li
557.298 158.561 mo
557.298 158.761 li
557.298 158.961 li
557.198 159.061 li
557.098 159.261 li
556.898 159.361 li
556.798 159.461 li
556.598 159.461 li
556.398 159.461 li
557.298 149.061 mo
557.298 158.561 li
557.298 149.061 mo
557.298 148.961 li
557.298 148.761 li
557.198 148.561 li
557.098 148.461 li
556.898 148.361 li
556.798 148.261 li
556.598 148.161 li
556.398 148.161 li
556.398 148.161 mo
543.198 148.161 li
543.198 148.161 mo
543.198 125.461 li
556.398 125.461 mo
543.198 125.461 li
556.398 125.461 mo
556.598 125.461 li
556.798 125.361 li
556.898 125.361 li
557.098 125.161 li
557.198 125.061 li
557.298 124.861 li
557.298 124.761 li
557.298 124.561 li
557.298 115.061 mo
557.298 124.561 li
557.298 115.061 mo
557.298 114.861 li
557.298 114.761 li
557.198 114.561 li
557.098 114.461 li
556.898 114.261 li
556.798 114.261 li
556.598 114.161 li
556.398 114.161 li
556.398 114.161 mo
543.198 114.161 li
543.198 114.161 mo
543.198 111.261 li
543.198 111.261 mo
559.198 111.261 li
559.198 96.1606 mo
559.198 111.261 li
559.198 96.1606 mo
543.198 96.1606 li
543.198 96.1606 mo
543.198 93.3606 li
556.398 93.3606 mo
543.198 93.3606 li
556.398 93.3606 mo
556.598 93.3606 li
556.798 93.2606 li
556.898 93.1606 li
557.098 93.0606 li
557.198 92.9606 li
557.298 92.7606 li
557.298 92.5606 li
557.298 92.3606 li
557.298 82.9606 mo
557.298 92.3606 li
557.298 82.9606 mo
557.298 82.7606 li
557.298 82.5606 li
557.198 82.4606 li
557.098 82.2606 li
556.898 82.1606 li
556.798 82.0606 li
556.598 82.0606 li
556.398 82.0606 li
556.398 82.0606 mo
543.198 82.0606 li
543.198 82.0606 mo
543.198 79.1606 li
556.398 79.1606 mo
543.198 79.1606 li
556.398 79.1606 mo
556.598 79.1606 li
556.798 79.0606 li
556.898 79.0606 li
557.098 78.8606 li
557.198 78.7606 li
557.298 78.5606 li
557.298 78.4606 li
557.298 78.2606 li
557.298 68.7606 mo
557.298 78.2606 li
557.298 68.7606 mo
557.298 68.5606 li
557.298 68.4606 li
557.198 68.2606 li
557.098 68.1606 li
556.898 67.9606 li
556.798 67.9606 li
556.598 67.8606 li
556.398 67.8606 li
556.398 67.8606 mo
543.198 67.8606 li
543.198 67.8606 mo
543.198 64.9606 li
556.398 64.9606 mo
543.198 64.9606 li
556.398 64.9606 mo
556.598 64.9606 li
556.798 64.9606 li
556.898 64.8606 li
557.098 64.7606 li
557.198 64.5606 li
557.298 64.4606 li
557.298 64.2606 li
557.298 64.0606 li
557.298 54.6606 mo
557.298 64.0606 li
557.298 54.6606 mo
557.298 54.4606 li
557.298 54.2606 li
557.198 54.0606 li
557.098 53.9606 li
556.898 53.8606 li
556.798 53.7606 li
556.598 53.6606 li
556.398 53.6606 li
556.398 53.6606 mo
543.198 53.6606 li
543.198 53.6606 mo
543.198 49.7606 li
543.198 49.7606 mo
554.898 49.7606 li
554.898 49.7606 mo
554.898 51.8606 li
554.898 51.8606 mo
559.298 51.8606 li
559.598 52.1606 mo
559.298 51.8606 li
559.598 52.7606 mo
559.598 52.1606 li
559.598 52.7606 mo
559.598 52.8606 li
559.698 52.9606 li
559.798 53.0606 li
559.898 53.0606 li
566.798 53.0606 mo
559.898 53.0606 li
566.798 63.2606 mo
566.798 53.0606 li
566.498 63.5606 mo
566.598 63.5606 li
566.698 63.5606 li
566.698 63.4606 li
566.798 63.4606 li
566.798 63.3606 li
566.798 63.2606 li
566.498 63.5606 mo
563.998 63.5606 li
563.998 66.4606 mo
563.998 63.5606 li
566.498 66.4606 mo
563.998 66.4606 li
566.798 66.6606 mo
566.798 66.6606 li
566.798 66.5606 li
566.698 66.5606 li
566.698 66.4606 li
566.598 66.4606 li
566.498 66.4606 li
566.798 115.261 mo
566.798 66.6606 li
566.498 115.561 mo
566.598 115.561 li
566.698 115.461 li
566.798 115.361 li
566.798 115.261 li
563.998 115.561 mo
566.498 115.561 li
563.998 118.361 mo
563.998 115.561 li
566.498 118.361 mo
563.998 118.361 li
566.798 118.661 mo
566.798 118.661 li
566.798 118.561 li
566.698 118.561 li
566.698 118.461 li
566.598 118.461 li
566.598 118.361 li
566.498 118.361 li
566.798 176.661 mo
566.798 118.661 li
566.498 176.961 mo
566.598 176.961 li
566.698 176.961 li
566.698 176.861 li
566.798 176.761 li
566.798 176.661 li
563.998 176.961 mo
566.498 176.961 li
563.998 179.761 mo
563.998 176.961 li
566.498 179.761 mo
563.998 179.761 li
566.798 180.061 mo
566.798 180.061 li
566.798 179.961 li
566.698 179.961 li
566.698 179.861 li
566.598 179.861 li
566.498 179.761 li
566.798 205.061 mo
566.798 180.061 li
566.498 205.361 mo
566.598 205.361 li
566.598 205.261 li
566.698 205.261 li
566.698 205.161 li
566.798 205.161 li
566.798 205.061 li
563.998 205.361 mo
566.498 205.361 li
563.998 208.161 mo
563.998 205.361 li
566.498 208.161 mo
563.998 208.161 li
566.798 208.461 mo
566.798 208.461 li
566.798 208.361 li
566.698 208.261 li
566.598 208.161 li
566.498 208.161 li
566.798 266.461 mo
566.798 208.461 li
566.498 266.761 mo
566.598 266.761 li
566.698 266.661 li
566.798 266.561 li
566.798 266.461 li
563.998 266.761 mo
566.498 266.761 li
563.998 269.561 mo
563.998 266.761 li
566.498 269.561 mo
563.998 269.561 li
566.798 269.861 mo
566.798 269.761 li
566.698 269.661 li
566.598 269.561 li
566.498 269.561 li
566.798 280.161 mo
566.798 269.861 li
566.798 280.161 mo
559.198 280.161 li
559.198 280.161 mo
559.198 278.761 li
559.198 278.761 mo
543.198 278.761 li
543.198 278.761 mo
543.198 270.961 li
556.398 270.961 mo
543.198 270.961 li
556.398 270.961 mo
556.598 270.961 li
556.798 270.961 li
556.898 270.861 li
557.098 270.761 li
557.198 270.561 li
557.298 270.361 li
557.298 270.261 li
557.298 270.061 li
557.298 260.561 mo
557.298 270.061 li
557.298 260.561 mo
557.298 260.461 li
557.298 260.261 li
557.198 260.061 li
557.098 259.961 li
556.898 259.861 li
556.798 259.761 li
556.598 259.661 li
556.398 259.661 li
556.398 259.661 mo
543.198 259.661 li
543.198 259.661 mo
543.198 236.961 li
556.398 236.961 mo
543.198 236.961 li
557.298 236.061 mo
557.298 236.261 li
557.298 236.361 li
557.198 236.561 li
557.098 236.661 li
556.898 236.861 li
556.798 236.861 li
556.598 236.961 li
556.398 236.961 li
557.298 226.561 mo
557.298 236.061 li
557.298 226.561 mo
557.298 226.361 li
557.298 226.261 li
557.198 226.061 li
557.098 225.961 li
556.898 225.761 li
556.798 225.661 li
556.598 225.661 li
556.398 225.661 li
556.398 225.661 mo
543.198 225.661 li
543.198 225.661 mo
543.198 211.461 li
556.398 211.461 mo
543.198 211.461 li
557.298 210.561 mo
557.298 210.661 li
557.298 210.861 li
557.198 211.061 li
557.098 211.161 li
556.898 211.261 li
556.798 211.361 li
556.598 211.461 li
556.398 211.461 li
557.298 201.061 mo
557.298 210.561 li
557.298 201.061 mo
557.298 200.861 li
557.298 200.661 li
557.198 200.561 li
557.098 200.361 li
556.898 200.261 li
556.798 200.161 li
556.598 200.161 li
556.398 200.161 li
556.398 200.161 mo
543.198 200.161 li
543.198 200.161 mo
543.198 184.961 li
543.198 291.761 mo
556.398 291.761 li
543.198 291.761 mo
543.198 283.961 li
543.198 283.961 mo
559.198 283.961 li
559.198 283.961 mo
559.198 282.561 li
559.198 282.561 mo
566.798 282.561 li
566.798 318.461 mo
566.798 282.561 li
566.498 318.661 mo
566.598 318.661 li
566.698 318.661 li
566.698 318.561 li
566.798 318.561 li
566.798 318.461 li
563.998 318.661 mo
566.498 318.661 li
563.998 321.561 mo
563.998 318.661 li
563.998 321.561 mo
566.498 321.561 li
566.798 321.861 mo
566.798 321.761 li
566.698 321.661 li
566.698 321.561 li
566.598 321.561 li
566.498 321.561 li
566.798 332.061 mo
566.798 321.861 li
559.898 332.061 mo
566.798 332.061 li
559.898 332.061 mo
559.798 332.061 li
559.698 332.161 li
559.598 332.261 li
559.598 332.361 li
559.598 332.961 mo
559.598 332.361 li
559.298 333.261 mo
559.598 332.961 li
559.298 333.261 mo
554.898 333.261 li
554.898 333.261 mo
554.898 335.361 li
554.898 335.361 mo
543.198 335.361 li
543.198 335.361 mo
543.198 331.461 li
543.198 331.461 mo
556.398 331.461 li
556.398 331.461 mo
556.598 331.461 li
556.798 331.361 li
556.898 331.261 li
557.098 331.161 li
557.198 331.061 li
557.298 330.861 li
557.298 330.661 li
557.298 330.561 li
557.298 321.061 mo
557.298 330.561 li
557.298 321.061 mo
557.298 320.861 li
557.298 320.661 li
557.198 320.561 li
557.098 320.361 li
556.898 320.261 li
556.798 320.161 li
556.598 320.161 li
556.398 320.161 li
543.198 320.161 mo
556.398 320.161 li
543.198 320.161 mo
543.198 317.261 li
543.198 317.261 mo
556.398 317.261 li
556.398 317.261 mo
556.598 317.261 li
556.798 317.261 li
556.898 317.161 li
557.098 317.061 li
557.198 316.861 li
557.298 316.661 li
557.298 316.561 li
557.298 316.361 li
557.298 306.861 mo
557.298 316.361 li
557.298 306.861 mo
557.298 306.761 li
557.298 306.561 li
557.198 306.361 li
557.098 306.261 li
556.898 306.161 li
556.798 306.061 li
556.598 305.961 li
556.398 305.961 li
543.198 305.961 mo
556.398 305.961 li
543.198 305.961 mo
543.198 303.161 li
543.198 303.161 mo
556.398 303.161 li
556.398 303.161 mo
556.598 303.061 li
556.798 303.061 li
556.898 302.961 li
557.098 302.861 li
557.198 302.661 li
557.298 302.561 li
557.298 302.361 li
557.298 302.161 li
557.298 292.761 mo
557.298 302.161 li
557.298 292.761 mo
557.298 292.561 li
557.298 292.361 li
557.198 292.161 li
557.098 292.061 li
556.898 291.961 li
556.798 291.861 li
556.598 291.761 li
556.398 291.761 li
559.198 280.161 mo
559.198 280.261 li
559.198 280.561 li
559.198 280.961 li
559.198 281.361 li
559.198 281.861 li
559.198 282.261 li
559.198 282.461 li
559.198 282.561 li
566.798 282.561 mo
566.798 282.461 li
566.798 282.261 li
566.798 281.861 li
566.798 281.361 li
566.798 280.961 li
566.798 280.561 li
566.798 280.261 li
566.798 280.161 li
543.198 41.3606 mo
559.098 41.3606 li
559.098 343.761 mo
543.198 343.761 li
543.198 96.1606 mo
543.198 96.3606 li
543.198 96.9606 li
543.198 97.8606 li
543.198 99.0606 li
543.198 100.461 li
543.198 102.061 li
543.198 103.761 li
543.198 105.461 li
543.198 107.061 li
543.198 108.461 li
543.198 109.661 li
543.198 110.561 li
543.198 111.161 li
543.198 111.261 li
543.198 278.761 mo
543.198 278.961 li
543.198 279.561 li
543.198 280.361 li
543.198 281.361 li
543.198 282.361 li
543.198 283.261 li
543.198 283.761 li
543.198 283.961 li
559.098 343.761 mo
559.198 343.761 li
559.298 343.761 li
559.398 343.661 li
559.498 343.561 li
559.598 343.461 li
559.598 343.361 li
559.598 343.261 li
559.598 41.8606 mo
559.598 41.7606 li
559.598 41.6606 li
559.498 41.5606 li
559.398 41.4606 li
559.298 41.4606 li
559.198 41.3606 li
559.098 41.3606 li
559.298 42.4606 mo
559.598 42.1606 li
559.298 42.4606 mo
554.898 42.4606 li
554.898 42.4606 mo
554.898 44.5606 li
554.898 44.5606 mo
543.198 44.5606 li
543.198 44.5606 mo
543.198 41.3606 li
559.598 42.1606 mo
559.598 41.8606 li
543.198 340.561 mo
554.898 340.561 li
554.898 340.561 mo
554.898 342.661 li
554.898 342.661 mo
559.298 342.661 li
559.598 342.961 mo
559.298 342.661 li
543.198 343.761 mo
543.198 340.561 li
559.598 343.261 mo
559.598 342.961 li
559.298 51.8606 mo
559.298 51.6606 li
559.298 51.1606 li
559.298 50.2606 li
559.298 49.1606 li
559.298 47.8606 li
559.298 46.4606 li
559.298 45.1606 li
559.298 44.0606 li
559.298 43.1606 li
559.298 42.6606 li
559.298 42.4606 li
559.598 42.1606 mo
559.598 42.3606 li
559.598 42.8606 li
559.598 43.5606 li
559.598 44.6606 li
559.598 45.8606 li
559.598 47.1606 li
559.598 48.4606 li
559.598 49.6606 li
559.598 50.6606 li
559.598 51.4606 li
559.598 51.9606 li
559.598 52.1606 li
559.298 342.661 mo
559.298 342.561 li
559.298 341.961 li
559.298 341.061 li
559.298 339.961 li
559.298 338.661 li
559.298 337.361 li
559.298 336.061 li
559.298 334.861 li
559.298 333.961 li
559.298 333.461 li
559.298 333.261 li
559.598 332.961 mo
559.598 333.161 li
559.598 333.661 li
559.598 334.461 li
559.598 335.461 li
559.598 336.661 li
559.598 337.961 li
559.598 339.261 li
559.598 340.461 li
559.598 341.561 li
559.598 342.361 li
559.598 342.861 li
559.598 342.961 li
543.198 49.7606 mo
543.198 49.5606 li
543.198 48.9606 li
543.198 48.1606 li
543.198 47.1606 li
543.198 46.1606 li
543.198 45.3606 li
543.198 44.7606 li
543.198 44.5606 li
554.898 49.7606 mo
554.898 49.5606 li
554.898 48.9606 li
554.898 48.1606 li
554.898 47.1606 li
554.898 46.1606 li
554.898 45.3606 li
554.898 44.7606 li
554.898 44.5606 li
543.198 340.561 mo
543.198 340.361 li
543.198 339.861 li
543.198 338.961 li
543.198 337.961 li
543.198 336.961 li
543.198 336.161 li
543.198 335.561 li
543.198 335.361 li
554.898 340.561 mo
554.898 340.361 li
554.898 339.861 li
554.898 338.961 li
554.898 337.961 li
554.898 336.961 li
554.898 336.161 li
554.898 335.561 li
554.898 335.361 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/EWHGDB+FangSong_GB2312-GBK-EUC-H-Identity-H uf
/EWHGDB+FangSong_GB2312-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
